/*******************************************************************************************************************
Copyright (c) 2023 Cycling '74

The code that Max generates automatically and that end users are capable of
exporting and using, and any associated documentation files (the “Software”)
is a work of authorship for which Cycling '74 is the author and owner for
copyright purposes.

This Software is dual-licensed either under the terms of the Cycling '74
License for Max-Generated Code for Export, or alternatively under the terms
of the General Public License (GPL) Version 3. You may use the Software
according to either of these licenses as it is most appropriate for your
project on a case-by-case basis (proprietary or not).

A) Cycling '74 License for Max-Generated Code for Export

A license is hereby granted, free of charge, to any person obtaining a copy
of the Software (“Licensee”) to use, copy, modify, merge, publish, and
distribute copies of the Software, and to permit persons to whom the Software
is furnished to do so, subject to the following conditions:

The Software is licensed to Licensee for all uses that do not include the sale,
sublicensing, or commercial distribution of software that incorporates this
source code. This means that the Licensee is free to use this software for
educational, research, and prototyping purposes, to create musical or other
creative works with software that incorporates this source code, or any other
use that does not constitute selling software that makes use of this source
code. Commercial distribution also includes the packaging of free software with
other paid software, hardware, or software-provided commercial services.

For entities with UNDER $200k in annual revenue or funding, a license is hereby
granted, free of charge, for the sale, sublicensing, or commercial distribution
of software that incorporates this source code, for as long as the entity's
annual revenue remains below $200k annual revenue or funding.

For entities with OVER $200k in annual revenue or funding interested in the
sale, sublicensing, or commercial distribution of software that incorporates
this source code, please send inquiries to licensing@cycling74.com.

The above copyright notice and this license shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

Please see
https://support.cycling74.com/hc/en-us/articles/10730637742483-RNBO-Export-Licensing-FAQ
for additional information

B) General Public License Version 3 (GPLv3)
Details of the GPLv3 license can be found at: https://www.gnu.org/licenses/gpl-3.0.html
*******************************************************************************************************************/

#include "RNBO_Common.h"
#include "RNBO_AudioSignal.h"

namespace RNBO {


#define trunc(x) ((Int)(x))

#if defined(__GNUC__) || defined(__clang__)
    #define RNBO_RESTRICT __restrict__
#elif defined(_MSC_VER)
    #define RNBO_RESTRICT __restrict
#endif

#define FIXEDSIZEARRAYINIT(...) { }

class rnbomatic : public PatcherInterfaceImpl {
public:

class RNBOSubpatcher_810 : public PatcherInterfaceImpl {
    
    friend class rnbomatic;
    
    public:
    
    RNBOSubpatcher_810()
    {
    }
    
    ~RNBOSubpatcher_810()
    {
    }
    
    virtual rnbomatic* getPatcher() const {
        return static_cast<rnbomatic *>(_parentPatcher);
    }
    
    rnbomatic* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
    }
    
    number samplerate() const {
        return this->sr;
    }
    
    inline number safemod(number f, number m) {
        if (m != 0) {
            Int f_trunc = (Int)(trunc(f));
            Int m_trunc = (Int)(trunc(m));
    
            if (f == f_trunc && m == m_trunc) {
                f = f_trunc % m_trunc;
            } else {
                if (m < 0) {
                    m = -m;
                }
    
                if (f >= m) {
                    if (f >= m * 2.0) {
                        number d = f / m;
                        Int i = (Int)(trunc(d));
                        d = d - i;
                        f = d * m;
                    } else {
                        f -= m;
                    }
                } else if (f <= -m) {
                    if (f <= -m * 2.0) {
                        number d = f / m;
                        Int i = (Int)(trunc(d));
                        d = d - i;
                        f = d * m;
                    } else {
                        f += m;
                    }
                }
            }
        } else {
            f = 0.0;
        }
    
        return f;
    }
    
    inline number safesqrt(number num) {
        return (num > 0.0 ? rnbo_sqrt(num) : 0.0);
    }
    
    inline number linearinterp(number frac, number x, number y) {
        return x + (y - x) * frac;
    }
    
    inline number cubicinterp(number a, number w, number x, number y, number z) {
        number a1 = 1. + a;
        number aa = a * a1;
        number b = 1. - a;
        number b1 = 2. - a;
        number bb = b * b1;
        number fw = -.1666667 * bb * a;
        number fx = .5 * bb * a1;
        number fy = .5 * aa * b1;
        number fz = -.1666667 * aa * b;
        return w * fw + x * fx + y * fy + z * fz;
    }
    
    inline number fastcubicinterp(number a, number w, number x, number y, number z) {
        number a2 = a * a;
        number f0 = z - y - w + x;
        number f1 = w - x - f0;
        number f2 = y - w;
        number f3 = x;
        return f0 * a * a2 + f1 * a2 + f2 * a + f3;
    }
    
    inline number splineinterp(number a, number w, number x, number y, number z) {
        number a2 = a * a;
        number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
        number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
        number f2 = -0.5 * w + 0.5 * y;
        return f0 * a * a2 + f1 * a2 + f2 * a + x;
    }
    
    inline number spline6interp(number a, number y0, number y1, number y2, number y3, number y4, number y5) {
        number ym2py2 = y0 + y4;
        number ym1py1 = y1 + y3;
        number y2mym2 = y4 - y0;
        number y1mym1 = y3 - y1;
        number sixthym1py1 = (number)1 / (number)6.0 * ym1py1;
        number c0 = (number)1 / (number)120.0 * ym2py2 + (number)13 / (number)60.0 * ym1py1 + (number)11 / (number)20.0 * y2;
        number c1 = (number)1 / (number)24.0 * y2mym2 + (number)5 / (number)12.0 * y1mym1;
        number c2 = (number)1 / (number)12.0 * ym2py2 + sixthym1py1 - (number)1 / (number)2.0 * y2;
        number c3 = (number)1 / (number)12.0 * y2mym2 - (number)1 / (number)6.0 * y1mym1;
        number c4 = (number)1 / (number)24.0 * ym2py2 - sixthym1py1 + (number)1 / (number)4.0 * y2;
        number c5 = (number)1 / (number)120.0 * (y5 - y0) + (number)1 / (number)24.0 * (y1 - y4) + (number)1 / (number)12.0 * (y3 - y2);
        return ((((c5 * a + c4) * a + c3) * a + c2) * a + c1) * a + c0;
    }
    
    inline number cosT8(number r) {
        number t84 = 56.0;
        number t83 = 1680.0;
        number t82 = 20160.0;
        number t81 = 2.4801587302e-05;
        number t73 = 42.0;
        number t72 = 840.0;
        number t71 = 1.9841269841e-04;
    
        if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
            number rr = r * r;
            return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
        } else if (r > 0.0) {
            r -= 1.57079632679489661923132169163975144;
            number rr = r * r;
            return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
        } else {
            r += 1.57079632679489661923132169163975144;
            number rr = r * r;
            return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
        }
    }
    
    inline number cosineinterp(number frac, number x, number y) {
        number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
        return x * (1.0 - a2) + y * a2;
    }
    
    number mstosamps(MillisecondTime ms) {
        return ms * this->sr * 0.001;
    }
    
    Index vectorsize() const {
        return this->vs;
    }
    
    number maximum(number x, number y) {
        return (x < y ? y : x);
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
        SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
        const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
        this->pan_tilde_01_perform(this->pan_tilde_01_pos, in1, this->signals[0], this->dummyBuffer, n);
        this->feedbackreader_01_perform(this->signals[1], n);
        this->signaladder_02_perform(in1, this->signals[1], this->signals[1], n);
        this->delaytilde_02_perform(this->delaytilde_02_delay, this->signals[1], this->signals[2], n);
    
        this->pan_tilde_03_perform(
            this->pan_tilde_03_pos,
            this->signals[2],
            this->dummyBuffer,
            this->signals[3],
            n
        );
    
        this->dspexpr_02_perform(this->signals[3], this->dspexpr_02_in2, this->signals[2], n);
        this->feedbackwriter_02_perform(this->signals[2], n);
        this->signaladder_03_perform(this->signals[3], this->signals[0], this->signals[3], n);
        this->limi_02_perform(this->signals[3], out2, n);
        this->feedbackreader_02_perform(this->signals[2], n);
        this->signaladder_04_perform(in1, this->signals[2], this->signals[2], n);
        this->delaytilde_01_perform(this->delaytilde_01_delay, this->signals[2], this->signals[4], n);
    
        this->pan_tilde_02_perform(
            this->pan_tilde_02_pos,
            this->signals[4],
            this->dummyBuffer,
            this->signals[5],
            n
        );
    
        this->dspexpr_01_perform(this->signals[5], this->dspexpr_01_in2, this->signals[4], n);
        this->feedbackwriter_01_perform(this->signals[4], n);
        this->signaladder_05_perform(this->signals[0], this->signals[5], this->signals[5], n);
        this->limi_01_perform(this->signals[5], out1, n);
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            Index i;
    
            for (i = 0; i < 6; i++) {
                this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
            }
    
            this->feedbacktilde_01_feedbackbuffer = resizeSignal(this->feedbacktilde_01_feedbackbuffer, this->maxvs, maxBlockSize);
            this->feedbacktilde_02_feedbackbuffer = resizeSignal(this->feedbacktilde_02_feedbackbuffer, this->maxvs, maxBlockSize);
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        this->delaytilde_02_dspsetup(forceDSPSetup);
        this->limi_02_dspsetup(forceDSPSetup);
        this->delaytilde_01_dspsetup(forceDSPSetup);
        this->limi_01_dspsetup(forceDSPSetup);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    void onSampleRateChanged(double samplerate) {
        this->translate_01_onSampleRateChanged(samplerate);
    }
    
    void processTempoEvent(MillisecondTime time, Tempo tempo) {
        this->updateTime(time);
        this->translate_01_onTempoChanged(tempo);
    }
    
    void processTransportEvent(MillisecondTime , TransportState ) {}
    
    void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
    
    void processTimeSignatureEvent(MillisecondTime , int , int ) {}
    
    void processBBUEvent(MillisecondTime , number , number , number ) {}
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {}
    
    void getPreset(PatcherStateInterface& ) {}
    
    void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        default:
            {
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 0;
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("valin"):
            {
            if (TAG("pingpongdelay/number_obj-11") == objectId)
                this->numberobj_01_valin_set(payload);
    
            break;
            }
        case TAG("format"):
            {
            if (TAG("pingpongdelay/number_obj-11") == objectId)
                this->numberobj_01_format_set(payload);
    
            break;
            }
        }
    }
    
    void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
    
    void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("valout"):
            {
            return "valout";
            }
        case TAG("pingpongdelay/number_obj-11"):
            {
            return "pingpongdelay/number_obj-11";
            }
        case TAG("setup"):
            {
            return "setup";
            }
        case TAG("valin"):
            {
            return "valin";
            }
        case TAG("format"):
            {
            return "format";
            }
        }
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        case 2:
            {
            return addressOf(this->delaytilde_01_del_bufferobj);
            break;
            }
        case 3:
            {
            return addressOf(this->delaytilde_02_del_bufferobj);
            break;
            }
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 2;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void zeroDataRef(DataRef& ref) {
        ref->setZero();
    }
    
    void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
        this->updateTime(time);
    
        if (index == 2) {
            this->delaytilde_01_del_buffer = new Float64Buffer(this->delaytilde_01_del_bufferobj);
        }
    
        if (index == 3) {
            this->delaytilde_02_del_buffer = new Float64Buffer(this->delaytilde_02_del_bufferobj);
        }
    }
    
    void initialize() {
        this->delaytilde_01_del_bufferobj = initDataRef("delaytilde_01_del_bufferobj", true, nullptr, "buffer~");
        this->delaytilde_02_del_bufferobj = initDataRef("delaytilde_02_del_bufferobj", true, nullptr, "buffer~");
        this->assign_defaults();
        this->setState();
        this->delaytilde_01_del_bufferobj->setIndex(2);
        this->delaytilde_01_del_buffer = new Float64Buffer(this->delaytilde_01_del_bufferobj);
        this->delaytilde_02_del_bufferobj->setIndex(3);
        this->delaytilde_02_del_buffer = new Float64Buffer(this->delaytilde_02_del_bufferobj);
    }
    
    protected:
    
    void eventinlet_01_out1_bang_bang() {}
    
    void eventinlet_01_out1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->pan_tilde_03_pos_set(converted);
        }
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->pan_tilde_02_pos_set(converted);
        }
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->pan_tilde_01_pos_set(converted);
        }
    }
    
    void eventinlet_02_out1_bang_bang() {
        this->translate_01_value_bang();
    }
    
    void eventinlet_02_out1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->translate_01_value_set(converted);
        }
    }
    
    void numberobj_01_valin_set(number v) {
        this->numberobj_01_value_set(v);
    }
    
    void numberobj_01_format_set(number v) {
        this->numberobj_01_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void eventinlet_03_out1_bang_bang() {}
    
    void eventinlet_03_out1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->dspexpr_02_in2_set(converted);
        }
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->dspexpr_01_in2_set(converted);
        }
    }
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 1;
    }
    
    Index getNumOutputChannels() const {
        return 2;
    }
    
    void initializeObjects() {
        this->delaytilde_01_del_init();
        this->delaytilde_02_del_init();
        this->numberobj_01_init();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {}
    
    void allocateDataRefs() {
        this->delaytilde_01_del_buffer = this->delaytilde_01_del_buffer->allocateIfNeeded();
    
        if (this->delaytilde_01_del_bufferobj->hasRequestedSize()) {
            if (this->delaytilde_01_del_bufferobj->wantsFill())
                this->zeroDataRef(this->delaytilde_01_del_bufferobj);
    
            this->getEngine()->sendDataRefUpdated(2);
        }
    
        this->delaytilde_02_del_buffer = this->delaytilde_02_del_buffer->allocateIfNeeded();
    
        if (this->delaytilde_02_del_bufferobj->hasRequestedSize()) {
            if (this->delaytilde_02_del_bufferobj->wantsFill())
                this->zeroDataRef(this->delaytilde_02_del_bufferobj);
    
            this->getEngine()->sendDataRefUpdated(3);
        }
    }
    
    void pan_tilde_03_pos_set(number v) {
        this->pan_tilde_03_pos = v;
    }
    
    void pan_tilde_02_pos_set(number v) {
        this->pan_tilde_02_pos = v;
    }
    
    void pan_tilde_01_pos_set(number v) {
        this->pan_tilde_01_pos = v;
    }
    
    void eventinlet_01_out1_number_set(number v) {
        this->pan_tilde_03_pos_set(v);
        this->pan_tilde_02_pos_set(v);
        this->pan_tilde_01_pos_set(v);
    }
    
    void dspexpr_02_in2_set(number v) {
        this->dspexpr_02_in2 = v;
    }
    
    void dspexpr_01_in2_set(number v) {
        this->dspexpr_01_in2 = v;
    }
    
    void eventinlet_03_out1_number_set(number v) {
        this->dspexpr_02_in2_set(v);
        this->dspexpr_01_in2_set(v);
    }
    
    void numberobj_01_output_set(number ) {}
    
    void numberobj_01_value_set(number v) {
        this->numberobj_01_value_setter(v);
        v = this->numberobj_01_value;
        number localvalue = v;
    
        if (this->numberobj_01_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("pingpongdelay/number_obj-11"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_01_output_set(localvalue);
    }
    
    void delaytilde_02_delay_set(number v) {
        this->delaytilde_02_delay = v;
    }
    
    void expr_01_out1_set(number v) {
        this->expr_01_out1 = v;
        this->delaytilde_02_delay_set(this->expr_01_out1);
    }
    
    void expr_01_in1_set(number in1) {
        this->expr_01_in1 = in1;
        this->expr_01_out1_set(this->expr_01_in1 * this->expr_01_in2);//#map:pingpongdelay/*_obj-9:1
    }
    
    void delaytilde_01_delay_set(number v) {
        this->delaytilde_01_delay = v;
    }
    
    void translate_01_out_set(number v) {
        this->numberobj_01_value_set(v);
        this->expr_01_in1_set(v);
        this->delaytilde_01_delay_set(v);
    }
    
    void translate_01_value_set(number v) {
        this->translate_01_value = v;
    
        {
            {
                {
                    {
                        {
                            this->translate_01_out_set(this->mstosamps(v));
                        }
                    }
                }
            }
        }
    }
    
    void eventinlet_02_out1_number_set(number v) {
        this->translate_01_value_set(v);
    }
    
    void translate_01_value_bang() {
        number v = this->translate_01_value;
    
        {
            {
                {
                    {
                        {
                            this->translate_01_out_set(this->mstosamps(v));
                        }
                    }
                }
            }
        }
    }
    
    void pan_tilde_01_perform(
        number pos,
        const SampleValue * in0,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out2[(Index)i] = this->pan_tilde_01_func_next(pos, 1) * in0[(Index)i];
            out1[(Index)i] = this->pan_tilde_01_func_next(pos, 0) * in0[(Index)i];
        }
    }
    
    void feedbackreader_01_perform(SampleValue * output, Index n) {
        auto& buffer = this->feedbacktilde_01_feedbackbuffer;
    
        for (Index i = 0; i < n; i++) {
            output[(Index)i] = buffer[(Index)i];
        }
    }
    
    void signaladder_02_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i];
        }
    }
    
    void delaytilde_02_perform(number delay, const SampleValue * input, SampleValue * output, Index n) {
        auto __delaytilde_02_crossfadeDelay = this->delaytilde_02_crossfadeDelay;
        auto __delaytilde_02_rampInSamples = this->delaytilde_02_rampInSamples;
        auto __delaytilde_02_ramp = this->delaytilde_02_ramp;
        auto __delaytilde_02_lastDelay = this->delaytilde_02_lastDelay;
    
        for (Index i = 0; i < n; i++) {
            if (__delaytilde_02_lastDelay == -1) {
                __delaytilde_02_lastDelay = delay;
            }
    
            if (__delaytilde_02_ramp > 0) {
                number factor = __delaytilde_02_ramp / __delaytilde_02_rampInSamples;
                output[(Index)i] = this->delaytilde_02_del_read(__delaytilde_02_crossfadeDelay, 0) * factor + this->delaytilde_02_del_read(__delaytilde_02_lastDelay, 0) * (1. - factor);
                __delaytilde_02_ramp--;
            } else {
                number effectiveDelay = delay;
    
                if (effectiveDelay != __delaytilde_02_lastDelay) {
                    __delaytilde_02_ramp = __delaytilde_02_rampInSamples;
                    __delaytilde_02_crossfadeDelay = __delaytilde_02_lastDelay;
                    __delaytilde_02_lastDelay = effectiveDelay;
                    output[(Index)i] = this->delaytilde_02_del_read(__delaytilde_02_crossfadeDelay, 0);
                    __delaytilde_02_ramp--;
                } else {
                    output[(Index)i] = this->delaytilde_02_del_read(effectiveDelay, 0);
                }
            }
    
            this->delaytilde_02_del_write(input[(Index)i]);
            this->delaytilde_02_del_step();
        }
    
        this->delaytilde_02_lastDelay = __delaytilde_02_lastDelay;
        this->delaytilde_02_ramp = __delaytilde_02_ramp;
        this->delaytilde_02_crossfadeDelay = __delaytilde_02_crossfadeDelay;
    }
    
    void pan_tilde_03_perform(
        number pos,
        const SampleValue * in0,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out2[(Index)i] = this->pan_tilde_03_func_next(pos, 1) * in0[(Index)i];
            out1[(Index)i] = this->pan_tilde_03_func_next(pos, 0) * in0[(Index)i];
        }
    }
    
    void dspexpr_02_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
        }
    }
    
    void feedbackwriter_02_perform(const SampleValue * input, Index n) {
        auto& buffer = this->feedbacktilde_02_feedbackbuffer;
    
        for (Index i = 0; i < n; i++) {
            buffer[(Index)i] = input[(Index)i];
        }
    }
    
    void signaladder_03_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i];
        }
    }
    
    void limi_02_perform(const SampleValue * input1, SampleValue * output1, Index n) {
        RNBO_UNUSED(output1);
        RNBO_UNUSED(input1);
        auto __limi_02_lookaheadInv = this->limi_02_lookaheadInv;
        auto __limi_02_threshold = this->limi_02_threshold;
        auto __limi_02_lookahead = this->limi_02_lookahead;
        auto __limi_02_recover = this->limi_02_recover;
        auto __limi_02_last = this->limi_02_last;
        auto __limi_02_postamp = this->limi_02_postamp;
        auto __limi_02_lookaheadIndex = this->limi_02_lookaheadIndex;
        auto __limi_02_preamp = this->limi_02_preamp;
        auto __limi_02_dcblock = this->limi_02_dcblock;
        auto __limi_02_bypass = this->limi_02_bypass;
        ConstSampleArray<1> input = {input1};
        SampleArray<1> output = {output1};
    
        if ((bool)(__limi_02_bypass)) {
            for (Index i = 0; i < n; i++) {
                for (Index j = 0; j < 1; j++) {
                    output[(Index)j][(Index)i] = input[(Index)j][(Index)i];
                }
            }
        } else {
            number v;
    
            for (Index i = 0; i < n; i++) {
                number hotSample = 0;
    
                for (Index j = 0; j < 1; j++) {
                    auto smps = input[(Index)j];
                    v = ((bool)(__limi_02_dcblock) ? this->limi_02_dc_next(j, smps[(Index)i], 0.9997) : smps[(Index)i]);
                    v *= __limi_02_preamp;
                    this->limi_02_lookaheadBuffers[(Index)j][__limi_02_lookaheadIndex] = v * __limi_02_postamp;
                    v = rnbo_fabs(v);
    
                    if (v > hotSample)
                        hotSample = v;
                }
    
                {
                    if (__limi_02_last > 0.01)
                        v = __limi_02_last + __limi_02_recover * __limi_02_last;
                    else
                        v = __limi_02_last + __limi_02_recover;
                }
    
                if (v > 1)
                    v = 1;
    
                this->limi_02_gainBuffer[__limi_02_lookaheadIndex] = v;
                int lookaheadPlayback = (int)(__limi_02_lookaheadIndex - (int)(__limi_02_lookahead));
    
                if (lookaheadPlayback < 0)
                    lookaheadPlayback += (int)(__limi_02_lookahead);
    
                if (hotSample * v > __limi_02_threshold) {
                    number newgain;
                    number curgain = __limi_02_threshold / hotSample;
                    number inc = __limi_02_threshold - curgain;
                    number acc = 0.0;
                    number flag = 0;
    
                    for (Index j = 0; flag == 0 && j < (Index)(__limi_02_lookahead); j++) {
                        int k = (int)(__limi_02_lookaheadIndex - (int)(j));
    
                        if (k < 0)
                            k += (int)(__limi_02_lookahead);
    
                        {
                            newgain = curgain + inc * (acc * acc);
                        }
    
                        if (newgain < this->limi_02_gainBuffer[(Index)k])
                            this->limi_02_gainBuffer[(Index)k] = newgain;
                        else
                            flag = 1;
    
                        acc = acc + __limi_02_lookaheadInv;
                    }
                }
    
                for (Index j = 0; j < 1; j++) {
                    output[(Index)j][(Index)i] = this->limi_02_lookaheadBuffers[(Index)j][(Index)lookaheadPlayback] * this->limi_02_gainBuffer[(Index)lookaheadPlayback];
                }
    
                __limi_02_last = this->limi_02_gainBuffer[__limi_02_lookaheadIndex];
                __limi_02_lookaheadIndex++;
    
                if (__limi_02_lookaheadIndex >= __limi_02_lookahead)
                    __limi_02_lookaheadIndex = 0;
            }
        }
    
        this->limi_02_lookaheadIndex = __limi_02_lookaheadIndex;
        this->limi_02_last = __limi_02_last;
    }
    
    void feedbackreader_02_perform(SampleValue * output, Index n) {
        auto& buffer = this->feedbacktilde_02_feedbackbuffer;
    
        for (Index i = 0; i < n; i++) {
            output[(Index)i] = buffer[(Index)i];
        }
    }
    
    void signaladder_04_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i];
        }
    }
    
    void delaytilde_01_perform(number delay, const SampleValue * input, SampleValue * output, Index n) {
        auto __delaytilde_01_crossfadeDelay = this->delaytilde_01_crossfadeDelay;
        auto __delaytilde_01_rampInSamples = this->delaytilde_01_rampInSamples;
        auto __delaytilde_01_ramp = this->delaytilde_01_ramp;
        auto __delaytilde_01_lastDelay = this->delaytilde_01_lastDelay;
    
        for (Index i = 0; i < n; i++) {
            if (__delaytilde_01_lastDelay == -1) {
                __delaytilde_01_lastDelay = delay;
            }
    
            if (__delaytilde_01_ramp > 0) {
                number factor = __delaytilde_01_ramp / __delaytilde_01_rampInSamples;
                output[(Index)i] = this->delaytilde_01_del_read(__delaytilde_01_crossfadeDelay, 0) * factor + this->delaytilde_01_del_read(__delaytilde_01_lastDelay, 0) * (1. - factor);
                __delaytilde_01_ramp--;
            } else {
                number effectiveDelay = delay;
    
                if (effectiveDelay != __delaytilde_01_lastDelay) {
                    __delaytilde_01_ramp = __delaytilde_01_rampInSamples;
                    __delaytilde_01_crossfadeDelay = __delaytilde_01_lastDelay;
                    __delaytilde_01_lastDelay = effectiveDelay;
                    output[(Index)i] = this->delaytilde_01_del_read(__delaytilde_01_crossfadeDelay, 0);
                    __delaytilde_01_ramp--;
                } else {
                    output[(Index)i] = this->delaytilde_01_del_read(effectiveDelay, 0);
                }
            }
    
            this->delaytilde_01_del_write(input[(Index)i]);
            this->delaytilde_01_del_step();
        }
    
        this->delaytilde_01_lastDelay = __delaytilde_01_lastDelay;
        this->delaytilde_01_ramp = __delaytilde_01_ramp;
        this->delaytilde_01_crossfadeDelay = __delaytilde_01_crossfadeDelay;
    }
    
    void pan_tilde_02_perform(
        number pos,
        const SampleValue * in0,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out2[(Index)i] = this->pan_tilde_02_func_next(pos, 1) * in0[(Index)i];
            out1[(Index)i] = this->pan_tilde_02_func_next(pos, 0) * in0[(Index)i];
        }
    }
    
    void dspexpr_01_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
        }
    }
    
    void feedbackwriter_01_perform(const SampleValue * input, Index n) {
        auto& buffer = this->feedbacktilde_01_feedbackbuffer;
    
        for (Index i = 0; i < n; i++) {
            buffer[(Index)i] = input[(Index)i];
        }
    }
    
    void signaladder_05_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i];
        }
    }
    
    void limi_01_perform(const SampleValue * input1, SampleValue * output1, Index n) {
        RNBO_UNUSED(output1);
        RNBO_UNUSED(input1);
        auto __limi_01_lookaheadInv = this->limi_01_lookaheadInv;
        auto __limi_01_threshold = this->limi_01_threshold;
        auto __limi_01_lookahead = this->limi_01_lookahead;
        auto __limi_01_recover = this->limi_01_recover;
        auto __limi_01_last = this->limi_01_last;
        auto __limi_01_postamp = this->limi_01_postamp;
        auto __limi_01_lookaheadIndex = this->limi_01_lookaheadIndex;
        auto __limi_01_preamp = this->limi_01_preamp;
        auto __limi_01_dcblock = this->limi_01_dcblock;
        auto __limi_01_bypass = this->limi_01_bypass;
        ConstSampleArray<1> input = {input1};
        SampleArray<1> output = {output1};
    
        if ((bool)(__limi_01_bypass)) {
            for (Index i = 0; i < n; i++) {
                for (Index j = 0; j < 1; j++) {
                    output[(Index)j][(Index)i] = input[(Index)j][(Index)i];
                }
            }
        } else {
            number v;
    
            for (Index i = 0; i < n; i++) {
                number hotSample = 0;
    
                for (Index j = 0; j < 1; j++) {
                    auto smps = input[(Index)j];
                    v = ((bool)(__limi_01_dcblock) ? this->limi_01_dc_next(j, smps[(Index)i], 0.9997) : smps[(Index)i]);
                    v *= __limi_01_preamp;
                    this->limi_01_lookaheadBuffers[(Index)j][__limi_01_lookaheadIndex] = v * __limi_01_postamp;
                    v = rnbo_fabs(v);
    
                    if (v > hotSample)
                        hotSample = v;
                }
    
                {
                    if (__limi_01_last > 0.01)
                        v = __limi_01_last + __limi_01_recover * __limi_01_last;
                    else
                        v = __limi_01_last + __limi_01_recover;
                }
    
                if (v > 1)
                    v = 1;
    
                this->limi_01_gainBuffer[__limi_01_lookaheadIndex] = v;
                int lookaheadPlayback = (int)(__limi_01_lookaheadIndex - (int)(__limi_01_lookahead));
    
                if (lookaheadPlayback < 0)
                    lookaheadPlayback += (int)(__limi_01_lookahead);
    
                if (hotSample * v > __limi_01_threshold) {
                    number newgain;
                    number curgain = __limi_01_threshold / hotSample;
                    number inc = __limi_01_threshold - curgain;
                    number acc = 0.0;
                    number flag = 0;
    
                    for (Index j = 0; flag == 0 && j < (Index)(__limi_01_lookahead); j++) {
                        int k = (int)(__limi_01_lookaheadIndex - (int)(j));
    
                        if (k < 0)
                            k += (int)(__limi_01_lookahead);
    
                        {
                            newgain = curgain + inc * (acc * acc);
                        }
    
                        if (newgain < this->limi_01_gainBuffer[(Index)k])
                            this->limi_01_gainBuffer[(Index)k] = newgain;
                        else
                            flag = 1;
    
                        acc = acc + __limi_01_lookaheadInv;
                    }
                }
    
                for (Index j = 0; j < 1; j++) {
                    output[(Index)j][(Index)i] = this->limi_01_lookaheadBuffers[(Index)j][(Index)lookaheadPlayback] * this->limi_01_gainBuffer[(Index)lookaheadPlayback];
                }
    
                __limi_01_last = this->limi_01_gainBuffer[__limi_01_lookaheadIndex];
                __limi_01_lookaheadIndex++;
    
                if (__limi_01_lookaheadIndex >= __limi_01_lookahead)
                    __limi_01_lookaheadIndex = 0;
            }
        }
    
        this->limi_01_lookaheadIndex = __limi_01_lookaheadIndex;
        this->limi_01_last = __limi_01_last;
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void limi_01_lookahead_setter(number v) {
        this->limi_01_lookahead = (v > 512 ? 512 : (v < 0 ? 0 : v));
        this->limi_01_lookaheadInv = (number)1 / this->limi_01_lookahead;
    }
    
    void limi_01_preamp_setter(number v) {
        this->limi_01_preamp = rnbo_pow(10., v * 0.05);
    }
    
    void limi_01_postamp_setter(number v) {
        this->limi_01_postamp = rnbo_pow(10., v * 0.05);
    }
    
    void limi_01_threshold_setter(number v) {
        this->limi_01_threshold = rnbo_pow(10., v * 0.05);
    }
    
    void limi_02_lookahead_setter(number v) {
        this->limi_02_lookahead = (v > 512 ? 512 : (v < 0 ? 0 : v));
        this->limi_02_lookaheadInv = (number)1 / this->limi_02_lookahead;
    }
    
    void limi_02_preamp_setter(number v) {
        this->limi_02_preamp = rnbo_pow(10., v * 0.05);
    }
    
    void limi_02_postamp_setter(number v) {
        this->limi_02_postamp = rnbo_pow(10., v * 0.05);
    }
    
    void limi_02_threshold_setter(number v) {
        this->limi_02_threshold = rnbo_pow(10., v * 0.05);
    }
    
    void numberobj_01_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_01_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_01_value = localvalue;
    }
    
    number limi_01_dc1_next(number x, number gain) {
        number y = x - this->limi_01_dc1_xm1 + this->limi_01_dc1_ym1 * gain;
        this->limi_01_dc1_xm1 = x;
        this->limi_01_dc1_ym1 = y;
        return y;
    }
    
    void limi_01_dc1_reset() {
        this->limi_01_dc1_xm1 = 0;
        this->limi_01_dc1_ym1 = 0;
    }
    
    void limi_01_dc1_dspsetup() {
        this->limi_01_dc1_reset();
    }
    
    number limi_01_dc_next(Index i, number x, number gain) {
        switch ((int)i) {
        default:
            {
            return this->limi_01_dc1_next(x, gain);
            }
        }
    
        return 0;
    }
    
    void limi_01_dc_reset(Index i) {
        switch ((int)i) {
        default:
            {
            return this->limi_01_dc1_reset();
            }
        }
    }
    
    void limi_01_dc_dspsetup(Index i) {
        switch ((int)i) {
        default:
            {
            return this->limi_01_dc1_dspsetup();
            }
        }
    }
    
    void limi_01_reset() {
        this->limi_01_recover = (number)1000 / (this->limi_01_release * this->samplerate());
    
        {
            this->limi_01_recover *= 0.707;
        }
    }
    
    void limi_01_dspsetup(bool force) {
        if ((bool)(this->limi_01_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->limi_01_reset();
        this->limi_01_setupDone = true;
        this->limi_01_dc1_dspsetup();
    }
    
    number pan_tilde_01_func_next(number pos, int channel) {
        {
            {
                number nchan_1 = 2 - 1;
    
                {
                    pos = pos * nchan_1;
                }
    
                {
                    {
                        {
                            if (pos <= -1 || pos >= 2)
                                return 0;
                        }
                    }
                }
    
                pos = pos - channel;
    
                if (pos > -1 && pos < 1) {
                    {
                        {
                            return this->safesqrt(1.0 - rnbo_abs(pos));
                        }
                    }
                } else {
                    return 0;
                }
            }
        }
    }
    
    void pan_tilde_01_func_reset() {}
    
    number pan_tilde_02_func_next(number pos, int channel) {
        {
            {
                number nchan_1 = 2 - 1;
    
                {
                    pos = pos * nchan_1;
                }
    
                {
                    {
                        {
                            if (pos <= -1 || pos >= 2)
                                return 0;
                        }
                    }
                }
    
                pos = pos - channel;
    
                if (pos > -1 && pos < 1) {
                    {
                        {
                            return this->safesqrt(1.0 - rnbo_abs(pos));
                        }
                    }
                } else {
                    return 0;
                }
            }
        }
    }
    
    void pan_tilde_02_func_reset() {}
    
    void delaytilde_01_del_step() {
        this->delaytilde_01_del_reader++;
    
        if (this->delaytilde_01_del_reader >= (int)(this->delaytilde_01_del_buffer->getSize()))
            this->delaytilde_01_del_reader = 0;
    }
    
    number delaytilde_01_del_read(number size, Int interp) {
        if (interp == 0) {
            number r = (int)(this->delaytilde_01_del_buffer->getSize()) + this->delaytilde_01_del_reader - ((size > this->delaytilde_01_del__maxdelay ? this->delaytilde_01_del__maxdelay : (size < (this->delaytilde_01_del_reader != this->delaytilde_01_del_writer) ? this->delaytilde_01_del_reader != this->delaytilde_01_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            long index2 = (long)(index1 + 1);
    
            return this->linearinterp(frac, this->delaytilde_01_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_01_del_wrap))
            ), this->delaytilde_01_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_01_del_wrap))
            ));
        } else if (interp == 1) {
            number r = (int)(this->delaytilde_01_del_buffer->getSize()) + this->delaytilde_01_del_reader - ((size > this->delaytilde_01_del__maxdelay ? this->delaytilde_01_del__maxdelay : (size < (1 + this->delaytilde_01_del_reader != this->delaytilde_01_del_writer) ? 1 + this->delaytilde_01_del_reader != this->delaytilde_01_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->cubicinterp(frac, this->delaytilde_01_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_01_del_wrap))
            ), this->delaytilde_01_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_01_del_wrap))
            ), this->delaytilde_01_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_01_del_wrap))
            ), this->delaytilde_01_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_01_del_wrap))
            ));
        } else if (interp == 6) {
            number r = (int)(this->delaytilde_01_del_buffer->getSize()) + this->delaytilde_01_del_reader - ((size > this->delaytilde_01_del__maxdelay ? this->delaytilde_01_del__maxdelay : (size < (1 + this->delaytilde_01_del_reader != this->delaytilde_01_del_writer) ? 1 + this->delaytilde_01_del_reader != this->delaytilde_01_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->fastcubicinterp(frac, this->delaytilde_01_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_01_del_wrap))
            ), this->delaytilde_01_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_01_del_wrap))
            ), this->delaytilde_01_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_01_del_wrap))
            ), this->delaytilde_01_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_01_del_wrap))
            ));
        } else if (interp == 2) {
            number r = (int)(this->delaytilde_01_del_buffer->getSize()) + this->delaytilde_01_del_reader - ((size > this->delaytilde_01_del__maxdelay ? this->delaytilde_01_del__maxdelay : (size < (1 + this->delaytilde_01_del_reader != this->delaytilde_01_del_writer) ? 1 + this->delaytilde_01_del_reader != this->delaytilde_01_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->splineinterp(frac, this->delaytilde_01_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_01_del_wrap))
            ), this->delaytilde_01_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_01_del_wrap))
            ), this->delaytilde_01_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_01_del_wrap))
            ), this->delaytilde_01_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_01_del_wrap))
            ));
        } else if (interp == 7) {
            number r = (int)(this->delaytilde_01_del_buffer->getSize()) + this->delaytilde_01_del_reader - ((size > this->delaytilde_01_del__maxdelay ? this->delaytilde_01_del__maxdelay : (size < (1 + this->delaytilde_01_del_reader != this->delaytilde_01_del_writer) ? 1 + this->delaytilde_01_del_reader != this->delaytilde_01_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
            Index index5 = (Index)(index4 + 1);
            Index index6 = (Index)(index5 + 1);
    
            return this->spline6interp(frac, this->delaytilde_01_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_01_del_wrap))
            ), this->delaytilde_01_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_01_del_wrap))
            ), this->delaytilde_01_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_01_del_wrap))
            ), this->delaytilde_01_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_01_del_wrap))
            ), this->delaytilde_01_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->delaytilde_01_del_wrap))
            ), this->delaytilde_01_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->delaytilde_01_del_wrap))
            ));
        } else if (interp == 3) {
            number r = (int)(this->delaytilde_01_del_buffer->getSize()) + this->delaytilde_01_del_reader - ((size > this->delaytilde_01_del__maxdelay ? this->delaytilde_01_del__maxdelay : (size < (this->delaytilde_01_del_reader != this->delaytilde_01_del_writer) ? this->delaytilde_01_del_reader != this->delaytilde_01_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
    
            return this->cosineinterp(frac, this->delaytilde_01_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_01_del_wrap))
            ), this->delaytilde_01_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_01_del_wrap))
            ));
        }
    
        number r = (int)(this->delaytilde_01_del_buffer->getSize()) + this->delaytilde_01_del_reader - ((size > this->delaytilde_01_del__maxdelay ? this->delaytilde_01_del__maxdelay : (size < (this->delaytilde_01_del_reader != this->delaytilde_01_del_writer) ? this->delaytilde_01_del_reader != this->delaytilde_01_del_writer : size)));
        long index1 = (long)(rnbo_floor(r));
    
        return this->delaytilde_01_del_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_01_del_wrap))
        );
    }
    
    void delaytilde_01_del_write(number v) {
        this->delaytilde_01_del_writer = this->delaytilde_01_del_reader;
        this->delaytilde_01_del_buffer[(Index)this->delaytilde_01_del_writer] = v;
    }
    
    number delaytilde_01_del_next(number v, int size) {
        number effectiveSize = (size == -1 ? this->delaytilde_01_del__maxdelay : size);
        number val = this->delaytilde_01_del_read(effectiveSize, 0);
        this->delaytilde_01_del_write(v);
        this->delaytilde_01_del_step();
        return val;
    }
    
    array<Index, 2> delaytilde_01_del_calcSizeInSamples() {
        number sizeInSamples = 0;
        Index allocatedSizeInSamples = 0;
    
        {
            sizeInSamples = this->delaytilde_01_del_evaluateSizeExpr(this->samplerate(), this->vectorsize());
            this->delaytilde_01_del_sizemode = 0;
        }
    
        sizeInSamples = rnbo_floor(sizeInSamples);
        sizeInSamples = this->maximum(sizeInSamples, 2);
        allocatedSizeInSamples = (Index)(sizeInSamples);
        allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
        return {sizeInSamples, allocatedSizeInSamples};
    }
    
    void delaytilde_01_del_init() {
        auto result = this->delaytilde_01_del_calcSizeInSamples();
        this->delaytilde_01_del__maxdelay = result[0];
        Index requestedSizeInSamples = (Index)(result[1]);
        this->delaytilde_01_del_buffer->requestSize(requestedSizeInSamples, 1);
        this->delaytilde_01_del_wrap = requestedSizeInSamples - 1;
    }
    
    void delaytilde_01_del_clear() {
        this->delaytilde_01_del_buffer->setZero();
    }
    
    void delaytilde_01_del_reset() {
        auto result = this->delaytilde_01_del_calcSizeInSamples();
        this->delaytilde_01_del__maxdelay = result[0];
        Index allocatedSizeInSamples = (Index)(result[1]);
        this->delaytilde_01_del_buffer->setSize(allocatedSizeInSamples);
        updateDataRef(this, this->delaytilde_01_del_buffer);
        this->delaytilde_01_del_wrap = this->delaytilde_01_del_buffer->getSize() - 1;
        this->delaytilde_01_del_clear();
    
        if (this->delaytilde_01_del_reader >= this->delaytilde_01_del__maxdelay || this->delaytilde_01_del_writer >= this->delaytilde_01_del__maxdelay) {
            this->delaytilde_01_del_reader = 0;
            this->delaytilde_01_del_writer = 0;
        }
    }
    
    void delaytilde_01_del_dspsetup() {
        this->delaytilde_01_del_reset();
    }
    
    number delaytilde_01_del_evaluateSizeExpr(number samplerate, number vectorsize) {
        RNBO_UNUSED(vectorsize);
        RNBO_UNUSED(samplerate);
        return 100000;
    }
    
    number delaytilde_01_del_size() {
        return this->delaytilde_01_del__maxdelay;
    }
    
    void delaytilde_01_dspsetup(bool force) {
        if ((bool)(this->delaytilde_01_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->delaytilde_01_rampInSamples = (long)(this->mstosamps(50));
        this->delaytilde_01_lastDelay = -1;
        this->delaytilde_01_setupDone = true;
        this->delaytilde_01_del_dspsetup();
    }
    
    number limi_02_dc1_next(number x, number gain) {
        number y = x - this->limi_02_dc1_xm1 + this->limi_02_dc1_ym1 * gain;
        this->limi_02_dc1_xm1 = x;
        this->limi_02_dc1_ym1 = y;
        return y;
    }
    
    void limi_02_dc1_reset() {
        this->limi_02_dc1_xm1 = 0;
        this->limi_02_dc1_ym1 = 0;
    }
    
    void limi_02_dc1_dspsetup() {
        this->limi_02_dc1_reset();
    }
    
    number limi_02_dc_next(Index i, number x, number gain) {
        switch ((int)i) {
        default:
            {
            return this->limi_02_dc1_next(x, gain);
            }
        }
    
        return 0;
    }
    
    void limi_02_dc_reset(Index i) {
        switch ((int)i) {
        default:
            {
            return this->limi_02_dc1_reset();
            }
        }
    }
    
    void limi_02_dc_dspsetup(Index i) {
        switch ((int)i) {
        default:
            {
            return this->limi_02_dc1_dspsetup();
            }
        }
    }
    
    void limi_02_reset() {
        this->limi_02_recover = (number)1000 / (this->limi_02_release * this->samplerate());
    
        {
            this->limi_02_recover *= 0.707;
        }
    }
    
    void limi_02_dspsetup(bool force) {
        if ((bool)(this->limi_02_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->limi_02_reset();
        this->limi_02_setupDone = true;
        this->limi_02_dc1_dspsetup();
    }
    
    number pan_tilde_03_func_next(number pos, int channel) {
        {
            {
                number nchan_1 = 2 - 1;
    
                {
                    pos = pos * nchan_1;
                }
    
                {
                    {
                        {
                            if (pos <= -1 || pos >= 2)
                                return 0;
                        }
                    }
                }
    
                pos = pos - channel;
    
                if (pos > -1 && pos < 1) {
                    {
                        {
                            return this->safesqrt(1.0 - rnbo_abs(pos));
                        }
                    }
                } else {
                    return 0;
                }
            }
        }
    }
    
    void pan_tilde_03_func_reset() {}
    
    void delaytilde_02_del_step() {
        this->delaytilde_02_del_reader++;
    
        if (this->delaytilde_02_del_reader >= (int)(this->delaytilde_02_del_buffer->getSize()))
            this->delaytilde_02_del_reader = 0;
    }
    
    number delaytilde_02_del_read(number size, Int interp) {
        if (interp == 0) {
            number r = (int)(this->delaytilde_02_del_buffer->getSize()) + this->delaytilde_02_del_reader - ((size > this->delaytilde_02_del__maxdelay ? this->delaytilde_02_del__maxdelay : (size < (this->delaytilde_02_del_reader != this->delaytilde_02_del_writer) ? this->delaytilde_02_del_reader != this->delaytilde_02_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            long index2 = (long)(index1 + 1);
    
            return this->linearinterp(frac, this->delaytilde_02_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_02_del_wrap))
            ), this->delaytilde_02_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_02_del_wrap))
            ));
        } else if (interp == 1) {
            number r = (int)(this->delaytilde_02_del_buffer->getSize()) + this->delaytilde_02_del_reader - ((size > this->delaytilde_02_del__maxdelay ? this->delaytilde_02_del__maxdelay : (size < (1 + this->delaytilde_02_del_reader != this->delaytilde_02_del_writer) ? 1 + this->delaytilde_02_del_reader != this->delaytilde_02_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->cubicinterp(frac, this->delaytilde_02_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_02_del_wrap))
            ), this->delaytilde_02_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_02_del_wrap))
            ), this->delaytilde_02_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_02_del_wrap))
            ), this->delaytilde_02_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_02_del_wrap))
            ));
        } else if (interp == 6) {
            number r = (int)(this->delaytilde_02_del_buffer->getSize()) + this->delaytilde_02_del_reader - ((size > this->delaytilde_02_del__maxdelay ? this->delaytilde_02_del__maxdelay : (size < (1 + this->delaytilde_02_del_reader != this->delaytilde_02_del_writer) ? 1 + this->delaytilde_02_del_reader != this->delaytilde_02_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->fastcubicinterp(frac, this->delaytilde_02_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_02_del_wrap))
            ), this->delaytilde_02_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_02_del_wrap))
            ), this->delaytilde_02_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_02_del_wrap))
            ), this->delaytilde_02_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_02_del_wrap))
            ));
        } else if (interp == 2) {
            number r = (int)(this->delaytilde_02_del_buffer->getSize()) + this->delaytilde_02_del_reader - ((size > this->delaytilde_02_del__maxdelay ? this->delaytilde_02_del__maxdelay : (size < (1 + this->delaytilde_02_del_reader != this->delaytilde_02_del_writer) ? 1 + this->delaytilde_02_del_reader != this->delaytilde_02_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->splineinterp(frac, this->delaytilde_02_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_02_del_wrap))
            ), this->delaytilde_02_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_02_del_wrap))
            ), this->delaytilde_02_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_02_del_wrap))
            ), this->delaytilde_02_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_02_del_wrap))
            ));
        } else if (interp == 7) {
            number r = (int)(this->delaytilde_02_del_buffer->getSize()) + this->delaytilde_02_del_reader - ((size > this->delaytilde_02_del__maxdelay ? this->delaytilde_02_del__maxdelay : (size < (1 + this->delaytilde_02_del_reader != this->delaytilde_02_del_writer) ? 1 + this->delaytilde_02_del_reader != this->delaytilde_02_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
            Index index5 = (Index)(index4 + 1);
            Index index6 = (Index)(index5 + 1);
    
            return this->spline6interp(frac, this->delaytilde_02_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_02_del_wrap))
            ), this->delaytilde_02_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_02_del_wrap))
            ), this->delaytilde_02_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_02_del_wrap))
            ), this->delaytilde_02_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_02_del_wrap))
            ), this->delaytilde_02_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->delaytilde_02_del_wrap))
            ), this->delaytilde_02_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->delaytilde_02_del_wrap))
            ));
        } else if (interp == 3) {
            number r = (int)(this->delaytilde_02_del_buffer->getSize()) + this->delaytilde_02_del_reader - ((size > this->delaytilde_02_del__maxdelay ? this->delaytilde_02_del__maxdelay : (size < (this->delaytilde_02_del_reader != this->delaytilde_02_del_writer) ? this->delaytilde_02_del_reader != this->delaytilde_02_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
    
            return this->cosineinterp(frac, this->delaytilde_02_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_02_del_wrap))
            ), this->delaytilde_02_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_02_del_wrap))
            ));
        }
    
        number r = (int)(this->delaytilde_02_del_buffer->getSize()) + this->delaytilde_02_del_reader - ((size > this->delaytilde_02_del__maxdelay ? this->delaytilde_02_del__maxdelay : (size < (this->delaytilde_02_del_reader != this->delaytilde_02_del_writer) ? this->delaytilde_02_del_reader != this->delaytilde_02_del_writer : size)));
        long index1 = (long)(rnbo_floor(r));
    
        return this->delaytilde_02_del_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_02_del_wrap))
        );
    }
    
    void delaytilde_02_del_write(number v) {
        this->delaytilde_02_del_writer = this->delaytilde_02_del_reader;
        this->delaytilde_02_del_buffer[(Index)this->delaytilde_02_del_writer] = v;
    }
    
    number delaytilde_02_del_next(number v, int size) {
        number effectiveSize = (size == -1 ? this->delaytilde_02_del__maxdelay : size);
        number val = this->delaytilde_02_del_read(effectiveSize, 0);
        this->delaytilde_02_del_write(v);
        this->delaytilde_02_del_step();
        return val;
    }
    
    array<Index, 2> delaytilde_02_del_calcSizeInSamples() {
        number sizeInSamples = 0;
        Index allocatedSizeInSamples = 0;
    
        {
            sizeInSamples = this->delaytilde_02_del_evaluateSizeExpr(this->samplerate(), this->vectorsize());
            this->delaytilde_02_del_sizemode = 0;
        }
    
        sizeInSamples = rnbo_floor(sizeInSamples);
        sizeInSamples = this->maximum(sizeInSamples, 2);
        allocatedSizeInSamples = (Index)(sizeInSamples);
        allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
        return {sizeInSamples, allocatedSizeInSamples};
    }
    
    void delaytilde_02_del_init() {
        auto result = this->delaytilde_02_del_calcSizeInSamples();
        this->delaytilde_02_del__maxdelay = result[0];
        Index requestedSizeInSamples = (Index)(result[1]);
        this->delaytilde_02_del_buffer->requestSize(requestedSizeInSamples, 1);
        this->delaytilde_02_del_wrap = requestedSizeInSamples - 1;
    }
    
    void delaytilde_02_del_clear() {
        this->delaytilde_02_del_buffer->setZero();
    }
    
    void delaytilde_02_del_reset() {
        auto result = this->delaytilde_02_del_calcSizeInSamples();
        this->delaytilde_02_del__maxdelay = result[0];
        Index allocatedSizeInSamples = (Index)(result[1]);
        this->delaytilde_02_del_buffer->setSize(allocatedSizeInSamples);
        updateDataRef(this, this->delaytilde_02_del_buffer);
        this->delaytilde_02_del_wrap = this->delaytilde_02_del_buffer->getSize() - 1;
        this->delaytilde_02_del_clear();
    
        if (this->delaytilde_02_del_reader >= this->delaytilde_02_del__maxdelay || this->delaytilde_02_del_writer >= this->delaytilde_02_del__maxdelay) {
            this->delaytilde_02_del_reader = 0;
            this->delaytilde_02_del_writer = 0;
        }
    }
    
    void delaytilde_02_del_dspsetup() {
        this->delaytilde_02_del_reset();
    }
    
    number delaytilde_02_del_evaluateSizeExpr(number samplerate, number vectorsize) {
        RNBO_UNUSED(vectorsize);
        RNBO_UNUSED(samplerate);
        return 100000;
    }
    
    number delaytilde_02_del_size() {
        return this->delaytilde_02_del__maxdelay;
    }
    
    void delaytilde_02_dspsetup(bool force) {
        if ((bool)(this->delaytilde_02_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->delaytilde_02_rampInSamples = (long)(this->mstosamps(50));
        this->delaytilde_02_lastDelay = -1;
        this->delaytilde_02_setupDone = true;
        this->delaytilde_02_del_dspsetup();
    }
    
    void translate_01_onTempoChanged(number ) {}
    
    void translate_01_onSampleRateChanged(number samplerate) {
        RNBO_UNUSED(samplerate);
    
        {
            this->translate_01_value_set(this->translate_01_value);
        }
    }
    
    void numberobj_01_init() {
        this->numberobj_01_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("pingpongdelay/number_obj-11"), 1, this->_currentTime);
    }
    
    void numberobj_01_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_01_value;
    }
    
    void numberobj_01_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_01_value_set(preset["value"]);
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        limi_01_bypass = 0;
        limi_01_dcblock = 0;
        limi_01_lookahead = 100;
        limi_01_lookahead_setter(limi_01_lookahead);
        limi_01_preamp = 0;
        limi_01_preamp_setter(limi_01_preamp);
        limi_01_postamp = 0;
        limi_01_postamp_setter(limi_01_postamp);
        limi_01_threshold = 0;
        limi_01_threshold_setter(limi_01_threshold);
        limi_01_release = 1000;
        pan_tilde_01_spread = 0.5;
        pan_tilde_01_pos = 0;
        pan_tilde_02_spread = 0.5;
        pan_tilde_02_pos = 0;
        delaytilde_01_delay = 11025;
        dspexpr_01_in1 = 0;
        dspexpr_01_in2 = 0;
        limi_02_bypass = 0;
        limi_02_dcblock = 0;
        limi_02_lookahead = 100;
        limi_02_lookahead_setter(limi_02_lookahead);
        limi_02_preamp = 0;
        limi_02_preamp_setter(limi_02_preamp);
        limi_02_postamp = 0;
        limi_02_postamp_setter(limi_02_postamp);
        limi_02_threshold = 0;
        limi_02_threshold_setter(limi_02_threshold);
        limi_02_release = 1000;
        pan_tilde_03_spread = 0.5;
        pan_tilde_03_pos = 0;
        delaytilde_02_delay = 22050;
        dspexpr_02_in1 = 0;
        dspexpr_02_in2 = 0;
        translate_01_value = 0;
        expr_01_in1 = 0;
        expr_01_in2 = 2;
        expr_01_out1 = 0;
        numberobj_01_value = 0;
        numberobj_01_value_setter(numberobj_01_value);
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        signals[0] = nullptr;
        signals[1] = nullptr;
        signals[2] = nullptr;
        signals[3] = nullptr;
        signals[4] = nullptr;
        signals[5] = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        limi_01_last = 0;
        limi_01_lookaheadIndex = 0;
        limi_01_recover = 0;
        limi_01_lookaheadInv = 0;
        limi_01_dc1_xm1 = 0;
        limi_01_dc1_ym1 = 0;
        limi_01_setupDone = false;
        delaytilde_01_lastDelay = -1;
        delaytilde_01_crossfadeDelay = 0;
        delaytilde_01_ramp = 0;
        delaytilde_01_rampInSamples = 0;
        delaytilde_01_del__maxdelay = 0;
        delaytilde_01_del_sizemode = 0;
        delaytilde_01_del_wrap = 0;
        delaytilde_01_del_reader = 0;
        delaytilde_01_del_writer = 0;
        delaytilde_01_setupDone = false;
        feedbacktilde_01_feedbackbuffer = nullptr;
        limi_02_last = 0;
        limi_02_lookaheadIndex = 0;
        limi_02_recover = 0;
        limi_02_lookaheadInv = 0;
        limi_02_dc1_xm1 = 0;
        limi_02_dc1_ym1 = 0;
        limi_02_setupDone = false;
        delaytilde_02_lastDelay = -1;
        delaytilde_02_crossfadeDelay = 0;
        delaytilde_02_ramp = 0;
        delaytilde_02_rampInSamples = 0;
        delaytilde_02_del__maxdelay = 0;
        delaytilde_02_del_sizemode = 0;
        delaytilde_02_del_wrap = 0;
        delaytilde_02_del_reader = 0;
        delaytilde_02_del_writer = 0;
        delaytilde_02_setupDone = false;
        feedbacktilde_02_feedbackbuffer = nullptr;
        numberobj_01_currentFormat = 6;
        numberobj_01_lastValue = 0;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number limi_01_bypass;
        number limi_01_dcblock;
        number limi_01_lookahead;
        number limi_01_preamp;
        number limi_01_postamp;
        number limi_01_threshold;
        number limi_01_release;
        number pan_tilde_01_spread;
        number pan_tilde_01_pos;
        number pan_tilde_02_spread;
        number pan_tilde_02_pos;
        number delaytilde_01_delay;
        number dspexpr_01_in1;
        number dspexpr_01_in2;
        number limi_02_bypass;
        number limi_02_dcblock;
        number limi_02_lookahead;
        number limi_02_preamp;
        number limi_02_postamp;
        number limi_02_threshold;
        number limi_02_release;
        number pan_tilde_03_spread;
        number pan_tilde_03_pos;
        number delaytilde_02_delay;
        number dspexpr_02_in1;
        number dspexpr_02_in2;
        number translate_01_value;
        number expr_01_in1;
        number expr_01_in2;
        number expr_01_out1;
        number numberobj_01_value;
        MillisecondTime _currentTime;
        UInt64 audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        SampleValue * signals[6];
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        SampleValue limi_01_lookaheadBuffers[1][512] = { };
        SampleValue limi_01_gainBuffer[512] = { };
        number limi_01_last;
        int limi_01_lookaheadIndex;
        number limi_01_recover;
        number limi_01_lookaheadInv;
        number limi_01_dc1_xm1;
        number limi_01_dc1_ym1;
        bool limi_01_setupDone;
        number delaytilde_01_lastDelay;
        number delaytilde_01_crossfadeDelay;
        number delaytilde_01_ramp;
        long delaytilde_01_rampInSamples;
        Float64BufferRef delaytilde_01_del_buffer;
        Index delaytilde_01_del__maxdelay;
        Int delaytilde_01_del_sizemode;
        Index delaytilde_01_del_wrap;
        Int delaytilde_01_del_reader;
        Int delaytilde_01_del_writer;
        bool delaytilde_01_setupDone;
        signal feedbacktilde_01_feedbackbuffer;
        SampleValue limi_02_lookaheadBuffers[1][512] = { };
        SampleValue limi_02_gainBuffer[512] = { };
        number limi_02_last;
        int limi_02_lookaheadIndex;
        number limi_02_recover;
        number limi_02_lookaheadInv;
        number limi_02_dc1_xm1;
        number limi_02_dc1_ym1;
        bool limi_02_setupDone;
        number delaytilde_02_lastDelay;
        number delaytilde_02_crossfadeDelay;
        number delaytilde_02_ramp;
        long delaytilde_02_rampInSamples;
        Float64BufferRef delaytilde_02_del_buffer;
        Index delaytilde_02_del__maxdelay;
        Int delaytilde_02_del_sizemode;
        Index delaytilde_02_del_wrap;
        Int delaytilde_02_del_reader;
        Int delaytilde_02_del_writer;
        bool delaytilde_02_setupDone;
        signal feedbacktilde_02_feedbackbuffer;
        Int numberobj_01_currentFormat;
        number numberobj_01_lastValue;
        number stackprotect_count;
        DataRef delaytilde_01_del_bufferobj;
        DataRef delaytilde_02_del_bufferobj;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
    
};

class RNBOSubpatcher_811 : public PatcherInterfaceImpl {
    
    friend class rnbomatic;
    
    public:
    
    class RNBOSubpatcher_788 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_811;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_788()
            {
            }
            
            ~RNBOSubpatcher_788()
            {
            }
            
            virtual RNBOSubpatcher_811* getPatcher() const {
                return static_cast<RNBOSubpatcher_811 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
                getEngine()->flushClockEvents(this, 1396722025, false);
                getEngine()->flushClockEvents(this, 694892522, false);
            }
            
            Index voice() {
                return this->_voiceIndex;
            }
            
            number random(number low, number high) {
                number range = high - low;
                return globalrandom() * range + low;
            }
            
            number samplerate() const {
                return this->sr;
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                this->noise_tilde_01_perform(this->signals[0], n);
            
                this->cycle_tilde_01_perform(
                    in1,
                    this->cycle_tilde_01_phase_offset,
                    this->signals[1],
                    this->signals[2],
                    n
                );
            
                this->numbertilde_01_perform(in1, this->dummyBuffer, n);
                this->saw_tilde_01_perform(in1, this->saw_tilde_01_syncPhase, this->signals[3], this->signals[4], n);
            
                this->rect_tilde_01_perform(
                    in1,
                    in2,
                    this->rect_tilde_01_syncPhase,
                    this->signals[5],
                    this->signals[6],
                    n
                );
            
                this->tri_tilde_01_perform(
                    in1,
                    in2,
                    this->tri_tilde_01_syncPhase,
                    this->signals[7],
                    this->signals[8],
                    n
                );
            
                this->numbertilde_02_perform(in2, this->dummyBuffer, n);
            
                this->rect_tilde_02_perform(
                    in1,
                    in2,
                    this->rect_tilde_02_syncPhase,
                    this->signals[9],
                    this->signals[10],
                    n
                );
            
                this->selector_01_perform(
                    this->selector_01_onoff,
                    this->signals[0],
                    this->signals[1],
                    this->signals[3],
                    this->signals[7],
                    this->signals[5],
                    this->signals[9],
                    out1,
                    n
                );
            
                this->ip_01_perform(this->signals[9], n);
            
                this->selector_02_perform(
                    this->selector_02_onoff,
                    this->signals[9],
                    this->signals[2],
                    this->signals[4],
                    this->signals[8],
                    this->signals[6],
                    this->signals[10],
                    out2,
                    n
                );
            
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 11; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->ip_01_sigbuf = resizeSignal(this->ip_01_sigbuf, this->maxvs, maxBlockSize);
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->cycle_tilde_01_dspsetup(forceDSPSetup);
                this->numbertilde_01_dspsetup(forceDSPSetup);
                this->saw_tilde_01_dspsetup(forceDSPSetup);
                this->tri_tilde_01_dspsetup(forceDSPSetup);
                this->numbertilde_02_dspsetup(forceDSPSetup);
                this->ip_01_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            void setVoiceIndex(Index index)  {
                this->_voiceIndex = index;
            }
            
            void setNoteNumber(Int noteNumber)  {
                this->_noteNumber = noteNumber;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& preset) {
                this->param_01_getPresetValue(getSubState(preset, "mode"));
            }
            
            void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                this->updateTime(time);
            
                switch (index) {
                case 0:
                    {
                    this->param_01_value_set(v);
                    break;
                    }
                }
            }
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                case 0:
                    {
                    return this->param_01_value;
                    }
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 1;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                case 0:
                    {
                    return "mode";
                    }
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                case 0:
                    {
                    return "synth/osc.analog/mode";
                    }
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                {
                    switch (index) {
                    case 0:
                        {
                        info->type = ParameterTypeNumber;
                        info->initialValue = 2;
                        info->min = 0;
                        info->max = 5;
                        info->exponent = 1;
                        info->steps = 6;
                        static const char * eVal0[] = {"noise", "sine", "saw", "triangle", "square", "pulse"};
                        info->enumValues = eVal0;
                        info->debug = false;
                        info->saveable = true;
                        info->transmittable = true;
                        info->initialized = true;
                        info->visible = true;
                        info->displayName = "";
                        info->unit = "";
                        info->ioType = IOTypeUndefined;
                        info->signalIndex = INVALID_INDEX;
                        break;
                        }
                    }
                }
            }
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                case 0:
                    {
                    {
                        value = (value < 0 ? 0 : (value > 5 ? 5 : value));
                        ParameterValue normalizedValue = (value - 0) / (5 - 0);
            
                        {
                            normalizedValue = this->applyStepsToNormalizedParameterValue(normalizedValue, 6);
                        }
            
                        return normalizedValue;
                    }
                    }
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                case 0:
                    {
                    {
                        {
                            value = this->applyStepsToNormalizedParameterValue(value, 6);
                        }
            
                        {
                            return 0 + value * (5 - 0);
                        }
                    }
                    }
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                case 0:
                    {
                    return this->param_01_value_constrain(value);
                    }
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
                RNBO_UNUSED(hasValue);
                this->updateTime(time);
            
                switch (index) {
                case 1396722025:
                    {
                    this->numbertilde_01_value_set(value);
                    break;
                    }
                case 694892522:
                    {
                    this->numbertilde_02_value_set(value);
                    break;
                    }
                }
            }
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("valin"):
                    {
                    if (TAG("synth/osc.analog/number_obj-39") == objectId)
                        this->numberobj_02_valin_set(payload);
            
                    break;
                    }
                case TAG("format"):
                    {
                    if (TAG("synth/osc.analog/number_obj-39") == objectId)
                        this->numberobj_02_format_set(payload);
            
                    break;
                    }
                case TAG("sig"):
                    {
                    if (TAG("synth/osc.analog/number~_obj-18") == objectId)
                        this->numbertilde_01_sig_number_set(payload);
            
                    if (TAG("synth/osc.analog/number~_obj-25") == objectId)
                        this->numbertilde_02_sig_number_set(payload);
            
                    break;
                    }
                case TAG("mode"):
                    {
                    if (TAG("synth/osc.analog/number~_obj-18") == objectId)
                        this->numbertilde_01_mode_set(payload);
            
                    if (TAG("synth/osc.analog/number~_obj-25") == objectId)
                        this->numbertilde_02_mode_set(payload);
            
                    break;
                    }
                }
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("sig"):
                    {
                    if (TAG("synth/osc.analog/number~_obj-18") == objectId)
                        this->numbertilde_01_sig_list_set(payload);
            
                    if (TAG("synth/osc.analog/number~_obj-25") == objectId)
                        this->numbertilde_02_sig_list_set(payload);
            
                    break;
                    }
                }
            }
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("valout"):
                    {
                    return "valout";
                    }
                case TAG("synth/osc.analog/number_obj-39"):
                    {
                    return "synth/osc.analog/number_obj-39";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("monitor"):
                    {
                    return "monitor";
                    }
                case TAG("synth/osc.analog/number~_obj-18"):
                    {
                    return "synth/osc.analog/number~_obj-18";
                    }
                case TAG("assign"):
                    {
                    return "assign";
                    }
                case TAG("synth/osc.analog/number~_obj-25"):
                    {
                    return "synth/osc.analog/number~_obj-25";
                    }
                case TAG("valin"):
                    {
                    return "valin";
                    }
                case TAG("format"):
                    {
                    return "format";
                    }
                case TAG("sig"):
                    {
                    return "sig";
                    }
                case TAG("mode"):
                    {
                    return "mode";
                    }
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 1) {
                    this->cycle_tilde_01_buffer = new Float64Buffer(this->getPatcher()->getPatcher()->RNBODefaultSinus);
                    this->cycle_tilde_01_bufferUpdated();
                }
            }
            
            void initialize() {
                this->assign_defaults();
                this->setState();
                this->cycle_tilde_01_buffer = new Float64Buffer(this->getPatcher()->getPatcher()->RNBODefaultSinus);
            }
            
            protected:
            
            void param_01_value_set(number v) {
                v = this->param_01_value_constrain(v);
                this->param_01_value = v;
                this->sendParameter(0, false);
            
                if (this->param_01_value != this->param_01_lastValue) {
                    this->getEngine()->presetTouched();
                    this->param_01_lastValue = this->param_01_value;
                }
            
                this->expr_02_in1_set(v);
                this->numberobj_02_value_set(v);
            }
            
            void numberobj_02_valin_set(number v) {
                this->numberobj_02_value_set(v);
            }
            
            void numberobj_02_format_set(number v) {
                this->numberobj_02_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numbertilde_01_sig_number_set(number v) {
                this->numbertilde_01_outValue = v;
            }
            
            void numbertilde_01_sig_list_set(const list& v) {
                this->numbertilde_01_outValue = v[0];
            }
            
            void numbertilde_01_mode_set(number v) {
                if (v == 1) {
                    this->numbertilde_01_currentMode = 0;
                } else if (v == 2) {
                    this->numbertilde_01_currentMode = 1;
                }
            }
            
            void numbertilde_02_sig_number_set(number v) {
                this->numbertilde_02_outValue = v;
            }
            
            void numbertilde_02_sig_list_set(const list& v) {
                this->numbertilde_02_outValue = v[0];
            }
            
            void numbertilde_02_mode_set(number v) {
                if (v == 1) {
                    this->numbertilde_02_currentMode = 0;
                } else if (v == 2) {
                    this->numbertilde_02_currentMode = 1;
                }
            }
            
            void numbertilde_01_value_set(number ) {}
            
            void numbertilde_02_value_set(number ) {}
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 2;
            }
            
            Index getNumOutputChannels() const {
                return 2;
            }
            
            void initializeObjects() {
                this->numberobj_02_init();
                this->noise_tilde_01_init();
                this->numbertilde_01_init();
                this->numbertilde_02_init();
                this->ip_01_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {
                this->updateTime(this->getEngine()->getCurrentTime());
            
                {
                    this->scheduleParamInit(0, 0);
                }
            }
            
            void allocateDataRefs() {
                this->cycle_tilde_01_buffer->requestSize(16384, 1);
                this->cycle_tilde_01_buffer->setSampleRate(this->sr);
                this->cycle_tilde_01_buffer = this->cycle_tilde_01_buffer->allocateIfNeeded();
            }
            
            number param_01_value_constrain(number v) const {
                v = (v > 5 ? 5 : (v < 0 ? 0 : v));
            
                {
                    number oneStep = (number)5 / (number)5;
                    number oneStepInv = (oneStep != 0 ? (number)1 / oneStep : 0);
                    number numberOfSteps = rnbo_fround(v * oneStepInv * 1 / (number)1) * 1;
                    v = numberOfSteps * oneStep;
                }
            
                return v;
            }
            
            void selector_02_onoff_set(number v) {
                this->selector_02_onoff = v;
            }
            
            void selector_01_onoff_set(number v) {
                this->selector_01_onoff = v;
            }
            
            void expr_02_out1_set(number v) {
                this->expr_02_out1 = v;
                this->selector_02_onoff_set(this->expr_02_out1);
                this->selector_01_onoff_set(this->expr_02_out1);
            }
            
            void expr_02_in1_set(number in1) {
                this->expr_02_in1 = in1;
                this->expr_02_out1_set(this->expr_02_in1 + this->expr_02_in2);//#map:synth/osc.analog/+_obj-7:1
            }
            
            void numberobj_02_output_set(number ) {}
            
            void numberobj_02_value_set(number v) {
                this->numberobj_02_value_setter(v);
                v = this->numberobj_02_value;
                number localvalue = v;
            
                if (this->numberobj_02_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("synth/osc.analog/number_obj-39"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_02_output_set(localvalue);
            }
            
            void noise_tilde_01_perform(SampleValue * out1, Index n) {
                auto __noise_tilde_01_state = this->noise_tilde_01_state;
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = xoshiro_next(__noise_tilde_01_state);
                }
            }
            
            void cycle_tilde_01_perform(
                const Sample * frequency,
                number phase_offset,
                SampleValue * out1,
                SampleValue * out2,
                Index n
            ) {
                RNBO_UNUSED(phase_offset);
                auto __cycle_tilde_01_f2i = this->cycle_tilde_01_f2i;
                auto __cycle_tilde_01_buffer = this->cycle_tilde_01_buffer;
                auto __cycle_tilde_01_phasei = this->cycle_tilde_01_phasei;
                Index i;
            
                for (i = 0; i < n; i++) {
                    {
                        uint32_t uint_phase;
            
                        {
                            {
                                uint_phase = __cycle_tilde_01_phasei;
                            }
                        }
            
                        uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                        number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                        number y0 = __cycle_tilde_01_buffer[(Index)idx];
                        number y1 = __cycle_tilde_01_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                        number y = y0 + frac * (y1 - y0);
            
                        {
                            uint32_t pincr = (uint32_t)(uint32_trunc(frequency[(Index)i] * __cycle_tilde_01_f2i));
                            __cycle_tilde_01_phasei = uint32_add(__cycle_tilde_01_phasei, pincr);
                        }
            
                        out1[(Index)i] = y;
                        out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                        continue;
                    }
                }
            
                this->cycle_tilde_01_phasei = __cycle_tilde_01_phasei;
            }
            
            void numbertilde_01_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
                auto __numbertilde_01_currentIntervalInSamples = this->numbertilde_01_currentIntervalInSamples;
                auto __numbertilde_01_lastValue = this->numbertilde_01_lastValue;
                auto __numbertilde_01_currentInterval = this->numbertilde_01_currentInterval;
                auto __numbertilde_01_rampInSamples = this->numbertilde_01_rampInSamples;
                auto __numbertilde_01_outValue = this->numbertilde_01_outValue;
                auto __numbertilde_01_currentMode = this->numbertilde_01_currentMode;
                number monitorvalue = input_signal[0];
            
                for (Index i = 0; i < n; i++) {
                    if (__numbertilde_01_currentMode == 0) {
                        output[(Index)i] = this->numbertilde_01_smooth_next(
                            __numbertilde_01_outValue,
                            __numbertilde_01_rampInSamples,
                            __numbertilde_01_rampInSamples
                        );
                    } else {
                        output[(Index)i] = input_signal[(Index)i];
                    }
                }
            
                __numbertilde_01_currentInterval -= n;
            
                if (monitorvalue != __numbertilde_01_lastValue && __numbertilde_01_currentInterval <= 0) {
                    __numbertilde_01_currentInterval = __numbertilde_01_currentIntervalInSamples;
            
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        1396722025,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        monitorvalue
                    );;
            
                    __numbertilde_01_lastValue = monitorvalue;
            
                    this->getEngine()->sendListMessage(
                        TAG("monitor"),
                        TAG("synth/osc.analog/number~_obj-18"),
                        {monitorvalue},
                        this->_currentTime
                    );;
                }
            
                this->numbertilde_01_currentInterval = __numbertilde_01_currentInterval;
                this->numbertilde_01_lastValue = __numbertilde_01_lastValue;
            }
            
            void saw_tilde_01_perform(
                const Sample * frequency,
                number syncPhase,
                SampleValue * out1,
                SampleValue * out2,
                Index n
            ) {
                RNBO_UNUSED(syncPhase);
                auto __saw_tilde_01_didSync = this->saw_tilde_01_didSync;
                auto __saw_tilde_01_lastSyncDiff = this->saw_tilde_01_lastSyncDiff;
                auto __saw_tilde_01_lastSyncPhase = this->saw_tilde_01_lastSyncPhase;
                auto __saw_tilde_01_t = this->saw_tilde_01_t;
                Index i;
            
                for (i = 0; i < n; i++) {
                    number dt = frequency[(Index)i] / this->samplerate();
                    number t1 = __saw_tilde_01_t + 0.5;
                    t1 -= trunc(t1);
                    number y = 2 * t1 - 1;
            
                    if (dt != 0.0) {
                        number syncDiff = 0 - __saw_tilde_01_lastSyncPhase;
                        __saw_tilde_01_lastSyncPhase = 0;
                        __saw_tilde_01_lastSyncDiff = syncDiff;
                        number lookahead = 0 + syncDiff;
            
                        if (t1 < dt) {
                            number d = t1 / dt;
                            y -= d + d - d * d - 1;
                        } else if (t1 + dt > 1) {
                            number d = (t1 - 1) / dt;
                            y -= d + d + d * d + 1;
                        } else if ((bool)(__saw_tilde_01_didSync)) {
                            y = 0;
                            __saw_tilde_01_didSync = false;
                        } else if (lookahead > 1) {
                            y *= 0.5;
                            __saw_tilde_01_t = 0;
                            __saw_tilde_01_didSync = true;
                        }
            
                        __saw_tilde_01_t += dt;
            
                        if (dt > 0) {
                            while (__saw_tilde_01_t >= 1) {
                                __saw_tilde_01_t -= 1;
                            }
                        } else {
                            while (__saw_tilde_01_t <= 0) {
                                __saw_tilde_01_t += 1;
                            }
                        }
                    }
            
                    y = this->saw_tilde_01_dcblocker_next(y, 0.9997);
                    out1[(Index)i] = 0.5 * y;
                    out2[(Index)i] = __saw_tilde_01_t;
                }
            
                this->saw_tilde_01_t = __saw_tilde_01_t;
                this->saw_tilde_01_lastSyncPhase = __saw_tilde_01_lastSyncPhase;
                this->saw_tilde_01_lastSyncDiff = __saw_tilde_01_lastSyncDiff;
                this->saw_tilde_01_didSync = __saw_tilde_01_didSync;
            }
            
            void rect_tilde_01_perform(
                const Sample * frequency,
                const Sample * pulsewidth,
                number syncPhase,
                SampleValue * out1,
                SampleValue * out2,
                Index n
            ) {
                RNBO_UNUSED(syncPhase);
                auto __rect_tilde_01_xHistory = this->rect_tilde_01_xHistory;
                auto __rect_tilde_01_yHistory = this->rect_tilde_01_yHistory;
                auto __rect_tilde_01_didSync = this->rect_tilde_01_didSync;
                auto __rect_tilde_01_t = this->rect_tilde_01_t;
                auto __rect_tilde_01_lastSyncDiff = this->rect_tilde_01_lastSyncDiff;
                auto __rect_tilde_01_lastSyncPhase = this->rect_tilde_01_lastSyncPhase;
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __frequency = frequency[(Index)i];
                    __frequency = rnbo_abs(__frequency);
                    number dt = __frequency / this->samplerate();
                    number pw = pulsewidth[(Index)i];
            
                    if (pulsewidth[(Index)i] > 0.99) {
                        pw = 0.99;
                    } else if (pulsewidth[(Index)i] < 0.01) {
                        pw = 0.01;
                    }
            
                    number syncDiff = 0 - __rect_tilde_01_lastSyncPhase;
                    __rect_tilde_01_lastSyncPhase = 0;
                    __rect_tilde_01_lastSyncDiff = syncDiff;
                    number syncLookahead = 0 + syncDiff;
                    number tCurr = __rect_tilde_01_t;
                    number tPrev = tCurr - dt;
                    number tNext = tCurr + dt;
            
                    if (tPrev < 0) {
                        while (tPrev < 0) {
                            tPrev += 1;
                        }
                    }
            
                    if (tNext > 1) {
                        while (tNext >= 1) {
                            tNext -= 1;
                        }
                    }
            
                    number yNext = this->rect_tilde_01_rectangle(tNext, pw);
                    number yCurr = this->rect_tilde_01_rectangle(tCurr, pw);
                    number yPrev = this->rect_tilde_01_rectangle(tPrev, pw);
            
                    if (dt != 0.0) {
                        if (yPrev < yCurr) {
                            number d = tCurr / dt;
                            yCurr += d - 0.5 * d * d - 0.5;
                        } else if (yCurr < yNext) {
                            number d = (1 - tCurr) / dt;
                            yCurr += 0.5 * d * d + d + 0.5;
                        } else if (yPrev > yCurr) {
                            number d = (tCurr - pw) / dt;
                            yCurr -= d - 0.5 * d * d - 0.5;
                        } else if (yCurr > yNext) {
                            number d = (pw - tCurr) / dt;
                            yCurr -= 0.5 * d * d + d + 0.5;
                        } else if ((bool)(__rect_tilde_01_didSync)) {
                            yCurr = 0.25;
                            __rect_tilde_01_didSync = false;
                        } else if (syncLookahead > 1) {
                            if (yCurr < 0) {
                                yCurr = -0.125;
                            }
            
                            __rect_tilde_01_t = 0;
                            __rect_tilde_01_didSync = true;
                        }
            
                        __rect_tilde_01_t += dt;
            
                        if (dt > 0) {
                            while (__rect_tilde_01_t >= 1) {
                                __rect_tilde_01_t -= 1;
                            }
                        } else {
                            while (__rect_tilde_01_t <= 0) {
                                __rect_tilde_01_t += 1;
                            }
                        }
                    }
            
                    number output = yCurr - __rect_tilde_01_yHistory + __rect_tilde_01_xHistory * 0.9997;
                    __rect_tilde_01_xHistory = output;
                    __rect_tilde_01_yHistory = yCurr;
                    out1[(Index)i] = 0.5 * output;
                    out2[(Index)i] = __rect_tilde_01_t;
                }
            
                this->rect_tilde_01_lastSyncPhase = __rect_tilde_01_lastSyncPhase;
                this->rect_tilde_01_lastSyncDiff = __rect_tilde_01_lastSyncDiff;
                this->rect_tilde_01_t = __rect_tilde_01_t;
                this->rect_tilde_01_didSync = __rect_tilde_01_didSync;
                this->rect_tilde_01_yHistory = __rect_tilde_01_yHistory;
                this->rect_tilde_01_xHistory = __rect_tilde_01_xHistory;
            }
            
            void tri_tilde_01_perform(
                const Sample * frequency,
                const Sample * pulsewidth,
                number syncPhase,
                SampleValue * out1,
                SampleValue * out2,
                Index n
            ) {
                RNBO_UNUSED(syncPhase);
                auto __tri_tilde_01_yn3 = this->tri_tilde_01_yn3;
                auto __tri_tilde_01_yn2 = this->tri_tilde_01_yn2;
                auto __tri_tilde_01_yn1 = this->tri_tilde_01_yn1;
                auto __tri_tilde_01_app_correction = this->tri_tilde_01_app_correction;
                auto __tri_tilde_01_flg = this->tri_tilde_01_flg;
                auto __tri_tilde_01_yn = this->tri_tilde_01_yn;
                auto __tri_tilde_01_t = this->tri_tilde_01_t;
                auto __tri_tilde_01_lastSyncDiff = this->tri_tilde_01_lastSyncDiff;
                auto __tri_tilde_01_lastSyncPhase = this->tri_tilde_01_lastSyncPhase;
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __frequency = frequency[(Index)i];
                    __frequency = rnbo_abs(__frequency);
                    number dt = __frequency / this->samplerate();
            
                    if (dt != 0.0) {
                        number pw = pulsewidth[(Index)i];
            
                        if (pulsewidth[(Index)i] > 0.99) {
                            pw = 0.99;
                        } else if (pulsewidth[(Index)i] < 0.01) {
                            pw = 0.01;
                        }
            
                        number syncDiff = 0 - __tri_tilde_01_lastSyncPhase;
                        __tri_tilde_01_lastSyncPhase = 0;
                        __tri_tilde_01_lastSyncDiff = syncDiff;
                        number syncLookahead = 0 + syncDiff;
            
                        if (syncLookahead > 1) {
                            __tri_tilde_01_t = 0;
                        }
            
                        number tCurr = __tri_tilde_01_t;
                        number upSlope = __frequency / (pw * this->samplerate());
                        number downSlope = __frequency / ((1 - pw) * this->samplerate());
            
                        if (tCurr <= pw) {
                            __tri_tilde_01_yn = (number)2 / pw * tCurr - 1;
            
                            if (__tri_tilde_01_flg == -1) {
                                __tri_tilde_01_app_correction = 1;
                                __tri_tilde_01_flg = 1;
                            } else if (__tri_tilde_01_app_correction == 1) {
                                __tri_tilde_01_app_correction = 0;
                                number d = (tCurr - dt) / dt;
                                number d2 = d * d;
                                number d3 = d2 * d;
                                number d4 = d2 * d2;
                                number d5 = d * d4;
                                number h0 = -d5 / (number)120 + d4 / (number)24 - d3 / (number)12 + d2 / (number)12 - d / (number)24 + (number)1 / (number)120;
                                number h1 = d5 / (number)40 - d4 / (number)12 + d2 / (number)3 - d / (number)2 + (number)7 / (number)30;
                                number h2 = -d5 / (number)40 + d4 / (number)24 + d3 / (number)12 + d2 / (number)12 + d / (number)24 + (number)1 / (number)120;
                                number h3 = d5 / (number)120;
                                __tri_tilde_01_yn += upSlope * h0;
                                __tri_tilde_01_yn1 += upSlope * h1;
                                __tri_tilde_01_yn2 += upSlope * h2;
                                __tri_tilde_01_yn3 += upSlope * h3;
                            }
            
                            __tri_tilde_01_flg = 1;
                        } else {
                            __tri_tilde_01_yn = 1 - 2 * (tCurr - pw) / (1 - pw);
            
                            if (__tri_tilde_01_flg == 1) {
                                __tri_tilde_01_app_correction = 1;
                            } else if (__tri_tilde_01_app_correction == 1) {
                                __tri_tilde_01_app_correction = 0;
                                number d = (tCurr - pw - dt) / dt;
                                number d2 = d * d;
                                number d3 = d2 * d;
                                number d4 = d2 * d2;
                                number d5 = d4 * d;
                                number h0 = -d5 / (number)120 + d4 / (number)24 - d3 / (number)12 + d2 / (number)12 - d / (number)24 + (number)1 / (number)120;
                                number h1 = d5 / (number)40 - d4 / (number)12 + d2 / (number)3 - d / (number)2 + (number)7 / (number)30;
                                number h2 = -d5 / (number)40 + d4 / (number)24 + d3 / (number)12 + d2 / (number)12 + d / (number)24 + (number)1 / (number)120;
                                number h3 = d5 / (number)120;
                                __tri_tilde_01_yn -= downSlope * h0;
                                __tri_tilde_01_yn1 -= downSlope * h1;
                                __tri_tilde_01_yn2 -= downSlope * h2;
                                __tri_tilde_01_yn3 -= downSlope * h3;
                            }
            
                            __tri_tilde_01_flg = -1;
                        }
                    }
            
                    number y = __tri_tilde_01_yn3;
                    __tri_tilde_01_yn3 = __tri_tilde_01_yn2;
                    __tri_tilde_01_yn2 = __tri_tilde_01_yn1;
                    __tri_tilde_01_yn1 = __tri_tilde_01_yn;
                    __tri_tilde_01_t += dt;
            
                    if (dt > 0) {
                        while (__tri_tilde_01_t >= 1) {
                            __tri_tilde_01_t -= 1;
                        }
                    } else {
                        while (__tri_tilde_01_t <= 0) {
                            __tri_tilde_01_t += 1;
                        }
                    }
            
                    y = this->tri_tilde_01_dcblocker_next(y, 0.9997);
                    out1[(Index)i] = y * 0.5;
                    out2[(Index)i] = __tri_tilde_01_t;
                }
            
                this->tri_tilde_01_lastSyncPhase = __tri_tilde_01_lastSyncPhase;
                this->tri_tilde_01_lastSyncDiff = __tri_tilde_01_lastSyncDiff;
                this->tri_tilde_01_t = __tri_tilde_01_t;
                this->tri_tilde_01_yn = __tri_tilde_01_yn;
                this->tri_tilde_01_flg = __tri_tilde_01_flg;
                this->tri_tilde_01_app_correction = __tri_tilde_01_app_correction;
                this->tri_tilde_01_yn1 = __tri_tilde_01_yn1;
                this->tri_tilde_01_yn2 = __tri_tilde_01_yn2;
                this->tri_tilde_01_yn3 = __tri_tilde_01_yn3;
            }
            
            void numbertilde_02_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
                auto __numbertilde_02_currentIntervalInSamples = this->numbertilde_02_currentIntervalInSamples;
                auto __numbertilde_02_lastValue = this->numbertilde_02_lastValue;
                auto __numbertilde_02_currentInterval = this->numbertilde_02_currentInterval;
                auto __numbertilde_02_rampInSamples = this->numbertilde_02_rampInSamples;
                auto __numbertilde_02_outValue = this->numbertilde_02_outValue;
                auto __numbertilde_02_currentMode = this->numbertilde_02_currentMode;
                number monitorvalue = input_signal[0];
            
                for (Index i = 0; i < n; i++) {
                    if (__numbertilde_02_currentMode == 0) {
                        output[(Index)i] = this->numbertilde_02_smooth_next(
                            __numbertilde_02_outValue,
                            __numbertilde_02_rampInSamples,
                            __numbertilde_02_rampInSamples
                        );
                    } else {
                        output[(Index)i] = input_signal[(Index)i];
                    }
                }
            
                __numbertilde_02_currentInterval -= n;
            
                if (monitorvalue != __numbertilde_02_lastValue && __numbertilde_02_currentInterval <= 0) {
                    __numbertilde_02_currentInterval = __numbertilde_02_currentIntervalInSamples;
            
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        694892522,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        monitorvalue
                    );;
            
                    __numbertilde_02_lastValue = monitorvalue;
            
                    this->getEngine()->sendListMessage(
                        TAG("monitor"),
                        TAG("synth/osc.analog/number~_obj-25"),
                        {monitorvalue},
                        this->_currentTime
                    );;
                }
            
                this->numbertilde_02_currentInterval = __numbertilde_02_currentInterval;
                this->numbertilde_02_lastValue = __numbertilde_02_lastValue;
            }
            
            void rect_tilde_02_perform(
                const Sample * frequency,
                const Sample * pulsewidth,
                number syncPhase,
                SampleValue * out1,
                SampleValue * out2,
                Index n
            ) {
                RNBO_UNUSED(syncPhase);
                auto __rect_tilde_02_xHistory = this->rect_tilde_02_xHistory;
                auto __rect_tilde_02_yHistory = this->rect_tilde_02_yHistory;
                auto __rect_tilde_02_didSync = this->rect_tilde_02_didSync;
                auto __rect_tilde_02_t = this->rect_tilde_02_t;
                auto __rect_tilde_02_lastSyncDiff = this->rect_tilde_02_lastSyncDiff;
                auto __rect_tilde_02_lastSyncPhase = this->rect_tilde_02_lastSyncPhase;
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __frequency = frequency[(Index)i];
                    __frequency = rnbo_abs(__frequency);
                    number dt = __frequency / this->samplerate();
                    number pw = pulsewidth[(Index)i];
            
                    if (pulsewidth[(Index)i] > 0.99) {
                        pw = 0.99;
                    } else if (pulsewidth[(Index)i] < 0.01) {
                        pw = 0.01;
                    }
            
                    number syncDiff = 0 - __rect_tilde_02_lastSyncPhase;
                    __rect_tilde_02_lastSyncPhase = 0;
                    __rect_tilde_02_lastSyncDiff = syncDiff;
                    number syncLookahead = 0 + syncDiff;
                    number tCurr = __rect_tilde_02_t;
                    number tPrev = tCurr - dt;
                    number tNext = tCurr + dt;
            
                    if (tPrev < 0) {
                        while (tPrev < 0) {
                            tPrev += 1;
                        }
                    }
            
                    if (tNext > 1) {
                        while (tNext >= 1) {
                            tNext -= 1;
                        }
                    }
            
                    number yNext = this->rect_tilde_02_rectangle(tNext, pw);
                    number yCurr = this->rect_tilde_02_rectangle(tCurr, pw);
                    number yPrev = this->rect_tilde_02_rectangle(tPrev, pw);
            
                    if (dt != 0.0) {
                        if (yPrev < yCurr) {
                            number d = tCurr / dt;
                            yCurr += d - 0.5 * d * d - 0.5;
                        } else if (yCurr < yNext) {
                            number d = (1 - tCurr) / dt;
                            yCurr += 0.5 * d * d + d + 0.5;
                        } else if (yPrev > yCurr) {
                            number d = (tCurr - pw) / dt;
                            yCurr -= d - 0.5 * d * d - 0.5;
                        } else if (yCurr > yNext) {
                            number d = (pw - tCurr) / dt;
                            yCurr -= 0.5 * d * d + d + 0.5;
                        } else if ((bool)(__rect_tilde_02_didSync)) {
                            yCurr = 0.25;
                            __rect_tilde_02_didSync = false;
                        } else if (syncLookahead > 1) {
                            if (yCurr < 0) {
                                yCurr = -0.125;
                            }
            
                            __rect_tilde_02_t = 0;
                            __rect_tilde_02_didSync = true;
                        }
            
                        __rect_tilde_02_t += dt;
            
                        if (dt > 0) {
                            while (__rect_tilde_02_t >= 1) {
                                __rect_tilde_02_t -= 1;
                            }
                        } else {
                            while (__rect_tilde_02_t <= 0) {
                                __rect_tilde_02_t += 1;
                            }
                        }
                    }
            
                    number output = yCurr - __rect_tilde_02_yHistory + __rect_tilde_02_xHistory * 0.9997;
                    __rect_tilde_02_xHistory = output;
                    __rect_tilde_02_yHistory = yCurr;
                    out1[(Index)i] = 0.5 * output;
                    out2[(Index)i] = __rect_tilde_02_t;
                }
            
                this->rect_tilde_02_lastSyncPhase = __rect_tilde_02_lastSyncPhase;
                this->rect_tilde_02_lastSyncDiff = __rect_tilde_02_lastSyncDiff;
                this->rect_tilde_02_t = __rect_tilde_02_t;
                this->rect_tilde_02_didSync = __rect_tilde_02_didSync;
                this->rect_tilde_02_yHistory = __rect_tilde_02_yHistory;
                this->rect_tilde_02_xHistory = __rect_tilde_02_xHistory;
            }
            
            void selector_01_perform(
                number onoff,
                const SampleValue * in1,
                const SampleValue * in2,
                const SampleValue * in3,
                const SampleValue * in4,
                const SampleValue * in5,
                const SampleValue * in6,
                SampleValue * out,
                Index n
            ) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    if (onoff >= 1 && onoff < 2)
                        out[(Index)i] = in1[(Index)i];
                    else if (onoff >= 2 && onoff < 3)
                        out[(Index)i] = in2[(Index)i];
                    else if (onoff >= 3 && onoff < 4)
                        out[(Index)i] = in3[(Index)i];
                    else if (onoff >= 4 && onoff < 5)
                        out[(Index)i] = in4[(Index)i];
                    else if (onoff >= 5 && onoff < 6)
                        out[(Index)i] = in5[(Index)i];
                    else if (onoff >= 6 && onoff < 7)
                        out[(Index)i] = in6[(Index)i];
                    else
                        out[(Index)i] = 0;
                }
            }
            
            void ip_01_perform(SampleValue * out, Index n) {
                auto __ip_01_lastValue = this->ip_01_lastValue;
                auto __ip_01_lastIndex = this->ip_01_lastIndex;
            
                for (Index i = 0; i < n; i++) {
                    out[(Index)i] = ((SampleIndex)(i) >= __ip_01_lastIndex ? __ip_01_lastValue : this->ip_01_sigbuf[(Index)i]);
                }
            
                __ip_01_lastIndex = 0;
                this->ip_01_lastIndex = __ip_01_lastIndex;
            }
            
            void selector_02_perform(
                number onoff,
                const SampleValue * in1,
                const SampleValue * in2,
                const SampleValue * in3,
                const SampleValue * in4,
                const SampleValue * in5,
                const SampleValue * in6,
                SampleValue * out,
                Index n
            ) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    if (onoff >= 1 && onoff < 2)
                        out[(Index)i] = in1[(Index)i];
                    else if (onoff >= 2 && onoff < 3)
                        out[(Index)i] = in2[(Index)i];
                    else if (onoff >= 3 && onoff < 4)
                        out[(Index)i] = in3[(Index)i];
                    else if (onoff >= 4 && onoff < 5)
                        out[(Index)i] = in4[(Index)i];
                    else if (onoff >= 5 && onoff < 6)
                        out[(Index)i] = in5[(Index)i];
                    else if (onoff >= 6 && onoff < 7)
                        out[(Index)i] = in6[(Index)i];
                    else
                        out[(Index)i] = 0;
                }
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void numberobj_02_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_02_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_02_value = localvalue;
            }
            
            void numberobj_02_init() {
                this->numberobj_02_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("synth/osc.analog/number_obj-39"), 1, this->_currentTime);
            }
            
            void numberobj_02_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_02_value;
            }
            
            void numberobj_02_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_02_value_set(preset["value"]);
            }
            
            void param_01_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->param_01_value;
            }
            
            void param_01_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->param_01_value_set(preset["value"]);
            }
            
            void noise_tilde_01_init() {
                this->noise_tilde_01_reset();
            }
            
            void noise_tilde_01_reset() {
                xoshiro_reset(
                    systemticks() + this->voice() + this->random(0, 10000),
                    this->noise_tilde_01_state
                );
            }
            
            number cycle_tilde_01_ph_next(number freq, number reset) {
                {
                    {
                        if (reset >= 0.)
                            this->cycle_tilde_01_ph_currentPhase = reset;
                    }
                }
            
                number pincr = freq * this->cycle_tilde_01_ph_conv;
            
                if (this->cycle_tilde_01_ph_currentPhase < 0.)
                    this->cycle_tilde_01_ph_currentPhase = 1. + this->cycle_tilde_01_ph_currentPhase;
            
                if (this->cycle_tilde_01_ph_currentPhase > 1.)
                    this->cycle_tilde_01_ph_currentPhase = this->cycle_tilde_01_ph_currentPhase - 1.;
            
                number tmp = this->cycle_tilde_01_ph_currentPhase;
                this->cycle_tilde_01_ph_currentPhase += pincr;
                return tmp;
            }
            
            void cycle_tilde_01_ph_reset() {
                this->cycle_tilde_01_ph_currentPhase = 0;
            }
            
            void cycle_tilde_01_ph_dspsetup() {
                this->cycle_tilde_01_ph_conv = (number)1 / this->sr;
            }
            
            void cycle_tilde_01_dspsetup(bool force) {
                if ((bool)(this->cycle_tilde_01_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->cycle_tilde_01_phasei = 0;
                this->cycle_tilde_01_f2i = (number)4294967296 / this->samplerate();
                this->cycle_tilde_01_wrap = (long)(this->cycle_tilde_01_buffer->getSize()) - 1;
                this->cycle_tilde_01_setupDone = true;
                this->cycle_tilde_01_ph_dspsetup();
            }
            
            void cycle_tilde_01_bufferUpdated() {
                this->cycle_tilde_01_wrap = (long)(this->cycle_tilde_01_buffer->getSize()) - 1;
            }
            
            number numbertilde_01_smooth_d_next(number x) {
                number temp = (number)(x - this->numbertilde_01_smooth_d_prev);
                this->numbertilde_01_smooth_d_prev = x;
                return temp;
            }
            
            void numbertilde_01_smooth_d_dspsetup() {
                this->numbertilde_01_smooth_d_reset();
            }
            
            void numbertilde_01_smooth_d_reset() {
                this->numbertilde_01_smooth_d_prev = 0;
            }
            
            number numbertilde_01_smooth_next(number x, number up, number down) {
                if (this->numbertilde_01_smooth_d_next(x) != 0.) {
                    if (x > this->numbertilde_01_smooth_prev) {
                        number _up = up;
            
                        if (_up < 1)
                            _up = 1;
            
                        this->numbertilde_01_smooth_index = _up;
                        this->numbertilde_01_smooth_increment = (x - this->numbertilde_01_smooth_prev) / _up;
                    } else if (x < this->numbertilde_01_smooth_prev) {
                        number _down = down;
            
                        if (_down < 1)
                            _down = 1;
            
                        this->numbertilde_01_smooth_index = _down;
                        this->numbertilde_01_smooth_increment = (x - this->numbertilde_01_smooth_prev) / _down;
                    }
                }
            
                if (this->numbertilde_01_smooth_index > 0) {
                    this->numbertilde_01_smooth_prev += this->numbertilde_01_smooth_increment;
                    this->numbertilde_01_smooth_index -= 1;
                } else {
                    this->numbertilde_01_smooth_prev = x;
                }
            
                return this->numbertilde_01_smooth_prev;
            }
            
            void numbertilde_01_smooth_reset() {
                this->numbertilde_01_smooth_prev = 0;
                this->numbertilde_01_smooth_index = 0;
                this->numbertilde_01_smooth_increment = 0;
                this->numbertilde_01_smooth_d_reset();
            }
            
            void numbertilde_01_init() {
                this->numbertilde_01_currentMode = 1;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("synth/osc.analog/number~_obj-18"),
                    1,
                    this->_currentTime
                );
            }
            
            void numbertilde_01_dspsetup(bool force) {
                if ((bool)(this->numbertilde_01_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->numbertilde_01_currentIntervalInSamples = this->mstosamps(100);
                this->numbertilde_01_currentInterval = this->numbertilde_01_currentIntervalInSamples;
                this->numbertilde_01_rampInSamples = this->mstosamps(this->numbertilde_01_ramp);
                this->numbertilde_01_setupDone = true;
                this->numbertilde_01_smooth_d_dspsetup();
            }
            
            number saw_tilde_01_dcblocker_next(number x, number gain) {
                number y = x - this->saw_tilde_01_dcblocker_xm1 + this->saw_tilde_01_dcblocker_ym1 * gain;
                this->saw_tilde_01_dcblocker_xm1 = x;
                this->saw_tilde_01_dcblocker_ym1 = y;
                return y;
            }
            
            void saw_tilde_01_dcblocker_reset() {
                this->saw_tilde_01_dcblocker_xm1 = 0;
                this->saw_tilde_01_dcblocker_ym1 = 0;
            }
            
            void saw_tilde_01_dcblocker_dspsetup() {
                this->saw_tilde_01_dcblocker_reset();
            }
            
            void saw_tilde_01_dspsetup(bool force) {
                if ((bool)(this->saw_tilde_01_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->saw_tilde_01_setupDone = true;
                this->saw_tilde_01_dcblocker_dspsetup();
            }
            
            number numbertilde_02_smooth_d_next(number x) {
                number temp = (number)(x - this->numbertilde_02_smooth_d_prev);
                this->numbertilde_02_smooth_d_prev = x;
                return temp;
            }
            
            void numbertilde_02_smooth_d_dspsetup() {
                this->numbertilde_02_smooth_d_reset();
            }
            
            void numbertilde_02_smooth_d_reset() {
                this->numbertilde_02_smooth_d_prev = 0;
            }
            
            number numbertilde_02_smooth_next(number x, number up, number down) {
                if (this->numbertilde_02_smooth_d_next(x) != 0.) {
                    if (x > this->numbertilde_02_smooth_prev) {
                        number _up = up;
            
                        if (_up < 1)
                            _up = 1;
            
                        this->numbertilde_02_smooth_index = _up;
                        this->numbertilde_02_smooth_increment = (x - this->numbertilde_02_smooth_prev) / _up;
                    } else if (x < this->numbertilde_02_smooth_prev) {
                        number _down = down;
            
                        if (_down < 1)
                            _down = 1;
            
                        this->numbertilde_02_smooth_index = _down;
                        this->numbertilde_02_smooth_increment = (x - this->numbertilde_02_smooth_prev) / _down;
                    }
                }
            
                if (this->numbertilde_02_smooth_index > 0) {
                    this->numbertilde_02_smooth_prev += this->numbertilde_02_smooth_increment;
                    this->numbertilde_02_smooth_index -= 1;
                } else {
                    this->numbertilde_02_smooth_prev = x;
                }
            
                return this->numbertilde_02_smooth_prev;
            }
            
            void numbertilde_02_smooth_reset() {
                this->numbertilde_02_smooth_prev = 0;
                this->numbertilde_02_smooth_index = 0;
                this->numbertilde_02_smooth_increment = 0;
                this->numbertilde_02_smooth_d_reset();
            }
            
            void numbertilde_02_init() {
                this->numbertilde_02_currentMode = 1;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("synth/osc.analog/number~_obj-25"),
                    1,
                    this->_currentTime
                );
            }
            
            void numbertilde_02_dspsetup(bool force) {
                if ((bool)(this->numbertilde_02_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->numbertilde_02_currentIntervalInSamples = this->mstosamps(100);
                this->numbertilde_02_currentInterval = this->numbertilde_02_currentIntervalInSamples;
                this->numbertilde_02_rampInSamples = this->mstosamps(this->numbertilde_02_ramp);
                this->numbertilde_02_setupDone = true;
                this->numbertilde_02_smooth_d_dspsetup();
            }
            
            number tri_tilde_01_dcblocker_next(number x, number gain) {
                number y = x - this->tri_tilde_01_dcblocker_xm1 + this->tri_tilde_01_dcblocker_ym1 * gain;
                this->tri_tilde_01_dcblocker_xm1 = x;
                this->tri_tilde_01_dcblocker_ym1 = y;
                return y;
            }
            
            void tri_tilde_01_dcblocker_reset() {
                this->tri_tilde_01_dcblocker_xm1 = 0;
                this->tri_tilde_01_dcblocker_ym1 = 0;
            }
            
            void tri_tilde_01_dcblocker_dspsetup() {
                this->tri_tilde_01_dcblocker_reset();
            }
            
            void tri_tilde_01_dspsetup(bool force) {
                if ((bool)(this->tri_tilde_01_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->tri_tilde_01_setupDone = true;
                this->tri_tilde_01_dcblocker_dspsetup();
            }
            
            void ip_01_init() {
                this->ip_01_lastValue = this->ip_01_value;
            }
            
            void ip_01_dspsetup(bool force) {
                if ((bool)(this->ip_01_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->ip_01_lastIndex = 0;
                this->ip_01_setupDone = true;
            }
            
            number rect_tilde_01_rectangle(number phase, number pulsewidth) {
                if (phase < pulsewidth) {
                    return 1;
                } else {
                    return -1;
                }
            }
            
            number rect_tilde_02_rectangle(number phase, number pulsewidth) {
                if (phase < pulsewidth) {
                    return 1;
                } else {
                    return -1;
                }
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                numberobj_02_value = 0;
                numberobj_02_value_setter(numberobj_02_value);
                expr_02_in1 = 0;
                expr_02_in2 = 1;
                expr_02_out1 = 0;
                selector_01_onoff = 1;
                param_01_value = 2;
                cycle_tilde_01_frequency = 0;
                cycle_tilde_01_phase_offset = 0;
                numbertilde_01_input_number = 0;
                numbertilde_01_ramp = 0;
                saw_tilde_01_frequency = 0;
                saw_tilde_01_syncPhase = 0;
                numbertilde_02_input_number = 0;
                numbertilde_02_ramp = 0;
                tri_tilde_01_frequency = 0;
                tri_tilde_01_pulsewidth = 0.5;
                tri_tilde_01_syncPhase = 0;
                selector_02_onoff = 1;
                ip_01_value = 0;
                ip_01_impulse = 0;
                rect_tilde_01_frequency = 440;
                rect_tilde_01_pulsewidth = 0.5;
                rect_tilde_01_syncPhase = 0;
                rect_tilde_02_frequency = 0;
                rect_tilde_02_pulsewidth = 0.5;
                rect_tilde_02_syncPhase = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                signals[1] = nullptr;
                signals[2] = nullptr;
                signals[3] = nullptr;
                signals[4] = nullptr;
                signals[5] = nullptr;
                signals[6] = nullptr;
                signals[7] = nullptr;
                signals[8] = nullptr;
                signals[9] = nullptr;
                signals[10] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                numberobj_02_currentFormat = 6;
                numberobj_02_lastValue = 0;
                param_01_lastValue = 0;
                cycle_tilde_01_wrap = 0;
                cycle_tilde_01_ph_currentPhase = 0;
                cycle_tilde_01_ph_conv = 0;
                cycle_tilde_01_setupDone = false;
                numbertilde_01_currentInterval = 0;
                numbertilde_01_currentIntervalInSamples = 0;
                numbertilde_01_lastValue = 0;
                numbertilde_01_outValue = 0;
                numbertilde_01_rampInSamples = 0;
                numbertilde_01_currentMode = 0;
                numbertilde_01_smooth_d_prev = 0;
                numbertilde_01_smooth_prev = 0;
                numbertilde_01_smooth_index = 0;
                numbertilde_01_smooth_increment = 0;
                numbertilde_01_setupDone = false;
                saw_tilde_01_t = 0;
                saw_tilde_01_lastSyncPhase = 0;
                saw_tilde_01_lastSyncDiff = 0;
                saw_tilde_01_didSync = false;
                saw_tilde_01_dcblocker_xm1 = 0;
                saw_tilde_01_dcblocker_ym1 = 0;
                saw_tilde_01_setupDone = false;
                numbertilde_02_currentInterval = 0;
                numbertilde_02_currentIntervalInSamples = 0;
                numbertilde_02_lastValue = 0;
                numbertilde_02_outValue = 0;
                numbertilde_02_rampInSamples = 0;
                numbertilde_02_currentMode = 0;
                numbertilde_02_smooth_d_prev = 0;
                numbertilde_02_smooth_prev = 0;
                numbertilde_02_smooth_index = 0;
                numbertilde_02_smooth_increment = 0;
                numbertilde_02_setupDone = false;
                tri_tilde_01_t = 0;
                tri_tilde_01_lastSyncPhase = 0;
                tri_tilde_01_lastSyncDiff = 0;
                tri_tilde_01_didSync = false;
                tri_tilde_01_yn = 0;
                tri_tilde_01_yn1 = 0;
                tri_tilde_01_yn2 = 0;
                tri_tilde_01_yn3 = 0;
                tri_tilde_01_flg = 0;
                tri_tilde_01_app_correction = 0;
                tri_tilde_01_dcblocker_xm1 = 0;
                tri_tilde_01_dcblocker_ym1 = 0;
                tri_tilde_01_setupDone = false;
                ip_01_lastIndex = 0;
                ip_01_lastValue = 0;
                ip_01_resetCount = 0;
                ip_01_sigbuf = nullptr;
                ip_01_setupDone = false;
                rect_tilde_01_xHistory = 0;
                rect_tilde_01_yHistory = 0;
                rect_tilde_01_t = 0;
                rect_tilde_01_lastSyncPhase = 0;
                rect_tilde_01_lastSyncDiff = 0;
                rect_tilde_01_didSync = false;
                rect_tilde_02_xHistory = 0;
                rect_tilde_02_yHistory = 0;
                rect_tilde_02_t = 0;
                rect_tilde_02_lastSyncPhase = 0;
                rect_tilde_02_lastSyncDiff = 0;
                rect_tilde_02_didSync = false;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number numberobj_02_value;
                number expr_02_in1;
                number expr_02_in2;
                number expr_02_out1;
                number selector_01_onoff;
                number param_01_value;
                number cycle_tilde_01_frequency;
                number cycle_tilde_01_phase_offset;
                number numbertilde_01_input_number;
                number numbertilde_01_ramp;
                number saw_tilde_01_frequency;
                number saw_tilde_01_syncPhase;
                number numbertilde_02_input_number;
                number numbertilde_02_ramp;
                number tri_tilde_01_frequency;
                number tri_tilde_01_pulsewidth;
                number tri_tilde_01_syncPhase;
                number selector_02_onoff;
                number ip_01_value;
                number ip_01_impulse;
                number rect_tilde_01_frequency;
                number rect_tilde_01_pulsewidth;
                number rect_tilde_01_syncPhase;
                number rect_tilde_02_frequency;
                number rect_tilde_02_pulsewidth;
                number rect_tilde_02_syncPhase;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[11];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Int numberobj_02_currentFormat;
                number numberobj_02_lastValue;
                number param_01_lastValue;
                UInt noise_tilde_01_state[4] = { };
                Float64BufferRef cycle_tilde_01_buffer;
                long cycle_tilde_01_wrap;
                uint32_t cycle_tilde_01_phasei;
                SampleValue cycle_tilde_01_f2i;
                number cycle_tilde_01_ph_currentPhase;
                number cycle_tilde_01_ph_conv;
                bool cycle_tilde_01_setupDone;
                SampleIndex numbertilde_01_currentInterval;
                SampleIndex numbertilde_01_currentIntervalInSamples;
                number numbertilde_01_lastValue;
                number numbertilde_01_outValue;
                number numbertilde_01_rampInSamples;
                Int numbertilde_01_currentMode;
                number numbertilde_01_smooth_d_prev;
                number numbertilde_01_smooth_prev;
                number numbertilde_01_smooth_index;
                number numbertilde_01_smooth_increment;
                bool numbertilde_01_setupDone;
                number saw_tilde_01_t;
                number saw_tilde_01_lastSyncPhase;
                number saw_tilde_01_lastSyncDiff;
                bool saw_tilde_01_didSync;
                number saw_tilde_01_dcblocker_xm1;
                number saw_tilde_01_dcblocker_ym1;
                bool saw_tilde_01_setupDone;
                SampleIndex numbertilde_02_currentInterval;
                SampleIndex numbertilde_02_currentIntervalInSamples;
                number numbertilde_02_lastValue;
                number numbertilde_02_outValue;
                number numbertilde_02_rampInSamples;
                Int numbertilde_02_currentMode;
                number numbertilde_02_smooth_d_prev;
                number numbertilde_02_smooth_prev;
                number numbertilde_02_smooth_index;
                number numbertilde_02_smooth_increment;
                bool numbertilde_02_setupDone;
                number tri_tilde_01_t;
                number tri_tilde_01_lastSyncPhase;
                number tri_tilde_01_lastSyncDiff;
                bool tri_tilde_01_didSync;
                number tri_tilde_01_yn;
                number tri_tilde_01_yn1;
                number tri_tilde_01_yn2;
                number tri_tilde_01_yn3;
                number tri_tilde_01_flg;
                number tri_tilde_01_app_correction;
                number tri_tilde_01_dcblocker_xm1;
                number tri_tilde_01_dcblocker_ym1;
                bool tri_tilde_01_setupDone;
                SampleIndex ip_01_lastIndex;
                number ip_01_lastValue;
                SampleIndex ip_01_resetCount;
                signal ip_01_sigbuf;
                bool ip_01_setupDone;
                number rect_tilde_01_xHistory;
                number rect_tilde_01_yHistory;
                number rect_tilde_01_t;
                number rect_tilde_01_lastSyncPhase;
                number rect_tilde_01_lastSyncDiff;
                bool rect_tilde_01_didSync;
                number rect_tilde_02_xHistory;
                number rect_tilde_02_yHistory;
                number rect_tilde_02_t;
                number rect_tilde_02_lastSyncPhase;
                number rect_tilde_02_lastSyncDiff;
                bool rect_tilde_02_didSync;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    RNBOSubpatcher_811()
    {
    }
    
    ~RNBOSubpatcher_811()
    {
        delete this->p_01;
    }
    
    virtual rnbomatic* getPatcher() const {
        return static_cast<rnbomatic *>(_parentPatcher);
    }
    
    rnbomatic* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
        getEngine()->flushClockEvents(this, -1494586265, false);
        getEngine()->flushClockEvents(this, -1468824490, false);
    }
    
    inline number linearinterp(number frac, number x, number y) {
        return x + (y - x) * frac;
    }
    
    Index voice() {
        return this->_voiceIndex;
    }
    
    number random(number low, number high) {
        number range = high - low;
        return globalrandom() * range + low;
    }
    
    number mstosamps(MillisecondTime ms) {
        return ms * this->sr * 0.001;
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        RNBO_UNUSED(numInputs);
        RNBO_UNUSED(inputs);
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
    
        if (this->getIsMuted())
            return;
    
        this->mtof_tilde_01_perform(this->mtof_tilde_01_midivalue, this->signals[0], n);
        this->dspexpr_04_perform(this->dspexpr_04_in1, this->dspexpr_04_in2, this->signals[1], n);
        this->noise_tilde_02_perform(this->signals[2], n);
        this->onepole_tilde_01_perform(this->signals[2], this->onepole_tilde_01_freqInHz, this->signals[3], n);
        this->dspexpr_05_perform(this->signals[3], this->dspexpr_05_in2, this->dummyBuffer, n);
        this->numbertilde_03_perform(this->zeroBuffer, this->signals[3], n);
        this->signaladder_06_perform(this->signals[0], this->signals[1], this->signals[1], n);
        this->p_01_perform(this->signals[1], this->signals[3], this->signals[2], this->dummyBuffer, n);
        this->ip_02_perform(this->signals[3], n);
    
        this->adsr_01_perform(
            this->adsr_01_attack,
            this->adsr_01_decay,
            this->adsr_01_sustain,
            this->adsr_01_release,
            this->signals[3],
            this->signals[0],
            n
        );
    
        this->dspexpr_03_perform(this->signals[2], this->signals[0], this->signals[3], n);
        this->signaladder_07_perform(this->signals[3], out1, out1, n);
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            Index i;
    
            for (i = 0; i < 4; i++) {
                this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
            }
    
            this->ip_02_sigbuf = resizeSignal(this->ip_02_sigbuf, this->maxvs, maxBlockSize);
            this->adsr_01_triggerBuf = resizeSignal(this->adsr_01_triggerBuf, this->maxvs, maxBlockSize);
            this->adsr_01_triggerValueBuf = resizeSignal(this->adsr_01_triggerValueBuf, this->maxvs, maxBlockSize);
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        this->onepole_tilde_01_dspsetup(forceDSPSetup);
        this->numbertilde_03_dspsetup(forceDSPSetup);
        this->ip_02_dspsetup(forceDSPSetup);
        this->adsr_01_dspsetup(forceDSPSetup);
        this->p_01->prepareToProcess(sampleRate, maxBlockSize, force);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    void setVoiceIndex(Index index)  {
        this->_voiceIndex = index;
        this->p_01->setVoiceIndex(index);
    }
    
    void setNoteNumber(Int noteNumber)  {
        this->_noteNumber = noteNumber;
        this->p_01->setNoteNumber(noteNumber);
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    void onSampleRateChanged(double ) {}
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {
        this->p_01 = new RNBOSubpatcher_788();
        this->p_01->setEngineAndPatcher(this->getEngine(), this);
        this->p_01->initialize();
        this->p_01->setParameterOffset(this->getParameterOffset(this->p_01));
    }
    
    void getPreset(PatcherStateInterface& preset) {
        this->param_02_getPresetValue(getSubState(preset, "drift"));
        this->param_03_getPresetValue(getSubState(preset, "one"));
        this->param_19_getPresetValue(getSubState(preset, "/drift"));
        this->param_20_getPresetValue(getSubState(preset, "/one"));
        this->p_01->getPreset(getSubState(getSubState(preset, "__sps"), "osc.analog"));
    }
    
    void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
        this->updateTime(time);
    
        switch (index) {
        case 0:
            {
            this->param_02_value_set(v);
            break;
            }
        case 1:
            {
            this->param_19_value_set(v);
            break;
            }
        case 5:
            {
            this->param_03_value_set(v);
            break;
            }
        case 6:
            {
            this->param_20_value_set(v);
            break;
            }
        default:
            {
            index -= 10;
    
            if (index < this->p_01->getNumParameters())
                this->p_01->setParameterValue(index, v, time);
    
            break;
            }
        }
    }
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        case 0:
            {
            return this->param_02_value;
            }
        case 1:
            {
            return this->param_19_value;
            }
        case 5:
            {
            return this->param_03_value;
            }
        case 6:
            {
            return this->param_20_value;
            }
        default:
            {
            index -= 10;
    
            if (index < this->p_01->getNumParameters())
                return this->p_01->getParameterValue(index);
    
            return 0;
            }
        }
    }
    
    ParameterValue getPolyParameterValue(PatcherInterface** voices, ParameterIndex index)  {
        switch (index) {
        case 1:
            {
            return voices[0]->getParameterValue(index - 0);
            }
        case 2:
            {
            return voices[1]->getParameterValue(index - 1);
            }
        case 3:
            {
            return voices[2]->getParameterValue(index - 2);
            }
        case 4:
            {
            return voices[3]->getParameterValue(index - 3);
            }
        case 6:
            {
            return voices[0]->getParameterValue(index - 0);
            }
        case 7:
            {
            return voices[1]->getParameterValue(index - 1);
            }
        case 8:
            {
            return voices[2]->getParameterValue(index - 2);
            }
        case 9:
            {
            return voices[3]->getParameterValue(index - 3);
            }
        default:
            {
            return voices[0]->getParameterValue(index);
            }
        }
    }
    
    void setPolyParameterValue(
        PatcherInterface** voices,
        ParameterIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        switch (index) {
        case 1:
            {
            voices[0]->setParameterValue(index - 0, value, time);
            break;
            }
        case 2:
            {
            voices[1]->setParameterValue(index - 1, value, time);
            break;
            }
        case 3:
            {
            voices[2]->setParameterValue(index - 2, value, time);
            break;
            }
        case 4:
            {
            voices[3]->setParameterValue(index - 3, value, time);
            break;
            }
        case 6:
            {
            voices[0]->setParameterValue(index - 0, value, time);
            break;
            }
        case 7:
            {
            voices[1]->setParameterValue(index - 1, value, time);
            break;
            }
        case 8:
            {
            voices[2]->setParameterValue(index - 2, value, time);
            break;
            }
        case 9:
            {
            voices[3]->setParameterValue(index - 3, value, time);
            break;
            }
        default:
            {
            for (Index i = 0; i < 4; i++)
                voices[i]->setParameterValue(index, value, time);
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 10 + this->p_01->getNumParameters();
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        case 0:
            {
            return "drift";
            }
        case 1:
            {
            return "1/drift";
            }
        case 2:
            {
            return "2/drift";
            }
        case 3:
            {
            return "3/drift";
            }
        case 4:
            {
            return "4/drift";
            }
        case 5:
            {
            return "one";
            }
        case 6:
            {
            return "1/one";
            }
        case 7:
            {
            return "2/one";
            }
        case 8:
            {
            return "3/one";
            }
        case 9:
            {
            return "4/one";
            }
        default:
            {
            index -= 10;
    
            if (index < this->p_01->getNumParameters())
                return this->p_01->getParameterName(index);
    
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        case 0:
            {
            return "synth/drift";
            }
        case 1:
            {
            return "synth/1/drift";
            }
        case 2:
            {
            return "synth/2/drift";
            }
        case 3:
            {
            return "synth/3/drift";
            }
        case 4:
            {
            return "synth/4/drift";
            }
        case 5:
            {
            return "synth/one";
            }
        case 6:
            {
            return "synth/1/one";
            }
        case 7:
            {
            return "synth/2/one";
            }
        case 8:
            {
            return "synth/3/one";
            }
        case 9:
            {
            return "synth/4/one";
            }
        default:
            {
            index -= 10;
    
            if (index < this->p_01->getNumParameters())
                return this->p_01->getParameterId(index);
    
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
        {
            switch (index) {
            case 0:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 0.5;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 1:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 0.5;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 2:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 0.5;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 3:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 0.5;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 4:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 0.5;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 5:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 0.5;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 6:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 0.5;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 7:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 0.5;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 8:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 0.5;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 9:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 0.5;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            default:
                {
                index -= 10;
    
                if (index < this->p_01->getNumParameters())
                    this->p_01->getParameterInfo(index, info);
    
                break;
                }
            }
        }
    }
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        if (this->_voiceIndex == 1)
            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    void sendPolyParameter(ParameterIndex index, Index voiceIndex, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset + voiceIndex - 1, ignoreValue);
    }
    
    ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
        if (subpatcher == this->p_01)
            return 10;
    
        return 0;
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
            {
            {
                value = (value < 0 ? 0 : (value > 100 ? 100 : value));
                ParameterValue normalizedValue = (value - 0) / (100 - 0);
                return normalizedValue;
            }
            }
        default:
            {
            index -= 10;
    
            if (index < this->p_01->getNumParameters())
                return this->p_01->convertToNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
            {
            {
                {
                    return 0 + value * (100 - 0);
                }
            }
            }
        default:
            {
            index -= 10;
    
            if (index < this->p_01->getNumParameters())
                return this->p_01->convertFromNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 0:
            {
            return this->param_02_value_constrain(value);
            }
        case 1:
            {
            return this->param_19_value_constrain(value);
            }
        case 2:
            {
            return this->param_19_value_constrain(value);
            }
        case 3:
            {
            return this->param_19_value_constrain(value);
            }
        case 4:
            {
            return this->param_19_value_constrain(value);
            }
        case 5:
            {
            return this->param_03_value_constrain(value);
            }
        case 6:
            {
            return this->param_20_value_constrain(value);
            }
        case 7:
            {
            return this->param_20_value_constrain(value);
            }
        case 8:
            {
            return this->param_20_value_constrain(value);
            }
        case 9:
            {
            return this->param_20_value_constrain(value);
            }
        default:
            {
            index -= 10;
    
            if (index < this->p_01->getNumParameters())
                return this->p_01->constrainParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
        RNBO_UNUSED(hasValue);
        this->updateTime(time);
    
        switch (index) {
        case -1494586265:
            {
            this->numbertilde_03_value_set(value);
            break;
            }
        case -1468824490:
            {
            this->adsr_01_mute_bang();
            break;
            }
        }
    }
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("listin"):
            {
            if (TAG("synth/message_obj-18") == objectId)
                this->message_01_listin_number_set(payload);
    
            if (TAG("synth/message_obj-3") == objectId)
                this->message_02_listin_number_set(payload);
    
            break;
            }
        case TAG("sig"):
            {
            if (TAG("synth/number~_obj-7") == objectId)
                this->numbertilde_03_sig_number_set(payload);
    
            break;
            }
        case TAG("mode"):
            {
            if (TAG("synth/number~_obj-7") == objectId)
                this->numbertilde_03_mode_set(payload);
    
            break;
            }
        case TAG("valin"):
            {
            if (TAG("synth/number[1]") == objectId)
                this->numberobj_03_valin_set(payload);
    
            if (TAG("synth/number[2]") == objectId)
                this->numberobj_04_valin_set(payload);
    
            if (TAG("synth/flonum") == objectId)
                this->numberobj_05_valin_set(payload);
    
            if (TAG("synth/number[3]") == objectId)
                this->numberobj_06_valin_set(payload);
    
            break;
            }
        case TAG("format"):
            {
            if (TAG("synth/number[1]") == objectId)
                this->numberobj_03_format_set(payload);
    
            if (TAG("synth/number[2]") == objectId)
                this->numberobj_04_format_set(payload);
    
            if (TAG("synth/flonum") == objectId)
                this->numberobj_05_format_set(payload);
    
            if (TAG("synth/number[3]") == objectId)
                this->numberobj_06_format_set(payload);
    
            break;
            }
        }
    
        this->p_01->processNumMessage(tag, objectId, time, payload);
    }
    
    void processListMessage(
        MessageTag tag,
        MessageTag objectId,
        MillisecondTime time,
        const list& payload
    ) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("listin"):
            {
            if (TAG("synth/message_obj-18") == objectId)
                this->message_01_listin_list_set(payload);
    
            if (TAG("synth/message_obj-3") == objectId)
                this->message_02_listin_list_set(payload);
    
            break;
            }
        case TAG("sig"):
            {
            if (TAG("synth/number~_obj-7") == objectId)
                this->numbertilde_03_sig_list_set(payload);
    
            break;
            }
        }
    
        this->p_01->processListMessage(tag, objectId, time, payload);
    }
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("listin"):
            {
            if (TAG("synth/message_obj-18") == objectId)
                this->message_01_listin_bang_bang();
    
            if (TAG("synth/message_obj-3") == objectId)
                this->message_02_listin_bang_bang();
    
            break;
            }
        }
    
        this->p_01->processBangMessage(tag, objectId, time);
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("listout"):
            {
            return "listout";
            }
        case TAG("synth/message_obj-18"):
            {
            return "synth/message_obj-18";
            }
        case TAG("synth/message_obj-3"):
            {
            return "synth/message_obj-3";
            }
        case TAG("monitor"):
            {
            return "monitor";
            }
        case TAG("synth/number~_obj-7"):
            {
            return "synth/number~_obj-7";
            }
        case TAG("assign"):
            {
            return "assign";
            }
        case TAG("setup"):
            {
            return "setup";
            }
        case TAG("valout"):
            {
            return "valout";
            }
        case TAG("synth/number[1]"):
            {
            return "synth/number[1]";
            }
        case TAG("synth/number[2]"):
            {
            return "synth/number[2]";
            }
        case TAG("synth/flonum"):
            {
            return "synth/flonum";
            }
        case TAG("synth/number[3]"):
            {
            return "synth/number[3]";
            }
        case TAG("listin"):
            {
            return "listin";
            }
        case TAG("sig"):
            {
            return "sig";
            }
        case TAG("mode"):
            {
            return "mode";
            }
        case TAG("valin"):
            {
            return "valin";
            }
        case TAG("format"):
            {
            return "format";
            }
        }
    
        auto subpatchResult_0 = this->p_01->resolveTag(tag);
    
        if (subpatchResult_0)
            return subpatchResult_0;
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
        this->updateTime(time);
    
        if (index == 0) {
            this->mtof_tilde_01_innerMtoF_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultMtofLookupTable256);
        }
    
        this->p_01->processDataViewUpdate(index, time);
    }
    
    void initialize() {
        this->assign_defaults();
        this->setState();
        this->mtof_tilde_01_innerMtoF_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultMtofLookupTable256);
    }
    
    protected:
    
    void param_02_value_set(number v) {
        v = this->param_02_value_constrain(v);
        this->param_02_value = v;
        this->sendParameter(0, false);
    
        if (this->param_02_value != this->param_02_lastValue) {
            this->getEngine()->presetTouched();
            this->param_02_lastValue = this->param_02_value;
        }
    
        this->param_19_value_set(v);
    }
    
    void param_03_value_set(number v) {
        v = this->param_03_value_constrain(v);
        this->param_03_value = v;
        this->sendParameter(5, false);
    
        if (this->param_03_value != this->param_03_lastValue) {
            this->getEngine()->presetTouched();
            this->param_03_lastValue = this->param_03_value;
        }
    
        this->param_20_value_set(v);
    }
    
    void eventinlet_04_out1_bang_bang() {
        this->unpack_01_input_bang_bang();
    }
    
    void eventinlet_04_out1_number_set(number v) {
        {
            list converted = {v};
            this->unpack_01_input_list_set(converted);
        }
    }
    
    void message_01_listin_list_set(const list& v) {
        this->message_01_set_set(v);
    }
    
    void message_01_listin_number_set(number v) {
        this->message_01_set_set(v);
    }
    
    void message_01_listin_bang_bang() {
        this->message_01_trigger_bang();
    }
    
    void message_02_listin_list_set(const list& v) {
        this->message_02_set_set(v);
    }
    
    void message_02_listin_number_set(number v) {
        this->message_02_set_set(v);
    }
    
    void message_02_listin_bang_bang() {
        this->message_02_trigger_bang();
    }
    
    void numbertilde_03_sig_number_set(number v) {
        this->numbertilde_03_outValue = v;
    }
    
    void numbertilde_03_sig_list_set(const list& v) {
        this->numbertilde_03_outValue = v[0];
    }
    
    void numbertilde_03_mode_set(number v) {
        if (v == 1) {
            this->numbertilde_03_currentMode = 0;
        } else if (v == 2) {
            this->numbertilde_03_currentMode = 1;
        }
    }
    
    void eventinlet_05_out1_bang_bang() {}
    
    void eventinlet_05_out1_number_set(number v) {
        this->numbertilde_03_input_number_set(v);
    }
    
    void eventinlet_05_out1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numbertilde_03_input_number_set(converted);
        }
    }
    
    void numberobj_03_valin_set(number v) {
        this->numberobj_03_value_set(v);
    }
    
    void numberobj_03_format_set(number v) {
        this->numberobj_03_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_04_valin_set(number v) {
        this->numberobj_04_value_set(v);
    }
    
    void numberobj_04_format_set(number v) {
        this->numberobj_04_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_05_valin_set(number v) {
        this->numberobj_05_value_set(v);
    }
    
    void numberobj_05_format_set(number v) {
        this->numberobj_05_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_06_valin_set(number v) {
        this->numberobj_06_value_set(v);
    }
    
    void numberobj_06_format_set(number v) {
        this->numberobj_06_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numbertilde_03_value_set(number ) {}
    
    void adsr_01_mute_bang() {}
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 0;
    }
    
    Index getNumOutputChannels() const {
        return 1;
    }
    
    void initializeObjects() {
        this->mtof_tilde_01_innerScala_init();
        this->mtof_tilde_01_init();
        this->message_01_init();
        this->noise_tilde_02_init();
        this->message_02_init();
        this->numbertilde_03_init();
        this->ip_02_init();
        this->numberobj_03_init();
        this->numberobj_04_init();
        this->numberobj_05_init();
        this->numberobj_06_init();
        this->p_01->initializeObjects();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {
        this->updateTime(this->getEngine()->getCurrentTime());
        this->p_01->startup();
    
        {
            this->scheduleParamInit(1, 0);
        }
    
        {
            this->scheduleParamInit(2, 0);
        }
    
        {
            this->scheduleParamInit(3, 0);
        }
    
        {
            this->scheduleParamInit(4, 0);
        }
    
        {
            this->scheduleParamInit(6, 0);
        }
    
        {
            this->scheduleParamInit(7, 0);
        }
    
        {
            this->scheduleParamInit(8, 0);
        }
    
        {
            this->scheduleParamInit(9, 0);
        }
    }
    
    void allocateDataRefs() {
        this->p_01->allocateDataRefs();
        this->mtof_tilde_01_innerMtoF_buffer->requestSize(65536, 1);
        this->mtof_tilde_01_innerMtoF_buffer->setSampleRate(this->sr);
        this->mtof_tilde_01_innerMtoF_buffer = this->mtof_tilde_01_innerMtoF_buffer->allocateIfNeeded();
    }
    
    void ip_02_value_set(number v) {
        this->ip_02_value = v;
        this->ip_02_fillSigBuf();
        this->ip_02_lastValue = v;
    }
    
    void expr_03_out1_set(number v) {
        this->expr_03_out1 = v;
        this->ip_02_value_set(this->expr_03_out1);
    }
    
    void expr_03_in1_set(number in1) {
        this->expr_03_in1 = in1;
    
        this->expr_03_out1_set(
            (this->expr_03_in2 == 0 ? 0 : (this->expr_03_in2 == 0. ? 0. : this->expr_03_in1 / this->expr_03_in2))
        );//#map:synth//_obj-12:1
    }
    
    void message_02_set_set(const list& v) {
        this->message_02_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("synth/message_obj-3"), v, this->_currentTime);
    }
    
    void unpack_01_out2_set(number v) {
        this->unpack_01_out2 = v;
        this->expr_03_in1_set(v);
    
        {
            list converted = {v};
            this->message_02_set_set(converted);
        }
    }
    
    void message_01_set_set(const list& v) {
        this->message_01_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("synth/message_obj-18"), v, this->_currentTime);
    }
    
    void mtof_tilde_01_midivalue_set(number v) {
        this->mtof_tilde_01_midivalue = v;
    }
    
    void unpack_01_out1_set(number v) {
        this->unpack_01_out1 = v;
    
        {
            list converted = {v};
            this->message_01_set_set(converted);
        }
    
        this->mtof_tilde_01_midivalue_set(v);
    }
    
    void unpack_01_input_list_set(const list& v) {
        if (v->length > 1)
            this->unpack_01_out2_set(v[1]);
    
        if (v->length > 0)
            this->unpack_01_out1_set(v[0]);
    }
    
    void eventinlet_04_out1_list_set(const list& v) {
        this->unpack_01_input_list_set(v);
    }
    
    number param_02_value_constrain(number v) const {
        v = (v > 100 ? 100 : (v < 0 ? 0 : v));
        return v;
    }
    
    number param_19_value_constrain(number v) const {
        v = (v > 100 ? 100 : (v < 0 ? 0 : v));
        return v;
    }
    
    void dspexpr_05_in2_set(number v) {
        this->dspexpr_05_in2 = v;
    }
    
    void param_19_value_set(number v) {
        v = this->param_19_value_constrain(v);
        this->param_19_value = v;
        this->sendPolyParameter(1, this->_voiceIndex, false);
    
        if (this->param_19_value != this->param_19_lastValue) {
            this->getEngine()->presetTouched();
            this->param_19_lastValue = this->param_19_value;
        }
    
        this->dspexpr_05_in2_set(v);
    }
    
    number param_03_value_constrain(number v) const {
        v = (v > 100 ? 100 : (v < 0 ? 0 : v));
        return v;
    }
    
    number param_20_value_constrain(number v) const {
        v = (v > 100 ? 100 : (v < 0 ? 0 : v));
        return v;
    }
    
    void onepole_tilde_01_freqInHz_set(number v) {
        this->onepole_tilde_01_freqInHz = v;
    }
    
    void param_20_value_set(number v) {
        v = this->param_20_value_constrain(v);
        this->param_20_value = v;
        this->sendPolyParameter(6, this->_voiceIndex, false);
    
        if (this->param_20_value != this->param_20_lastValue) {
            this->getEngine()->presetTouched();
            this->param_20_lastValue = this->param_20_value;
        }
    
        this->onepole_tilde_01_freqInHz_set(v);
    }
    
    void unpack_01_out2_bang() {
        number v = this->unpack_01_out2;
        this->expr_03_in1_set(v);
    
        {
            list converted = {v};
            this->message_02_set_set(converted);
        }
    }
    
    void unpack_01_out1_bang() {
        number v = this->unpack_01_out1;
    
        {
            list converted = {v};
            this->message_01_set_set(converted);
        }
    
        this->mtof_tilde_01_midivalue_set(v);
    }
    
    void unpack_01_input_bang_bang() {
        this->unpack_01_out2_bang();
        this->unpack_01_out1_bang();
    }
    
    void message_01_out_set(const list& ) {}
    
    void message_01_trigger_bang() {
        this->message_01_out_set(this->message_01_set);
    }
    
    void message_02_out_set(const list& ) {}
    
    void message_02_trigger_bang() {
        this->message_02_out_set(this->message_02_set);
    }
    
    void numbertilde_03_input_number_set(number v) {
        this->numbertilde_03_input_number = v;
        this->numbertilde_03_outValue = v;
    
        if (this->numbertilde_03_currentMode == 0) {
            this->getEngine()->sendNumMessage(
                TAG("assign"),
                TAG("synth/number~_obj-7"),
                {this->numbertilde_03_outValue},
                this->_currentTime
            );
        }
    }
    
    void adsr_01_attack_set(number v) {
        this->adsr_01_attack = v;
    }
    
    void numberobj_03_output_set(number v) {
        this->adsr_01_attack_set(v);
    }
    
    void numberobj_03_value_set(number v) {
        this->numberobj_03_value_setter(v);
        v = this->numberobj_03_value;
        number localvalue = v;
    
        if (this->numberobj_03_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("synth/number[1]"), localvalue, this->_currentTime);
        this->numberobj_03_output_set(localvalue);
    }
    
    void adsr_01_decay_set(number v) {
        this->adsr_01_decay = v;
    }
    
    void numberobj_04_output_set(number v) {
        this->adsr_01_decay_set(v);
    }
    
    void numberobj_04_value_set(number v) {
        this->numberobj_04_value_setter(v);
        v = this->numberobj_04_value;
        number localvalue = v;
    
        if (this->numberobj_04_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("synth/number[2]"), localvalue, this->_currentTime);
        this->numberobj_04_output_set(localvalue);
    }
    
    void adsr_01_sustain_set(number v) {
        this->adsr_01_sustain = v;
    }
    
    void numberobj_05_output_set(number v) {
        this->adsr_01_sustain_set(v);
    }
    
    void numberobj_05_value_set(number v) {
        this->numberobj_05_value_setter(v);
        v = this->numberobj_05_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 1) {
            localvalue = 1;
        }
    
        if (this->numberobj_05_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("synth/flonum"), localvalue, this->_currentTime);
        this->numberobj_05_output_set(localvalue);
    }
    
    void adsr_01_release_set(number v) {
        this->adsr_01_release = v;
    }
    
    void numberobj_06_output_set(number v) {
        this->adsr_01_release_set(v);
    }
    
    void numberobj_06_value_set(number v) {
        this->numberobj_06_value_setter(v);
        v = this->numberobj_06_value;
        number localvalue = v;
    
        if (this->numberobj_06_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("synth/number[3]"), localvalue, this->_currentTime);
        this->numberobj_06_output_set(localvalue);
    }
    
    void midiouthelper_midiout_set(number ) {}
    
    void mtof_tilde_01_perform(number midivalue, SampleValue * out, Index n) {
        auto __mtof_tilde_01_base = this->mtof_tilde_01_base;
    
        for (Index i = 0; i < n; i++) {
            out[(Index)i] = this->mtof_tilde_01_innerMtoF_next(midivalue, __mtof_tilde_01_base);
        }
    }
    
    void dspexpr_04_perform(number in1, number in2, SampleValue * out1, Index n) {
        RNBO_UNUSED(in2);
        RNBO_UNUSED(in1);
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = 0 + 0;//#map:_###_obj_###_:1
        }
    }
    
    void noise_tilde_02_perform(SampleValue * out1, Index n) {
        auto __noise_tilde_02_state = this->noise_tilde_02_state;
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = xoshiro_next(__noise_tilde_02_state);
        }
    }
    
    void onepole_tilde_01_perform(const Sample * x, number freqInHz, SampleValue * out1, Index n) {
        auto __onepole_tilde_01_lastY = this->onepole_tilde_01_lastY;
        auto __onepole_tilde_01_b1 = this->onepole_tilde_01_b1;
        auto __onepole_tilde_01_a0 = this->onepole_tilde_01_a0;
        auto __onepole_tilde_01_needsUpdate = this->onepole_tilde_01_needsUpdate;
        auto __onepole_tilde_01_freq = this->onepole_tilde_01_freq;
        Index i;
    
        for (i = 0; i < n; i++) {
            if (__onepole_tilde_01_freq != freqInHz || (bool)(__onepole_tilde_01_needsUpdate)) {
                __onepole_tilde_01_freq = freqInHz;
                __onepole_tilde_01_a0 = 1 - rnbo_exp(-6.28318530717958647692 * freqInHz / this->sr);
                __onepole_tilde_01_a0 = (__onepole_tilde_01_a0 > 0.99999 ? 0.99999 : (__onepole_tilde_01_a0 < 0.00001 ? 0.00001 : __onepole_tilde_01_a0));
                __onepole_tilde_01_b1 = 1 - __onepole_tilde_01_a0;
                __onepole_tilde_01_needsUpdate = false;
            }
    
            __onepole_tilde_01_lastY = __onepole_tilde_01_a0 * x[(Index)i] + __onepole_tilde_01_b1 * __onepole_tilde_01_lastY;
            out1[(Index)i] = __onepole_tilde_01_lastY;
        }
    
        this->onepole_tilde_01_freq = __onepole_tilde_01_freq;
        this->onepole_tilde_01_needsUpdate = __onepole_tilde_01_needsUpdate;
        this->onepole_tilde_01_a0 = __onepole_tilde_01_a0;
        this->onepole_tilde_01_b1 = __onepole_tilde_01_b1;
        this->onepole_tilde_01_lastY = __onepole_tilde_01_lastY;
    }
    
    void dspexpr_05_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
        }
    }
    
    void numbertilde_03_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __numbertilde_03_currentIntervalInSamples = this->numbertilde_03_currentIntervalInSamples;
        auto __numbertilde_03_lastValue = this->numbertilde_03_lastValue;
        auto __numbertilde_03_currentInterval = this->numbertilde_03_currentInterval;
        auto __numbertilde_03_rampInSamples = this->numbertilde_03_rampInSamples;
        auto __numbertilde_03_outValue = this->numbertilde_03_outValue;
        auto __numbertilde_03_currentMode = this->numbertilde_03_currentMode;
        number monitorvalue = input_signal[0];
    
        for (Index i = 0; i < n; i++) {
            if (__numbertilde_03_currentMode == 0) {
                output[(Index)i] = this->numbertilde_03_smooth_next(
                    __numbertilde_03_outValue,
                    __numbertilde_03_rampInSamples,
                    __numbertilde_03_rampInSamples
                );
            } else {
                output[(Index)i] = input_signal[(Index)i];
            }
        }
    
        __numbertilde_03_currentInterval -= n;
    
        if (monitorvalue != __numbertilde_03_lastValue && __numbertilde_03_currentInterval <= 0) {
            __numbertilde_03_currentInterval = __numbertilde_03_currentIntervalInSamples;
    
            this->getEngine()->scheduleClockEventWithValue(
                this,
                -1494586265,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                monitorvalue
            );;
    
            __numbertilde_03_lastValue = monitorvalue;
    
            this->getEngine()->sendListMessage(
                TAG("monitor"),
                TAG("synth/number~_obj-7"),
                {monitorvalue},
                this->_currentTime
            );;
        }
    
        this->numbertilde_03_currentInterval = __numbertilde_03_currentInterval;
        this->numbertilde_03_lastValue = __numbertilde_03_lastValue;
    }
    
    void signaladder_06_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i];
        }
    }
    
    void p_01_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        ConstSampleArray<2> ins = {in1, in2};
        SampleArray<2> outs = {out1, out2};
        this->p_01->process(ins, 2, outs, 2, n);
    }
    
    void ip_02_perform(SampleValue * out, Index n) {
        auto __ip_02_lastValue = this->ip_02_lastValue;
        auto __ip_02_lastIndex = this->ip_02_lastIndex;
    
        for (Index i = 0; i < n; i++) {
            out[(Index)i] = ((SampleIndex)(i) >= __ip_02_lastIndex ? __ip_02_lastValue : this->ip_02_sigbuf[(Index)i]);
        }
    
        __ip_02_lastIndex = 0;
        this->ip_02_lastIndex = __ip_02_lastIndex;
    }
    
    void adsr_01_perform(
        number attack,
        number decay,
        number sustain,
        number release,
        const SampleValue * trigger_signal,
        SampleValue * out,
        Index n
    ) {
        auto __adsr_01_trigger_number = this->adsr_01_trigger_number;
        auto __adsr_01_time = this->adsr_01_time;
        auto __adsr_01_amplitude = this->adsr_01_amplitude;
        auto __adsr_01_outval = this->adsr_01_outval;
        auto __adsr_01_startingpoint = this->adsr_01_startingpoint;
        auto __adsr_01_phase = this->adsr_01_phase;
        auto __adsr_01_legato = this->adsr_01_legato;
        auto __adsr_01_lastTriggerVal = this->adsr_01_lastTriggerVal;
        auto __adsr_01_maxsustain = this->adsr_01_maxsustain;
        auto __adsr_01_mspersamp = this->adsr_01_mspersamp;
        bool bangMute = false;
    
        for (Index i = 0; i < n; i++) {
            number clampedattack = (attack > __adsr_01_mspersamp ? attack : __adsr_01_mspersamp);
            number clampeddecay = (decay > __adsr_01_mspersamp ? decay : __adsr_01_mspersamp);
            number clampedsustain = (__adsr_01_maxsustain > __adsr_01_mspersamp ? __adsr_01_maxsustain : __adsr_01_mspersamp);
            number clampedrelease = (release > __adsr_01_mspersamp ? release : __adsr_01_mspersamp);
            number currentTriggerVal = trigger_signal[(Index)i];
    
            if ((__adsr_01_lastTriggerVal == 0.0 && currentTriggerVal != 0.0) || this->adsr_01_triggerBuf[(Index)i] == 1) {
                if ((bool)(__adsr_01_legato)) {
                    if (__adsr_01_phase != 0) {
                        __adsr_01_startingpoint = __adsr_01_outval;
                    } else {
                        __adsr_01_startingpoint = 0;
                    }
                } else {
                    __adsr_01_startingpoint = 0;
                }
    
                __adsr_01_amplitude = currentTriggerVal;
                __adsr_01_phase = 1;
                __adsr_01_time = 0.0;
                bangMute = false;
            } else if (__adsr_01_lastTriggerVal != 0.0 && currentTriggerVal == 0.0) {
                if (__adsr_01_phase != 4 && __adsr_01_phase != 0) {
                    __adsr_01_phase = 4;
                    __adsr_01_amplitude = __adsr_01_outval;
                    __adsr_01_time = 0.0;
                }
            }
    
            __adsr_01_time += __adsr_01_mspersamp;
    
            if (__adsr_01_phase == 0) {
                __adsr_01_outval = 0;
            } else if (__adsr_01_phase == 1) {
                if (__adsr_01_time > clampedattack) {
                    __adsr_01_time -= clampedattack;
                    __adsr_01_phase = 2;
                    __adsr_01_outval = __adsr_01_amplitude;
                } else {
                    __adsr_01_outval = (__adsr_01_amplitude - __adsr_01_startingpoint) * __adsr_01_time / clampedattack + __adsr_01_startingpoint;
                }
            } else if (__adsr_01_phase == 2) {
                if (__adsr_01_time > clampeddecay) {
                    __adsr_01_time -= clampeddecay;
                    __adsr_01_phase = 3;
                    __adsr_01_outval = __adsr_01_amplitude * sustain;
                } else {
                    __adsr_01_outval = __adsr_01_amplitude * sustain + (__adsr_01_amplitude - __adsr_01_amplitude * sustain) * (1. - __adsr_01_time / clampeddecay);
                }
            } else if (__adsr_01_phase == 3) {
                if (__adsr_01_time > clampedsustain && __adsr_01_maxsustain > -1) {
                    __adsr_01_time -= clampedsustain;
                    __adsr_01_phase = 4;
                    __adsr_01_amplitude = __adsr_01_outval;
                } else {
                    __adsr_01_outval = __adsr_01_amplitude * sustain;
                }
            } else if (__adsr_01_phase == 4) {
                if (__adsr_01_time > clampedrelease) {
                    __adsr_01_time = 0;
                    __adsr_01_phase = 0;
                    __adsr_01_outval = 0;
                    __adsr_01_amplitude = 0;
                    bangMute = true;
                } else {
                    __adsr_01_outval = __adsr_01_amplitude * (1.0 - __adsr_01_time / clampedrelease);
                }
            }
    
            out[(Index)i] = __adsr_01_outval;
            this->adsr_01_triggerBuf[(Index)i] = 0;
            this->adsr_01_triggerValueBuf[(Index)i] = __adsr_01_trigger_number;
            __adsr_01_lastTriggerVal = currentTriggerVal;
        }
    
        if ((bool)(bangMute)) {
            this->getEngine()->scheduleClockEventWithValue(
                this,
                -1468824490,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                0
            );;
        }
    
        this->adsr_01_lastTriggerVal = __adsr_01_lastTriggerVal;
        this->adsr_01_phase = __adsr_01_phase;
        this->adsr_01_startingpoint = __adsr_01_startingpoint;
        this->adsr_01_outval = __adsr_01_outval;
        this->adsr_01_amplitude = __adsr_01_amplitude;
        this->adsr_01_time = __adsr_01_time;
    }
    
    void dspexpr_03_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void signaladder_07_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i];
        }
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void numberobj_03_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_03_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_03_value = localvalue;
    }
    
    void numberobj_04_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_04_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_04_value = localvalue;
    }
    
    void numberobj_05_value_setter(number v) {
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 1) {
            localvalue = 1;
        }
    
        if (this->numberobj_05_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_05_value = localvalue;
    }
    
    void numberobj_06_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_06_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_06_value = localvalue;
    }
    
    number mtof_tilde_01_innerMtoF_next(number midivalue, number tuning) {
        if (midivalue == this->mtof_tilde_01_innerMtoF_lastInValue && tuning == this->mtof_tilde_01_innerMtoF_lastTuning)
            return this->mtof_tilde_01_innerMtoF_lastOutValue;
    
        this->mtof_tilde_01_innerMtoF_lastInValue = midivalue;
        this->mtof_tilde_01_innerMtoF_lastTuning = tuning;
        number result = 0;
    
        {
            result = rnbo_exp(.057762265 * (midivalue - 69.0));
        }
    
        this->mtof_tilde_01_innerMtoF_lastOutValue = tuning * result;
        return this->mtof_tilde_01_innerMtoF_lastOutValue;
    }
    
    void mtof_tilde_01_innerMtoF_reset() {
        this->mtof_tilde_01_innerMtoF_lastInValue = 0;
        this->mtof_tilde_01_innerMtoF_lastOutValue = 0;
        this->mtof_tilde_01_innerMtoF_lastTuning = 0;
    }
    
    void mtof_tilde_01_innerScala_mid(int v) {
        this->mtof_tilde_01_innerScala_kbmMid = v;
        this->mtof_tilde_01_innerScala_updateRefFreq();
    }
    
    void mtof_tilde_01_innerScala_ref(int v) {
        this->mtof_tilde_01_innerScala_kbmRefNum = v;
        this->mtof_tilde_01_innerScala_updateRefFreq();
    }
    
    void mtof_tilde_01_innerScala_base(number v) {
        this->mtof_tilde_01_innerScala_kbmRefFreq = v;
        this->mtof_tilde_01_innerScala_updateRefFreq();
    }
    
    void mtof_tilde_01_innerScala_init() {
        list sclValid = {
            12,
            100,
            0,
            200,
            0,
            300,
            0,
            400,
            0,
            500,
            0,
            600,
            0,
            700,
            0,
            800,
            0,
            900,
            0,
            1000,
            0,
            1100,
            0,
            2,
            1
        };
    
        this->mtof_tilde_01_innerScala_updateScale(sclValid);
    }
    
    void mtof_tilde_01_innerScala_update(list scale, list map) {
        if (scale->length > 0) {
            this->mtof_tilde_01_innerScala_updateScale(scale);
        }
    
        if (map->length > 0) {
            this->mtof_tilde_01_innerScala_updateMap(map);
        }
    }
    
    number mtof_tilde_01_innerScala_mtof(number note) {
        if ((bool)(this->mtof_tilde_01_innerScala_lastValid) && this->mtof_tilde_01_innerScala_lastNote == note) {
            return this->mtof_tilde_01_innerScala_lastFreq;
        }
    
        array<int, 2> degoct = this->mtof_tilde_01_innerScala_applyKBM(note);
        number out = 0;
    
        if (degoct[1] > 0) {
            out = this->mtof_tilde_01_innerScala_applySCL(degoct[0], fract(note), this->mtof_tilde_01_innerScala_refFreq);
        }
    
        this->mtof_tilde_01_innerScala_updateLast(note, out);
        return out;
    }
    
    number mtof_tilde_01_innerScala_ftom(number hz) {
        if (hz <= 0.0) {
            return 0.0;
        }
    
        if ((bool)(this->mtof_tilde_01_innerScala_lastValid) && this->mtof_tilde_01_innerScala_lastFreq == hz) {
            return this->mtof_tilde_01_innerScala_lastNote;
        }
    
        array<number, 2> df = this->mtof_tilde_01_innerScala_hztodeg(hz);
        int degree = (int)(df[0]);
        number frac = df[1];
        number out = 0;
    
        if (this->mtof_tilde_01_innerScala_kbmSize == 0) {
            out = this->mtof_tilde_01_innerScala_kbmMid + degree;
        } else {
            array<int, 2> octdeg = this->mtof_tilde_01_innerScala_octdegree(degree, this->mtof_tilde_01_innerScala_kbmOctaveDegree);
            number oct = (number)(octdeg[0]);
            int index = (int)(octdeg[1]);
            Index entry = 0;
    
            for (Index i = 0; i < this->mtof_tilde_01_innerScala_kbmMapSize; i++) {
                if (index == this->mtof_tilde_01_innerScala_kbmValid[(Index)(i + this->mtof_tilde_01_innerScala_KBM_MAP_OFFSET)]) {
                    entry = i;
                    break;
                }
            }
    
            out = oct * this->mtof_tilde_01_innerScala_kbmSize + entry + this->mtof_tilde_01_innerScala_kbmMid;
        }
    
        out = out + frac;
        this->mtof_tilde_01_innerScala_updateLast(out, hz);
        return this->mtof_tilde_01_innerScala_lastNote;
    }
    
    int mtof_tilde_01_innerScala_updateScale(list scl) {
        if (scl->length < 1) {
            return 0;
        }
    
        number sclDataEntries = scl[0] * 2 + 1;
    
        if (sclDataEntries <= scl->length) {
            this->mtof_tilde_01_innerScala_lastValid = false;
            this->mtof_tilde_01_innerScala_sclExpMul = {};
            number last = 1;
    
            for (Index i = 1; i < sclDataEntries; i += 2) {
                const number c = (const number)(scl[(Index)(i + 0)]);
                const number d = (const number)(scl[(Index)(i + 1)]);
    
                if (d <= 0) {
                    last = c / (number)1200;
                } else {
                    last = rnbo_log2(c / d);
                }
    
                this->mtof_tilde_01_innerScala_sclExpMul->push(last);
            }
    
            this->mtof_tilde_01_innerScala_sclOctaveMul = last;
            this->mtof_tilde_01_innerScala_sclEntryCount = (int)(this->mtof_tilde_01_innerScala_sclExpMul->length);
    
            if (scl->length >= sclDataEntries + 3) {
                this->mtof_tilde_01_innerScala_kbmMid = (int)(scl[(Index)(sclDataEntries + 2)]);
                this->mtof_tilde_01_innerScala_kbmRefNum = (int)(scl[(Index)(sclDataEntries + 1)]);
                this->mtof_tilde_01_innerScala_kbmRefFreq = scl[(Index)(sclDataEntries + 0)];
                this->mtof_tilde_01_innerScala_kbmSize = (int)(0);
            }
    
            this->mtof_tilde_01_innerScala_updateRefFreq();
            return 1;
        }
    
        return 0;
    }
    
    int mtof_tilde_01_innerScala_updateMap(list kbm) {
        if (kbm->length == 1 && kbm[0] == 0.0) {
            kbm = {0.0, 0.0, 0.0, 60.0, 69.0, 440.0};
        }
    
        if (kbm->length >= 6 && kbm[0] >= 0.0) {
            this->mtof_tilde_01_innerScala_lastValid = false;
            Index size = (Index)(kbm[0]);
            int octave = 12;
    
            if (kbm->length > 6) {
                octave = (int)(kbm[6]);
            }
    
            if (size > 0 && kbm->length < this->mtof_tilde_01_innerScala_KBM_MAP_OFFSET) {
                return 0;
            }
    
            this->mtof_tilde_01_innerScala_kbmSize = (int)(size);
            this->mtof_tilde_01_innerScala_kbmMin = (int)(kbm[1]);
            this->mtof_tilde_01_innerScala_kbmMax = (int)(kbm[2]);
            this->mtof_tilde_01_innerScala_kbmMid = (int)(kbm[3]);
            this->mtof_tilde_01_innerScala_kbmRefNum = (int)(kbm[4]);
            this->mtof_tilde_01_innerScala_kbmRefFreq = kbm[5];
            this->mtof_tilde_01_innerScala_kbmOctaveDegree = octave;
            this->mtof_tilde_01_innerScala_kbmValid = kbm;
            this->mtof_tilde_01_innerScala_kbmMapSize = (kbm->length - this->mtof_tilde_01_innerScala_KBM_MAP_OFFSET > kbm->length ? kbm->length : (kbm->length - this->mtof_tilde_01_innerScala_KBM_MAP_OFFSET < 0 ? 0 : kbm->length - this->mtof_tilde_01_innerScala_KBM_MAP_OFFSET));
            this->mtof_tilde_01_innerScala_updateRefFreq();
            return 1;
        }
    
        return 0;
    }
    
    void mtof_tilde_01_innerScala_updateLast(number note, number freq) {
        this->mtof_tilde_01_innerScala_lastValid = true;
        this->mtof_tilde_01_innerScala_lastNote = note;
        this->mtof_tilde_01_innerScala_lastFreq = freq;
    }
    
    array<number, 2> mtof_tilde_01_innerScala_hztodeg(number hz) {
        number hza = rnbo_abs(hz);
    
        number octave = rnbo_floor(
            rnbo_log2(hza / this->mtof_tilde_01_innerScala_refFreq) / this->mtof_tilde_01_innerScala_sclOctaveMul
        );
    
        int i = 0;
        number frac = 0;
        number n = 0;
    
        for (; i < this->mtof_tilde_01_innerScala_sclEntryCount; i++) {
            number c = this->mtof_tilde_01_innerScala_applySCLOctIndex(octave, i + 0, 0.0, this->mtof_tilde_01_innerScala_refFreq);
            n = this->mtof_tilde_01_innerScala_applySCLOctIndex(octave, i + 1, 0.0, this->mtof_tilde_01_innerScala_refFreq);
    
            if (c <= hza && hza < n) {
                if (c != hza) {
                    frac = rnbo_log2(hza / c) / rnbo_log2(n / c);
                }
    
                break;
            }
        }
    
        if (i == this->mtof_tilde_01_innerScala_sclEntryCount && n != hza) {
            number c = n;
            n = this->mtof_tilde_01_innerScala_applySCLOctIndex(octave + 1, 0, 0.0, this->mtof_tilde_01_innerScala_refFreq);
            frac = rnbo_log2(hza / c) / rnbo_log2(n / c);
        }
    
        number deg = i + octave * this->mtof_tilde_01_innerScala_sclEntryCount;
    
        {
            deg = rnbo_fround((deg + frac) * 1 / (number)1) * 1;
            frac = 0.0;
        }
    
        return {deg, frac};
    }
    
    array<int, 2> mtof_tilde_01_innerScala_octdegree(int degree, int count) {
        int octave = 0;
        int index = 0;
    
        if (degree < 0) {
            octave = -(1 + (-1 - degree) / count);
            index = -degree % count;
    
            if (index > 0) {
                index = count - index;
            }
        } else {
            octave = degree / count;
            index = degree % count;
        }
    
        return {octave, index};
    }
    
    array<int, 2> mtof_tilde_01_innerScala_applyKBM(number note) {
        if ((this->mtof_tilde_01_innerScala_kbmMin == this->mtof_tilde_01_innerScala_kbmMax && this->mtof_tilde_01_innerScala_kbmMax == 0) || (note >= this->mtof_tilde_01_innerScala_kbmMin && note <= this->mtof_tilde_01_innerScala_kbmMax)) {
            int degree = (int)(rnbo_floor(note - this->mtof_tilde_01_innerScala_kbmMid));
    
            if (this->mtof_tilde_01_innerScala_kbmSize == 0) {
                return {degree, 1};
            }
    
            array<int, 2> octdeg = this->mtof_tilde_01_innerScala_octdegree(degree, this->mtof_tilde_01_innerScala_kbmSize);
            int octave = (int)(octdeg[0]);
            Index index = (Index)(octdeg[1]);
    
            if (this->mtof_tilde_01_innerScala_kbmMapSize > index) {
                degree = (int)(this->mtof_tilde_01_innerScala_kbmValid[(Index)(this->mtof_tilde_01_innerScala_KBM_MAP_OFFSET + index)]);
    
                if (degree >= 0) {
                    return {degree + octave * this->mtof_tilde_01_innerScala_kbmOctaveDegree, 1};
                }
            }
        }
    
        return {-1, 0};
    }
    
    number mtof_tilde_01_innerScala_applySCL(int degree, number frac, number refFreq) {
        array<int, 2> octdeg = this->mtof_tilde_01_innerScala_octdegree(degree, this->mtof_tilde_01_innerScala_sclEntryCount);
        return this->mtof_tilde_01_innerScala_applySCLOctIndex(octdeg[0], octdeg[1], frac, refFreq);
    }
    
    number mtof_tilde_01_innerScala_applySCLOctIndex(number octave, int index, number frac, number refFreq) {
        number p = 0;
    
        if (index > 0) {
            p = this->mtof_tilde_01_innerScala_sclExpMul[(Index)(index - 1)];
        }
    
        if (frac > 0) {
            p = this->linearinterp(frac, p, this->mtof_tilde_01_innerScala_sclExpMul[(Index)index]);
        } else if (frac < 0) {
            p = this->linearinterp(-frac, this->mtof_tilde_01_innerScala_sclExpMul[(Index)index], p);
        }
    
        return refFreq * rnbo_pow(2, p + octave * this->mtof_tilde_01_innerScala_sclOctaveMul);
    }
    
    void mtof_tilde_01_innerScala_updateRefFreq() {
        this->mtof_tilde_01_innerScala_lastValid = false;
        int refOffset = (int)(this->mtof_tilde_01_innerScala_kbmRefNum - this->mtof_tilde_01_innerScala_kbmMid);
    
        if (refOffset == 0) {
            this->mtof_tilde_01_innerScala_refFreq = this->mtof_tilde_01_innerScala_kbmRefFreq;
        } else {
            int base = (int)(this->mtof_tilde_01_innerScala_kbmSize);
    
            if (base < 1) {
                base = this->mtof_tilde_01_innerScala_sclEntryCount;
            }
    
            array<int, 2> octdeg = this->mtof_tilde_01_innerScala_octdegree(refOffset, base);
            number oct = (number)(octdeg[0]);
            int index = (int)(octdeg[1]);
    
            if (base > 0) {
                oct = oct + rnbo_floor(index / base);
                index = index % base;
            }
    
            if (index >= 0 && index < this->mtof_tilde_01_innerScala_kbmSize) {
                if (index < this->mtof_tilde_01_innerScala_kbmMapSize) {
                    index = (int)(this->mtof_tilde_01_innerScala_kbmValid[(Index)((Index)(index) + this->mtof_tilde_01_innerScala_KBM_MAP_OFFSET)]);
                } else {
                    index = -1;
                }
            }
    
            if (index < 0 || index > this->mtof_tilde_01_innerScala_sclExpMul->length)
                {} else {
                number p = 0;
    
                if (index > 0) {
                    p = this->mtof_tilde_01_innerScala_sclExpMul[(Index)(index - 1)];
                }
    
                this->mtof_tilde_01_innerScala_refFreq = this->mtof_tilde_01_innerScala_kbmRefFreq / rnbo_pow(2, p + oct * this->mtof_tilde_01_innerScala_sclOctaveMul);
            }
        }
    }
    
    void mtof_tilde_01_innerScala_reset() {
        this->mtof_tilde_01_innerScala_lastValid = false;
        this->mtof_tilde_01_innerScala_lastNote = 0;
        this->mtof_tilde_01_innerScala_lastFreq = 0;
        this->mtof_tilde_01_innerScala_sclEntryCount = 0;
        this->mtof_tilde_01_innerScala_sclOctaveMul = 1;
        this->mtof_tilde_01_innerScala_sclExpMul = {};
        this->mtof_tilde_01_innerScala_kbmValid = {0, 0, 0, 60, 69, 440};
        this->mtof_tilde_01_innerScala_kbmMid = 60;
        this->mtof_tilde_01_innerScala_kbmRefNum = 69;
        this->mtof_tilde_01_innerScala_kbmRefFreq = 440;
        this->mtof_tilde_01_innerScala_kbmSize = 0;
        this->mtof_tilde_01_innerScala_kbmMin = 0;
        this->mtof_tilde_01_innerScala_kbmMax = 0;
        this->mtof_tilde_01_innerScala_kbmOctaveDegree = 12;
        this->mtof_tilde_01_innerScala_kbmMapSize = 0;
        this->mtof_tilde_01_innerScala_refFreq = 261.63;
    }
    
    void mtof_tilde_01_init() {
        this->mtof_tilde_01_innerScala_update(this->mtof_tilde_01_scale, this->mtof_tilde_01_map);
    }
    
    void message_01_init() {
        this->message_01_set_set({48});
    }
    
    void onepole_tilde_01_reset() {
        this->onepole_tilde_01_lastY = 0;
        this->onepole_tilde_01_a0 = 0;
        this->onepole_tilde_01_b1 = 0;
    }
    
    void onepole_tilde_01_dspsetup(bool force) {
        if ((bool)(this->onepole_tilde_01_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->onepole_tilde_01_needsUpdate = true;
        this->onepole_tilde_01_reset();
        this->onepole_tilde_01_setupDone = true;
    }
    
    void noise_tilde_02_init() {
        this->noise_tilde_02_reset();
    }
    
    void noise_tilde_02_reset() {
        xoshiro_reset(
            systemticks() + this->voice() + this->random(0, 10000),
            this->noise_tilde_02_state
        );
    }
    
    void message_02_init() {
        this->message_02_set_set({0});
    }
    
    number numbertilde_03_smooth_d_next(number x) {
        number temp = (number)(x - this->numbertilde_03_smooth_d_prev);
        this->numbertilde_03_smooth_d_prev = x;
        return temp;
    }
    
    void numbertilde_03_smooth_d_dspsetup() {
        this->numbertilde_03_smooth_d_reset();
    }
    
    void numbertilde_03_smooth_d_reset() {
        this->numbertilde_03_smooth_d_prev = 0;
    }
    
    number numbertilde_03_smooth_next(number x, number up, number down) {
        if (this->numbertilde_03_smooth_d_next(x) != 0.) {
            if (x > this->numbertilde_03_smooth_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->numbertilde_03_smooth_index = _up;
                this->numbertilde_03_smooth_increment = (x - this->numbertilde_03_smooth_prev) / _up;
            } else if (x < this->numbertilde_03_smooth_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->numbertilde_03_smooth_index = _down;
                this->numbertilde_03_smooth_increment = (x - this->numbertilde_03_smooth_prev) / _down;
            }
        }
    
        if (this->numbertilde_03_smooth_index > 0) {
            this->numbertilde_03_smooth_prev += this->numbertilde_03_smooth_increment;
            this->numbertilde_03_smooth_index -= 1;
        } else {
            this->numbertilde_03_smooth_prev = x;
        }
    
        return this->numbertilde_03_smooth_prev;
    }
    
    void numbertilde_03_smooth_reset() {
        this->numbertilde_03_smooth_prev = 0;
        this->numbertilde_03_smooth_index = 0;
        this->numbertilde_03_smooth_increment = 0;
        this->numbertilde_03_smooth_d_reset();
    }
    
    void numbertilde_03_init() {
        this->numbertilde_03_currentMode = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("synth/number~_obj-7"), 1, this->_currentTime);
    }
    
    void numbertilde_03_dspsetup(bool force) {
        if ((bool)(this->numbertilde_03_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->numbertilde_03_currentIntervalInSamples = this->mstosamps(100);
        this->numbertilde_03_currentInterval = this->numbertilde_03_currentIntervalInSamples;
        this->numbertilde_03_rampInSamples = this->mstosamps(this->numbertilde_03_ramp);
        this->numbertilde_03_setupDone = true;
        this->numbertilde_03_smooth_d_dspsetup();
    }
    
    void param_02_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_02_value;
    }
    
    void param_02_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_02_value_set(preset["value"]);
    }
    
    void param_03_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_03_value;
    }
    
    void param_03_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_03_value_set(preset["value"]);
    }
    
    void ip_02_init() {
        this->ip_02_lastValue = this->ip_02_value;
    }
    
    void ip_02_fillSigBuf() {
        if ((bool)(this->ip_02_sigbuf)) {
            SampleIndex k = (SampleIndex)(this->sampleOffsetIntoNextAudioBuffer);
    
            if (k >= (SampleIndex)(this->vs))
                k = (SampleIndex)(this->vs) - 1;
    
            for (SampleIndex i = (SampleIndex)(this->ip_02_lastIndex); i < k; i++) {
                if (this->ip_02_resetCount > 0) {
                    this->ip_02_sigbuf[(Index)i] = 1;
                    this->ip_02_resetCount--;
                } else {
                    this->ip_02_sigbuf[(Index)i] = this->ip_02_lastValue;
                }
            }
    
            this->ip_02_lastIndex = k;
        }
    }
    
    void ip_02_dspsetup(bool force) {
        if ((bool)(this->ip_02_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->ip_02_lastIndex = 0;
        this->ip_02_setupDone = true;
    }
    
    void adsr_01_dspsetup(bool force) {
        if ((bool)(this->adsr_01_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->adsr_01_mspersamp = (number)1000 / this->sr;
        this->adsr_01_setupDone = true;
    }
    
    void numberobj_03_init() {
        this->numberobj_03_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("synth/number[1]"), 1, this->_currentTime);
    }
    
    void numberobj_03_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_03_value;
    }
    
    void numberobj_03_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_03_value_set(preset["value"]);
    }
    
    void numberobj_04_init() {
        this->numberobj_04_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("synth/number[2]"), 1, this->_currentTime);
    }
    
    void numberobj_04_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_04_value;
    }
    
    void numberobj_04_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_04_value_set(preset["value"]);
    }
    
    void numberobj_05_init() {
        this->numberobj_05_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("synth/flonum"), 1, this->_currentTime);
    }
    
    void numberobj_05_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_05_value;
    }
    
    void numberobj_05_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_05_value_set(preset["value"]);
    }
    
    void numberobj_06_init() {
        this->numberobj_06_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("synth/number[3]"), 1, this->_currentTime);
    }
    
    void numberobj_06_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_06_value;
    }
    
    void numberobj_06_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_06_value_set(preset["value"]);
    }
    
    void param_19_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_19_value;
    }
    
    void param_19_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_19_value_set(preset["value"]);
    }
    
    void param_20_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_20_value;
    }
    
    void param_20_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_20_value_set(preset["value"]);
    }
    
    void midiouthelper_sendMidi(number v) {
        this->midiouthelper_midiout_set(v);
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        mtof_tilde_01_midivalue = 0;
        mtof_tilde_01_base = 440;
        unpack_01_out1 = 0;
        unpack_01_out2 = 0;
        p_01_target = 0;
        dspexpr_03_in1 = 0;
        dspexpr_03_in2 = 0;
        dspexpr_04_in1 = 0;
        dspexpr_04_in2 = 0;
        onepole_tilde_01_x = 0;
        onepole_tilde_01_freqInHz = 0.5;
        dspexpr_05_in1 = 0;
        dspexpr_05_in2 = 0.5;
        numbertilde_03_input_number = 0;
        numbertilde_03_ramp = 0;
        param_02_value = 0.5;
        param_03_value = 0.5;
        ip_02_value = 0;
        ip_02_impulse = 0;
        expr_03_in1 = 0;
        expr_03_in2 = 127;
        expr_03_out1 = 0;
        adsr_01_trigger_number = 0;
        adsr_01_attack = 10;
        adsr_01_decay = 100;
        adsr_01_sustain = 0.8;
        adsr_01_release = 1000;
        adsr_01_legato = 0;
        adsr_01_maxsustain = -1;
        numberobj_03_value = 0;
        numberobj_03_value_setter(numberobj_03_value);
        numberobj_04_value = 0;
        numberobj_04_value_setter(numberobj_04_value);
        numberobj_05_value = 0;
        numberobj_05_value_setter(numberobj_05_value);
        numberobj_06_value = 0;
        numberobj_06_value_setter(numberobj_06_value);
        param_19_value = 0.5;
        param_20_value = 0.5;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        signals[0] = nullptr;
        signals[1] = nullptr;
        signals[2] = nullptr;
        signals[3] = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        mtof_tilde_01_innerMtoF_lastInValue = 0;
        mtof_tilde_01_innerMtoF_lastOutValue = 0;
        mtof_tilde_01_innerMtoF_lastTuning = 0;
        mtof_tilde_01_innerScala_lastValid = false;
        mtof_tilde_01_innerScala_lastNote = 0;
        mtof_tilde_01_innerScala_lastFreq = 0;
        mtof_tilde_01_innerScala_sclEntryCount = 0;
        mtof_tilde_01_innerScala_sclOctaveMul = 1;
        mtof_tilde_01_innerScala_kbmValid = { 0, 0, 0, 60, 69, 440 };
        mtof_tilde_01_innerScala_kbmMid = 60;
        mtof_tilde_01_innerScala_kbmRefNum = 69;
        mtof_tilde_01_innerScala_kbmRefFreq = 440;
        mtof_tilde_01_innerScala_kbmSize = 0;
        mtof_tilde_01_innerScala_kbmMin = 0;
        mtof_tilde_01_innerScala_kbmMax = 0;
        mtof_tilde_01_innerScala_kbmOctaveDegree = 12;
        mtof_tilde_01_innerScala_kbmMapSize = 0;
        mtof_tilde_01_innerScala_refFreq = 261.63;
        onepole_tilde_01_freq = 0;
        onepole_tilde_01_needsUpdate = false;
        onepole_tilde_01_lastY = 0;
        onepole_tilde_01_a0 = 0;
        onepole_tilde_01_b1 = 0;
        onepole_tilde_01_setupDone = false;
        numbertilde_03_currentInterval = 0;
        numbertilde_03_currentIntervalInSamples = 0;
        numbertilde_03_lastValue = 0;
        numbertilde_03_outValue = 0;
        numbertilde_03_rampInSamples = 0;
        numbertilde_03_currentMode = 0;
        numbertilde_03_smooth_d_prev = 0;
        numbertilde_03_smooth_prev = 0;
        numbertilde_03_smooth_index = 0;
        numbertilde_03_smooth_increment = 0;
        numbertilde_03_setupDone = false;
        param_02_lastValue = 0;
        param_03_lastValue = 0;
        ip_02_lastIndex = 0;
        ip_02_lastValue = 0;
        ip_02_resetCount = 0;
        ip_02_sigbuf = nullptr;
        ip_02_setupDone = false;
        adsr_01_phase = 3;
        adsr_01_mspersamp = 0;
        adsr_01_time = 0;
        adsr_01_lastTriggerVal = 0;
        adsr_01_amplitude = 0;
        adsr_01_outval = 0;
        adsr_01_startingpoint = 0;
        adsr_01_triggerBuf = nullptr;
        adsr_01_triggerValueBuf = nullptr;
        adsr_01_setupDone = false;
        numberobj_03_currentFormat = 6;
        numberobj_03_lastValue = 0;
        numberobj_04_currentFormat = 6;
        numberobj_04_lastValue = 0;
        numberobj_05_currentFormat = 6;
        numberobj_05_lastValue = 0;
        numberobj_06_currentFormat = 6;
        numberobj_06_lastValue = 0;
        param_19_lastValue = 0;
        param_20_lastValue = 0;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 0;
        parameterOffset = 0;
    }
    
    // member variables
    
        number mtof_tilde_01_midivalue;
        list mtof_tilde_01_scale;
        list mtof_tilde_01_map;
        number mtof_tilde_01_base;
        number unpack_01_out1;
        number unpack_01_out2;
        number p_01_target;
        number dspexpr_03_in1;
        number dspexpr_03_in2;
        list message_01_set;
        number dspexpr_04_in1;
        number dspexpr_04_in2;
        number onepole_tilde_01_x;
        number onepole_tilde_01_freqInHz;
        number dspexpr_05_in1;
        number dspexpr_05_in2;
        list message_02_set;
        number numbertilde_03_input_number;
        number numbertilde_03_ramp;
        number param_02_value;
        number param_03_value;
        number ip_02_value;
        number ip_02_impulse;
        number expr_03_in1;
        number expr_03_in2;
        number expr_03_out1;
        number adsr_01_trigger_number;
        number adsr_01_attack;
        number adsr_01_decay;
        number adsr_01_sustain;
        number adsr_01_release;
        number adsr_01_legato;
        number adsr_01_maxsustain;
        number numberobj_03_value;
        number numberobj_04_value;
        number numberobj_05_value;
        number numberobj_06_value;
        number param_19_value;
        number param_20_value;
        MillisecondTime _currentTime;
        UInt64 audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        SampleValue * signals[4];
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        number mtof_tilde_01_innerMtoF_lastInValue;
        number mtof_tilde_01_innerMtoF_lastOutValue;
        number mtof_tilde_01_innerMtoF_lastTuning;
        Float64BufferRef mtof_tilde_01_innerMtoF_buffer;
        const Index mtof_tilde_01_innerScala_KBM_MAP_OFFSET = 7;
        bool mtof_tilde_01_innerScala_lastValid;
        number mtof_tilde_01_innerScala_lastNote;
        number mtof_tilde_01_innerScala_lastFreq;
        int mtof_tilde_01_innerScala_sclEntryCount;
        number mtof_tilde_01_innerScala_sclOctaveMul;
        list mtof_tilde_01_innerScala_sclExpMul;
        list mtof_tilde_01_innerScala_kbmValid;
        int mtof_tilde_01_innerScala_kbmMid;
        int mtof_tilde_01_innerScala_kbmRefNum;
        number mtof_tilde_01_innerScala_kbmRefFreq;
        int mtof_tilde_01_innerScala_kbmSize;
        int mtof_tilde_01_innerScala_kbmMin;
        int mtof_tilde_01_innerScala_kbmMax;
        int mtof_tilde_01_innerScala_kbmOctaveDegree;
        Index mtof_tilde_01_innerScala_kbmMapSize;
        number mtof_tilde_01_innerScala_refFreq;
        number onepole_tilde_01_freq;
        bool onepole_tilde_01_needsUpdate;
        number onepole_tilde_01_lastY;
        number onepole_tilde_01_a0;
        number onepole_tilde_01_b1;
        bool onepole_tilde_01_setupDone;
        UInt noise_tilde_02_state[4] = { };
        SampleIndex numbertilde_03_currentInterval;
        SampleIndex numbertilde_03_currentIntervalInSamples;
        number numbertilde_03_lastValue;
        number numbertilde_03_outValue;
        number numbertilde_03_rampInSamples;
        Int numbertilde_03_currentMode;
        number numbertilde_03_smooth_d_prev;
        number numbertilde_03_smooth_prev;
        number numbertilde_03_smooth_index;
        number numbertilde_03_smooth_increment;
        bool numbertilde_03_setupDone;
        number param_02_lastValue;
        number param_03_lastValue;
        SampleIndex ip_02_lastIndex;
        number ip_02_lastValue;
        SampleIndex ip_02_resetCount;
        signal ip_02_sigbuf;
        bool ip_02_setupDone;
        Int adsr_01_phase;
        number adsr_01_mspersamp;
        number adsr_01_time;
        number adsr_01_lastTriggerVal;
        number adsr_01_amplitude;
        number adsr_01_outval;
        number adsr_01_startingpoint;
        signal adsr_01_triggerBuf;
        signal adsr_01_triggerValueBuf;
        bool adsr_01_setupDone;
        Int numberobj_03_currentFormat;
        number numberobj_03_lastValue;
        Int numberobj_04_currentFormat;
        number numberobj_04_lastValue;
        Int numberobj_05_currentFormat;
        number numberobj_05_lastValue;
        Int numberobj_06_currentFormat;
        number numberobj_06_lastValue;
        number param_19_lastValue;
        number param_20_lastValue;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
        RNBOSubpatcher_788* p_01;
    
};

class RNBOSubpatcher_812 : public PatcherInterfaceImpl {
    
    friend class rnbomatic;
    
    public:
    
    class RNBOSubpatcher_802 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_812;
            friend class rnbomatic;
            
            public:
            
            class RNBOSubpatcher_789 : public PatcherInterfaceImpl {
                        
                        friend class RNBOSubpatcher_802;
                        friend class rnbomatic;
                        
                        public:
                        
                        RNBOSubpatcher_789()
                        {
                        }
                        
                        ~RNBOSubpatcher_789()
                        {
                        }
                        
                        virtual RNBOSubpatcher_802* getPatcher() const {
                            return static_cast<RNBOSubpatcher_802 *>(_parentPatcher);
                        }
                        
                        rnbomatic* getTopLevelPatcher() {
                            return this->getPatcher()->getTopLevelPatcher();
                        }
                        
                        void cancelClockEvents()
                        {
                        }
                        
                        inline number linearinterp(number frac, number x, number y) {
                            return x + (y - x) * frac;
                        }
                        
                        inline number cubicinterp(number a, number w, number x, number y, number z) {
                            number a1 = 1. + a;
                            number aa = a * a1;
                            number b = 1. - a;
                            number b1 = 2. - a;
                            number bb = b * b1;
                            number fw = -.1666667 * bb * a;
                            number fx = .5 * bb * a1;
                            number fy = .5 * aa * b1;
                            number fz = -.1666667 * aa * b;
                            return w * fw + x * fx + y * fy + z * fz;
                        }
                        
                        inline number fastcubicinterp(number a, number w, number x, number y, number z) {
                            number a2 = a * a;
                            number f0 = z - y - w + x;
                            number f1 = w - x - f0;
                            number f2 = y - w;
                            number f3 = x;
                            return f0 * a * a2 + f1 * a2 + f2 * a + f3;
                        }
                        
                        inline number splineinterp(number a, number w, number x, number y, number z) {
                            number a2 = a * a;
                            number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
                            number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
                            number f2 = -0.5 * w + 0.5 * y;
                            return f0 * a * a2 + f1 * a2 + f2 * a + x;
                        }
                        
                        inline number spline6interp(number a, number y0, number y1, number y2, number y3, number y4, number y5) {
                            number ym2py2 = y0 + y4;
                            number ym1py1 = y1 + y3;
                            number y2mym2 = y4 - y0;
                            number y1mym1 = y3 - y1;
                            number sixthym1py1 = (number)1 / (number)6.0 * ym1py1;
                            number c0 = (number)1 / (number)120.0 * ym2py2 + (number)13 / (number)60.0 * ym1py1 + (number)11 / (number)20.0 * y2;
                            number c1 = (number)1 / (number)24.0 * y2mym2 + (number)5 / (number)12.0 * y1mym1;
                            number c2 = (number)1 / (number)12.0 * ym2py2 + sixthym1py1 - (number)1 / (number)2.0 * y2;
                            number c3 = (number)1 / (number)12.0 * y2mym2 - (number)1 / (number)6.0 * y1mym1;
                            number c4 = (number)1 / (number)24.0 * ym2py2 - sixthym1py1 + (number)1 / (number)4.0 * y2;
                            number c5 = (number)1 / (number)120.0 * (y5 - y0) + (number)1 / (number)24.0 * (y1 - y4) + (number)1 / (number)12.0 * (y3 - y2);
                            return ((((c5 * a + c4) * a + c3) * a + c2) * a + c1) * a + c0;
                        }
                        
                        inline number cosT8(number r) {
                            number t84 = 56.0;
                            number t83 = 1680.0;
                            number t82 = 20160.0;
                            number t81 = 2.4801587302e-05;
                            number t73 = 42.0;
                            number t72 = 840.0;
                            number t71 = 1.9841269841e-04;
                        
                            if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
                                number rr = r * r;
                                return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
                            } else if (r > 0.0) {
                                r -= 1.57079632679489661923132169163975144;
                                number rr = r * r;
                                return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                            } else {
                                r += 1.57079632679489661923132169163975144;
                                number rr = r * r;
                                return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                            }
                        }
                        
                        inline number cosineinterp(number frac, number x, number y) {
                            number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
                            return x * (1.0 - a2) + y * a2;
                        }
                        
                        number mstosamps(MillisecondTime ms) {
                            return ms * this->sr * 0.001;
                        }
                        
                        number samplerate() const {
                            return this->sr;
                        }
                        
                        Index vectorsize() const {
                            return this->vs;
                        }
                        
                        number maximum(number x, number y) {
                            return (x < y ? y : x);
                        }
                        
                        Index getNumMidiInputPorts() const {
                            return 0;
                        }
                        
                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                        
                        Index getNumMidiOutputPorts() const {
                            return 0;
                        }
                        
                        void process(
                            const SampleValue * const* inputs,
                            Index numInputs,
                            SampleValue * const* outputs,
                            Index numOutputs,
                            Index n
                        ) {
                            this->vs = n;
                            this->updateTime(this->getEngine()->getCurrentTime());
                            SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                            const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                            const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                            const SampleValue * in3 = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
                            const SampleValue * in4 = (numInputs >= 4 && inputs[3] ? inputs[3] : this->zeroBuffer);
                            this->welch_tilde_01_perform(in2, this->signals[0], n);
                            this->welch_tilde_02_perform(in3, this->signals[1], n);
                            this->dspexpr_08_perform(in2, in4, this->signals[2], n);
                            this->delaytilde_03_perform(this->signals[2], in1, this->signals[3], n);
                            this->dspexpr_07_perform(this->signals[3], this->signals[0], this->signals[2], n);
                            this->dspexpr_10_perform(in3, in4, this->signals[0], n);
                            this->delaytilde_04_perform(this->signals[0], in1, this->signals[3], n);
                            this->dspexpr_09_perform(this->signals[3], this->signals[1], this->signals[0], n);
                            this->dspexpr_06_perform(this->signals[2], this->signals[0], out1, n);
                            this->stackprotect_perform(n);
                            this->audioProcessSampleCount += this->vs;
                        }
                        
                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                Index i;
                        
                                for (i = 0; i < 4; i++) {
                                    this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                                }
                        
                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                this->didAllocateSignals = true;
                            }
                        
                            const bool sampleRateChanged = sampleRate != this->sr;
                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                        
                            if (sampleRateChanged || maxvsChanged) {
                                this->vs = maxBlockSize;
                                this->maxvs = maxBlockSize;
                                this->sr = sampleRate;
                                this->invsr = 1 / sampleRate;
                            }
                        
                            this->delaytilde_03_dspsetup(forceDSPSetup);
                            this->delaytilde_04_dspsetup(forceDSPSetup);
                        
                            if (sampleRateChanged)
                                this->onSampleRateChanged(sampleRate);
                        }
                        
                        void setProbingTarget(MessageTag id) {
                            switch (id) {
                            default:
                                {
                                this->setProbingIndex(-1);
                                break;
                                }
                            }
                        }
                        
                        void setProbingIndex(ProbingIndex ) {}
                        
                        Index getProbingChannels(MessageTag outletId) const {
                            RNBO_UNUSED(outletId);
                            return 0;
                        }
                        
                        Index getIsMuted()  {
                            return this->isMuted;
                        }
                        
                        void setIsMuted(Index v)  {
                            this->isMuted = v;
                        }
                        
                        void onSampleRateChanged(double ) {}
                        
                        Index getPatcherSerial() const {
                            return 0;
                        }
                        
                        void getState(PatcherStateInterface& ) {}
                        
                        void setState() {}
                        
                        void getPreset(PatcherStateInterface& ) {}
                        
                        void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                        
                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValue(index, value, time);
                        }
                        
                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                            this->setParameterValue(index, this->getParameterValue(index), time);
                        }
                        
                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValueNormalized(index, value, time);
                        }
                        
                        ParameterValue getParameterValue(ParameterIndex index)  {
                            switch (index) {
                            default:
                                {
                                return 0;
                                }
                            }
                        }
                        
                        ParameterIndex getNumSignalInParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumSignalOutParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumParameters() const {
                            return 0;
                        }
                        
                        ConstCharPointer getParameterName(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        ConstCharPointer getParameterId(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                        
                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                        }
                        
                        void setParameterOffset(ParameterIndex offset) {
                            this->parameterOffset = offset;
                        }
                        
                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                            if (steps == 1) {
                                if (normalizedValue > 0) {
                                    normalizedValue = 1.;
                                }
                            } else {
                                ParameterValue oneStep = (number)1. / (steps - 1);
                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                normalizedValue = numberOfSteps * oneStep;
                            }
                        
                            return normalizedValue;
                        }
                        
                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        void scheduleParamInit(ParameterIndex index, Index order) {
                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                        }
                        
                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                        
                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                        
                        void processOutletEvent(
                            EngineLink* sender,
                            OutletIndex index,
                            ParameterValue value,
                            MillisecondTime time
                        ) {
                            this->updateTime(time);
                            this->processOutletAtCurrentTime(sender, index, value);
                        }
                        
                        void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
                        
                        void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
                        
                        void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
                        
                        MessageTagInfo resolveTag(MessageTag tag) const {
                            switch (tag) {
                        
                            }
                        
                            return nullptr;
                        }
                        
                        DataRef* getDataRef(DataRefIndex index)  {
                            switch (index) {
                            case 6:
                                {
                                return addressOf(this->delaytilde_03_del_bufferobj);
                                break;
                                }
                            case 7:
                                {
                                return addressOf(this->delaytilde_04_del_bufferobj);
                                break;
                                }
                            default:
                                {
                                return nullptr;
                                }
                            }
                        }
                        
                        DataRefIndex getNumDataRefs() const {
                            return 2;
                        }
                        
                        void fillDataRef(DataRefIndex , DataRef& ) {}
                        
                        void zeroDataRef(DataRef& ref) {
                            ref->setZero();
                        }
                        
                        void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                            this->updateTime(time);
                        
                            if (index == 6) {
                                this->delaytilde_03_del_buffer = new Float64Buffer(this->delaytilde_03_del_bufferobj);
                            }
                        
                            if (index == 7) {
                                this->delaytilde_04_del_buffer = new Float64Buffer(this->delaytilde_04_del_bufferobj);
                            }
                        }
                        
                        void initialize() {
                            this->delaytilde_03_del_bufferobj = initDataRef("delaytilde_03_del_bufferobj", true, nullptr, "buffer~");
                            this->delaytilde_04_del_bufferobj = initDataRef("delaytilde_04_del_bufferobj", true, nullptr, "buffer~");
                            this->assign_defaults();
                            this->setState();
                            this->delaytilde_03_del_bufferobj->setIndex(6);
                            this->delaytilde_03_del_buffer = new Float64Buffer(this->delaytilde_03_del_bufferobj);
                            this->delaytilde_04_del_bufferobj->setIndex(7);
                            this->delaytilde_04_del_buffer = new Float64Buffer(this->delaytilde_04_del_bufferobj);
                        }
                        
                        protected:
                        
                        number msToSamps(MillisecondTime ms, number sampleRate) {
                            return ms * sampleRate * 0.001;
                        }
                        
                        MillisecondTime sampsToMs(SampleIndex samps) {
                            return samps * (this->invsr * 1000);
                        }
                        
                        Index getMaxBlockSize() const {
                            return this->maxvs;
                        }
                        
                        number getSampleRate() const {
                            return this->sr;
                        }
                        
                        bool hasFixedVectorSize() const {
                            return false;
                        }
                        
                        Index getNumInputChannels() const {
                            return 4;
                        }
                        
                        Index getNumOutputChannels() const {
                            return 1;
                        }
                        
                        void initializeObjects() {
                            this->delaytilde_03_del_init();
                            this->delaytilde_04_del_init();
                        }
                        
                        void sendOutlet(OutletIndex index, ParameterValue value) {
                            this->getEngine()->sendOutlet(this, index, value);
                        }
                        
                        void startup() {}
                        
                        void allocateDataRefs() {
                            this->delaytilde_03_del_buffer = this->delaytilde_03_del_buffer->allocateIfNeeded();
                        
                            if (this->delaytilde_03_del_bufferobj->hasRequestedSize()) {
                                if (this->delaytilde_03_del_bufferobj->wantsFill())
                                    this->zeroDataRef(this->delaytilde_03_del_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(6);
                            }
                        
                            this->delaytilde_04_del_buffer = this->delaytilde_04_del_buffer->allocateIfNeeded();
                        
                            if (this->delaytilde_04_del_bufferobj->hasRequestedSize()) {
                                if (this->delaytilde_04_del_bufferobj->wantsFill())
                                    this->zeroDataRef(this->delaytilde_04_del_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(7);
                            }
                        }
                        
                        void welch_tilde_01_perform(const Sample * x, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                number __x = x[(Index)i];
                                __x = (__x > 1 ? 1 : (__x < 0 ? 0 : __x));
                                number w = (__x - 0.5) * 2;
                                out1[(Index)i] = 1 - w * w;
                            }
                        }
                        
                        void welch_tilde_02_perform(const Sample * x, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                number __x = x[(Index)i];
                                __x = (__x > 1 ? 1 : (__x < 0 ? 0 : __x));
                                number w = (__x - 0.5) * 2;
                                out1[(Index)i] = 1 - w * w;
                            }
                        }
                        
                        void dspexpr_08_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                            }
                        }
                        
                        void delaytilde_03_perform(
                            const Sample * delay,
                            const SampleValue * input,
                            SampleValue * output,
                            Index n
                        ) {
                            auto __delaytilde_03_crossfadeDelay = this->delaytilde_03_crossfadeDelay;
                            auto __delaytilde_03_rampInSamples = this->delaytilde_03_rampInSamples;
                            auto __delaytilde_03_ramp = this->delaytilde_03_ramp;
                            auto __delaytilde_03_lastDelay = this->delaytilde_03_lastDelay;
                        
                            for (Index i = 0; i < n; i++) {
                                if (__delaytilde_03_lastDelay == -1) {
                                    __delaytilde_03_lastDelay = delay[(Index)i];
                                }
                        
                                if (__delaytilde_03_ramp > 0) {
                                    number factor = __delaytilde_03_ramp / __delaytilde_03_rampInSamples;
                                    output[(Index)i] = this->delaytilde_03_del_read(__delaytilde_03_crossfadeDelay, 0) * factor + this->delaytilde_03_del_read(__delaytilde_03_lastDelay, 0) * (1. - factor);
                                    __delaytilde_03_ramp--;
                                } else {
                                    number effectiveDelay = delay[(Index)i];
                        
                                    if (effectiveDelay != __delaytilde_03_lastDelay) {
                                        __delaytilde_03_ramp = __delaytilde_03_rampInSamples;
                                        __delaytilde_03_crossfadeDelay = __delaytilde_03_lastDelay;
                                        __delaytilde_03_lastDelay = effectiveDelay;
                                        output[(Index)i] = this->delaytilde_03_del_read(__delaytilde_03_crossfadeDelay, 0);
                                        __delaytilde_03_ramp--;
                                    } else {
                                        output[(Index)i] = this->delaytilde_03_del_read(effectiveDelay, 0);
                                    }
                                }
                        
                                this->delaytilde_03_del_write(input[(Index)i]);
                                this->delaytilde_03_del_step();
                            }
                        
                            this->delaytilde_03_lastDelay = __delaytilde_03_lastDelay;
                            this->delaytilde_03_ramp = __delaytilde_03_ramp;
                            this->delaytilde_03_crossfadeDelay = __delaytilde_03_crossfadeDelay;
                        }
                        
                        void dspexpr_07_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                            }
                        }
                        
                        void dspexpr_10_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                            }
                        }
                        
                        void delaytilde_04_perform(
                            const Sample * delay,
                            const SampleValue * input,
                            SampleValue * output,
                            Index n
                        ) {
                            auto __delaytilde_04_crossfadeDelay = this->delaytilde_04_crossfadeDelay;
                            auto __delaytilde_04_rampInSamples = this->delaytilde_04_rampInSamples;
                            auto __delaytilde_04_ramp = this->delaytilde_04_ramp;
                            auto __delaytilde_04_lastDelay = this->delaytilde_04_lastDelay;
                        
                            for (Index i = 0; i < n; i++) {
                                if (__delaytilde_04_lastDelay == -1) {
                                    __delaytilde_04_lastDelay = delay[(Index)i];
                                }
                        
                                if (__delaytilde_04_ramp > 0) {
                                    number factor = __delaytilde_04_ramp / __delaytilde_04_rampInSamples;
                                    output[(Index)i] = this->delaytilde_04_del_read(__delaytilde_04_crossfadeDelay, 0) * factor + this->delaytilde_04_del_read(__delaytilde_04_lastDelay, 0) * (1. - factor);
                                    __delaytilde_04_ramp--;
                                } else {
                                    number effectiveDelay = delay[(Index)i];
                        
                                    if (effectiveDelay != __delaytilde_04_lastDelay) {
                                        __delaytilde_04_ramp = __delaytilde_04_rampInSamples;
                                        __delaytilde_04_crossfadeDelay = __delaytilde_04_lastDelay;
                                        __delaytilde_04_lastDelay = effectiveDelay;
                                        output[(Index)i] = this->delaytilde_04_del_read(__delaytilde_04_crossfadeDelay, 0);
                                        __delaytilde_04_ramp--;
                                    } else {
                                        output[(Index)i] = this->delaytilde_04_del_read(effectiveDelay, 0);
                                    }
                                }
                        
                                this->delaytilde_04_del_write(input[(Index)i]);
                                this->delaytilde_04_del_step();
                            }
                        
                            this->delaytilde_04_lastDelay = __delaytilde_04_lastDelay;
                            this->delaytilde_04_ramp = __delaytilde_04_ramp;
                            this->delaytilde_04_crossfadeDelay = __delaytilde_04_crossfadeDelay;
                        }
                        
                        void dspexpr_09_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                            }
                        }
                        
                        void dspexpr_06_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] + in2[(Index)i];//#map:_###_obj_###_:1
                            }
                        }
                        
                        void stackprotect_perform(Index n) {
                            RNBO_UNUSED(n);
                            auto __stackprotect_count = this->stackprotect_count;
                            __stackprotect_count = 0;
                            this->stackprotect_count = __stackprotect_count;
                        }
                        
                        void delaytilde_03_del_step() {
                            this->delaytilde_03_del_reader++;
                        
                            if (this->delaytilde_03_del_reader >= (int)(this->delaytilde_03_del_buffer->getSize()))
                                this->delaytilde_03_del_reader = 0;
                        }
                        
                        number delaytilde_03_del_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->delaytilde_03_del_buffer->getSize()) + this->delaytilde_03_del_reader - ((size > this->delaytilde_03_del__maxdelay ? this->delaytilde_03_del__maxdelay : (size < (this->delaytilde_03_del_reader != this->delaytilde_03_del_writer) ? this->delaytilde_03_del_reader != this->delaytilde_03_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->delaytilde_03_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_03_del_wrap))
                                ), this->delaytilde_03_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_03_del_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->delaytilde_03_del_buffer->getSize()) + this->delaytilde_03_del_reader - ((size > this->delaytilde_03_del__maxdelay ? this->delaytilde_03_del__maxdelay : (size < (1 + this->delaytilde_03_del_reader != this->delaytilde_03_del_writer) ? 1 + this->delaytilde_03_del_reader != this->delaytilde_03_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->delaytilde_03_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_03_del_wrap))
                                ), this->delaytilde_03_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_03_del_wrap))
                                ), this->delaytilde_03_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_03_del_wrap))
                                ), this->delaytilde_03_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_03_del_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->delaytilde_03_del_buffer->getSize()) + this->delaytilde_03_del_reader - ((size > this->delaytilde_03_del__maxdelay ? this->delaytilde_03_del__maxdelay : (size < (1 + this->delaytilde_03_del_reader != this->delaytilde_03_del_writer) ? 1 + this->delaytilde_03_del_reader != this->delaytilde_03_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->delaytilde_03_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_03_del_wrap))
                                ), this->delaytilde_03_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_03_del_wrap))
                                ), this->delaytilde_03_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_03_del_wrap))
                                ), this->delaytilde_03_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_03_del_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->delaytilde_03_del_buffer->getSize()) + this->delaytilde_03_del_reader - ((size > this->delaytilde_03_del__maxdelay ? this->delaytilde_03_del__maxdelay : (size < (1 + this->delaytilde_03_del_reader != this->delaytilde_03_del_writer) ? 1 + this->delaytilde_03_del_reader != this->delaytilde_03_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->delaytilde_03_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_03_del_wrap))
                                ), this->delaytilde_03_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_03_del_wrap))
                                ), this->delaytilde_03_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_03_del_wrap))
                                ), this->delaytilde_03_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_03_del_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->delaytilde_03_del_buffer->getSize()) + this->delaytilde_03_del_reader - ((size > this->delaytilde_03_del__maxdelay ? this->delaytilde_03_del__maxdelay : (size < (1 + this->delaytilde_03_del_reader != this->delaytilde_03_del_writer) ? 1 + this->delaytilde_03_del_reader != this->delaytilde_03_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->delaytilde_03_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_03_del_wrap))
                                ), this->delaytilde_03_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_03_del_wrap))
                                ), this->delaytilde_03_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_03_del_wrap))
                                ), this->delaytilde_03_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_03_del_wrap))
                                ), this->delaytilde_03_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->delaytilde_03_del_wrap))
                                ), this->delaytilde_03_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->delaytilde_03_del_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->delaytilde_03_del_buffer->getSize()) + this->delaytilde_03_del_reader - ((size > this->delaytilde_03_del__maxdelay ? this->delaytilde_03_del__maxdelay : (size < (this->delaytilde_03_del_reader != this->delaytilde_03_del_writer) ? this->delaytilde_03_del_reader != this->delaytilde_03_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->delaytilde_03_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_03_del_wrap))
                                ), this->delaytilde_03_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_03_del_wrap))
                                ));
                            }
                        
                            number r = (int)(this->delaytilde_03_del_buffer->getSize()) + this->delaytilde_03_del_reader - ((size > this->delaytilde_03_del__maxdelay ? this->delaytilde_03_del__maxdelay : (size < (this->delaytilde_03_del_reader != this->delaytilde_03_del_writer) ? this->delaytilde_03_del_reader != this->delaytilde_03_del_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->delaytilde_03_del_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_03_del_wrap))
                            );
                        }
                        
                        void delaytilde_03_del_write(number v) {
                            this->delaytilde_03_del_writer = this->delaytilde_03_del_reader;
                            this->delaytilde_03_del_buffer[(Index)this->delaytilde_03_del_writer] = v;
                        }
                        
                        number delaytilde_03_del_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->delaytilde_03_del__maxdelay : size);
                            number val = this->delaytilde_03_del_read(effectiveSize, 0);
                            this->delaytilde_03_del_write(v);
                            this->delaytilde_03_del_step();
                            return val;
                        }
                        
                        array<Index, 2> delaytilde_03_del_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->delaytilde_03_del_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->delaytilde_03_del_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void delaytilde_03_del_init() {
                            auto result = this->delaytilde_03_del_calcSizeInSamples();
                            this->delaytilde_03_del__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->delaytilde_03_del_buffer->requestSize(requestedSizeInSamples, 1);
                            this->delaytilde_03_del_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void delaytilde_03_del_clear() {
                            this->delaytilde_03_del_buffer->setZero();
                        }
                        
                        void delaytilde_03_del_reset() {
                            auto result = this->delaytilde_03_del_calcSizeInSamples();
                            this->delaytilde_03_del__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->delaytilde_03_del_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->delaytilde_03_del_buffer);
                            this->delaytilde_03_del_wrap = this->delaytilde_03_del_buffer->getSize() - 1;
                            this->delaytilde_03_del_clear();
                        
                            if (this->delaytilde_03_del_reader >= this->delaytilde_03_del__maxdelay || this->delaytilde_03_del_writer >= this->delaytilde_03_del__maxdelay) {
                                this->delaytilde_03_del_reader = 0;
                                this->delaytilde_03_del_writer = 0;
                            }
                        }
                        
                        void delaytilde_03_del_dspsetup() {
                            this->delaytilde_03_del_reset();
                        }
                        
                        number delaytilde_03_del_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            return samplerate;
                        }
                        
                        number delaytilde_03_del_size() {
                            return this->delaytilde_03_del__maxdelay;
                        }
                        
                        void delaytilde_03_dspsetup(bool force) {
                            if ((bool)(this->delaytilde_03_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->delaytilde_03_rampInSamples = (long)(this->mstosamps(0));
                            this->delaytilde_03_lastDelay = -1;
                            this->delaytilde_03_setupDone = true;
                            this->delaytilde_03_del_dspsetup();
                        }
                        
                        void delaytilde_04_del_step() {
                            this->delaytilde_04_del_reader++;
                        
                            if (this->delaytilde_04_del_reader >= (int)(this->delaytilde_04_del_buffer->getSize()))
                                this->delaytilde_04_del_reader = 0;
                        }
                        
                        number delaytilde_04_del_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->delaytilde_04_del_buffer->getSize()) + this->delaytilde_04_del_reader - ((size > this->delaytilde_04_del__maxdelay ? this->delaytilde_04_del__maxdelay : (size < (this->delaytilde_04_del_reader != this->delaytilde_04_del_writer) ? this->delaytilde_04_del_reader != this->delaytilde_04_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->delaytilde_04_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_04_del_wrap))
                                ), this->delaytilde_04_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_04_del_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->delaytilde_04_del_buffer->getSize()) + this->delaytilde_04_del_reader - ((size > this->delaytilde_04_del__maxdelay ? this->delaytilde_04_del__maxdelay : (size < (1 + this->delaytilde_04_del_reader != this->delaytilde_04_del_writer) ? 1 + this->delaytilde_04_del_reader != this->delaytilde_04_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->delaytilde_04_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_04_del_wrap))
                                ), this->delaytilde_04_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_04_del_wrap))
                                ), this->delaytilde_04_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_04_del_wrap))
                                ), this->delaytilde_04_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_04_del_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->delaytilde_04_del_buffer->getSize()) + this->delaytilde_04_del_reader - ((size > this->delaytilde_04_del__maxdelay ? this->delaytilde_04_del__maxdelay : (size < (1 + this->delaytilde_04_del_reader != this->delaytilde_04_del_writer) ? 1 + this->delaytilde_04_del_reader != this->delaytilde_04_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->delaytilde_04_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_04_del_wrap))
                                ), this->delaytilde_04_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_04_del_wrap))
                                ), this->delaytilde_04_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_04_del_wrap))
                                ), this->delaytilde_04_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_04_del_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->delaytilde_04_del_buffer->getSize()) + this->delaytilde_04_del_reader - ((size > this->delaytilde_04_del__maxdelay ? this->delaytilde_04_del__maxdelay : (size < (1 + this->delaytilde_04_del_reader != this->delaytilde_04_del_writer) ? 1 + this->delaytilde_04_del_reader != this->delaytilde_04_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->delaytilde_04_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_04_del_wrap))
                                ), this->delaytilde_04_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_04_del_wrap))
                                ), this->delaytilde_04_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_04_del_wrap))
                                ), this->delaytilde_04_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_04_del_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->delaytilde_04_del_buffer->getSize()) + this->delaytilde_04_del_reader - ((size > this->delaytilde_04_del__maxdelay ? this->delaytilde_04_del__maxdelay : (size < (1 + this->delaytilde_04_del_reader != this->delaytilde_04_del_writer) ? 1 + this->delaytilde_04_del_reader != this->delaytilde_04_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->delaytilde_04_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_04_del_wrap))
                                ), this->delaytilde_04_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_04_del_wrap))
                                ), this->delaytilde_04_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_04_del_wrap))
                                ), this->delaytilde_04_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_04_del_wrap))
                                ), this->delaytilde_04_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->delaytilde_04_del_wrap))
                                ), this->delaytilde_04_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->delaytilde_04_del_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->delaytilde_04_del_buffer->getSize()) + this->delaytilde_04_del_reader - ((size > this->delaytilde_04_del__maxdelay ? this->delaytilde_04_del__maxdelay : (size < (this->delaytilde_04_del_reader != this->delaytilde_04_del_writer) ? this->delaytilde_04_del_reader != this->delaytilde_04_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->delaytilde_04_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_04_del_wrap))
                                ), this->delaytilde_04_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_04_del_wrap))
                                ));
                            }
                        
                            number r = (int)(this->delaytilde_04_del_buffer->getSize()) + this->delaytilde_04_del_reader - ((size > this->delaytilde_04_del__maxdelay ? this->delaytilde_04_del__maxdelay : (size < (this->delaytilde_04_del_reader != this->delaytilde_04_del_writer) ? this->delaytilde_04_del_reader != this->delaytilde_04_del_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->delaytilde_04_del_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_04_del_wrap))
                            );
                        }
                        
                        void delaytilde_04_del_write(number v) {
                            this->delaytilde_04_del_writer = this->delaytilde_04_del_reader;
                            this->delaytilde_04_del_buffer[(Index)this->delaytilde_04_del_writer] = v;
                        }
                        
                        number delaytilde_04_del_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->delaytilde_04_del__maxdelay : size);
                            number val = this->delaytilde_04_del_read(effectiveSize, 0);
                            this->delaytilde_04_del_write(v);
                            this->delaytilde_04_del_step();
                            return val;
                        }
                        
                        array<Index, 2> delaytilde_04_del_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->delaytilde_04_del_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->delaytilde_04_del_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void delaytilde_04_del_init() {
                            auto result = this->delaytilde_04_del_calcSizeInSamples();
                            this->delaytilde_04_del__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->delaytilde_04_del_buffer->requestSize(requestedSizeInSamples, 1);
                            this->delaytilde_04_del_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void delaytilde_04_del_clear() {
                            this->delaytilde_04_del_buffer->setZero();
                        }
                        
                        void delaytilde_04_del_reset() {
                            auto result = this->delaytilde_04_del_calcSizeInSamples();
                            this->delaytilde_04_del__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->delaytilde_04_del_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->delaytilde_04_del_buffer);
                            this->delaytilde_04_del_wrap = this->delaytilde_04_del_buffer->getSize() - 1;
                            this->delaytilde_04_del_clear();
                        
                            if (this->delaytilde_04_del_reader >= this->delaytilde_04_del__maxdelay || this->delaytilde_04_del_writer >= this->delaytilde_04_del__maxdelay) {
                                this->delaytilde_04_del_reader = 0;
                                this->delaytilde_04_del_writer = 0;
                            }
                        }
                        
                        void delaytilde_04_del_dspsetup() {
                            this->delaytilde_04_del_reset();
                        }
                        
                        number delaytilde_04_del_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            return samplerate;
                        }
                        
                        number delaytilde_04_del_size() {
                            return this->delaytilde_04_del__maxdelay;
                        }
                        
                        void delaytilde_04_dspsetup(bool force) {
                            if ((bool)(this->delaytilde_04_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->delaytilde_04_rampInSamples = (long)(this->mstosamps(0));
                            this->delaytilde_04_lastDelay = -1;
                            this->delaytilde_04_setupDone = true;
                            this->delaytilde_04_del_dspsetup();
                        }
                        
                        bool stackprotect_check() {
                            this->stackprotect_count++;
                        
                            if (this->stackprotect_count > 128) {
                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                return true;
                            }
                        
                            return false;
                        }
                        
                        void updateTime(MillisecondTime time) {
                            this->_currentTime = time;
                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                        
                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                        
                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                this->sampleOffsetIntoNextAudioBuffer = 0;
                        }
                        
                        void assign_defaults()
                        {
                            dspexpr_06_in1 = 0;
                            dspexpr_06_in2 = 0;
                            delaytilde_03_delay = 0;
                            dspexpr_07_in1 = 0;
                            dspexpr_07_in2 = 0;
                            dspexpr_08_in1 = 0;
                            dspexpr_08_in2 = 0;
                            welch_tilde_01_x = 0;
                            delaytilde_04_delay = 0;
                            dspexpr_09_in1 = 0;
                            dspexpr_09_in2 = 0;
                            dspexpr_10_in1 = 0;
                            dspexpr_10_in2 = 0;
                            welch_tilde_02_x = 0;
                            _currentTime = 0;
                            audioProcessSampleCount = 0;
                            sampleOffsetIntoNextAudioBuffer = 0;
                            zeroBuffer = nullptr;
                            dummyBuffer = nullptr;
                            signals[0] = nullptr;
                            signals[1] = nullptr;
                            signals[2] = nullptr;
                            signals[3] = nullptr;
                            didAllocateSignals = 0;
                            vs = 0;
                            maxvs = 0;
                            sr = 44100;
                            invsr = 0.00002267573696;
                            delaytilde_03_lastDelay = -1;
                            delaytilde_03_crossfadeDelay = 0;
                            delaytilde_03_ramp = 0;
                            delaytilde_03_rampInSamples = 0;
                            delaytilde_03_del__maxdelay = 0;
                            delaytilde_03_del_sizemode = 0;
                            delaytilde_03_del_wrap = 0;
                            delaytilde_03_del_reader = 0;
                            delaytilde_03_del_writer = 0;
                            delaytilde_03_setupDone = false;
                            delaytilde_04_lastDelay = -1;
                            delaytilde_04_crossfadeDelay = 0;
                            delaytilde_04_ramp = 0;
                            delaytilde_04_rampInSamples = 0;
                            delaytilde_04_del__maxdelay = 0;
                            delaytilde_04_del_sizemode = 0;
                            delaytilde_04_del_wrap = 0;
                            delaytilde_04_del_reader = 0;
                            delaytilde_04_del_writer = 0;
                            delaytilde_04_setupDone = false;
                            stackprotect_count = 0;
                            _voiceIndex = 0;
                            _noteNumber = 0;
                            isMuted = 1;
                            parameterOffset = 0;
                        }
                        
                        // member variables
                        
                            number dspexpr_06_in1;
                            number dspexpr_06_in2;
                            number delaytilde_03_delay;
                            number dspexpr_07_in1;
                            number dspexpr_07_in2;
                            number dspexpr_08_in1;
                            number dspexpr_08_in2;
                            number welch_tilde_01_x;
                            number delaytilde_04_delay;
                            number dspexpr_09_in1;
                            number dspexpr_09_in2;
                            number dspexpr_10_in1;
                            number dspexpr_10_in2;
                            number welch_tilde_02_x;
                            MillisecondTime _currentTime;
                            UInt64 audioProcessSampleCount;
                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                            signal zeroBuffer;
                            signal dummyBuffer;
                            SampleValue * signals[4];
                            bool didAllocateSignals;
                            Index vs;
                            Index maxvs;
                            number sr;
                            number invsr;
                            number delaytilde_03_lastDelay;
                            number delaytilde_03_crossfadeDelay;
                            number delaytilde_03_ramp;
                            long delaytilde_03_rampInSamples;
                            Float64BufferRef delaytilde_03_del_buffer;
                            Index delaytilde_03_del__maxdelay;
                            Int delaytilde_03_del_sizemode;
                            Index delaytilde_03_del_wrap;
                            Int delaytilde_03_del_reader;
                            Int delaytilde_03_del_writer;
                            bool delaytilde_03_setupDone;
                            number delaytilde_04_lastDelay;
                            number delaytilde_04_crossfadeDelay;
                            number delaytilde_04_ramp;
                            long delaytilde_04_rampInSamples;
                            Float64BufferRef delaytilde_04_del_buffer;
                            Index delaytilde_04_del__maxdelay;
                            Int delaytilde_04_del_sizemode;
                            Index delaytilde_04_del_wrap;
                            Int delaytilde_04_del_reader;
                            Int delaytilde_04_del_writer;
                            bool delaytilde_04_setupDone;
                            number stackprotect_count;
                            DataRef delaytilde_03_del_bufferobj;
                            DataRef delaytilde_04_del_bufferobj;
                            Index _voiceIndex;
                            Int _noteNumber;
                            Index isMuted;
                            ParameterIndex parameterOffset;
                        
            };
            
            class RNBOSubpatcher_790 : public PatcherInterfaceImpl {
                        
                        friend class RNBOSubpatcher_802;
                        friend class rnbomatic;
                        
                        public:
                        
                        RNBOSubpatcher_790()
                        {
                        }
                        
                        ~RNBOSubpatcher_790()
                        {
                        }
                        
                        virtual RNBOSubpatcher_802* getPatcher() const {
                            return static_cast<RNBOSubpatcher_802 *>(_parentPatcher);
                        }
                        
                        rnbomatic* getTopLevelPatcher() {
                            return this->getPatcher()->getTopLevelPatcher();
                        }
                        
                        void cancelClockEvents()
                        {
                        }
                        
                        inline number linearinterp(number frac, number x, number y) {
                            return x + (y - x) * frac;
                        }
                        
                        inline number cubicinterp(number a, number w, number x, number y, number z) {
                            number a1 = 1. + a;
                            number aa = a * a1;
                            number b = 1. - a;
                            number b1 = 2. - a;
                            number bb = b * b1;
                            number fw = -.1666667 * bb * a;
                            number fx = .5 * bb * a1;
                            number fy = .5 * aa * b1;
                            number fz = -.1666667 * aa * b;
                            return w * fw + x * fx + y * fy + z * fz;
                        }
                        
                        inline number fastcubicinterp(number a, number w, number x, number y, number z) {
                            number a2 = a * a;
                            number f0 = z - y - w + x;
                            number f1 = w - x - f0;
                            number f2 = y - w;
                            number f3 = x;
                            return f0 * a * a2 + f1 * a2 + f2 * a + f3;
                        }
                        
                        inline number splineinterp(number a, number w, number x, number y, number z) {
                            number a2 = a * a;
                            number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
                            number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
                            number f2 = -0.5 * w + 0.5 * y;
                            return f0 * a * a2 + f1 * a2 + f2 * a + x;
                        }
                        
                        inline number spline6interp(number a, number y0, number y1, number y2, number y3, number y4, number y5) {
                            number ym2py2 = y0 + y4;
                            number ym1py1 = y1 + y3;
                            number y2mym2 = y4 - y0;
                            number y1mym1 = y3 - y1;
                            number sixthym1py1 = (number)1 / (number)6.0 * ym1py1;
                            number c0 = (number)1 / (number)120.0 * ym2py2 + (number)13 / (number)60.0 * ym1py1 + (number)11 / (number)20.0 * y2;
                            number c1 = (number)1 / (number)24.0 * y2mym2 + (number)5 / (number)12.0 * y1mym1;
                            number c2 = (number)1 / (number)12.0 * ym2py2 + sixthym1py1 - (number)1 / (number)2.0 * y2;
                            number c3 = (number)1 / (number)12.0 * y2mym2 - (number)1 / (number)6.0 * y1mym1;
                            number c4 = (number)1 / (number)24.0 * ym2py2 - sixthym1py1 + (number)1 / (number)4.0 * y2;
                            number c5 = (number)1 / (number)120.0 * (y5 - y0) + (number)1 / (number)24.0 * (y1 - y4) + (number)1 / (number)12.0 * (y3 - y2);
                            return ((((c5 * a + c4) * a + c3) * a + c2) * a + c1) * a + c0;
                        }
                        
                        inline number cosT8(number r) {
                            number t84 = 56.0;
                            number t83 = 1680.0;
                            number t82 = 20160.0;
                            number t81 = 2.4801587302e-05;
                            number t73 = 42.0;
                            number t72 = 840.0;
                            number t71 = 1.9841269841e-04;
                        
                            if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
                                number rr = r * r;
                                return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
                            } else if (r > 0.0) {
                                r -= 1.57079632679489661923132169163975144;
                                number rr = r * r;
                                return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                            } else {
                                r += 1.57079632679489661923132169163975144;
                                number rr = r * r;
                                return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                            }
                        }
                        
                        inline number cosineinterp(number frac, number x, number y) {
                            number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
                            return x * (1.0 - a2) + y * a2;
                        }
                        
                        number mstosamps(MillisecondTime ms) {
                            return ms * this->sr * 0.001;
                        }
                        
                        number samplerate() const {
                            return this->sr;
                        }
                        
                        Index vectorsize() const {
                            return this->vs;
                        }
                        
                        number maximum(number x, number y) {
                            return (x < y ? y : x);
                        }
                        
                        Index getNumMidiInputPorts() const {
                            return 0;
                        }
                        
                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                        
                        Index getNumMidiOutputPorts() const {
                            return 0;
                        }
                        
                        void process(
                            const SampleValue * const* inputs,
                            Index numInputs,
                            SampleValue * const* outputs,
                            Index numOutputs,
                            Index n
                        ) {
                            this->vs = n;
                            this->updateTime(this->getEngine()->getCurrentTime());
                            SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                            const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                            const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                            const SampleValue * in3 = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
                            const SampleValue * in4 = (numInputs >= 4 && inputs[3] ? inputs[3] : this->zeroBuffer);
                            this->welch_tilde_03_perform(in2, this->signals[0], n);
                            this->welch_tilde_04_perform(in3, this->signals[1], n);
                            this->dspexpr_13_perform(in2, in4, this->signals[2], n);
                            this->delaytilde_05_perform(this->signals[2], in1, this->signals[3], n);
                            this->dspexpr_12_perform(this->signals[3], this->signals[0], this->signals[2], n);
                            this->dspexpr_15_perform(in3, in4, this->signals[0], n);
                            this->delaytilde_06_perform(this->signals[0], in1, this->signals[3], n);
                            this->dspexpr_14_perform(this->signals[3], this->signals[1], this->signals[0], n);
                            this->dspexpr_11_perform(this->signals[2], this->signals[0], out1, n);
                            this->stackprotect_perform(n);
                            this->audioProcessSampleCount += this->vs;
                        }
                        
                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                Index i;
                        
                                for (i = 0; i < 4; i++) {
                                    this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                                }
                        
                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                this->didAllocateSignals = true;
                            }
                        
                            const bool sampleRateChanged = sampleRate != this->sr;
                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                        
                            if (sampleRateChanged || maxvsChanged) {
                                this->vs = maxBlockSize;
                                this->maxvs = maxBlockSize;
                                this->sr = sampleRate;
                                this->invsr = 1 / sampleRate;
                            }
                        
                            this->delaytilde_05_dspsetup(forceDSPSetup);
                            this->delaytilde_06_dspsetup(forceDSPSetup);
                        
                            if (sampleRateChanged)
                                this->onSampleRateChanged(sampleRate);
                        }
                        
                        void setProbingTarget(MessageTag id) {
                            switch (id) {
                            default:
                                {
                                this->setProbingIndex(-1);
                                break;
                                }
                            }
                        }
                        
                        void setProbingIndex(ProbingIndex ) {}
                        
                        Index getProbingChannels(MessageTag outletId) const {
                            RNBO_UNUSED(outletId);
                            return 0;
                        }
                        
                        Index getIsMuted()  {
                            return this->isMuted;
                        }
                        
                        void setIsMuted(Index v)  {
                            this->isMuted = v;
                        }
                        
                        void onSampleRateChanged(double ) {}
                        
                        Index getPatcherSerial() const {
                            return 0;
                        }
                        
                        void getState(PatcherStateInterface& ) {}
                        
                        void setState() {}
                        
                        void getPreset(PatcherStateInterface& ) {}
                        
                        void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                        
                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValue(index, value, time);
                        }
                        
                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                            this->setParameterValue(index, this->getParameterValue(index), time);
                        }
                        
                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValueNormalized(index, value, time);
                        }
                        
                        ParameterValue getParameterValue(ParameterIndex index)  {
                            switch (index) {
                            default:
                                {
                                return 0;
                                }
                            }
                        }
                        
                        ParameterIndex getNumSignalInParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumSignalOutParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumParameters() const {
                            return 0;
                        }
                        
                        ConstCharPointer getParameterName(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        ConstCharPointer getParameterId(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                        
                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                        }
                        
                        void setParameterOffset(ParameterIndex offset) {
                            this->parameterOffset = offset;
                        }
                        
                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                            if (steps == 1) {
                                if (normalizedValue > 0) {
                                    normalizedValue = 1.;
                                }
                            } else {
                                ParameterValue oneStep = (number)1. / (steps - 1);
                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                normalizedValue = numberOfSteps * oneStep;
                            }
                        
                            return normalizedValue;
                        }
                        
                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        void scheduleParamInit(ParameterIndex index, Index order) {
                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                        }
                        
                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                        
                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                        
                        void processOutletEvent(
                            EngineLink* sender,
                            OutletIndex index,
                            ParameterValue value,
                            MillisecondTime time
                        ) {
                            this->updateTime(time);
                            this->processOutletAtCurrentTime(sender, index, value);
                        }
                        
                        void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
                        
                        void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
                        
                        void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
                        
                        MessageTagInfo resolveTag(MessageTag tag) const {
                            switch (tag) {
                        
                            }
                        
                            return nullptr;
                        }
                        
                        DataRef* getDataRef(DataRefIndex index)  {
                            switch (index) {
                            case 6:
                                {
                                return addressOf(this->delaytilde_05_del_bufferobj);
                                break;
                                }
                            case 7:
                                {
                                return addressOf(this->delaytilde_06_del_bufferobj);
                                break;
                                }
                            default:
                                {
                                return nullptr;
                                }
                            }
                        }
                        
                        DataRefIndex getNumDataRefs() const {
                            return 2;
                        }
                        
                        void fillDataRef(DataRefIndex , DataRef& ) {}
                        
                        void zeroDataRef(DataRef& ref) {
                            ref->setZero();
                        }
                        
                        void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                            this->updateTime(time);
                        
                            if (index == 6) {
                                this->delaytilde_05_del_buffer = new Float64Buffer(this->delaytilde_05_del_bufferobj);
                            }
                        
                            if (index == 7) {
                                this->delaytilde_06_del_buffer = new Float64Buffer(this->delaytilde_06_del_bufferobj);
                            }
                        }
                        
                        void initialize() {
                            this->delaytilde_05_del_bufferobj = initDataRef("delaytilde_05_del_bufferobj", true, nullptr, "buffer~");
                            this->delaytilde_06_del_bufferobj = initDataRef("delaytilde_06_del_bufferobj", true, nullptr, "buffer~");
                            this->assign_defaults();
                            this->setState();
                            this->delaytilde_05_del_bufferobj->setIndex(6);
                            this->delaytilde_05_del_buffer = new Float64Buffer(this->delaytilde_05_del_bufferobj);
                            this->delaytilde_06_del_bufferobj->setIndex(7);
                            this->delaytilde_06_del_buffer = new Float64Buffer(this->delaytilde_06_del_bufferobj);
                        }
                        
                        protected:
                        
                        number msToSamps(MillisecondTime ms, number sampleRate) {
                            return ms * sampleRate * 0.001;
                        }
                        
                        MillisecondTime sampsToMs(SampleIndex samps) {
                            return samps * (this->invsr * 1000);
                        }
                        
                        Index getMaxBlockSize() const {
                            return this->maxvs;
                        }
                        
                        number getSampleRate() const {
                            return this->sr;
                        }
                        
                        bool hasFixedVectorSize() const {
                            return false;
                        }
                        
                        Index getNumInputChannels() const {
                            return 4;
                        }
                        
                        Index getNumOutputChannels() const {
                            return 1;
                        }
                        
                        void initializeObjects() {
                            this->delaytilde_05_del_init();
                            this->delaytilde_06_del_init();
                        }
                        
                        void sendOutlet(OutletIndex index, ParameterValue value) {
                            this->getEngine()->sendOutlet(this, index, value);
                        }
                        
                        void startup() {}
                        
                        void allocateDataRefs() {
                            this->delaytilde_05_del_buffer = this->delaytilde_05_del_buffer->allocateIfNeeded();
                        
                            if (this->delaytilde_05_del_bufferobj->hasRequestedSize()) {
                                if (this->delaytilde_05_del_bufferobj->wantsFill())
                                    this->zeroDataRef(this->delaytilde_05_del_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(6);
                            }
                        
                            this->delaytilde_06_del_buffer = this->delaytilde_06_del_buffer->allocateIfNeeded();
                        
                            if (this->delaytilde_06_del_bufferobj->hasRequestedSize()) {
                                if (this->delaytilde_06_del_bufferobj->wantsFill())
                                    this->zeroDataRef(this->delaytilde_06_del_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(7);
                            }
                        }
                        
                        void welch_tilde_03_perform(const Sample * x, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                number __x = x[(Index)i];
                                __x = (__x > 1 ? 1 : (__x < 0 ? 0 : __x));
                                number w = (__x - 0.5) * 2;
                                out1[(Index)i] = 1 - w * w;
                            }
                        }
                        
                        void welch_tilde_04_perform(const Sample * x, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                number __x = x[(Index)i];
                                __x = (__x > 1 ? 1 : (__x < 0 ? 0 : __x));
                                number w = (__x - 0.5) * 2;
                                out1[(Index)i] = 1 - w * w;
                            }
                        }
                        
                        void dspexpr_13_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                            }
                        }
                        
                        void delaytilde_05_perform(
                            const Sample * delay,
                            const SampleValue * input,
                            SampleValue * output,
                            Index n
                        ) {
                            auto __delaytilde_05_crossfadeDelay = this->delaytilde_05_crossfadeDelay;
                            auto __delaytilde_05_rampInSamples = this->delaytilde_05_rampInSamples;
                            auto __delaytilde_05_ramp = this->delaytilde_05_ramp;
                            auto __delaytilde_05_lastDelay = this->delaytilde_05_lastDelay;
                        
                            for (Index i = 0; i < n; i++) {
                                if (__delaytilde_05_lastDelay == -1) {
                                    __delaytilde_05_lastDelay = delay[(Index)i];
                                }
                        
                                if (__delaytilde_05_ramp > 0) {
                                    number factor = __delaytilde_05_ramp / __delaytilde_05_rampInSamples;
                                    output[(Index)i] = this->delaytilde_05_del_read(__delaytilde_05_crossfadeDelay, 0) * factor + this->delaytilde_05_del_read(__delaytilde_05_lastDelay, 0) * (1. - factor);
                                    __delaytilde_05_ramp--;
                                } else {
                                    number effectiveDelay = delay[(Index)i];
                        
                                    if (effectiveDelay != __delaytilde_05_lastDelay) {
                                        __delaytilde_05_ramp = __delaytilde_05_rampInSamples;
                                        __delaytilde_05_crossfadeDelay = __delaytilde_05_lastDelay;
                                        __delaytilde_05_lastDelay = effectiveDelay;
                                        output[(Index)i] = this->delaytilde_05_del_read(__delaytilde_05_crossfadeDelay, 0);
                                        __delaytilde_05_ramp--;
                                    } else {
                                        output[(Index)i] = this->delaytilde_05_del_read(effectiveDelay, 0);
                                    }
                                }
                        
                                this->delaytilde_05_del_write(input[(Index)i]);
                                this->delaytilde_05_del_step();
                            }
                        
                            this->delaytilde_05_lastDelay = __delaytilde_05_lastDelay;
                            this->delaytilde_05_ramp = __delaytilde_05_ramp;
                            this->delaytilde_05_crossfadeDelay = __delaytilde_05_crossfadeDelay;
                        }
                        
                        void dspexpr_12_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                            }
                        }
                        
                        void dspexpr_15_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                            }
                        }
                        
                        void delaytilde_06_perform(
                            const Sample * delay,
                            const SampleValue * input,
                            SampleValue * output,
                            Index n
                        ) {
                            auto __delaytilde_06_crossfadeDelay = this->delaytilde_06_crossfadeDelay;
                            auto __delaytilde_06_rampInSamples = this->delaytilde_06_rampInSamples;
                            auto __delaytilde_06_ramp = this->delaytilde_06_ramp;
                            auto __delaytilde_06_lastDelay = this->delaytilde_06_lastDelay;
                        
                            for (Index i = 0; i < n; i++) {
                                if (__delaytilde_06_lastDelay == -1) {
                                    __delaytilde_06_lastDelay = delay[(Index)i];
                                }
                        
                                if (__delaytilde_06_ramp > 0) {
                                    number factor = __delaytilde_06_ramp / __delaytilde_06_rampInSamples;
                                    output[(Index)i] = this->delaytilde_06_del_read(__delaytilde_06_crossfadeDelay, 0) * factor + this->delaytilde_06_del_read(__delaytilde_06_lastDelay, 0) * (1. - factor);
                                    __delaytilde_06_ramp--;
                                } else {
                                    number effectiveDelay = delay[(Index)i];
                        
                                    if (effectiveDelay != __delaytilde_06_lastDelay) {
                                        __delaytilde_06_ramp = __delaytilde_06_rampInSamples;
                                        __delaytilde_06_crossfadeDelay = __delaytilde_06_lastDelay;
                                        __delaytilde_06_lastDelay = effectiveDelay;
                                        output[(Index)i] = this->delaytilde_06_del_read(__delaytilde_06_crossfadeDelay, 0);
                                        __delaytilde_06_ramp--;
                                    } else {
                                        output[(Index)i] = this->delaytilde_06_del_read(effectiveDelay, 0);
                                    }
                                }
                        
                                this->delaytilde_06_del_write(input[(Index)i]);
                                this->delaytilde_06_del_step();
                            }
                        
                            this->delaytilde_06_lastDelay = __delaytilde_06_lastDelay;
                            this->delaytilde_06_ramp = __delaytilde_06_ramp;
                            this->delaytilde_06_crossfadeDelay = __delaytilde_06_crossfadeDelay;
                        }
                        
                        void dspexpr_14_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                            }
                        }
                        
                        void dspexpr_11_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] + in2[(Index)i];//#map:_###_obj_###_:1
                            }
                        }
                        
                        void stackprotect_perform(Index n) {
                            RNBO_UNUSED(n);
                            auto __stackprotect_count = this->stackprotect_count;
                            __stackprotect_count = 0;
                            this->stackprotect_count = __stackprotect_count;
                        }
                        
                        void delaytilde_05_del_step() {
                            this->delaytilde_05_del_reader++;
                        
                            if (this->delaytilde_05_del_reader >= (int)(this->delaytilde_05_del_buffer->getSize()))
                                this->delaytilde_05_del_reader = 0;
                        }
                        
                        number delaytilde_05_del_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->delaytilde_05_del_buffer->getSize()) + this->delaytilde_05_del_reader - ((size > this->delaytilde_05_del__maxdelay ? this->delaytilde_05_del__maxdelay : (size < (this->delaytilde_05_del_reader != this->delaytilde_05_del_writer) ? this->delaytilde_05_del_reader != this->delaytilde_05_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->delaytilde_05_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_05_del_wrap))
                                ), this->delaytilde_05_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_05_del_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->delaytilde_05_del_buffer->getSize()) + this->delaytilde_05_del_reader - ((size > this->delaytilde_05_del__maxdelay ? this->delaytilde_05_del__maxdelay : (size < (1 + this->delaytilde_05_del_reader != this->delaytilde_05_del_writer) ? 1 + this->delaytilde_05_del_reader != this->delaytilde_05_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->delaytilde_05_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_05_del_wrap))
                                ), this->delaytilde_05_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_05_del_wrap))
                                ), this->delaytilde_05_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_05_del_wrap))
                                ), this->delaytilde_05_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_05_del_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->delaytilde_05_del_buffer->getSize()) + this->delaytilde_05_del_reader - ((size > this->delaytilde_05_del__maxdelay ? this->delaytilde_05_del__maxdelay : (size < (1 + this->delaytilde_05_del_reader != this->delaytilde_05_del_writer) ? 1 + this->delaytilde_05_del_reader != this->delaytilde_05_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->delaytilde_05_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_05_del_wrap))
                                ), this->delaytilde_05_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_05_del_wrap))
                                ), this->delaytilde_05_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_05_del_wrap))
                                ), this->delaytilde_05_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_05_del_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->delaytilde_05_del_buffer->getSize()) + this->delaytilde_05_del_reader - ((size > this->delaytilde_05_del__maxdelay ? this->delaytilde_05_del__maxdelay : (size < (1 + this->delaytilde_05_del_reader != this->delaytilde_05_del_writer) ? 1 + this->delaytilde_05_del_reader != this->delaytilde_05_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->delaytilde_05_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_05_del_wrap))
                                ), this->delaytilde_05_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_05_del_wrap))
                                ), this->delaytilde_05_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_05_del_wrap))
                                ), this->delaytilde_05_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_05_del_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->delaytilde_05_del_buffer->getSize()) + this->delaytilde_05_del_reader - ((size > this->delaytilde_05_del__maxdelay ? this->delaytilde_05_del__maxdelay : (size < (1 + this->delaytilde_05_del_reader != this->delaytilde_05_del_writer) ? 1 + this->delaytilde_05_del_reader != this->delaytilde_05_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->delaytilde_05_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_05_del_wrap))
                                ), this->delaytilde_05_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_05_del_wrap))
                                ), this->delaytilde_05_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_05_del_wrap))
                                ), this->delaytilde_05_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_05_del_wrap))
                                ), this->delaytilde_05_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->delaytilde_05_del_wrap))
                                ), this->delaytilde_05_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->delaytilde_05_del_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->delaytilde_05_del_buffer->getSize()) + this->delaytilde_05_del_reader - ((size > this->delaytilde_05_del__maxdelay ? this->delaytilde_05_del__maxdelay : (size < (this->delaytilde_05_del_reader != this->delaytilde_05_del_writer) ? this->delaytilde_05_del_reader != this->delaytilde_05_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->delaytilde_05_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_05_del_wrap))
                                ), this->delaytilde_05_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_05_del_wrap))
                                ));
                            }
                        
                            number r = (int)(this->delaytilde_05_del_buffer->getSize()) + this->delaytilde_05_del_reader - ((size > this->delaytilde_05_del__maxdelay ? this->delaytilde_05_del__maxdelay : (size < (this->delaytilde_05_del_reader != this->delaytilde_05_del_writer) ? this->delaytilde_05_del_reader != this->delaytilde_05_del_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->delaytilde_05_del_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_05_del_wrap))
                            );
                        }
                        
                        void delaytilde_05_del_write(number v) {
                            this->delaytilde_05_del_writer = this->delaytilde_05_del_reader;
                            this->delaytilde_05_del_buffer[(Index)this->delaytilde_05_del_writer] = v;
                        }
                        
                        number delaytilde_05_del_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->delaytilde_05_del__maxdelay : size);
                            number val = this->delaytilde_05_del_read(effectiveSize, 0);
                            this->delaytilde_05_del_write(v);
                            this->delaytilde_05_del_step();
                            return val;
                        }
                        
                        array<Index, 2> delaytilde_05_del_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->delaytilde_05_del_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->delaytilde_05_del_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void delaytilde_05_del_init() {
                            auto result = this->delaytilde_05_del_calcSizeInSamples();
                            this->delaytilde_05_del__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->delaytilde_05_del_buffer->requestSize(requestedSizeInSamples, 1);
                            this->delaytilde_05_del_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void delaytilde_05_del_clear() {
                            this->delaytilde_05_del_buffer->setZero();
                        }
                        
                        void delaytilde_05_del_reset() {
                            auto result = this->delaytilde_05_del_calcSizeInSamples();
                            this->delaytilde_05_del__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->delaytilde_05_del_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->delaytilde_05_del_buffer);
                            this->delaytilde_05_del_wrap = this->delaytilde_05_del_buffer->getSize() - 1;
                            this->delaytilde_05_del_clear();
                        
                            if (this->delaytilde_05_del_reader >= this->delaytilde_05_del__maxdelay || this->delaytilde_05_del_writer >= this->delaytilde_05_del__maxdelay) {
                                this->delaytilde_05_del_reader = 0;
                                this->delaytilde_05_del_writer = 0;
                            }
                        }
                        
                        void delaytilde_05_del_dspsetup() {
                            this->delaytilde_05_del_reset();
                        }
                        
                        number delaytilde_05_del_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            return samplerate;
                        }
                        
                        number delaytilde_05_del_size() {
                            return this->delaytilde_05_del__maxdelay;
                        }
                        
                        void delaytilde_05_dspsetup(bool force) {
                            if ((bool)(this->delaytilde_05_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->delaytilde_05_rampInSamples = (long)(this->mstosamps(0));
                            this->delaytilde_05_lastDelay = -1;
                            this->delaytilde_05_setupDone = true;
                            this->delaytilde_05_del_dspsetup();
                        }
                        
                        void delaytilde_06_del_step() {
                            this->delaytilde_06_del_reader++;
                        
                            if (this->delaytilde_06_del_reader >= (int)(this->delaytilde_06_del_buffer->getSize()))
                                this->delaytilde_06_del_reader = 0;
                        }
                        
                        number delaytilde_06_del_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->delaytilde_06_del_buffer->getSize()) + this->delaytilde_06_del_reader - ((size > this->delaytilde_06_del__maxdelay ? this->delaytilde_06_del__maxdelay : (size < (this->delaytilde_06_del_reader != this->delaytilde_06_del_writer) ? this->delaytilde_06_del_reader != this->delaytilde_06_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->delaytilde_06_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_06_del_wrap))
                                ), this->delaytilde_06_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_06_del_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->delaytilde_06_del_buffer->getSize()) + this->delaytilde_06_del_reader - ((size > this->delaytilde_06_del__maxdelay ? this->delaytilde_06_del__maxdelay : (size < (1 + this->delaytilde_06_del_reader != this->delaytilde_06_del_writer) ? 1 + this->delaytilde_06_del_reader != this->delaytilde_06_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->delaytilde_06_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_06_del_wrap))
                                ), this->delaytilde_06_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_06_del_wrap))
                                ), this->delaytilde_06_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_06_del_wrap))
                                ), this->delaytilde_06_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_06_del_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->delaytilde_06_del_buffer->getSize()) + this->delaytilde_06_del_reader - ((size > this->delaytilde_06_del__maxdelay ? this->delaytilde_06_del__maxdelay : (size < (1 + this->delaytilde_06_del_reader != this->delaytilde_06_del_writer) ? 1 + this->delaytilde_06_del_reader != this->delaytilde_06_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->delaytilde_06_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_06_del_wrap))
                                ), this->delaytilde_06_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_06_del_wrap))
                                ), this->delaytilde_06_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_06_del_wrap))
                                ), this->delaytilde_06_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_06_del_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->delaytilde_06_del_buffer->getSize()) + this->delaytilde_06_del_reader - ((size > this->delaytilde_06_del__maxdelay ? this->delaytilde_06_del__maxdelay : (size < (1 + this->delaytilde_06_del_reader != this->delaytilde_06_del_writer) ? 1 + this->delaytilde_06_del_reader != this->delaytilde_06_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->delaytilde_06_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_06_del_wrap))
                                ), this->delaytilde_06_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_06_del_wrap))
                                ), this->delaytilde_06_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_06_del_wrap))
                                ), this->delaytilde_06_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_06_del_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->delaytilde_06_del_buffer->getSize()) + this->delaytilde_06_del_reader - ((size > this->delaytilde_06_del__maxdelay ? this->delaytilde_06_del__maxdelay : (size < (1 + this->delaytilde_06_del_reader != this->delaytilde_06_del_writer) ? 1 + this->delaytilde_06_del_reader != this->delaytilde_06_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->delaytilde_06_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_06_del_wrap))
                                ), this->delaytilde_06_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_06_del_wrap))
                                ), this->delaytilde_06_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_06_del_wrap))
                                ), this->delaytilde_06_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_06_del_wrap))
                                ), this->delaytilde_06_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->delaytilde_06_del_wrap))
                                ), this->delaytilde_06_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->delaytilde_06_del_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->delaytilde_06_del_buffer->getSize()) + this->delaytilde_06_del_reader - ((size > this->delaytilde_06_del__maxdelay ? this->delaytilde_06_del__maxdelay : (size < (this->delaytilde_06_del_reader != this->delaytilde_06_del_writer) ? this->delaytilde_06_del_reader != this->delaytilde_06_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->delaytilde_06_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_06_del_wrap))
                                ), this->delaytilde_06_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_06_del_wrap))
                                ));
                            }
                        
                            number r = (int)(this->delaytilde_06_del_buffer->getSize()) + this->delaytilde_06_del_reader - ((size > this->delaytilde_06_del__maxdelay ? this->delaytilde_06_del__maxdelay : (size < (this->delaytilde_06_del_reader != this->delaytilde_06_del_writer) ? this->delaytilde_06_del_reader != this->delaytilde_06_del_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->delaytilde_06_del_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_06_del_wrap))
                            );
                        }
                        
                        void delaytilde_06_del_write(number v) {
                            this->delaytilde_06_del_writer = this->delaytilde_06_del_reader;
                            this->delaytilde_06_del_buffer[(Index)this->delaytilde_06_del_writer] = v;
                        }
                        
                        number delaytilde_06_del_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->delaytilde_06_del__maxdelay : size);
                            number val = this->delaytilde_06_del_read(effectiveSize, 0);
                            this->delaytilde_06_del_write(v);
                            this->delaytilde_06_del_step();
                            return val;
                        }
                        
                        array<Index, 2> delaytilde_06_del_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->delaytilde_06_del_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->delaytilde_06_del_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void delaytilde_06_del_init() {
                            auto result = this->delaytilde_06_del_calcSizeInSamples();
                            this->delaytilde_06_del__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->delaytilde_06_del_buffer->requestSize(requestedSizeInSamples, 1);
                            this->delaytilde_06_del_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void delaytilde_06_del_clear() {
                            this->delaytilde_06_del_buffer->setZero();
                        }
                        
                        void delaytilde_06_del_reset() {
                            auto result = this->delaytilde_06_del_calcSizeInSamples();
                            this->delaytilde_06_del__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->delaytilde_06_del_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->delaytilde_06_del_buffer);
                            this->delaytilde_06_del_wrap = this->delaytilde_06_del_buffer->getSize() - 1;
                            this->delaytilde_06_del_clear();
                        
                            if (this->delaytilde_06_del_reader >= this->delaytilde_06_del__maxdelay || this->delaytilde_06_del_writer >= this->delaytilde_06_del__maxdelay) {
                                this->delaytilde_06_del_reader = 0;
                                this->delaytilde_06_del_writer = 0;
                            }
                        }
                        
                        void delaytilde_06_del_dspsetup() {
                            this->delaytilde_06_del_reset();
                        }
                        
                        number delaytilde_06_del_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            return samplerate;
                        }
                        
                        number delaytilde_06_del_size() {
                            return this->delaytilde_06_del__maxdelay;
                        }
                        
                        void delaytilde_06_dspsetup(bool force) {
                            if ((bool)(this->delaytilde_06_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->delaytilde_06_rampInSamples = (long)(this->mstosamps(0));
                            this->delaytilde_06_lastDelay = -1;
                            this->delaytilde_06_setupDone = true;
                            this->delaytilde_06_del_dspsetup();
                        }
                        
                        bool stackprotect_check() {
                            this->stackprotect_count++;
                        
                            if (this->stackprotect_count > 128) {
                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                return true;
                            }
                        
                            return false;
                        }
                        
                        void updateTime(MillisecondTime time) {
                            this->_currentTime = time;
                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                        
                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                        
                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                this->sampleOffsetIntoNextAudioBuffer = 0;
                        }
                        
                        void assign_defaults()
                        {
                            dspexpr_11_in1 = 0;
                            dspexpr_11_in2 = 0;
                            delaytilde_05_delay = 0;
                            dspexpr_12_in1 = 0;
                            dspexpr_12_in2 = 0;
                            dspexpr_13_in1 = 0;
                            dspexpr_13_in2 = 0;
                            welch_tilde_03_x = 0;
                            delaytilde_06_delay = 0;
                            dspexpr_14_in1 = 0;
                            dspexpr_14_in2 = 0;
                            dspexpr_15_in1 = 0;
                            dspexpr_15_in2 = 0;
                            welch_tilde_04_x = 0;
                            _currentTime = 0;
                            audioProcessSampleCount = 0;
                            sampleOffsetIntoNextAudioBuffer = 0;
                            zeroBuffer = nullptr;
                            dummyBuffer = nullptr;
                            signals[0] = nullptr;
                            signals[1] = nullptr;
                            signals[2] = nullptr;
                            signals[3] = nullptr;
                            didAllocateSignals = 0;
                            vs = 0;
                            maxvs = 0;
                            sr = 44100;
                            invsr = 0.00002267573696;
                            delaytilde_05_lastDelay = -1;
                            delaytilde_05_crossfadeDelay = 0;
                            delaytilde_05_ramp = 0;
                            delaytilde_05_rampInSamples = 0;
                            delaytilde_05_del__maxdelay = 0;
                            delaytilde_05_del_sizemode = 0;
                            delaytilde_05_del_wrap = 0;
                            delaytilde_05_del_reader = 0;
                            delaytilde_05_del_writer = 0;
                            delaytilde_05_setupDone = false;
                            delaytilde_06_lastDelay = -1;
                            delaytilde_06_crossfadeDelay = 0;
                            delaytilde_06_ramp = 0;
                            delaytilde_06_rampInSamples = 0;
                            delaytilde_06_del__maxdelay = 0;
                            delaytilde_06_del_sizemode = 0;
                            delaytilde_06_del_wrap = 0;
                            delaytilde_06_del_reader = 0;
                            delaytilde_06_del_writer = 0;
                            delaytilde_06_setupDone = false;
                            stackprotect_count = 0;
                            _voiceIndex = 0;
                            _noteNumber = 0;
                            isMuted = 1;
                            parameterOffset = 0;
                        }
                        
                        // member variables
                        
                            number dspexpr_11_in1;
                            number dspexpr_11_in2;
                            number delaytilde_05_delay;
                            number dspexpr_12_in1;
                            number dspexpr_12_in2;
                            number dspexpr_13_in1;
                            number dspexpr_13_in2;
                            number welch_tilde_03_x;
                            number delaytilde_06_delay;
                            number dspexpr_14_in1;
                            number dspexpr_14_in2;
                            number dspexpr_15_in1;
                            number dspexpr_15_in2;
                            number welch_tilde_04_x;
                            MillisecondTime _currentTime;
                            UInt64 audioProcessSampleCount;
                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                            signal zeroBuffer;
                            signal dummyBuffer;
                            SampleValue * signals[4];
                            bool didAllocateSignals;
                            Index vs;
                            Index maxvs;
                            number sr;
                            number invsr;
                            number delaytilde_05_lastDelay;
                            number delaytilde_05_crossfadeDelay;
                            number delaytilde_05_ramp;
                            long delaytilde_05_rampInSamples;
                            Float64BufferRef delaytilde_05_del_buffer;
                            Index delaytilde_05_del__maxdelay;
                            Int delaytilde_05_del_sizemode;
                            Index delaytilde_05_del_wrap;
                            Int delaytilde_05_del_reader;
                            Int delaytilde_05_del_writer;
                            bool delaytilde_05_setupDone;
                            number delaytilde_06_lastDelay;
                            number delaytilde_06_crossfadeDelay;
                            number delaytilde_06_ramp;
                            long delaytilde_06_rampInSamples;
                            Float64BufferRef delaytilde_06_del_buffer;
                            Index delaytilde_06_del__maxdelay;
                            Int delaytilde_06_del_sizemode;
                            Index delaytilde_06_del_wrap;
                            Int delaytilde_06_del_reader;
                            Int delaytilde_06_del_writer;
                            bool delaytilde_06_setupDone;
                            number stackprotect_count;
                            DataRef delaytilde_05_del_bufferobj;
                            DataRef delaytilde_06_del_bufferobj;
                            Index _voiceIndex;
                            Int _noteNumber;
                            Index isMuted;
                            ParameterIndex parameterOffset;
                        
            };
            
            RNBOSubpatcher_802()
            {
            }
            
            ~RNBOSubpatcher_802()
            {
                delete this->p_02;
                delete this->p_03;
            }
            
            virtual RNBOSubpatcher_812* getPatcher() const {
                return static_cast<RNBOSubpatcher_812 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
                getEngine()->flushClockEvents(this, 29237386, false);
                getEngine()->flushClockEvents(this, 892732297, false);
                getEngine()->flushClockEvents(this, 1114681293, false);
                getEngine()->flushClockEvents(this, -1621164530, false);
                getEngine()->flushClockEvents(this, -62043057, false);
            }
            
            SampleIndex currentsampletime() {
                return this->audioProcessSampleCount + this->sampleOffsetIntoNextAudioBuffer;
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            number samplerate() const {
                return this->sr;
            }
            
            inline number safediv(number num, number denom) {
                return (denom == 0.0 ? 0.0 : num / denom);
            }
            
            number safepow(number base, number exponent) {
                return fixnan(rnbo_pow(base, exponent));
            }
            
            number scale(
                number x,
                number lowin,
                number hiin,
                number lowout,
                number highout,
                number pow
            ) {
                auto inscale = this->safediv(1., hiin - lowin);
                number outdiff = highout - lowout;
                number value = (x - lowin) * inscale;
            
                if (pow != 1) {
                    if (value > 0)
                        value = this->safepow(value, pow);
                    else
                        value = -this->safepow(-value, pow);
                }
            
                value = value * outdiff + lowout;
                return value;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                this->linetilde_01_perform(this->signals[0], n);
                this->phasor_01_perform(this->signals[0], this->signals[1], n);
                this->dspexpr_16_perform(this->signals[1], this->dspexpr_16_in2, this->signals[0], n);
            
                this->wrap_tilde_01_perform(
                    this->signals[0],
                    this->wrap_tilde_01_low,
                    this->wrap_tilde_01_high,
                    this->signals[2],
                    n
                );
            
                this->linetilde_02_perform(this->signals[0], n);
            
                this->p_03_perform(
                    in2,
                    this->signals[1],
                    this->signals[2],
                    this->signals[0],
                    this->signals[3],
                    n
                );
            
                this->p_02_perform(
                    in1,
                    this->signals[1],
                    this->signals[2],
                    this->signals[0],
                    this->signals[4],
                    n
                );
            
                this->linetilde_03_perform(this->signals[0], n);
                this->onepole_tilde_02_perform(this->signals[4], this->signals[0], out1, n);
                this->onepole_tilde_03_perform(this->signals[3], this->signals[0], out2, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 5; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->phasor_01_sigbuf = resizeSignal(this->phasor_01_sigbuf, this->maxvs, maxBlockSize);
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->phasor_01_dspsetup(forceDSPSetup);
                this->onepole_tilde_02_dspsetup(forceDSPSetup);
                this->onepole_tilde_03_dspsetup(forceDSPSetup);
                this->p_02->prepareToProcess(sampleRate, maxBlockSize, force);
                this->p_03->prepareToProcess(sampleRate, maxBlockSize, force);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {
                this->p_02 = new RNBOSubpatcher_789();
                this->p_02->setEngineAndPatcher(this->getEngine(), this);
                this->p_02->initialize();
                this->p_02->setParameterOffset(this->getParameterOffset(this->p_02));
                this->p_03 = new RNBOSubpatcher_790();
                this->p_03->setEngineAndPatcher(this->getEngine(), this);
                this->p_03->initialize();
                this->p_03->setParameterOffset(this->getParameterOffset(this->p_03));
            }
            
            void getPreset(PatcherStateInterface& preset) {
                this->p_02->getPreset(getSubState(getSubState(preset, "__sps"), "Shift~[1]"));
                this->p_03->getPreset(getSubState(getSubState(preset, "__sps"), "Shift~"));
            }
            
            void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                RNBO_UNUSED(v);
                this->updateTime(time);
            
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_02->getNumParameters())
                        this->p_02->setParameterValue(index, v, time);
            
                    index -= this->p_02->getNumParameters();
            
                    if (index < this->p_03->getNumParameters())
                        this->p_03->setParameterValue(index, v, time);
            
                    break;
                    }
                }
            }
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_02->getNumParameters())
                        return this->p_02->getParameterValue(index);
            
                    index -= this->p_02->getNumParameters();
            
                    if (index < this->p_03->getNumParameters())
                        return this->p_03->getParameterValue(index);
            
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0 + this->p_02->getNumParameters() + this->p_03->getNumParameters();
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_02->getNumParameters())
                        return this->p_02->getParameterName(index);
            
                    index -= this->p_02->getNumParameters();
            
                    if (index < this->p_03->getNumParameters())
                        return this->p_03->getParameterName(index);
            
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_02->getNumParameters())
                        return this->p_02->getParameterId(index);
            
                    index -= this->p_02->getNumParameters();
            
                    if (index < this->p_03->getNumParameters())
                        return this->p_03->getParameterId(index);
            
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                {
                    switch (index) {
                    default:
                        {
                        index -= 0;
            
                        if (index < this->p_02->getNumParameters())
                            this->p_02->getParameterInfo(index, info);
            
                        index -= this->p_02->getNumParameters();
            
                        if (index < this->p_03->getNumParameters())
                            this->p_03->getParameterInfo(index, info);
            
                        break;
                        }
                    }
                }
            }
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                if (subpatcher == this->p_02)
                    return 0;
            
                if (subpatcher == this->p_03)
                    return 0 + this->p_02->getNumParameters();
            
                return 0;
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_02->getNumParameters())
                        return this->p_02->convertToNormalizedParameterValue(index, value);
            
                    index -= this->p_02->getNumParameters();
            
                    if (index < this->p_03->getNumParameters())
                        return this->p_03->convertToNormalizedParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_02->getNumParameters())
                        return this->p_02->convertFromNormalizedParameterValue(index, value);
            
                    index -= this->p_02->getNumParameters();
            
                    if (index < this->p_03->getNumParameters())
                        return this->p_03->convertFromNormalizedParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_02->getNumParameters())
                        return this->p_02->constrainParameterValue(index, value);
            
                    index -= this->p_02->getNumParameters();
            
                    if (index < this->p_03->getNumParameters())
                        return this->p_03->constrainParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
                RNBO_UNUSED(value);
                RNBO_UNUSED(hasValue);
                this->updateTime(time);
            
                switch (index) {
                case 29237386:
                    {
                    this->loadmess_01_startupbang_bang();
                    break;
                    }
                case 892732297:
                    {
                    this->loadmess_02_startupbang_bang();
                    break;
                    }
                case 1114681293:
                    {
                    this->linetilde_01_target_bang();
                    break;
                    }
                case -1621164530:
                    {
                    this->linetilde_02_target_bang();
                    break;
                    }
                case -62043057:
                    {
                    this->linetilde_03_target_bang();
                    break;
                    }
                }
            }
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("valin"):
                    {
                    if (TAG("verb/Octave~/number_obj-122") == objectId)
                        this->numberobj_07_valin_set(payload);
            
                    if (TAG("verb/Octave~/number_obj-110") == objectId)
                        this->numberobj_08_valin_set(payload);
            
                    if (TAG("verb/Octave~/number_obj-89") == objectId)
                        this->numberobj_09_valin_set(payload);
            
                    if (TAG("verb/Octave~/number_obj-124") == objectId)
                        this->numberobj_10_valin_set(payload);
            
                    if (TAG("verb/Octave~/number_obj-112") == objectId)
                        this->numberobj_11_valin_set(payload);
            
                    if (TAG("verb/Octave~/number_obj-151") == objectId)
                        this->numberobj_12_valin_set(payload);
            
                    if (TAG("verb/Octave~/number_obj-12") == objectId)
                        this->numberobj_13_valin_set(payload);
            
                    if (TAG("verb/Octave~/number_obj-15") == objectId)
                        this->numberobj_14_valin_set(payload);
            
                    break;
                    }
                case TAG("format"):
                    {
                    if (TAG("verb/Octave~/number_obj-122") == objectId)
                        this->numberobj_07_format_set(payload);
            
                    if (TAG("verb/Octave~/number_obj-110") == objectId)
                        this->numberobj_08_format_set(payload);
            
                    if (TAG("verb/Octave~/number_obj-89") == objectId)
                        this->numberobj_09_format_set(payload);
            
                    if (TAG("verb/Octave~/number_obj-124") == objectId)
                        this->numberobj_10_format_set(payload);
            
                    if (TAG("verb/Octave~/number_obj-112") == objectId)
                        this->numberobj_11_format_set(payload);
            
                    if (TAG("verb/Octave~/number_obj-151") == objectId)
                        this->numberobj_12_format_set(payload);
            
                    if (TAG("verb/Octave~/number_obj-12") == objectId)
                        this->numberobj_13_format_set(payload);
            
                    if (TAG("verb/Octave~/number_obj-15") == objectId)
                        this->numberobj_14_format_set(payload);
            
                    break;
                    }
                }
            
                this->p_02->processNumMessage(tag, objectId, time, payload);
                this->p_03->processNumMessage(tag, objectId, time, payload);
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                RNBO_UNUSED(objectId);
                this->updateTime(time);
                this->p_02->processListMessage(tag, objectId, time, payload);
                this->p_03->processListMessage(tag, objectId, time, payload);
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("startupbang"):
                    {
                    if (TAG("verb/Octave~/loadmess_obj-95") == objectId)
                        this->loadmess_01_startupbang_bang();
            
                    if (TAG("verb/Octave~/loadmess_obj-115") == objectId)
                        this->loadmess_02_startupbang_bang();
            
                    break;
                    }
                }
            
                this->p_02->processBangMessage(tag, objectId, time);
                this->p_03->processBangMessage(tag, objectId, time);
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("valout"):
                    {
                    return "valout";
                    }
                case TAG("verb/Octave~/number_obj-122"):
                    {
                    return "verb/Octave~/number_obj-122";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("verb/Octave~/number_obj-110"):
                    {
                    return "verb/Octave~/number_obj-110";
                    }
                case TAG("verb/Octave~/number_obj-89"):
                    {
                    return "verb/Octave~/number_obj-89";
                    }
                case TAG("verb/Octave~/number_obj-124"):
                    {
                    return "verb/Octave~/number_obj-124";
                    }
                case TAG("verb/Octave~/number_obj-112"):
                    {
                    return "verb/Octave~/number_obj-112";
                    }
                case TAG("verb/Octave~/number_obj-151"):
                    {
                    return "verb/Octave~/number_obj-151";
                    }
                case TAG("verb/Octave~/number_obj-12"):
                    {
                    return "verb/Octave~/number_obj-12";
                    }
                case TAG("verb/Octave~/number_obj-15"):
                    {
                    return "verb/Octave~/number_obj-15";
                    }
                case TAG("valin"):
                    {
                    return "valin";
                    }
                case TAG("format"):
                    {
                    return "format";
                    }
                case TAG("startupbang"):
                    {
                    return "startupbang";
                    }
                case TAG("verb/Octave~/loadmess_obj-95"):
                    {
                    return "verb/Octave~/loadmess_obj-95";
                    }
                case TAG("verb/Octave~/loadmess_obj-115"):
                    {
                    return "verb/Octave~/loadmess_obj-115";
                    }
                }
            
                auto subpatchResult_0 = this->p_02->resolveTag(tag);
            
                if (subpatchResult_0)
                    return subpatchResult_0;
            
                auto subpatchResult_1 = this->p_03->resolveTag(tag);
            
                if (subpatchResult_1)
                    return subpatchResult_1;
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->p_02->processDataViewUpdate(index, time);
                this->p_03->processDataViewUpdate(index, time);
            }
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void numberobj_07_valin_set(number v) {
                this->numberobj_07_value_set(v);
            }
            
            void numberobj_07_format_set(number v) {
                this->numberobj_07_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_08_valin_set(number v) {
                this->numberobj_08_value_set(v);
            }
            
            void numberobj_08_format_set(number v) {
                this->numberobj_08_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_09_valin_set(number v) {
                this->numberobj_09_value_set(v);
            }
            
            void numberobj_09_format_set(number v) {
                this->numberobj_09_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void loadmess_01_startupbang_bang() {
                this->loadmess_01_message_bang();
            }
            
            void numberobj_10_valin_set(number v) {
                this->numberobj_10_value_set(v);
            }
            
            void numberobj_10_format_set(number v) {
                this->numberobj_10_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_11_valin_set(number v) {
                this->numberobj_11_value_set(v);
            }
            
            void numberobj_11_format_set(number v) {
                this->numberobj_11_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void loadmess_02_startupbang_bang() {
                this->loadmess_02_message_bang();
            }
            
            void numberobj_12_valin_set(number v) {
                this->numberobj_12_value_set(v);
            }
            
            void numberobj_12_format_set(number v) {
                this->numberobj_12_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_13_valin_set(number v) {
                this->numberobj_13_value_set(v);
            }
            
            void numberobj_13_format_set(number v) {
                this->numberobj_13_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_14_valin_set(number v) {
                this->numberobj_14_value_set(v);
            }
            
            void numberobj_14_format_set(number v) {
                this->numberobj_14_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void eventinlet_06_out1_bang_bang() {
                this->numberobj_14_value_bang();
            }
            
            void eventinlet_06_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_14_value_set(converted);
                }
            }
            
            void linetilde_01_target_bang() {}
            
            void linetilde_02_target_bang() {}
            
            void linetilde_03_target_bang() {}
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 2;
            }
            
            Index getNumOutputChannels() const {
                return 2;
            }
            
            void initializeObjects() {
                this->numberobj_07_init();
                this->numberobj_08_init();
                this->numberobj_09_init();
                this->numberobj_10_init();
                this->numberobj_11_init();
                this->numberobj_12_init();
                this->numberobj_13_init();
                this->numberobj_14_init();
                this->p_02->initializeObjects();
                this->p_03->initializeObjects();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {
                this->updateTime(this->getEngine()->getCurrentTime());
                this->p_02->startup();
                this->p_03->startup();
                this->getEngine()->scheduleClockEvent(this, 29237386, 0 + this->_currentTime);;
                this->getEngine()->scheduleClockEvent(this, 892732297, 0 + this->_currentTime);;
            }
            
            void allocateDataRefs() {
                this->p_02->allocateDataRefs();
                this->p_03->allocateDataRefs();
            }
            
            void linetilde_03_time_set(number v) {
                this->linetilde_03_time = v;
            }
            
            void linetilde_03_segments_set(const list& v) {
                this->linetilde_03_segments = jsCreateListCopy(v);
            
                if ((bool)(v->length)) {
                    if (v->length == 1 && this->linetilde_03_time == 0) {
                        this->linetilde_03_activeRamps->length = 0;
                        this->linetilde_03_currentValue = v[0];
                    } else {
                        auto currentTime = this->currentsampletime();
                        number lastRampValue = this->linetilde_03_currentValue;
                        number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
            
                        for (Index i = 0; i < this->linetilde_03_activeRamps->length; i += 3) {
                            rampEnd = this->linetilde_03_activeRamps[(Index)(i + 2)];
            
                            if (rampEnd > currentTime) {
                                this->linetilde_03_activeRamps[(Index)(i + 2)] = currentTime;
                                number diff = rampEnd - currentTime;
                                number valueDiff = diff * this->linetilde_03_activeRamps[(Index)(i + 1)];
                                lastRampValue = this->linetilde_03_activeRamps[(Index)i] - valueDiff;
                                this->linetilde_03_activeRamps[(Index)i] = lastRampValue;
                                this->linetilde_03_activeRamps->length = i + 3;
                                rampEnd = currentTime;
                            } else {
                                lastRampValue = this->linetilde_03_activeRamps[(Index)i];
                            }
                        }
            
                        if (rampEnd < currentTime) {
                            this->linetilde_03_activeRamps->push(lastRampValue);
                            this->linetilde_03_activeRamps->push(0);
                            this->linetilde_03_activeRamps->push(currentTime);
                        }
            
                        number lastRampEnd = currentTime;
            
                        for (Index i = 0; i < v->length; i += 2) {
                            number destinationValue = v[(Index)i];
                            number inc = 0;
                            number rampTimeInSamples;
            
                            if (v->length > i + 1) {
                                rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
            
                                if ((bool)(this->linetilde_03_keepramp)) {
                                    this->linetilde_03_time_set(v[(Index)(i + 1)]);
                                }
                            } else {
                                rampTimeInSamples = this->mstosamps(this->linetilde_03_time);
                            }
            
                            if (rampTimeInSamples <= 0) {
                                rampTimeInSamples = 1;
                            }
            
                            inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                            lastRampEnd += rampTimeInSamples;
                            this->linetilde_03_activeRamps->push(destinationValue);
                            this->linetilde_03_activeRamps->push(inc);
                            this->linetilde_03_activeRamps->push(lastRampEnd);
                            lastRampValue = destinationValue;
                        }
                    }
                }
            }
            
            void numberobj_13_output_set(number v) {
                {
                    list converted = {v};
                    this->linetilde_03_segments_set(converted);
                }
            }
            
            void numberobj_13_value_set(number v) {
                this->numberobj_13_value_setter(v);
                v = this->numberobj_13_value;
                number localvalue = v;
            
                if (this->numberobj_13_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("verb/Octave~/number_obj-12"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_13_output_set(localvalue);
            }
            
            void scale_01_out_set(const list& v) {
                this->scale_01_out = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_13_value_set(converted);
                }
            }
            
            void scale_01_input_set(const list& v) {
                this->scale_01_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_01_inlow,
                        this->scale_01_inhigh,
                        this->scale_01_outlow,
                        this->scale_01_outhigh,
                        this->scale_01_power
                    ));
                }
            
                this->scale_01_out_set(tmp);
            }
            
            void numberobj_14_output_set(number v) {
                {
                    list converted = {v};
                    this->scale_01_input_set(converted);
                }
            }
            
            void numberobj_14_value_set(number v) {
                this->numberobj_14_value_setter(v);
                v = this->numberobj_14_value;
                number localvalue = v;
            
                if (this->numberobj_14_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("verb/Octave~/number_obj-15"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_14_output_set(localvalue);
            }
            
            void eventinlet_06_out1_number_set(number v) {
                this->numberobj_14_value_set(v);
            }
            
            void linetilde_01_time_set(number v) {
                this->linetilde_01_time = v;
            }
            
            void linetilde_01_segments_set(const list& v) {
                this->linetilde_01_segments = jsCreateListCopy(v);
            
                if ((bool)(v->length)) {
                    if (v->length == 1 && this->linetilde_01_time == 0) {
                        this->linetilde_01_activeRamps->length = 0;
                        this->linetilde_01_currentValue = v[0];
                    } else {
                        auto currentTime = this->currentsampletime();
                        number lastRampValue = this->linetilde_01_currentValue;
                        number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
            
                        for (Index i = 0; i < this->linetilde_01_activeRamps->length; i += 3) {
                            rampEnd = this->linetilde_01_activeRamps[(Index)(i + 2)];
            
                            if (rampEnd > currentTime) {
                                this->linetilde_01_activeRamps[(Index)(i + 2)] = currentTime;
                                number diff = rampEnd - currentTime;
                                number valueDiff = diff * this->linetilde_01_activeRamps[(Index)(i + 1)];
                                lastRampValue = this->linetilde_01_activeRamps[(Index)i] - valueDiff;
                                this->linetilde_01_activeRamps[(Index)i] = lastRampValue;
                                this->linetilde_01_activeRamps->length = i + 3;
                                rampEnd = currentTime;
                            } else {
                                lastRampValue = this->linetilde_01_activeRamps[(Index)i];
                            }
                        }
            
                        if (rampEnd < currentTime) {
                            this->linetilde_01_activeRamps->push(lastRampValue);
                            this->linetilde_01_activeRamps->push(0);
                            this->linetilde_01_activeRamps->push(currentTime);
                        }
            
                        number lastRampEnd = currentTime;
            
                        for (Index i = 0; i < v->length; i += 2) {
                            number destinationValue = v[(Index)i];
                            number inc = 0;
                            number rampTimeInSamples;
            
                            if (v->length > i + 1) {
                                rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
            
                                if ((bool)(this->linetilde_01_keepramp)) {
                                    this->linetilde_01_time_set(v[(Index)(i + 1)]);
                                }
                            } else {
                                rampTimeInSamples = this->mstosamps(this->linetilde_01_time);
                            }
            
                            if (rampTimeInSamples <= 0) {
                                rampTimeInSamples = 1;
                            }
            
                            inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                            lastRampEnd += rampTimeInSamples;
                            this->linetilde_01_activeRamps->push(destinationValue);
                            this->linetilde_01_activeRamps->push(inc);
                            this->linetilde_01_activeRamps->push(lastRampEnd);
                            lastRampValue = destinationValue;
                        }
                    }
                }
            }
            
            void numberobj_10_output_set(number v) {
                {
                    list converted = {v};
                    this->linetilde_01_segments_set(converted);
                }
            }
            
            void numberobj_10_value_set(number v) {
                this->numberobj_10_value_setter(v);
                v = this->numberobj_10_value;
                number localvalue = v;
            
                if (this->numberobj_10_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("verb/Octave~/number_obj-124"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_10_output_set(localvalue);
            }
            
            void expr_06_out1_set(number v) {
                this->expr_06_out1 = v;
                this->numberobj_10_value_set(this->expr_06_out1);
            }
            
            void expr_06_in1_set(number in1) {
                this->expr_06_in1 = in1;
            
                this->expr_06_out1_set(
                    (this->expr_06_in2 == 0 ? 0 : (this->expr_06_in2 == 0. ? 0. : this->expr_06_in1 / this->expr_06_in2))
                );//#map:verb/Octave~//_obj-91:1
            }
            
            void numberobj_08_output_set(number v) {
                this->expr_06_in1_set(v);
            }
            
            void numberobj_08_value_set(number v) {
                this->numberobj_08_value_setter(v);
                v = this->numberobj_08_value;
                number localvalue = v;
            
                if (this->numberobj_08_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("verb/Octave~/number_obj-110"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_08_output_set(localvalue);
            }
            
            void expr_05_out1_set(number v) {
                this->expr_05_out1 = v;
                this->numberobj_08_value_set(this->expr_05_out1);
            }
            
            void expr_05_in1_set(number in1) {
                this->expr_05_in1 = in1;
                this->expr_05_out1_set(this->expr_05_in1 * this->expr_05_in2);//#map:verb/Octave~/*_obj-92:1
            }
            
            void numberobj_07_output_set(number v) {
                this->expr_05_in1_set(v);
            }
            
            void numberobj_07_value_set(number v) {
                this->numberobj_07_value_setter(v);
                v = this->numberobj_07_value;
                number localvalue = v;
            
                if (this->numberobj_07_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("verb/Octave~/number_obj-122"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_07_output_set(localvalue);
            }
            
            void expr_04_out1_set(number v) {
                this->expr_04_out1 = v;
                this->numberobj_07_value_set(this->expr_04_out1);
            }
            
            void expr_04_in1_set(number in1) {
                this->expr_04_in1 = in1;
                this->expr_04_out1_set(1 - fixnan(rnbo_pow(2, this->expr_04_in1 / (number)12)));//#map:verb/Octave~/expr_obj-90:1
            }
            
            void numberobj_09_output_set(number v) {
                this->expr_04_in1_set(v);
            }
            
            void numberobj_09_value_set(number v) {
                this->numberobj_09_value_setter(v);
                v = this->numberobj_09_value;
                number localvalue = v;
            
                if (this->numberobj_09_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("verb/Octave~/number_obj-89"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_09_output_set(localvalue);
            }
            
            void loadmess_01_message_bang() {
                list v = this->loadmess_01_message;
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_09_value_set(converted);
                }
            }
            
            void linetilde_02_time_set(number v) {
                this->linetilde_02_time = v;
            }
            
            void linetilde_02_segments_set(const list& v) {
                this->linetilde_02_segments = jsCreateListCopy(v);
            
                if ((bool)(v->length)) {
                    if (v->length == 1 && this->linetilde_02_time == 0) {
                        this->linetilde_02_activeRamps->length = 0;
                        this->linetilde_02_currentValue = v[0];
                    } else {
                        auto currentTime = this->currentsampletime();
                        number lastRampValue = this->linetilde_02_currentValue;
                        number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
            
                        for (Index i = 0; i < this->linetilde_02_activeRamps->length; i += 3) {
                            rampEnd = this->linetilde_02_activeRamps[(Index)(i + 2)];
            
                            if (rampEnd > currentTime) {
                                this->linetilde_02_activeRamps[(Index)(i + 2)] = currentTime;
                                number diff = rampEnd - currentTime;
                                number valueDiff = diff * this->linetilde_02_activeRamps[(Index)(i + 1)];
                                lastRampValue = this->linetilde_02_activeRamps[(Index)i] - valueDiff;
                                this->linetilde_02_activeRamps[(Index)i] = lastRampValue;
                                this->linetilde_02_activeRamps->length = i + 3;
                                rampEnd = currentTime;
                            } else {
                                lastRampValue = this->linetilde_02_activeRamps[(Index)i];
                            }
                        }
            
                        if (rampEnd < currentTime) {
                            this->linetilde_02_activeRamps->push(lastRampValue);
                            this->linetilde_02_activeRamps->push(0);
                            this->linetilde_02_activeRamps->push(currentTime);
                        }
            
                        number lastRampEnd = currentTime;
            
                        for (Index i = 0; i < v->length; i += 2) {
                            number destinationValue = v[(Index)i];
                            number inc = 0;
                            number rampTimeInSamples;
            
                            if (v->length > i + 1) {
                                rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
            
                                if ((bool)(this->linetilde_02_keepramp)) {
                                    this->linetilde_02_time_set(v[(Index)(i + 1)]);
                                }
                            } else {
                                rampTimeInSamples = this->mstosamps(this->linetilde_02_time);
                            }
            
                            if (rampTimeInSamples <= 0) {
                                rampTimeInSamples = 1;
                            }
            
                            inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                            lastRampEnd += rampTimeInSamples;
                            this->linetilde_02_activeRamps->push(destinationValue);
                            this->linetilde_02_activeRamps->push(inc);
                            this->linetilde_02_activeRamps->push(lastRampEnd);
                            lastRampValue = destinationValue;
                        }
                    }
                }
            }
            
            void numberobj_12_output_set(number v) {
                {
                    list converted = {v};
                    this->linetilde_02_segments_set(converted);
                }
            }
            
            void numberobj_12_value_set(number v) {
                this->numberobj_12_value_setter(v);
                v = this->numberobj_12_value;
                number localvalue = v;
            
                if (this->numberobj_12_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("verb/Octave~/number_obj-151"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_12_output_set(localvalue);
            }
            
            void mstosamps_01_out1_set(number v) {
                this->numberobj_12_value_set(v);
            }
            
            void mstosamps_01_ms_set(number ms) {
                this->mstosamps_01_ms = ms;
            
                {
                    this->mstosamps_01_out1_set(ms * this->sr * 0.001);
                    return;
                }
            }
            
            void expr_06_in2_set(number v) {
                this->expr_06_in2 = v;
                this->expr_06_in1_set(this->expr_06_in1);
            }
            
            void numberobj_11_output_set(number v) {
                this->mstosamps_01_ms_set(v);
                this->expr_06_in2_set(v);
            }
            
            void numberobj_11_value_set(number v) {
                this->numberobj_11_value_setter(v);
                v = this->numberobj_11_value;
                number localvalue = v;
            
                if (this->numberobj_11_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("verb/Octave~/number_obj-112"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_11_output_set(localvalue);
            }
            
            void loadmess_02_message_bang() {
                list v = this->loadmess_02_message;
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_11_value_set(converted);
                }
            }
            
            void numberobj_14_value_bang() {
                number v = this->numberobj_14_value;
                number localvalue = v;
            
                if (this->numberobj_14_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("verb/Octave~/number_obj-15"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_14_output_set(localvalue);
            }
            
            void linetilde_01_perform(SampleValue * out, Index n) {
                auto __linetilde_01_time = this->linetilde_01_time;
                auto __linetilde_01_keepramp = this->linetilde_01_keepramp;
                auto __linetilde_01_currentValue = this->linetilde_01_currentValue;
                Index i = 0;
            
                if ((bool)(this->linetilde_01_activeRamps->length)) {
                    while ((bool)(this->linetilde_01_activeRamps->length) && i < n) {
                        number destinationValue = this->linetilde_01_activeRamps[0];
                        number inc = this->linetilde_01_activeRamps[1];
                        number rampTimeInSamples = this->linetilde_01_activeRamps[2] - this->audioProcessSampleCount - i;
                        number val = __linetilde_01_currentValue;
            
                        while (rampTimeInSamples > 0 && i < n) {
                            out[(Index)i] = val;
                            val += inc;
                            i++;
                            rampTimeInSamples--;
                        }
            
                        if (rampTimeInSamples <= 0) {
                            val = destinationValue;
                            this->linetilde_01_activeRamps->splice(0, 3);
            
                            if ((bool)(!(bool)(this->linetilde_01_activeRamps->length))) {
                                this->getEngine()->scheduleClockEventWithValue(
                                    this,
                                    1114681293,
                                    this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                                    0
                                );;
            
                                if ((bool)(!(bool)(__linetilde_01_keepramp))) {
                                    __linetilde_01_time = 0;
                                }
                            }
                        }
            
                        __linetilde_01_currentValue = val;
                    }
                }
            
                while (i < n) {
                    out[(Index)i] = __linetilde_01_currentValue;
                    i++;
                }
            
                this->linetilde_01_currentValue = __linetilde_01_currentValue;
                this->linetilde_01_time = __linetilde_01_time;
            }
            
            void phasor_01_perform(const Sample * freq, SampleValue * out, Index n) {
                for (Index i = 0; i < n; i++) {
                    out[(Index)i] = this->phasor_01_ph_next(freq[(Index)i], -1);
                    this->phasor_01_sigbuf[(Index)i] = -1;
                }
            }
            
            void dspexpr_16_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] + -0.5;//#map:_###_obj_###_:1
                }
            }
            
            void wrap_tilde_01_perform(const Sample * x, number low, number high, SampleValue * out1, Index n) {
                RNBO_UNUSED(high);
                RNBO_UNUSED(low);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number lo;
                    number hi;
                    lo = 0;
                    hi = 1;
                    number range = hi - lo;
            
                    if (x[(Index)i] >= lo && x[(Index)i] < hi) {
                        out1[(Index)i] = x[(Index)i];
                        continue;
                    }
            
                    if (range <= 0.000000001) {
                        out1[(Index)i] = lo;
                        continue;
                    }
            
                    long numWraps = (long)(trunc((x[(Index)i] - lo) / range));
                    numWraps = numWraps - ((x[(Index)i] < lo ? 1 : 0));
                    number result = x[(Index)i] - range * numWraps;
            
                    if (result >= hi) {
                        out1[(Index)i] = result - range;
                        continue;
                    } else {
                        out1[(Index)i] = result;
                        continue;
                    }
                }
            }
            
            void linetilde_02_perform(SampleValue * out, Index n) {
                auto __linetilde_02_time = this->linetilde_02_time;
                auto __linetilde_02_keepramp = this->linetilde_02_keepramp;
                auto __linetilde_02_currentValue = this->linetilde_02_currentValue;
                Index i = 0;
            
                if ((bool)(this->linetilde_02_activeRamps->length)) {
                    while ((bool)(this->linetilde_02_activeRamps->length) && i < n) {
                        number destinationValue = this->linetilde_02_activeRamps[0];
                        number inc = this->linetilde_02_activeRamps[1];
                        number rampTimeInSamples = this->linetilde_02_activeRamps[2] - this->audioProcessSampleCount - i;
                        number val = __linetilde_02_currentValue;
            
                        while (rampTimeInSamples > 0 && i < n) {
                            out[(Index)i] = val;
                            val += inc;
                            i++;
                            rampTimeInSamples--;
                        }
            
                        if (rampTimeInSamples <= 0) {
                            val = destinationValue;
                            this->linetilde_02_activeRamps->splice(0, 3);
            
                            if ((bool)(!(bool)(this->linetilde_02_activeRamps->length))) {
                                this->getEngine()->scheduleClockEventWithValue(
                                    this,
                                    -1621164530,
                                    this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                                    0
                                );;
            
                                if ((bool)(!(bool)(__linetilde_02_keepramp))) {
                                    __linetilde_02_time = 0;
                                }
                            }
                        }
            
                        __linetilde_02_currentValue = val;
                    }
                }
            
                while (i < n) {
                    out[(Index)i] = __linetilde_02_currentValue;
                    i++;
                }
            
                this->linetilde_02_currentValue = __linetilde_02_currentValue;
                this->linetilde_02_time = __linetilde_02_time;
            }
            
            void p_03_perform(
                const SampleValue * in1,
                const SampleValue * in2,
                const SampleValue * in3,
                const SampleValue * in4,
                SampleValue * out1,
                Index n
            ) {
                // subpatcher: Shift~
                ConstSampleArray<4> ins = {in1, in2, in3, in4};
            
                SampleArray<1> outs = {out1};
                this->p_03->process(ins, 4, outs, 1, n);
            }
            
            void p_02_perform(
                const SampleValue * in1,
                const SampleValue * in2,
                const SampleValue * in3,
                const SampleValue * in4,
                SampleValue * out1,
                Index n
            ) {
                // subpatcher: Shift~
                ConstSampleArray<4> ins = {in1, in2, in3, in4};
            
                SampleArray<1> outs = {out1};
                this->p_02->process(ins, 4, outs, 1, n);
            }
            
            void linetilde_03_perform(SampleValue * out, Index n) {
                auto __linetilde_03_time = this->linetilde_03_time;
                auto __linetilde_03_keepramp = this->linetilde_03_keepramp;
                auto __linetilde_03_currentValue = this->linetilde_03_currentValue;
                Index i = 0;
            
                if ((bool)(this->linetilde_03_activeRamps->length)) {
                    while ((bool)(this->linetilde_03_activeRamps->length) && i < n) {
                        number destinationValue = this->linetilde_03_activeRamps[0];
                        number inc = this->linetilde_03_activeRamps[1];
                        number rampTimeInSamples = this->linetilde_03_activeRamps[2] - this->audioProcessSampleCount - i;
                        number val = __linetilde_03_currentValue;
            
                        while (rampTimeInSamples > 0 && i < n) {
                            out[(Index)i] = val;
                            val += inc;
                            i++;
                            rampTimeInSamples--;
                        }
            
                        if (rampTimeInSamples <= 0) {
                            val = destinationValue;
                            this->linetilde_03_activeRamps->splice(0, 3);
            
                            if ((bool)(!(bool)(this->linetilde_03_activeRamps->length))) {
                                this->getEngine()->scheduleClockEventWithValue(
                                    this,
                                    -62043057,
                                    this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                                    0
                                );;
            
                                if ((bool)(!(bool)(__linetilde_03_keepramp))) {
                                    __linetilde_03_time = 0;
                                }
                            }
                        }
            
                        __linetilde_03_currentValue = val;
                    }
                }
            
                while (i < n) {
                    out[(Index)i] = __linetilde_03_currentValue;
                    i++;
                }
            
                this->linetilde_03_currentValue = __linetilde_03_currentValue;
                this->linetilde_03_time = __linetilde_03_time;
            }
            
            void onepole_tilde_02_perform(const Sample * x, const Sample * freqInHz, SampleValue * out1, Index n) {
                auto __onepole_tilde_02_lastY = this->onepole_tilde_02_lastY;
                auto __onepole_tilde_02_b1 = this->onepole_tilde_02_b1;
                auto __onepole_tilde_02_a0 = this->onepole_tilde_02_a0;
                auto __onepole_tilde_02_needsUpdate = this->onepole_tilde_02_needsUpdate;
                auto __onepole_tilde_02_freq = this->onepole_tilde_02_freq;
                Index i;
            
                for (i = 0; i < n; i++) {
                    if (__onepole_tilde_02_freq != freqInHz[(Index)i] || (bool)(__onepole_tilde_02_needsUpdate)) {
                        __onepole_tilde_02_freq = freqInHz[(Index)i];
                        __onepole_tilde_02_a0 = 1 - rnbo_exp(-6.28318530717958647692 * freqInHz[(Index)i] / this->sr);
                        __onepole_tilde_02_a0 = (__onepole_tilde_02_a0 > 0.99999 ? 0.99999 : (__onepole_tilde_02_a0 < 0.00001 ? 0.00001 : __onepole_tilde_02_a0));
                        __onepole_tilde_02_b1 = 1 - __onepole_tilde_02_a0;
                        __onepole_tilde_02_needsUpdate = false;
                    }
            
                    __onepole_tilde_02_lastY = __onepole_tilde_02_a0 * x[(Index)i] + __onepole_tilde_02_b1 * __onepole_tilde_02_lastY;
                    out1[(Index)i] = __onepole_tilde_02_lastY;
                }
            
                this->onepole_tilde_02_freq = __onepole_tilde_02_freq;
                this->onepole_tilde_02_needsUpdate = __onepole_tilde_02_needsUpdate;
                this->onepole_tilde_02_a0 = __onepole_tilde_02_a0;
                this->onepole_tilde_02_b1 = __onepole_tilde_02_b1;
                this->onepole_tilde_02_lastY = __onepole_tilde_02_lastY;
            }
            
            void onepole_tilde_03_perform(const Sample * x, const Sample * freqInHz, SampleValue * out1, Index n) {
                auto __onepole_tilde_03_lastY = this->onepole_tilde_03_lastY;
                auto __onepole_tilde_03_b1 = this->onepole_tilde_03_b1;
                auto __onepole_tilde_03_a0 = this->onepole_tilde_03_a0;
                auto __onepole_tilde_03_needsUpdate = this->onepole_tilde_03_needsUpdate;
                auto __onepole_tilde_03_freq = this->onepole_tilde_03_freq;
                Index i;
            
                for (i = 0; i < n; i++) {
                    if (__onepole_tilde_03_freq != freqInHz[(Index)i] || (bool)(__onepole_tilde_03_needsUpdate)) {
                        __onepole_tilde_03_freq = freqInHz[(Index)i];
                        __onepole_tilde_03_a0 = 1 - rnbo_exp(-6.28318530717958647692 * freqInHz[(Index)i] / this->sr);
                        __onepole_tilde_03_a0 = (__onepole_tilde_03_a0 > 0.99999 ? 0.99999 : (__onepole_tilde_03_a0 < 0.00001 ? 0.00001 : __onepole_tilde_03_a0));
                        __onepole_tilde_03_b1 = 1 - __onepole_tilde_03_a0;
                        __onepole_tilde_03_needsUpdate = false;
                    }
            
                    __onepole_tilde_03_lastY = __onepole_tilde_03_a0 * x[(Index)i] + __onepole_tilde_03_b1 * __onepole_tilde_03_lastY;
                    out1[(Index)i] = __onepole_tilde_03_lastY;
                }
            
                this->onepole_tilde_03_freq = __onepole_tilde_03_freq;
                this->onepole_tilde_03_needsUpdate = __onepole_tilde_03_needsUpdate;
                this->onepole_tilde_03_a0 = __onepole_tilde_03_a0;
                this->onepole_tilde_03_b1 = __onepole_tilde_03_b1;
                this->onepole_tilde_03_lastY = __onepole_tilde_03_lastY;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void numberobj_07_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_07_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_07_value = localvalue;
            }
            
            void numberobj_08_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_08_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_08_value = localvalue;
            }
            
            void numberobj_09_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_09_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_09_value = localvalue;
            }
            
            void numberobj_10_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_10_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_10_value = localvalue;
            }
            
            void numberobj_11_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_11_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_11_value = localvalue;
            }
            
            void numberobj_12_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_12_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_12_value = localvalue;
            }
            
            void numberobj_13_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_13_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_13_value = localvalue;
            }
            
            void numberobj_14_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_14_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_14_value = localvalue;
            }
            
            void numberobj_07_init() {
                this->numberobj_07_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/Octave~/number_obj-122"), 1, this->_currentTime);
            }
            
            void numberobj_07_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_07_value;
            }
            
            void numberobj_07_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_07_value_set(preset["value"]);
            }
            
            void numberobj_08_init() {
                this->numberobj_08_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/Octave~/number_obj-110"), 1, this->_currentTime);
            }
            
            void numberobj_08_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_08_value;
            }
            
            void numberobj_08_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_08_value_set(preset["value"]);
            }
            
            void numberobj_09_init() {
                this->numberobj_09_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/Octave~/number_obj-89"), 1, this->_currentTime);
            }
            
            void numberobj_09_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_09_value;
            }
            
            void numberobj_09_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_09_value_set(preset["value"]);
            }
            
            void onepole_tilde_02_reset() {
                this->onepole_tilde_02_lastY = 0;
                this->onepole_tilde_02_a0 = 0;
                this->onepole_tilde_02_b1 = 0;
            }
            
            void onepole_tilde_02_dspsetup(bool force) {
                if ((bool)(this->onepole_tilde_02_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->onepole_tilde_02_needsUpdate = true;
                this->onepole_tilde_02_reset();
                this->onepole_tilde_02_setupDone = true;
            }
            
            void numberobj_10_init() {
                this->numberobj_10_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/Octave~/number_obj-124"), 1, this->_currentTime);
            }
            
            void numberobj_10_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_10_value;
            }
            
            void numberobj_10_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_10_value_set(preset["value"]);
            }
            
            number phasor_01_ph_next(number freq, number reset) {
                RNBO_UNUSED(reset);
                number pincr = freq * this->phasor_01_ph_conv;
            
                if (this->phasor_01_ph_currentPhase < 0.)
                    this->phasor_01_ph_currentPhase = 1. + this->phasor_01_ph_currentPhase;
            
                if (this->phasor_01_ph_currentPhase > 1.)
                    this->phasor_01_ph_currentPhase = this->phasor_01_ph_currentPhase - 1.;
            
                number tmp = this->phasor_01_ph_currentPhase;
                this->phasor_01_ph_currentPhase += pincr;
                return tmp;
            }
            
            void phasor_01_ph_reset() {
                this->phasor_01_ph_currentPhase = 0;
            }
            
            void phasor_01_ph_dspsetup() {
                this->phasor_01_ph_conv = (number)1 / this->sr;
            }
            
            void phasor_01_dspsetup(bool force) {
                if ((bool)(this->phasor_01_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->phasor_01_conv = (number)1 / this->samplerate();
                this->phasor_01_setupDone = true;
                this->phasor_01_ph_dspsetup();
            }
            
            void onepole_tilde_03_reset() {
                this->onepole_tilde_03_lastY = 0;
                this->onepole_tilde_03_a0 = 0;
                this->onepole_tilde_03_b1 = 0;
            }
            
            void onepole_tilde_03_dspsetup(bool force) {
                if ((bool)(this->onepole_tilde_03_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->onepole_tilde_03_needsUpdate = true;
                this->onepole_tilde_03_reset();
                this->onepole_tilde_03_setupDone = true;
            }
            
            void numberobj_11_init() {
                this->numberobj_11_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/Octave~/number_obj-112"), 1, this->_currentTime);
            }
            
            void numberobj_11_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_11_value;
            }
            
            void numberobj_11_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_11_value_set(preset["value"]);
            }
            
            void numberobj_12_init() {
                this->numberobj_12_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/Octave~/number_obj-151"), 1, this->_currentTime);
            }
            
            void numberobj_12_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_12_value;
            }
            
            void numberobj_12_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_12_value_set(preset["value"]);
            }
            
            void numberobj_13_init() {
                this->numberobj_13_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/Octave~/number_obj-12"), 1, this->_currentTime);
            }
            
            void numberobj_13_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_13_value;
            }
            
            void numberobj_13_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_13_value_set(preset["value"]);
            }
            
            void numberobj_14_init() {
                this->numberobj_14_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/Octave~/number_obj-15"), 1, this->_currentTime);
            }
            
            void numberobj_14_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_14_value;
            }
            
            void numberobj_14_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_14_value_set(preset["value"]);
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                numberobj_07_value = 0;
                numberobj_07_value_setter(numberobj_07_value);
                numberobj_08_value = 0;
                numberobj_08_value_setter(numberobj_08_value);
                numberobj_09_value = 0;
                numberobj_09_value_setter(numberobj_09_value);
                expr_04_in1 = 0;
                expr_04_out1 = 0;
                expr_05_in1 = 0;
                expr_05_in2 = 1000;
                expr_05_out1 = 0;
                loadmess_01_message = { -12 };
                onepole_tilde_02_x = 0;
                onepole_tilde_02_freqInHz = 1;
                p_02_target = 0;
                numberobj_10_value = 0;
                numberobj_10_value_setter(numberobj_10_value);
                expr_06_in1 = 0;
                expr_06_in2 = 1;
                expr_06_out1 = 0;
                linetilde_01_time = 50;
                linetilde_01_keepramp = 1;
                phasor_01_freq = 0;
                onepole_tilde_03_x = 0;
                onepole_tilde_03_freqInHz = 1;
                p_03_target = 0;
                wrap_tilde_01_x = 0;
                wrap_tilde_01_low = 0;
                wrap_tilde_01_high = 1;
                dspexpr_16_in1 = 0;
                dspexpr_16_in2 = -0.5;
                numberobj_11_value = 0;
                numberobj_11_value_setter(numberobj_11_value);
                loadmess_02_message = { 125 };
                mstosamps_01_ms = 0;
                numberobj_12_value = 0;
                numberobj_12_value_setter(numberobj_12_value);
                linetilde_02_time = 50;
                linetilde_02_keepramp = 1;
                linetilde_03_time = 50;
                linetilde_03_keepramp = 1;
                numberobj_13_value = 0;
                numberobj_13_value_setter(numberobj_13_value);
                scale_01_inlow = 0;
                scale_01_inhigh = 100;
                scale_01_outlow = 12000;
                scale_01_outhigh = 300;
                scale_01_power = 0.333333;
                numberobj_14_value = 0;
                numberobj_14_value_setter(numberobj_14_value);
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                signals[1] = nullptr;
                signals[2] = nullptr;
                signals[3] = nullptr;
                signals[4] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                numberobj_07_currentFormat = 6;
                numberobj_07_lastValue = 0;
                numberobj_08_currentFormat = 6;
                numberobj_08_lastValue = 0;
                numberobj_09_currentFormat = 6;
                numberobj_09_lastValue = 0;
                onepole_tilde_02_freq = 0;
                onepole_tilde_02_needsUpdate = false;
                onepole_tilde_02_lastY = 0;
                onepole_tilde_02_a0 = 0;
                onepole_tilde_02_b1 = 0;
                onepole_tilde_02_setupDone = false;
                numberobj_10_currentFormat = 6;
                numberobj_10_lastValue = 0;
                linetilde_01_currentValue = 0;
                phasor_01_sigbuf = nullptr;
                phasor_01_lastLockedPhase = 0;
                phasor_01_conv = 0;
                phasor_01_ph_currentPhase = 0;
                phasor_01_ph_conv = 0;
                phasor_01_setupDone = false;
                onepole_tilde_03_freq = 0;
                onepole_tilde_03_needsUpdate = false;
                onepole_tilde_03_lastY = 0;
                onepole_tilde_03_a0 = 0;
                onepole_tilde_03_b1 = 0;
                onepole_tilde_03_setupDone = false;
                numberobj_11_currentFormat = 6;
                numberobj_11_lastValue = 0;
                numberobj_12_currentFormat = 6;
                numberobj_12_lastValue = 0;
                linetilde_02_currentValue = 0;
                linetilde_03_currentValue = 2700;
                numberobj_13_currentFormat = 6;
                numberobj_13_lastValue = 0;
                numberobj_14_currentFormat = 6;
                numberobj_14_lastValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number numberobj_07_value;
                number numberobj_08_value;
                number numberobj_09_value;
                number expr_04_in1;
                number expr_04_out1;
                number expr_05_in1;
                number expr_05_in2;
                number expr_05_out1;
                list loadmess_01_message;
                number onepole_tilde_02_x;
                number onepole_tilde_02_freqInHz;
                number p_02_target;
                number numberobj_10_value;
                number expr_06_in1;
                number expr_06_in2;
                number expr_06_out1;
                list linetilde_01_segments;
                number linetilde_01_time;
                number linetilde_01_keepramp;
                number phasor_01_freq;
                number onepole_tilde_03_x;
                number onepole_tilde_03_freqInHz;
                number p_03_target;
                number wrap_tilde_01_x;
                number wrap_tilde_01_low;
                number wrap_tilde_01_high;
                number dspexpr_16_in1;
                number dspexpr_16_in2;
                number numberobj_11_value;
                list loadmess_02_message;
                number mstosamps_01_ms;
                number numberobj_12_value;
                list linetilde_02_segments;
                number linetilde_02_time;
                number linetilde_02_keepramp;
                list linetilde_03_segments;
                number linetilde_03_time;
                number linetilde_03_keepramp;
                number numberobj_13_value;
                list scale_01_input;
                number scale_01_inlow;
                number scale_01_inhigh;
                number scale_01_outlow;
                number scale_01_outhigh;
                number scale_01_power;
                list scale_01_out;
                number numberobj_14_value;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[5];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Int numberobj_07_currentFormat;
                number numberobj_07_lastValue;
                Int numberobj_08_currentFormat;
                number numberobj_08_lastValue;
                Int numberobj_09_currentFormat;
                number numberobj_09_lastValue;
                number onepole_tilde_02_freq;
                bool onepole_tilde_02_needsUpdate;
                number onepole_tilde_02_lastY;
                number onepole_tilde_02_a0;
                number onepole_tilde_02_b1;
                bool onepole_tilde_02_setupDone;
                Int numberobj_10_currentFormat;
                number numberobj_10_lastValue;
                list linetilde_01_activeRamps;
                number linetilde_01_currentValue;
                signal phasor_01_sigbuf;
                number phasor_01_lastLockedPhase;
                number phasor_01_conv;
                number phasor_01_ph_currentPhase;
                number phasor_01_ph_conv;
                bool phasor_01_setupDone;
                number onepole_tilde_03_freq;
                bool onepole_tilde_03_needsUpdate;
                number onepole_tilde_03_lastY;
                number onepole_tilde_03_a0;
                number onepole_tilde_03_b1;
                bool onepole_tilde_03_setupDone;
                Int numberobj_11_currentFormat;
                number numberobj_11_lastValue;
                Int numberobj_12_currentFormat;
                number numberobj_12_lastValue;
                list linetilde_02_activeRamps;
                number linetilde_02_currentValue;
                list linetilde_03_activeRamps;
                number linetilde_03_currentValue;
                Int numberobj_13_currentFormat;
                number numberobj_13_lastValue;
                Int numberobj_14_currentFormat;
                number numberobj_14_lastValue;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
                RNBOSubpatcher_789* p_02;
                RNBOSubpatcher_790* p_03;
            
    };
    
    class RNBOSubpatcher_803 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_812;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_803()
            {
            }
            
            ~RNBOSubpatcher_803()
            {
            }
            
            virtual RNBOSubpatcher_812* getPatcher() const {
                return static_cast<RNBOSubpatcher_812 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
                getEngine()->flushClockEvents(this, -62043057, false);
            }
            
            inline number safemod(number f, number m) {
                if (m != 0) {
                    Int f_trunc = (Int)(trunc(f));
                    Int m_trunc = (Int)(trunc(m));
            
                    if (f == f_trunc && m == m_trunc) {
                        f = f_trunc % m_trunc;
                    } else {
                        if (m < 0) {
                            m = -m;
                        }
            
                        if (f >= m) {
                            if (f >= m * 2.0) {
                                number d = f / m;
                                Int i = (Int)(trunc(d));
                                d = d - i;
                                f = d * m;
                            } else {
                                f -= m;
                            }
                        } else if (f <= -m) {
                            if (f <= -m * 2.0) {
                                number d = f / m;
                                Int i = (Int)(trunc(d));
                                d = d - i;
                                f = d * m;
                            } else {
                                f += m;
                            }
                        }
                    }
                } else {
                    f = 0.0;
                }
            
                return f;
            }
            
            inline number safesqrt(number num) {
                return (num > 0.0 ? rnbo_sqrt(num) : 0.0);
            }
            
            SampleIndex currentsampletime() {
                return this->audioProcessSampleCount + this->sampleOffsetIntoNextAudioBuffer;
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                const SampleValue * in3 = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
                const SampleValue * in4 = (numInputs >= 4 && inputs[3] ? inputs[3] : this->zeroBuffer);
                this->linetilde_04_perform(this->signals[0], n);
                this->xfade_tilde_01_perform(this->signals[0], in1, in3, out1, n);
                this->xfade_tilde_02_perform(this->signals[0], in2, in4, out2, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 1; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
                RNBO_UNUSED(value);
                RNBO_UNUSED(hasValue);
                this->updateTime(time);
            
                switch (index) {
                case -62043057:
                    {
                    this->linetilde_04_target_bang();
                    break;
                    }
                }
            }
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("valin"):
                    {
                    if (TAG("verb/Mix~/number_obj-5") == objectId)
                        this->numberobj_15_valin_set(payload);
            
                    if (TAG("verb/Mix~/number_obj-8") == objectId)
                        this->numberobj_16_valin_set(payload);
            
                    break;
                    }
                case TAG("format"):
                    {
                    if (TAG("verb/Mix~/number_obj-5") == objectId)
                        this->numberobj_15_format_set(payload);
            
                    if (TAG("verb/Mix~/number_obj-8") == objectId)
                        this->numberobj_16_format_set(payload);
            
                    break;
                    }
                }
            }
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("valout"):
                    {
                    return "valout";
                    }
                case TAG("verb/Mix~/number_obj-5"):
                    {
                    return "verb/Mix~/number_obj-5";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("verb/Mix~/number_obj-8"):
                    {
                    return "verb/Mix~/number_obj-8";
                    }
                case TAG("valin"):
                    {
                    return "valin";
                    }
                case TAG("format"):
                    {
                    return "format";
                    }
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void numberobj_15_valin_set(number v) {
                this->numberobj_15_value_set(v);
            }
            
            void numberobj_15_format_set(number v) {
                this->numberobj_15_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_16_valin_set(number v) {
                this->numberobj_16_value_set(v);
            }
            
            void numberobj_16_format_set(number v) {
                this->numberobj_16_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void eventinlet_07_out1_bang_bang() {
                this->numberobj_16_value_bang();
            }
            
            void eventinlet_07_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_16_value_set(converted);
                }
            }
            
            void linetilde_04_target_bang() {}
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 4;
            }
            
            Index getNumOutputChannels() const {
                return 2;
            }
            
            void initializeObjects() {
                this->numberobj_15_init();
                this->numberobj_16_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void linetilde_04_time_set(number v) {
                this->linetilde_04_time = v;
            }
            
            void linetilde_04_segments_set(const list& v) {
                this->linetilde_04_segments = jsCreateListCopy(v);
            
                if ((bool)(v->length)) {
                    if (v->length == 1 && this->linetilde_04_time == 0) {
                        this->linetilde_04_activeRamps->length = 0;
                        this->linetilde_04_currentValue = v[0];
                    } else {
                        auto currentTime = this->currentsampletime();
                        number lastRampValue = this->linetilde_04_currentValue;
                        number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
            
                        for (Index i = 0; i < this->linetilde_04_activeRamps->length; i += 3) {
                            rampEnd = this->linetilde_04_activeRamps[(Index)(i + 2)];
            
                            if (rampEnd > currentTime) {
                                this->linetilde_04_activeRamps[(Index)(i + 2)] = currentTime;
                                number diff = rampEnd - currentTime;
                                number valueDiff = diff * this->linetilde_04_activeRamps[(Index)(i + 1)];
                                lastRampValue = this->linetilde_04_activeRamps[(Index)i] - valueDiff;
                                this->linetilde_04_activeRamps[(Index)i] = lastRampValue;
                                this->linetilde_04_activeRamps->length = i + 3;
                                rampEnd = currentTime;
                            } else {
                                lastRampValue = this->linetilde_04_activeRamps[(Index)i];
                            }
                        }
            
                        if (rampEnd < currentTime) {
                            this->linetilde_04_activeRamps->push(lastRampValue);
                            this->linetilde_04_activeRamps->push(0);
                            this->linetilde_04_activeRamps->push(currentTime);
                        }
            
                        number lastRampEnd = currentTime;
            
                        for (Index i = 0; i < v->length; i += 2) {
                            number destinationValue = v[(Index)i];
                            number inc = 0;
                            number rampTimeInSamples;
            
                            if (v->length > i + 1) {
                                rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
            
                                if ((bool)(this->linetilde_04_keepramp)) {
                                    this->linetilde_04_time_set(v[(Index)(i + 1)]);
                                }
                            } else {
                                rampTimeInSamples = this->mstosamps(this->linetilde_04_time);
                            }
            
                            if (rampTimeInSamples <= 0) {
                                rampTimeInSamples = 1;
                            }
            
                            inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                            lastRampEnd += rampTimeInSamples;
                            this->linetilde_04_activeRamps->push(destinationValue);
                            this->linetilde_04_activeRamps->push(inc);
                            this->linetilde_04_activeRamps->push(lastRampEnd);
                            lastRampValue = destinationValue;
                        }
                    }
                }
            }
            
            void numberobj_15_output_set(number v) {
                {
                    list converted = {v};
                    this->linetilde_04_segments_set(converted);
                }
            }
            
            void numberobj_15_value_set(number v) {
                this->numberobj_15_value_setter(v);
                v = this->numberobj_15_value;
                number localvalue = v;
            
                if (this->numberobj_15_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("verb/Mix~/number_obj-5"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_15_output_set(localvalue);
            }
            
            void expr_07_out1_set(number v) {
                this->expr_07_out1 = v;
                this->numberobj_15_value_set(this->expr_07_out1);
            }
            
            void expr_07_in1_set(number in1) {
                this->expr_07_in1 = in1;
            
                this->expr_07_out1_set(
                    (this->expr_07_in2 == 0 ? 0 : (this->expr_07_in2 == 0. ? 0. : this->expr_07_in1 / this->expr_07_in2))
                );//#map:verb/Mix~//_obj-7:1
            }
            
            void numberobj_16_output_set(number v) {
                this->expr_07_in1_set(v);
            }
            
            void numberobj_16_value_set(number v) {
                this->numberobj_16_value_setter(v);
                v = this->numberobj_16_value;
                number localvalue = v;
            
                if (this->numberobj_16_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("verb/Mix~/number_obj-8"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_16_output_set(localvalue);
            }
            
            void eventinlet_07_out1_number_set(number v) {
                this->numberobj_16_value_set(v);
            }
            
            void numberobj_16_value_bang() {
                number v = this->numberobj_16_value;
                number localvalue = v;
            
                if (this->numberobj_16_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("verb/Mix~/number_obj-8"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_16_output_set(localvalue);
            }
            
            void linetilde_04_perform(SampleValue * out, Index n) {
                auto __linetilde_04_time = this->linetilde_04_time;
                auto __linetilde_04_keepramp = this->linetilde_04_keepramp;
                auto __linetilde_04_currentValue = this->linetilde_04_currentValue;
                Index i = 0;
            
                if ((bool)(this->linetilde_04_activeRamps->length)) {
                    while ((bool)(this->linetilde_04_activeRamps->length) && i < n) {
                        number destinationValue = this->linetilde_04_activeRamps[0];
                        number inc = this->linetilde_04_activeRamps[1];
                        number rampTimeInSamples = this->linetilde_04_activeRamps[2] - this->audioProcessSampleCount - i;
                        number val = __linetilde_04_currentValue;
            
                        while (rampTimeInSamples > 0 && i < n) {
                            out[(Index)i] = val;
                            val += inc;
                            i++;
                            rampTimeInSamples--;
                        }
            
                        if (rampTimeInSamples <= 0) {
                            val = destinationValue;
                            this->linetilde_04_activeRamps->splice(0, 3);
            
                            if ((bool)(!(bool)(this->linetilde_04_activeRamps->length))) {
                                this->getEngine()->scheduleClockEventWithValue(
                                    this,
                                    -62043057,
                                    this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                                    0
                                );;
            
                                if ((bool)(!(bool)(__linetilde_04_keepramp))) {
                                    __linetilde_04_time = 0;
                                }
                            }
                        }
            
                        __linetilde_04_currentValue = val;
                    }
                }
            
                while (i < n) {
                    out[(Index)i] = __linetilde_04_currentValue;
                    i++;
                }
            
                this->linetilde_04_currentValue = __linetilde_04_currentValue;
                this->linetilde_04_time = __linetilde_04_time;
            }
            
            void xfade_tilde_01_perform(
                const Sample * pos,
                const SampleValue * in1,
                const SampleValue * in2,
                SampleValue * out,
                Index n
            ) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out[(Index)i] = in1[(Index)i] * this->xfade_tilde_01_func_next(pos[(Index)i], 0) + in2[(Index)i] * this->xfade_tilde_01_func_next(pos[(Index)i], 1);
                }
            }
            
            void xfade_tilde_02_perform(
                const Sample * pos,
                const SampleValue * in1,
                const SampleValue * in2,
                SampleValue * out,
                Index n
            ) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out[(Index)i] = in1[(Index)i] * this->xfade_tilde_02_func_next(pos[(Index)i], 0) + in2[(Index)i] * this->xfade_tilde_02_func_next(pos[(Index)i], 1);
                }
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void numberobj_15_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_15_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_15_value = localvalue;
            }
            
            void numberobj_16_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_16_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_16_value = localvalue;
            }
            
            number xfade_tilde_01_func_next(number pos, int channel) {
                {
                    {
                        number nchan_1 = 2 - 1;
            
                        {
                            pos = pos * nchan_1;
                        }
            
                        {
                            if (pos > nchan_1)
                                pos = nchan_1;
                            else if (pos < 0)
                                pos = 0;
                        }
            
                        pos = pos - channel;
            
                        if (pos > -1 && pos < 1) {
                            {
                                return rnbo_cos(1.57079632679489661923 * pos);
                            }
                        } else {
                            return 0;
                        }
                    }
                }
            }
            
            void xfade_tilde_01_func_reset() {}
            
            number xfade_tilde_02_func_next(number pos, int channel) {
                {
                    {
                        number nchan_1 = 2 - 1;
            
                        {
                            pos = pos * nchan_1;
                        }
            
                        {
                            if (pos > nchan_1)
                                pos = nchan_1;
                            else if (pos < 0)
                                pos = 0;
                        }
            
                        pos = pos - channel;
            
                        if (pos > -1 && pos < 1) {
                            {
                                return rnbo_cos(1.57079632679489661923 * pos);
                            }
                        } else {
                            return 0;
                        }
                    }
                }
            }
            
            void xfade_tilde_02_func_reset() {}
            
            void numberobj_15_init() {
                this->numberobj_15_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/Mix~/number_obj-5"), 1, this->_currentTime);
            }
            
            void numberobj_15_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_15_value;
            }
            
            void numberobj_15_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_15_value_set(preset["value"]);
            }
            
            void numberobj_16_init() {
                this->numberobj_16_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/Mix~/number_obj-8"), 1, this->_currentTime);
            }
            
            void numberobj_16_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_16_value;
            }
            
            void numberobj_16_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_16_value_set(preset["value"]);
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                xfade_tilde_01_pos = 0;
                xfade_tilde_02_pos = 0;
                numberobj_15_value = 0;
                numberobj_15_value_setter(numberobj_15_value);
                expr_07_in1 = 0;
                expr_07_in2 = 100;
                expr_07_out1 = 0;
                numberobj_16_value = 0;
                numberobj_16_value_setter(numberobj_16_value);
                linetilde_04_time = 10;
                linetilde_04_keepramp = 1;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                numberobj_15_currentFormat = 6;
                numberobj_15_lastValue = 0;
                numberobj_16_currentFormat = 6;
                numberobj_16_lastValue = 0;
                linetilde_04_currentValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number xfade_tilde_01_pos;
                number xfade_tilde_02_pos;
                number numberobj_15_value;
                number expr_07_in1;
                number expr_07_in2;
                number expr_07_out1;
                number numberobj_16_value;
                list linetilde_04_segments;
                number linetilde_04_time;
                number linetilde_04_keepramp;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[1];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Int numberobj_15_currentFormat;
                number numberobj_15_lastValue;
                Int numberobj_16_currentFormat;
                number numberobj_16_lastValue;
                list linetilde_04_activeRamps;
                number linetilde_04_currentValue;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_804 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_812;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_804()
            {
            }
            
            ~RNBOSubpatcher_804()
            {
            }
            
            virtual RNBOSubpatcher_812* getPatcher() const {
                return static_cast<RNBOSubpatcher_812 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
                getEngine()->flushClockEvents(this, -62043057, false);
                getEngine()->flushClockEvents(this, 1114681293, false);
                getEngine()->flushClockEvents(this, -1621164530, false);
            }
            
            SampleIndex currentsampletime() {
                return this->audioProcessSampleCount + this->sampleOffsetIntoNextAudioBuffer;
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                const SampleValue * in3 = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
                const SampleValue * in4 = (numInputs >= 4 && inputs[3] ? inputs[3] : this->zeroBuffer);
                const SampleValue * in5 = (numInputs >= 5 && inputs[4] ? inputs[4] : this->zeroBuffer);
                const SampleValue * in6 = (numInputs >= 6 && inputs[5] ? inputs[5] : this->zeroBuffer);
                this->linetilde_05_perform(this->signals[0], n);
                this->dspexpr_18_perform(in2, this->signals[0], this->signals[1], n);
                this->dspexpr_17_perform(in1, this->signals[0], this->signals[2], n);
                this->linetilde_06_perform(this->signals[0], n);
                this->dspexpr_20_perform(in3, this->signals[0], this->signals[3], n);
                this->dspexpr_22_perform(in4, this->signals[0], this->signals[4], n);
                this->linetilde_07_perform(this->signals[0], n);
                this->dspexpr_23_perform(in5, this->signals[0], this->signals[5], n);
                this->signaladder_10_perform(this->signals[3], this->signals[5], this->signals[5], n);
                this->dspexpr_19_perform(this->signals[2], this->signals[5], out1, n);
                this->dspexpr_24_perform(in6, this->signals[0], this->signals[3], n);
                this->signaladder_11_perform(this->signals[4], this->signals[3], this->signals[3], n);
                this->dspexpr_21_perform(this->signals[1], this->signals[3], out2, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 6; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
                RNBO_UNUSED(value);
                RNBO_UNUSED(hasValue);
                this->updateTime(time);
            
                switch (index) {
                case -62043057:
                    {
                    this->linetilde_05_target_bang();
                    break;
                    }
                case 1114681293:
                    {
                    this->linetilde_06_target_bang();
                    break;
                    }
                case -1621164530:
                    {
                    this->linetilde_07_target_bang();
                    break;
                    }
                }
            }
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("valin"):
                    {
                    if (TAG("verb/Volumes~/number_obj-36") == objectId)
                        this->numberobj_17_valin_set(payload);
            
                    if (TAG("verb/Volumes~/number_obj-39") == objectId)
                        this->numberobj_18_valin_set(payload);
            
                    if (TAG("verb/Volumes~/number_obj-112") == objectId)
                        this->numberobj_19_valin_set(payload);
            
                    if (TAG("verb/Volumes~/number_obj-151") == objectId)
                        this->numberobj_20_valin_set(payload);
            
                    if (TAG("verb/Volumes~/number_obj-14") == objectId)
                        this->numberobj_21_valin_set(payload);
            
                    if (TAG("verb/Volumes~/number_obj-17") == objectId)
                        this->numberobj_22_valin_set(payload);
            
                    break;
                    }
                case TAG("format"):
                    {
                    if (TAG("verb/Volumes~/number_obj-36") == objectId)
                        this->numberobj_17_format_set(payload);
            
                    if (TAG("verb/Volumes~/number_obj-39") == objectId)
                        this->numberobj_18_format_set(payload);
            
                    if (TAG("verb/Volumes~/number_obj-112") == objectId)
                        this->numberobj_19_format_set(payload);
            
                    if (TAG("verb/Volumes~/number_obj-151") == objectId)
                        this->numberobj_20_format_set(payload);
            
                    if (TAG("verb/Volumes~/number_obj-14") == objectId)
                        this->numberobj_21_format_set(payload);
            
                    if (TAG("verb/Volumes~/number_obj-17") == objectId)
                        this->numberobj_22_format_set(payload);
            
                    break;
                    }
                }
            }
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("valout"):
                    {
                    return "valout";
                    }
                case TAG("verb/Volumes~/number_obj-36"):
                    {
                    return "verb/Volumes~/number_obj-36";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("verb/Volumes~/number_obj-39"):
                    {
                    return "verb/Volumes~/number_obj-39";
                    }
                case TAG("verb/Volumes~/number_obj-112"):
                    {
                    return "verb/Volumes~/number_obj-112";
                    }
                case TAG("verb/Volumes~/number_obj-151"):
                    {
                    return "verb/Volumes~/number_obj-151";
                    }
                case TAG("verb/Volumes~/number_obj-14"):
                    {
                    return "verb/Volumes~/number_obj-14";
                    }
                case TAG("verb/Volumes~/number_obj-17"):
                    {
                    return "verb/Volumes~/number_obj-17";
                    }
                case TAG("valin"):
                    {
                    return "valin";
                    }
                case TAG("format"):
                    {
                    return "format";
                    }
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void numberobj_17_valin_set(number v) {
                this->numberobj_17_value_set(v);
            }
            
            void numberobj_17_format_set(number v) {
                this->numberobj_17_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void eventinlet_08_out1_bang_bang() {
                this->numberobj_17_value_bang();
            }
            
            void eventinlet_08_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_17_value_set(converted);
                }
            }
            
            void numberobj_18_valin_set(number v) {
                this->numberobj_18_value_set(v);
            }
            
            void numberobj_18_format_set(number v) {
                this->numberobj_18_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_19_valin_set(number v) {
                this->numberobj_19_value_set(v);
            }
            
            void numberobj_19_format_set(number v) {
                this->numberobj_19_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void eventinlet_09_out1_bang_bang() {
                this->numberobj_19_value_bang();
            }
            
            void eventinlet_09_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_19_value_set(converted);
                }
            }
            
            void numberobj_20_valin_set(number v) {
                this->numberobj_20_value_set(v);
            }
            
            void numberobj_20_format_set(number v) {
                this->numberobj_20_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_21_valin_set(number v) {
                this->numberobj_21_value_set(v);
            }
            
            void numberobj_21_format_set(number v) {
                this->numberobj_21_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void eventinlet_10_out1_bang_bang() {
                this->numberobj_21_value_bang();
            }
            
            void eventinlet_10_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_21_value_set(converted);
                }
            }
            
            void numberobj_22_valin_set(number v) {
                this->numberobj_22_value_set(v);
            }
            
            void numberobj_22_format_set(number v) {
                this->numberobj_22_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void linetilde_05_target_bang() {}
            
            void linetilde_06_target_bang() {}
            
            void linetilde_07_target_bang() {}
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 6;
            }
            
            Index getNumOutputChannels() const {
                return 2;
            }
            
            void initializeObjects() {
                this->numberobj_17_init();
                this->numberobj_18_init();
                this->numberobj_19_init();
                this->numberobj_20_init();
                this->numberobj_21_init();
                this->numberobj_22_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void linetilde_05_time_set(number v) {
                this->linetilde_05_time = v;
            }
            
            void linetilde_05_segments_set(const list& v) {
                this->linetilde_05_segments = jsCreateListCopy(v);
            
                if ((bool)(v->length)) {
                    if (v->length == 1 && this->linetilde_05_time == 0) {
                        this->linetilde_05_activeRamps->length = 0;
                        this->linetilde_05_currentValue = v[0];
                    } else {
                        auto currentTime = this->currentsampletime();
                        number lastRampValue = this->linetilde_05_currentValue;
                        number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
            
                        for (Index i = 0; i < this->linetilde_05_activeRamps->length; i += 3) {
                            rampEnd = this->linetilde_05_activeRamps[(Index)(i + 2)];
            
                            if (rampEnd > currentTime) {
                                this->linetilde_05_activeRamps[(Index)(i + 2)] = currentTime;
                                number diff = rampEnd - currentTime;
                                number valueDiff = diff * this->linetilde_05_activeRamps[(Index)(i + 1)];
                                lastRampValue = this->linetilde_05_activeRamps[(Index)i] - valueDiff;
                                this->linetilde_05_activeRamps[(Index)i] = lastRampValue;
                                this->linetilde_05_activeRamps->length = i + 3;
                                rampEnd = currentTime;
                            } else {
                                lastRampValue = this->linetilde_05_activeRamps[(Index)i];
                            }
                        }
            
                        if (rampEnd < currentTime) {
                            this->linetilde_05_activeRamps->push(lastRampValue);
                            this->linetilde_05_activeRamps->push(0);
                            this->linetilde_05_activeRamps->push(currentTime);
                        }
            
                        number lastRampEnd = currentTime;
            
                        for (Index i = 0; i < v->length; i += 2) {
                            number destinationValue = v[(Index)i];
                            number inc = 0;
                            number rampTimeInSamples;
            
                            if (v->length > i + 1) {
                                rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
            
                                if ((bool)(this->linetilde_05_keepramp)) {
                                    this->linetilde_05_time_set(v[(Index)(i + 1)]);
                                }
                            } else {
                                rampTimeInSamples = this->mstosamps(this->linetilde_05_time);
                            }
            
                            if (rampTimeInSamples <= 0) {
                                rampTimeInSamples = 1;
                            }
            
                            inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                            lastRampEnd += rampTimeInSamples;
                            this->linetilde_05_activeRamps->push(destinationValue);
                            this->linetilde_05_activeRamps->push(inc);
                            this->linetilde_05_activeRamps->push(lastRampEnd);
                            lastRampValue = destinationValue;
                        }
                    }
                }
            }
            
            void numberobj_18_output_set(number v) {
                {
                    list converted = {v};
                    this->linetilde_05_segments_set(converted);
                }
            }
            
            void numberobj_18_value_set(number v) {
                this->numberobj_18_value_setter(v);
                v = this->numberobj_18_value;
                number localvalue = v;
            
                if (this->numberobj_18_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("verb/Volumes~/number_obj-39"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_18_output_set(localvalue);
            }
            
            void expr_08_out1_set(number v) {
                this->expr_08_out1 = v;
                this->numberobj_18_value_set(this->expr_08_out1);
            }
            
            void expr_08_in1_set(number in1) {
                this->expr_08_in1 = in1;
            
                this->expr_08_out1_set(
                    (this->expr_08_in2 == 0 ? 0 : (this->expr_08_in2 == 0. ? 0. : this->expr_08_in1 / this->expr_08_in2))
                );//#map:verb/Volumes~//_obj-38:1
            }
            
            void numberobj_17_output_set(number v) {
                this->expr_08_in1_set(v);
            }
            
            void numberobj_17_value_set(number v) {
                this->numberobj_17_value_setter(v);
                v = this->numberobj_17_value;
                number localvalue = v;
            
                if (this->numberobj_17_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("verb/Volumes~/number_obj-36"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_17_output_set(localvalue);
            }
            
            void eventinlet_08_out1_number_set(number v) {
                this->numberobj_17_value_set(v);
            }
            
            void linetilde_07_time_set(number v) {
                this->linetilde_07_time = v;
            }
            
            void linetilde_07_segments_set(const list& v) {
                this->linetilde_07_segments = jsCreateListCopy(v);
            
                if ((bool)(v->length)) {
                    if (v->length == 1 && this->linetilde_07_time == 0) {
                        this->linetilde_07_activeRamps->length = 0;
                        this->linetilde_07_currentValue = v[0];
                    } else {
                        auto currentTime = this->currentsampletime();
                        number lastRampValue = this->linetilde_07_currentValue;
                        number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
            
                        for (Index i = 0; i < this->linetilde_07_activeRamps->length; i += 3) {
                            rampEnd = this->linetilde_07_activeRamps[(Index)(i + 2)];
            
                            if (rampEnd > currentTime) {
                                this->linetilde_07_activeRamps[(Index)(i + 2)] = currentTime;
                                number diff = rampEnd - currentTime;
                                number valueDiff = diff * this->linetilde_07_activeRamps[(Index)(i + 1)];
                                lastRampValue = this->linetilde_07_activeRamps[(Index)i] - valueDiff;
                                this->linetilde_07_activeRamps[(Index)i] = lastRampValue;
                                this->linetilde_07_activeRamps->length = i + 3;
                                rampEnd = currentTime;
                            } else {
                                lastRampValue = this->linetilde_07_activeRamps[(Index)i];
                            }
                        }
            
                        if (rampEnd < currentTime) {
                            this->linetilde_07_activeRamps->push(lastRampValue);
                            this->linetilde_07_activeRamps->push(0);
                            this->linetilde_07_activeRamps->push(currentTime);
                        }
            
                        number lastRampEnd = currentTime;
            
                        for (Index i = 0; i < v->length; i += 2) {
                            number destinationValue = v[(Index)i];
                            number inc = 0;
                            number rampTimeInSamples;
            
                            if (v->length > i + 1) {
                                rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
            
                                if ((bool)(this->linetilde_07_keepramp)) {
                                    this->linetilde_07_time_set(v[(Index)(i + 1)]);
                                }
                            } else {
                                rampTimeInSamples = this->mstosamps(this->linetilde_07_time);
                            }
            
                            if (rampTimeInSamples <= 0) {
                                rampTimeInSamples = 1;
                            }
            
                            inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                            lastRampEnd += rampTimeInSamples;
                            this->linetilde_07_activeRamps->push(destinationValue);
                            this->linetilde_07_activeRamps->push(inc);
                            this->linetilde_07_activeRamps->push(lastRampEnd);
                            lastRampValue = destinationValue;
                        }
                    }
                }
            }
            
            void numberobj_22_output_set(number v) {
                {
                    list converted = {v};
                    this->linetilde_07_segments_set(converted);
                }
            }
            
            void numberobj_22_value_set(number v) {
                this->numberobj_22_value_setter(v);
                v = this->numberobj_22_value;
                number localvalue = v;
            
                if (this->numberobj_22_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("verb/Volumes~/number_obj-17"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_22_output_set(localvalue);
            }
            
            void expr_10_out1_set(number v) {
                this->expr_10_out1 = v;
                this->numberobj_22_value_set(this->expr_10_out1);
            }
            
            void expr_10_in1_set(number in1) {
                this->expr_10_in1 = in1;
            
                this->expr_10_out1_set(
                    (this->expr_10_in2 == 0 ? 0 : (this->expr_10_in2 == 0. ? 0. : this->expr_10_in1 / this->expr_10_in2))
                );//#map:verb/Volumes~//_obj-16:1
            }
            
            void numberobj_21_output_set(number v) {
                this->expr_10_in1_set(v);
            }
            
            void numberobj_21_value_set(number v) {
                this->numberobj_21_value_setter(v);
                v = this->numberobj_21_value;
                number localvalue = v;
            
                if (this->numberobj_21_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("verb/Volumes~/number_obj-14"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_21_output_set(localvalue);
            }
            
            void eventinlet_10_out1_number_set(number v) {
                this->numberobj_21_value_set(v);
            }
            
            void linetilde_06_time_set(number v) {
                this->linetilde_06_time = v;
            }
            
            void linetilde_06_segments_set(const list& v) {
                this->linetilde_06_segments = jsCreateListCopy(v);
            
                if ((bool)(v->length)) {
                    if (v->length == 1 && this->linetilde_06_time == 0) {
                        this->linetilde_06_activeRamps->length = 0;
                        this->linetilde_06_currentValue = v[0];
                    } else {
                        auto currentTime = this->currentsampletime();
                        number lastRampValue = this->linetilde_06_currentValue;
                        number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
            
                        for (Index i = 0; i < this->linetilde_06_activeRamps->length; i += 3) {
                            rampEnd = this->linetilde_06_activeRamps[(Index)(i + 2)];
            
                            if (rampEnd > currentTime) {
                                this->linetilde_06_activeRamps[(Index)(i + 2)] = currentTime;
                                number diff = rampEnd - currentTime;
                                number valueDiff = diff * this->linetilde_06_activeRamps[(Index)(i + 1)];
                                lastRampValue = this->linetilde_06_activeRamps[(Index)i] - valueDiff;
                                this->linetilde_06_activeRamps[(Index)i] = lastRampValue;
                                this->linetilde_06_activeRamps->length = i + 3;
                                rampEnd = currentTime;
                            } else {
                                lastRampValue = this->linetilde_06_activeRamps[(Index)i];
                            }
                        }
            
                        if (rampEnd < currentTime) {
                            this->linetilde_06_activeRamps->push(lastRampValue);
                            this->linetilde_06_activeRamps->push(0);
                            this->linetilde_06_activeRamps->push(currentTime);
                        }
            
                        number lastRampEnd = currentTime;
            
                        for (Index i = 0; i < v->length; i += 2) {
                            number destinationValue = v[(Index)i];
                            number inc = 0;
                            number rampTimeInSamples;
            
                            if (v->length > i + 1) {
                                rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
            
                                if ((bool)(this->linetilde_06_keepramp)) {
                                    this->linetilde_06_time_set(v[(Index)(i + 1)]);
                                }
                            } else {
                                rampTimeInSamples = this->mstosamps(this->linetilde_06_time);
                            }
            
                            if (rampTimeInSamples <= 0) {
                                rampTimeInSamples = 1;
                            }
            
                            inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                            lastRampEnd += rampTimeInSamples;
                            this->linetilde_06_activeRamps->push(destinationValue);
                            this->linetilde_06_activeRamps->push(inc);
                            this->linetilde_06_activeRamps->push(lastRampEnd);
                            lastRampValue = destinationValue;
                        }
                    }
                }
            }
            
            void numberobj_20_output_set(number v) {
                {
                    list converted = {v};
                    this->linetilde_06_segments_set(converted);
                }
            }
            
            void numberobj_20_value_set(number v) {
                this->numberobj_20_value_setter(v);
                v = this->numberobj_20_value;
                number localvalue = v;
            
                if (this->numberobj_20_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("verb/Volumes~/number_obj-151"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_20_output_set(localvalue);
            }
            
            void expr_09_out1_set(number v) {
                this->expr_09_out1 = v;
                this->numberobj_20_value_set(this->expr_09_out1);
            }
            
            void expr_09_in1_set(number in1) {
                this->expr_09_in1 = in1;
            
                this->expr_09_out1_set(
                    (this->expr_09_in2 == 0 ? 0 : (this->expr_09_in2 == 0. ? 0. : this->expr_09_in1 / this->expr_09_in2))
                );//#map:verb/Volumes~//_obj-33:1
            }
            
            void numberobj_19_output_set(number v) {
                this->expr_09_in1_set(v);
            }
            
            void numberobj_19_value_set(number v) {
                this->numberobj_19_value_setter(v);
                v = this->numberobj_19_value;
                number localvalue = v;
            
                if (this->numberobj_19_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("verb/Volumes~/number_obj-112"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_19_output_set(localvalue);
            }
            
            void eventinlet_09_out1_number_set(number v) {
                this->numberobj_19_value_set(v);
            }
            
            void numberobj_17_value_bang() {
                number v = this->numberobj_17_value;
                number localvalue = v;
            
                if (this->numberobj_17_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("verb/Volumes~/number_obj-36"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_17_output_set(localvalue);
            }
            
            void numberobj_19_value_bang() {
                number v = this->numberobj_19_value;
                number localvalue = v;
            
                if (this->numberobj_19_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("verb/Volumes~/number_obj-112"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_19_output_set(localvalue);
            }
            
            void numberobj_21_value_bang() {
                number v = this->numberobj_21_value;
                number localvalue = v;
            
                if (this->numberobj_21_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("verb/Volumes~/number_obj-14"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_21_output_set(localvalue);
            }
            
            void linetilde_05_perform(SampleValue * out, Index n) {
                auto __linetilde_05_time = this->linetilde_05_time;
                auto __linetilde_05_keepramp = this->linetilde_05_keepramp;
                auto __linetilde_05_currentValue = this->linetilde_05_currentValue;
                Index i = 0;
            
                if ((bool)(this->linetilde_05_activeRamps->length)) {
                    while ((bool)(this->linetilde_05_activeRamps->length) && i < n) {
                        number destinationValue = this->linetilde_05_activeRamps[0];
                        number inc = this->linetilde_05_activeRamps[1];
                        number rampTimeInSamples = this->linetilde_05_activeRamps[2] - this->audioProcessSampleCount - i;
                        number val = __linetilde_05_currentValue;
            
                        while (rampTimeInSamples > 0 && i < n) {
                            out[(Index)i] = val;
                            val += inc;
                            i++;
                            rampTimeInSamples--;
                        }
            
                        if (rampTimeInSamples <= 0) {
                            val = destinationValue;
                            this->linetilde_05_activeRamps->splice(0, 3);
            
                            if ((bool)(!(bool)(this->linetilde_05_activeRamps->length))) {
                                this->getEngine()->scheduleClockEventWithValue(
                                    this,
                                    -62043057,
                                    this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                                    0
                                );;
            
                                if ((bool)(!(bool)(__linetilde_05_keepramp))) {
                                    __linetilde_05_time = 0;
                                }
                            }
                        }
            
                        __linetilde_05_currentValue = val;
                    }
                }
            
                while (i < n) {
                    out[(Index)i] = __linetilde_05_currentValue;
                    i++;
                }
            
                this->linetilde_05_currentValue = __linetilde_05_currentValue;
                this->linetilde_05_time = __linetilde_05_time;
            }
            
            void dspexpr_18_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_17_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void linetilde_06_perform(SampleValue * out, Index n) {
                auto __linetilde_06_time = this->linetilde_06_time;
                auto __linetilde_06_keepramp = this->linetilde_06_keepramp;
                auto __linetilde_06_currentValue = this->linetilde_06_currentValue;
                Index i = 0;
            
                if ((bool)(this->linetilde_06_activeRamps->length)) {
                    while ((bool)(this->linetilde_06_activeRamps->length) && i < n) {
                        number destinationValue = this->linetilde_06_activeRamps[0];
                        number inc = this->linetilde_06_activeRamps[1];
                        number rampTimeInSamples = this->linetilde_06_activeRamps[2] - this->audioProcessSampleCount - i;
                        number val = __linetilde_06_currentValue;
            
                        while (rampTimeInSamples > 0 && i < n) {
                            out[(Index)i] = val;
                            val += inc;
                            i++;
                            rampTimeInSamples--;
                        }
            
                        if (rampTimeInSamples <= 0) {
                            val = destinationValue;
                            this->linetilde_06_activeRamps->splice(0, 3);
            
                            if ((bool)(!(bool)(this->linetilde_06_activeRamps->length))) {
                                this->getEngine()->scheduleClockEventWithValue(
                                    this,
                                    1114681293,
                                    this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                                    0
                                );;
            
                                if ((bool)(!(bool)(__linetilde_06_keepramp))) {
                                    __linetilde_06_time = 0;
                                }
                            }
                        }
            
                        __linetilde_06_currentValue = val;
                    }
                }
            
                while (i < n) {
                    out[(Index)i] = __linetilde_06_currentValue;
                    i++;
                }
            
                this->linetilde_06_currentValue = __linetilde_06_currentValue;
                this->linetilde_06_time = __linetilde_06_time;
            }
            
            void dspexpr_20_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_22_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void linetilde_07_perform(SampleValue * out, Index n) {
                auto __linetilde_07_time = this->linetilde_07_time;
                auto __linetilde_07_keepramp = this->linetilde_07_keepramp;
                auto __linetilde_07_currentValue = this->linetilde_07_currentValue;
                Index i = 0;
            
                if ((bool)(this->linetilde_07_activeRamps->length)) {
                    while ((bool)(this->linetilde_07_activeRamps->length) && i < n) {
                        number destinationValue = this->linetilde_07_activeRamps[0];
                        number inc = this->linetilde_07_activeRamps[1];
                        number rampTimeInSamples = this->linetilde_07_activeRamps[2] - this->audioProcessSampleCount - i;
                        number val = __linetilde_07_currentValue;
            
                        while (rampTimeInSamples > 0 && i < n) {
                            out[(Index)i] = val;
                            val += inc;
                            i++;
                            rampTimeInSamples--;
                        }
            
                        if (rampTimeInSamples <= 0) {
                            val = destinationValue;
                            this->linetilde_07_activeRamps->splice(0, 3);
            
                            if ((bool)(!(bool)(this->linetilde_07_activeRamps->length))) {
                                this->getEngine()->scheduleClockEventWithValue(
                                    this,
                                    -1621164530,
                                    this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                                    0
                                );;
            
                                if ((bool)(!(bool)(__linetilde_07_keepramp))) {
                                    __linetilde_07_time = 0;
                                }
                            }
                        }
            
                        __linetilde_07_currentValue = val;
                    }
                }
            
                while (i < n) {
                    out[(Index)i] = __linetilde_07_currentValue;
                    i++;
                }
            
                this->linetilde_07_currentValue = __linetilde_07_currentValue;
                this->linetilde_07_time = __linetilde_07_time;
            }
            
            void dspexpr_23_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void signaladder_10_perform(
                const SampleValue * in1,
                const SampleValue * in2,
                SampleValue * out,
                Index n
            ) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out[(Index)i] = in1[(Index)i] + in2[(Index)i];
                }
            }
            
            void dspexpr_19_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] + in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_24_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void signaladder_11_perform(
                const SampleValue * in1,
                const SampleValue * in2,
                SampleValue * out,
                Index n
            ) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out[(Index)i] = in1[(Index)i] + in2[(Index)i];
                }
            }
            
            void dspexpr_21_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] + in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void numberobj_17_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_17_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_17_value = localvalue;
            }
            
            void numberobj_18_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_18_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_18_value = localvalue;
            }
            
            void numberobj_19_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_19_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_19_value = localvalue;
            }
            
            void numberobj_20_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_20_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_20_value = localvalue;
            }
            
            void numberobj_21_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_21_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_21_value = localvalue;
            }
            
            void numberobj_22_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_22_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_22_value = localvalue;
            }
            
            void numberobj_17_init() {
                this->numberobj_17_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/Volumes~/number_obj-36"), 1, this->_currentTime);
            }
            
            void numberobj_17_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_17_value;
            }
            
            void numberobj_17_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_17_value_set(preset["value"]);
            }
            
            void numberobj_18_init() {
                this->numberobj_18_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/Volumes~/number_obj-39"), 1, this->_currentTime);
            }
            
            void numberobj_18_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_18_value;
            }
            
            void numberobj_18_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_18_value_set(preset["value"]);
            }
            
            void numberobj_19_init() {
                this->numberobj_19_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/Volumes~/number_obj-112"), 1, this->_currentTime);
            }
            
            void numberobj_19_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_19_value;
            }
            
            void numberobj_19_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_19_value_set(preset["value"]);
            }
            
            void numberobj_20_init() {
                this->numberobj_20_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/Volumes~/number_obj-151"), 1, this->_currentTime);
            }
            
            void numberobj_20_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_20_value;
            }
            
            void numberobj_20_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_20_value_set(preset["value"]);
            }
            
            void numberobj_21_init() {
                this->numberobj_21_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/Volumes~/number_obj-14"), 1, this->_currentTime);
            }
            
            void numberobj_21_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_21_value;
            }
            
            void numberobj_21_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_21_value_set(preset["value"]);
            }
            
            void numberobj_22_init() {
                this->numberobj_22_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/Volumes~/number_obj-17"), 1, this->_currentTime);
            }
            
            void numberobj_22_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_22_value;
            }
            
            void numberobj_22_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_22_value_set(preset["value"]);
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                dspexpr_17_in1 = 0;
                dspexpr_17_in2 = 0;
                dspexpr_18_in1 = 0;
                dspexpr_18_in2 = 0;
                dspexpr_19_in1 = 0;
                dspexpr_19_in2 = 0;
                dspexpr_20_in1 = 0;
                dspexpr_20_in2 = 0;
                dspexpr_21_in1 = 0;
                dspexpr_21_in2 = 0;
                dspexpr_22_in1 = 0;
                dspexpr_22_in2 = 0;
                dspexpr_23_in1 = 0;
                dspexpr_23_in2 = 0;
                dspexpr_24_in1 = 0;
                dspexpr_24_in2 = 0;
                linetilde_05_time = 10;
                linetilde_05_keepramp = 1;
                numberobj_17_value = 0;
                numberobj_17_value_setter(numberobj_17_value);
                expr_08_in1 = 0;
                expr_08_in2 = 100;
                expr_08_out1 = 0;
                numberobj_18_value = 0;
                numberobj_18_value_setter(numberobj_18_value);
                linetilde_06_time = 10;
                linetilde_06_keepramp = 1;
                numberobj_19_value = 0;
                numberobj_19_value_setter(numberobj_19_value);
                expr_09_in1 = 0;
                expr_09_in2 = 100;
                expr_09_out1 = 0;
                numberobj_20_value = 0;
                numberobj_20_value_setter(numberobj_20_value);
                linetilde_07_time = 10;
                linetilde_07_keepramp = 1;
                numberobj_21_value = 0;
                numberobj_21_value_setter(numberobj_21_value);
                expr_10_in1 = 0;
                expr_10_in2 = 100;
                expr_10_out1 = 0;
                numberobj_22_value = 0;
                numberobj_22_value_setter(numberobj_22_value);
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                signals[1] = nullptr;
                signals[2] = nullptr;
                signals[3] = nullptr;
                signals[4] = nullptr;
                signals[5] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                linetilde_05_currentValue = 0;
                numberobj_17_currentFormat = 6;
                numberobj_17_lastValue = 0;
                numberobj_18_currentFormat = 6;
                numberobj_18_lastValue = 0;
                linetilde_06_currentValue = 0;
                numberobj_19_currentFormat = 6;
                numberobj_19_lastValue = 0;
                numberobj_20_currentFormat = 6;
                numberobj_20_lastValue = 0;
                linetilde_07_currentValue = 0;
                numberobj_21_currentFormat = 6;
                numberobj_21_lastValue = 0;
                numberobj_22_currentFormat = 6;
                numberobj_22_lastValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number dspexpr_17_in1;
                number dspexpr_17_in2;
                number dspexpr_18_in1;
                number dspexpr_18_in2;
                number dspexpr_19_in1;
                number dspexpr_19_in2;
                number dspexpr_20_in1;
                number dspexpr_20_in2;
                number dspexpr_21_in1;
                number dspexpr_21_in2;
                number dspexpr_22_in1;
                number dspexpr_22_in2;
                number dspexpr_23_in1;
                number dspexpr_23_in2;
                number dspexpr_24_in1;
                number dspexpr_24_in2;
                list linetilde_05_segments;
                number linetilde_05_time;
                number linetilde_05_keepramp;
                number numberobj_17_value;
                number expr_08_in1;
                number expr_08_in2;
                number expr_08_out1;
                number numberobj_18_value;
                list linetilde_06_segments;
                number linetilde_06_time;
                number linetilde_06_keepramp;
                number numberobj_19_value;
                number expr_09_in1;
                number expr_09_in2;
                number expr_09_out1;
                number numberobj_20_value;
                list linetilde_07_segments;
                number linetilde_07_time;
                number linetilde_07_keepramp;
                number numberobj_21_value;
                number expr_10_in1;
                number expr_10_in2;
                number expr_10_out1;
                number numberobj_22_value;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[6];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                list linetilde_05_activeRamps;
                number linetilde_05_currentValue;
                Int numberobj_17_currentFormat;
                number numberobj_17_lastValue;
                Int numberobj_18_currentFormat;
                number numberobj_18_lastValue;
                list linetilde_06_activeRamps;
                number linetilde_06_currentValue;
                Int numberobj_19_currentFormat;
                number numberobj_19_lastValue;
                Int numberobj_20_currentFormat;
                number numberobj_20_lastValue;
                list linetilde_07_activeRamps;
                number linetilde_07_currentValue;
                Int numberobj_21_currentFormat;
                number numberobj_21_lastValue;
                Int numberobj_22_currentFormat;
                number numberobj_22_lastValue;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_805 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_812;
            friend class rnbomatic;
            
            public:
            
            class RNBOSubpatcher_791 : public PatcherInterfaceImpl {
                        
                        friend class RNBOSubpatcher_805;
                        friend class rnbomatic;
                        
                        public:
                        
                        RNBOSubpatcher_791()
                        {
                        }
                        
                        ~RNBOSubpatcher_791()
                        {
                        }
                        
                        virtual RNBOSubpatcher_805* getPatcher() const {
                            return static_cast<RNBOSubpatcher_805 *>(_parentPatcher);
                        }
                        
                        rnbomatic* getTopLevelPatcher() {
                            return this->getPatcher()->getTopLevelPatcher();
                        }
                        
                        void cancelClockEvents()
                        {
                        }
                        
                        inline number linearinterp(number frac, number x, number y) {
                            return x + (y - x) * frac;
                        }
                        
                        inline number cubicinterp(number a, number w, number x, number y, number z) {
                            number a1 = 1. + a;
                            number aa = a * a1;
                            number b = 1. - a;
                            number b1 = 2. - a;
                            number bb = b * b1;
                            number fw = -.1666667 * bb * a;
                            number fx = .5 * bb * a1;
                            number fy = .5 * aa * b1;
                            number fz = -.1666667 * aa * b;
                            return w * fw + x * fx + y * fy + z * fz;
                        }
                        
                        inline number fastcubicinterp(number a, number w, number x, number y, number z) {
                            number a2 = a * a;
                            number f0 = z - y - w + x;
                            number f1 = w - x - f0;
                            number f2 = y - w;
                            number f3 = x;
                            return f0 * a * a2 + f1 * a2 + f2 * a + f3;
                        }
                        
                        inline number splineinterp(number a, number w, number x, number y, number z) {
                            number a2 = a * a;
                            number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
                            number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
                            number f2 = -0.5 * w + 0.5 * y;
                            return f0 * a * a2 + f1 * a2 + f2 * a + x;
                        }
                        
                        inline number spline6interp(number a, number y0, number y1, number y2, number y3, number y4, number y5) {
                            number ym2py2 = y0 + y4;
                            number ym1py1 = y1 + y3;
                            number y2mym2 = y4 - y0;
                            number y1mym1 = y3 - y1;
                            number sixthym1py1 = (number)1 / (number)6.0 * ym1py1;
                            number c0 = (number)1 / (number)120.0 * ym2py2 + (number)13 / (number)60.0 * ym1py1 + (number)11 / (number)20.0 * y2;
                            number c1 = (number)1 / (number)24.0 * y2mym2 + (number)5 / (number)12.0 * y1mym1;
                            number c2 = (number)1 / (number)12.0 * ym2py2 + sixthym1py1 - (number)1 / (number)2.0 * y2;
                            number c3 = (number)1 / (number)12.0 * y2mym2 - (number)1 / (number)6.0 * y1mym1;
                            number c4 = (number)1 / (number)24.0 * ym2py2 - sixthym1py1 + (number)1 / (number)4.0 * y2;
                            number c5 = (number)1 / (number)120.0 * (y5 - y0) + (number)1 / (number)24.0 * (y1 - y4) + (number)1 / (number)12.0 * (y3 - y2);
                            return ((((c5 * a + c4) * a + c3) * a + c2) * a + c1) * a + c0;
                        }
                        
                        inline number cosT8(number r) {
                            number t84 = 56.0;
                            number t83 = 1680.0;
                            number t82 = 20160.0;
                            number t81 = 2.4801587302e-05;
                            number t73 = 42.0;
                            number t72 = 840.0;
                            number t71 = 1.9841269841e-04;
                        
                            if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
                                number rr = r * r;
                                return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
                            } else if (r > 0.0) {
                                r -= 1.57079632679489661923132169163975144;
                                number rr = r * r;
                                return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                            } else {
                                r += 1.57079632679489661923132169163975144;
                                number rr = r * r;
                                return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                            }
                        }
                        
                        inline number cosineinterp(number frac, number x, number y) {
                            number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
                            return x * (1.0 - a2) + y * a2;
                        }
                        
                        number mstosamps(MillisecondTime ms) {
                            return ms * this->sr * 0.001;
                        }
                        
                        number samplerate() const {
                            return this->sr;
                        }
                        
                        Index vectorsize() const {
                            return this->vs;
                        }
                        
                        number maximum(number x, number y) {
                            return (x < y ? y : x);
                        }
                        
                        Index getNumMidiInputPorts() const {
                            return 0;
                        }
                        
                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                        
                        Index getNumMidiOutputPorts() const {
                            return 0;
                        }
                        
                        void process(
                            const SampleValue * const* inputs,
                            Index numInputs,
                            SampleValue * const* outputs,
                            Index numOutputs,
                            Index n
                        ) {
                            this->vs = n;
                            this->updateTime(this->getEngine()->getCurrentTime());
                            SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                            SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                            const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                            const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                        
                            this->allpass_tilde_04_perform(
                                in1,
                                this->allpass_tilde_04_delayTime,
                                this->allpass_tilde_04_gain,
                                this->signals[0],
                                n
                            );
                        
                            this->allpass_tilde_03_perform(
                                this->signals[0],
                                this->allpass_tilde_03_delayTime,
                                this->allpass_tilde_03_gain,
                                this->signals[1],
                                n
                            );
                        
                            this->allpass_tilde_02_perform(
                                this->signals[1],
                                this->allpass_tilde_02_delayTime,
                                this->allpass_tilde_02_gain,
                                this->signals[0],
                                n
                            );
                        
                            this->allpass_tilde_01_perform(
                                this->signals[0],
                                this->allpass_tilde_01_delayTime,
                                this->allpass_tilde_01_gain,
                                out1,
                                n
                            );
                        
                            this->allpass_tilde_08_perform(
                                in2,
                                this->allpass_tilde_08_delayTime,
                                this->allpass_tilde_08_gain,
                                this->signals[0],
                                n
                            );
                        
                            this->allpass_tilde_07_perform(
                                this->signals[0],
                                this->allpass_tilde_07_delayTime,
                                this->allpass_tilde_07_gain,
                                this->signals[1],
                                n
                            );
                        
                            this->allpass_tilde_06_perform(
                                this->signals[1],
                                this->allpass_tilde_06_delayTime,
                                this->allpass_tilde_06_gain,
                                this->signals[0],
                                n
                            );
                        
                            this->allpass_tilde_05_perform(
                                this->signals[0],
                                this->allpass_tilde_05_delayTime,
                                this->allpass_tilde_05_gain,
                                out2,
                                n
                            );
                        
                            this->stackprotect_perform(n);
                            this->audioProcessSampleCount += this->vs;
                        }
                        
                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                Index i;
                        
                                for (i = 0; i < 2; i++) {
                                    this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                                }
                        
                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                this->didAllocateSignals = true;
                            }
                        
                            const bool sampleRateChanged = sampleRate != this->sr;
                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                        
                            if (sampleRateChanged || maxvsChanged) {
                                this->vs = maxBlockSize;
                                this->maxvs = maxBlockSize;
                                this->sr = sampleRate;
                                this->invsr = 1 / sampleRate;
                            }
                        
                            this->allpass_tilde_04_dspsetup(forceDSPSetup);
                            this->allpass_tilde_03_dspsetup(forceDSPSetup);
                            this->allpass_tilde_02_dspsetup(forceDSPSetup);
                            this->allpass_tilde_01_dspsetup(forceDSPSetup);
                            this->allpass_tilde_08_dspsetup(forceDSPSetup);
                            this->allpass_tilde_07_dspsetup(forceDSPSetup);
                            this->allpass_tilde_06_dspsetup(forceDSPSetup);
                            this->allpass_tilde_05_dspsetup(forceDSPSetup);
                        
                            if (sampleRateChanged)
                                this->onSampleRateChanged(sampleRate);
                        }
                        
                        void setProbingTarget(MessageTag id) {
                            switch (id) {
                            default:
                                {
                                this->setProbingIndex(-1);
                                break;
                                }
                            }
                        }
                        
                        void setProbingIndex(ProbingIndex ) {}
                        
                        Index getProbingChannels(MessageTag outletId) const {
                            RNBO_UNUSED(outletId);
                            return 0;
                        }
                        
                        Index getIsMuted()  {
                            return this->isMuted;
                        }
                        
                        void setIsMuted(Index v)  {
                            this->isMuted = v;
                        }
                        
                        void onSampleRateChanged(double ) {}
                        
                        Index getPatcherSerial() const {
                            return 0;
                        }
                        
                        void getState(PatcherStateInterface& ) {}
                        
                        void setState() {}
                        
                        void getPreset(PatcherStateInterface& ) {}
                        
                        void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                        
                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValue(index, value, time);
                        }
                        
                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                            this->setParameterValue(index, this->getParameterValue(index), time);
                        }
                        
                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValueNormalized(index, value, time);
                        }
                        
                        ParameterValue getParameterValue(ParameterIndex index)  {
                            switch (index) {
                            default:
                                {
                                return 0;
                                }
                            }
                        }
                        
                        ParameterIndex getNumSignalInParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumSignalOutParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumParameters() const {
                            return 0;
                        }
                        
                        ConstCharPointer getParameterName(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        ConstCharPointer getParameterId(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                        
                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                        }
                        
                        void setParameterOffset(ParameterIndex offset) {
                            this->parameterOffset = offset;
                        }
                        
                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                            if (steps == 1) {
                                if (normalizedValue > 0) {
                                    normalizedValue = 1.;
                                }
                            } else {
                                ParameterValue oneStep = (number)1. / (steps - 1);
                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                normalizedValue = numberOfSteps * oneStep;
                            }
                        
                            return normalizedValue;
                        }
                        
                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        void scheduleParamInit(ParameterIndex index, Index order) {
                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                        }
                        
                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                        
                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                        
                        void processOutletEvent(
                            EngineLink* sender,
                            OutletIndex index,
                            ParameterValue value,
                            MillisecondTime time
                        ) {
                            this->updateTime(time);
                            this->processOutletAtCurrentTime(sender, index, value);
                        }
                        
                        void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
                        
                        void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
                        
                        void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
                        
                        MessageTagInfo resolveTag(MessageTag tag) const {
                            switch (tag) {
                        
                            }
                        
                            return nullptr;
                        }
                        
                        DataRef* getDataRef(DataRefIndex index)  {
                            switch (index) {
                            case 6:
                                {
                                return addressOf(this->allpass_tilde_01_feedForward_bufferobj);
                                break;
                                }
                            case 7:
                                {
                                return addressOf(this->allpass_tilde_01_feedBack_bufferobj);
                                break;
                                }
                            case 8:
                                {
                                return addressOf(this->allpass_tilde_02_feedForward_bufferobj);
                                break;
                                }
                            case 9:
                                {
                                return addressOf(this->allpass_tilde_02_feedBack_bufferobj);
                                break;
                                }
                            case 10:
                                {
                                return addressOf(this->allpass_tilde_03_feedForward_bufferobj);
                                break;
                                }
                            case 11:
                                {
                                return addressOf(this->allpass_tilde_03_feedBack_bufferobj);
                                break;
                                }
                            case 12:
                                {
                                return addressOf(this->allpass_tilde_04_feedForward_bufferobj);
                                break;
                                }
                            case 13:
                                {
                                return addressOf(this->allpass_tilde_04_feedBack_bufferobj);
                                break;
                                }
                            case 14:
                                {
                                return addressOf(this->allpass_tilde_05_feedForward_bufferobj);
                                break;
                                }
                            case 15:
                                {
                                return addressOf(this->allpass_tilde_05_feedBack_bufferobj);
                                break;
                                }
                            case 16:
                                {
                                return addressOf(this->allpass_tilde_06_feedForward_bufferobj);
                                break;
                                }
                            case 17:
                                {
                                return addressOf(this->allpass_tilde_06_feedBack_bufferobj);
                                break;
                                }
                            case 18:
                                {
                                return addressOf(this->allpass_tilde_07_feedForward_bufferobj);
                                break;
                                }
                            case 19:
                                {
                                return addressOf(this->allpass_tilde_07_feedBack_bufferobj);
                                break;
                                }
                            case 20:
                                {
                                return addressOf(this->allpass_tilde_08_feedForward_bufferobj);
                                break;
                                }
                            case 21:
                                {
                                return addressOf(this->allpass_tilde_08_feedBack_bufferobj);
                                break;
                                }
                            default:
                                {
                                return nullptr;
                                }
                            }
                        }
                        
                        DataRefIndex getNumDataRefs() const {
                            return 16;
                        }
                        
                        void fillDataRef(DataRefIndex , DataRef& ) {}
                        
                        void zeroDataRef(DataRef& ref) {
                            ref->setZero();
                        }
                        
                        void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                            this->updateTime(time);
                        
                            if (index == 6) {
                                this->allpass_tilde_01_feedForward_buffer = new Float64Buffer(this->allpass_tilde_01_feedForward_bufferobj);
                            }
                        
                            if (index == 7) {
                                this->allpass_tilde_01_feedBack_buffer = new Float64Buffer(this->allpass_tilde_01_feedBack_bufferobj);
                            }
                        
                            if (index == 8) {
                                this->allpass_tilde_02_feedForward_buffer = new Float64Buffer(this->allpass_tilde_02_feedForward_bufferobj);
                            }
                        
                            if (index == 9) {
                                this->allpass_tilde_02_feedBack_buffer = new Float64Buffer(this->allpass_tilde_02_feedBack_bufferobj);
                            }
                        
                            if (index == 10) {
                                this->allpass_tilde_03_feedForward_buffer = new Float64Buffer(this->allpass_tilde_03_feedForward_bufferobj);
                            }
                        
                            if (index == 11) {
                                this->allpass_tilde_03_feedBack_buffer = new Float64Buffer(this->allpass_tilde_03_feedBack_bufferobj);
                            }
                        
                            if (index == 12) {
                                this->allpass_tilde_04_feedForward_buffer = new Float64Buffer(this->allpass_tilde_04_feedForward_bufferobj);
                            }
                        
                            if (index == 13) {
                                this->allpass_tilde_04_feedBack_buffer = new Float64Buffer(this->allpass_tilde_04_feedBack_bufferobj);
                            }
                        
                            if (index == 14) {
                                this->allpass_tilde_05_feedForward_buffer = new Float64Buffer(this->allpass_tilde_05_feedForward_bufferobj);
                            }
                        
                            if (index == 15) {
                                this->allpass_tilde_05_feedBack_buffer = new Float64Buffer(this->allpass_tilde_05_feedBack_bufferobj);
                            }
                        
                            if (index == 16) {
                                this->allpass_tilde_06_feedForward_buffer = new Float64Buffer(this->allpass_tilde_06_feedForward_bufferobj);
                            }
                        
                            if (index == 17) {
                                this->allpass_tilde_06_feedBack_buffer = new Float64Buffer(this->allpass_tilde_06_feedBack_bufferobj);
                            }
                        
                            if (index == 18) {
                                this->allpass_tilde_07_feedForward_buffer = new Float64Buffer(this->allpass_tilde_07_feedForward_bufferobj);
                            }
                        
                            if (index == 19) {
                                this->allpass_tilde_07_feedBack_buffer = new Float64Buffer(this->allpass_tilde_07_feedBack_bufferobj);
                            }
                        
                            if (index == 20) {
                                this->allpass_tilde_08_feedForward_buffer = new Float64Buffer(this->allpass_tilde_08_feedForward_bufferobj);
                            }
                        
                            if (index == 21) {
                                this->allpass_tilde_08_feedBack_buffer = new Float64Buffer(this->allpass_tilde_08_feedBack_bufferobj);
                            }
                        }
                        
                        void initialize() {
                            this->allpass_tilde_01_feedForward_bufferobj = initDataRef("allpass_tilde_01_feedForward_bufferobj", true, nullptr, "buffer~");
                            this->allpass_tilde_01_feedBack_bufferobj = initDataRef("allpass_tilde_01_feedBack_bufferobj", true, nullptr, "buffer~");
                            this->allpass_tilde_02_feedForward_bufferobj = initDataRef("allpass_tilde_02_feedForward_bufferobj", true, nullptr, "buffer~");
                            this->allpass_tilde_02_feedBack_bufferobj = initDataRef("allpass_tilde_02_feedBack_bufferobj", true, nullptr, "buffer~");
                            this->allpass_tilde_03_feedForward_bufferobj = initDataRef("allpass_tilde_03_feedForward_bufferobj", true, nullptr, "buffer~");
                            this->allpass_tilde_03_feedBack_bufferobj = initDataRef("allpass_tilde_03_feedBack_bufferobj", true, nullptr, "buffer~");
                            this->allpass_tilde_04_feedForward_bufferobj = initDataRef("allpass_tilde_04_feedForward_bufferobj", true, nullptr, "buffer~");
                            this->allpass_tilde_04_feedBack_bufferobj = initDataRef("allpass_tilde_04_feedBack_bufferobj", true, nullptr, "buffer~");
                            this->allpass_tilde_05_feedForward_bufferobj = initDataRef("allpass_tilde_05_feedForward_bufferobj", true, nullptr, "buffer~");
                            this->allpass_tilde_05_feedBack_bufferobj = initDataRef("allpass_tilde_05_feedBack_bufferobj", true, nullptr, "buffer~");
                            this->allpass_tilde_06_feedForward_bufferobj = initDataRef("allpass_tilde_06_feedForward_bufferobj", true, nullptr, "buffer~");
                            this->allpass_tilde_06_feedBack_bufferobj = initDataRef("allpass_tilde_06_feedBack_bufferobj", true, nullptr, "buffer~");
                            this->allpass_tilde_07_feedForward_bufferobj = initDataRef("allpass_tilde_07_feedForward_bufferobj", true, nullptr, "buffer~");
                            this->allpass_tilde_07_feedBack_bufferobj = initDataRef("allpass_tilde_07_feedBack_bufferobj", true, nullptr, "buffer~");
                            this->allpass_tilde_08_feedForward_bufferobj = initDataRef("allpass_tilde_08_feedForward_bufferobj", true, nullptr, "buffer~");
                            this->allpass_tilde_08_feedBack_bufferobj = initDataRef("allpass_tilde_08_feedBack_bufferobj", true, nullptr, "buffer~");
                            this->assign_defaults();
                            this->setState();
                            this->allpass_tilde_01_feedForward_bufferobj->setIndex(6);
                            this->allpass_tilde_01_feedForward_buffer = new Float64Buffer(this->allpass_tilde_01_feedForward_bufferobj);
                            this->allpass_tilde_01_feedBack_bufferobj->setIndex(7);
                            this->allpass_tilde_01_feedBack_buffer = new Float64Buffer(this->allpass_tilde_01_feedBack_bufferobj);
                            this->allpass_tilde_02_feedForward_bufferobj->setIndex(8);
                            this->allpass_tilde_02_feedForward_buffer = new Float64Buffer(this->allpass_tilde_02_feedForward_bufferobj);
                            this->allpass_tilde_02_feedBack_bufferobj->setIndex(9);
                            this->allpass_tilde_02_feedBack_buffer = new Float64Buffer(this->allpass_tilde_02_feedBack_bufferobj);
                            this->allpass_tilde_03_feedForward_bufferobj->setIndex(10);
                            this->allpass_tilde_03_feedForward_buffer = new Float64Buffer(this->allpass_tilde_03_feedForward_bufferobj);
                            this->allpass_tilde_03_feedBack_bufferobj->setIndex(11);
                            this->allpass_tilde_03_feedBack_buffer = new Float64Buffer(this->allpass_tilde_03_feedBack_bufferobj);
                            this->allpass_tilde_04_feedForward_bufferobj->setIndex(12);
                            this->allpass_tilde_04_feedForward_buffer = new Float64Buffer(this->allpass_tilde_04_feedForward_bufferobj);
                            this->allpass_tilde_04_feedBack_bufferobj->setIndex(13);
                            this->allpass_tilde_04_feedBack_buffer = new Float64Buffer(this->allpass_tilde_04_feedBack_bufferobj);
                            this->allpass_tilde_05_feedForward_bufferobj->setIndex(14);
                            this->allpass_tilde_05_feedForward_buffer = new Float64Buffer(this->allpass_tilde_05_feedForward_bufferobj);
                            this->allpass_tilde_05_feedBack_bufferobj->setIndex(15);
                            this->allpass_tilde_05_feedBack_buffer = new Float64Buffer(this->allpass_tilde_05_feedBack_bufferobj);
                            this->allpass_tilde_06_feedForward_bufferobj->setIndex(16);
                            this->allpass_tilde_06_feedForward_buffer = new Float64Buffer(this->allpass_tilde_06_feedForward_bufferobj);
                            this->allpass_tilde_06_feedBack_bufferobj->setIndex(17);
                            this->allpass_tilde_06_feedBack_buffer = new Float64Buffer(this->allpass_tilde_06_feedBack_bufferobj);
                            this->allpass_tilde_07_feedForward_bufferobj->setIndex(18);
                            this->allpass_tilde_07_feedForward_buffer = new Float64Buffer(this->allpass_tilde_07_feedForward_bufferobj);
                            this->allpass_tilde_07_feedBack_bufferobj->setIndex(19);
                            this->allpass_tilde_07_feedBack_buffer = new Float64Buffer(this->allpass_tilde_07_feedBack_bufferobj);
                            this->allpass_tilde_08_feedForward_bufferobj->setIndex(20);
                            this->allpass_tilde_08_feedForward_buffer = new Float64Buffer(this->allpass_tilde_08_feedForward_bufferobj);
                            this->allpass_tilde_08_feedBack_bufferobj->setIndex(21);
                            this->allpass_tilde_08_feedBack_buffer = new Float64Buffer(this->allpass_tilde_08_feedBack_bufferobj);
                        }
                        
                        protected:
                        
                        number msToSamps(MillisecondTime ms, number sampleRate) {
                            return ms * sampleRate * 0.001;
                        }
                        
                        MillisecondTime sampsToMs(SampleIndex samps) {
                            return samps * (this->invsr * 1000);
                        }
                        
                        Index getMaxBlockSize() const {
                            return this->maxvs;
                        }
                        
                        number getSampleRate() const {
                            return this->sr;
                        }
                        
                        bool hasFixedVectorSize() const {
                            return false;
                        }
                        
                        Index getNumInputChannels() const {
                            return 2;
                        }
                        
                        Index getNumOutputChannels() const {
                            return 2;
                        }
                        
                        void initializeObjects() {
                            this->allpass_tilde_01_feedForward_init();
                            this->allpass_tilde_01_feedBack_init();
                            this->allpass_tilde_01_init();
                            this->allpass_tilde_02_feedForward_init();
                            this->allpass_tilde_02_feedBack_init();
                            this->allpass_tilde_02_init();
                            this->allpass_tilde_03_feedForward_init();
                            this->allpass_tilde_03_feedBack_init();
                            this->allpass_tilde_03_init();
                            this->allpass_tilde_04_feedForward_init();
                            this->allpass_tilde_04_feedBack_init();
                            this->allpass_tilde_04_init();
                            this->allpass_tilde_05_feedForward_init();
                            this->allpass_tilde_05_feedBack_init();
                            this->allpass_tilde_05_init();
                            this->allpass_tilde_06_feedForward_init();
                            this->allpass_tilde_06_feedBack_init();
                            this->allpass_tilde_06_init();
                            this->allpass_tilde_07_feedForward_init();
                            this->allpass_tilde_07_feedBack_init();
                            this->allpass_tilde_07_init();
                            this->allpass_tilde_08_feedForward_init();
                            this->allpass_tilde_08_feedBack_init();
                            this->allpass_tilde_08_init();
                        }
                        
                        void sendOutlet(OutletIndex index, ParameterValue value) {
                            this->getEngine()->sendOutlet(this, index, value);
                        }
                        
                        void startup() {}
                        
                        void allocateDataRefs() {
                            this->allpass_tilde_01_feedForward_buffer = this->allpass_tilde_01_feedForward_buffer->allocateIfNeeded();
                        
                            if (this->allpass_tilde_01_feedForward_bufferobj->hasRequestedSize()) {
                                if (this->allpass_tilde_01_feedForward_bufferobj->wantsFill())
                                    this->zeroDataRef(this->allpass_tilde_01_feedForward_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(6);
                            }
                        
                            this->allpass_tilde_01_feedBack_buffer = this->allpass_tilde_01_feedBack_buffer->allocateIfNeeded();
                        
                            if (this->allpass_tilde_01_feedBack_bufferobj->hasRequestedSize()) {
                                if (this->allpass_tilde_01_feedBack_bufferobj->wantsFill())
                                    this->zeroDataRef(this->allpass_tilde_01_feedBack_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(7);
                            }
                        
                            this->allpass_tilde_02_feedForward_buffer = this->allpass_tilde_02_feedForward_buffer->allocateIfNeeded();
                        
                            if (this->allpass_tilde_02_feedForward_bufferobj->hasRequestedSize()) {
                                if (this->allpass_tilde_02_feedForward_bufferobj->wantsFill())
                                    this->zeroDataRef(this->allpass_tilde_02_feedForward_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(8);
                            }
                        
                            this->allpass_tilde_02_feedBack_buffer = this->allpass_tilde_02_feedBack_buffer->allocateIfNeeded();
                        
                            if (this->allpass_tilde_02_feedBack_bufferobj->hasRequestedSize()) {
                                if (this->allpass_tilde_02_feedBack_bufferobj->wantsFill())
                                    this->zeroDataRef(this->allpass_tilde_02_feedBack_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(9);
                            }
                        
                            this->allpass_tilde_03_feedForward_buffer = this->allpass_tilde_03_feedForward_buffer->allocateIfNeeded();
                        
                            if (this->allpass_tilde_03_feedForward_bufferobj->hasRequestedSize()) {
                                if (this->allpass_tilde_03_feedForward_bufferobj->wantsFill())
                                    this->zeroDataRef(this->allpass_tilde_03_feedForward_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(10);
                            }
                        
                            this->allpass_tilde_03_feedBack_buffer = this->allpass_tilde_03_feedBack_buffer->allocateIfNeeded();
                        
                            if (this->allpass_tilde_03_feedBack_bufferobj->hasRequestedSize()) {
                                if (this->allpass_tilde_03_feedBack_bufferobj->wantsFill())
                                    this->zeroDataRef(this->allpass_tilde_03_feedBack_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(11);
                            }
                        
                            this->allpass_tilde_04_feedForward_buffer = this->allpass_tilde_04_feedForward_buffer->allocateIfNeeded();
                        
                            if (this->allpass_tilde_04_feedForward_bufferobj->hasRequestedSize()) {
                                if (this->allpass_tilde_04_feedForward_bufferobj->wantsFill())
                                    this->zeroDataRef(this->allpass_tilde_04_feedForward_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(12);
                            }
                        
                            this->allpass_tilde_04_feedBack_buffer = this->allpass_tilde_04_feedBack_buffer->allocateIfNeeded();
                        
                            if (this->allpass_tilde_04_feedBack_bufferobj->hasRequestedSize()) {
                                if (this->allpass_tilde_04_feedBack_bufferobj->wantsFill())
                                    this->zeroDataRef(this->allpass_tilde_04_feedBack_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(13);
                            }
                        
                            this->allpass_tilde_05_feedForward_buffer = this->allpass_tilde_05_feedForward_buffer->allocateIfNeeded();
                        
                            if (this->allpass_tilde_05_feedForward_bufferobj->hasRequestedSize()) {
                                if (this->allpass_tilde_05_feedForward_bufferobj->wantsFill())
                                    this->zeroDataRef(this->allpass_tilde_05_feedForward_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(14);
                            }
                        
                            this->allpass_tilde_05_feedBack_buffer = this->allpass_tilde_05_feedBack_buffer->allocateIfNeeded();
                        
                            if (this->allpass_tilde_05_feedBack_bufferobj->hasRequestedSize()) {
                                if (this->allpass_tilde_05_feedBack_bufferobj->wantsFill())
                                    this->zeroDataRef(this->allpass_tilde_05_feedBack_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(15);
                            }
                        
                            this->allpass_tilde_06_feedForward_buffer = this->allpass_tilde_06_feedForward_buffer->allocateIfNeeded();
                        
                            if (this->allpass_tilde_06_feedForward_bufferobj->hasRequestedSize()) {
                                if (this->allpass_tilde_06_feedForward_bufferobj->wantsFill())
                                    this->zeroDataRef(this->allpass_tilde_06_feedForward_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(16);
                            }
                        
                            this->allpass_tilde_06_feedBack_buffer = this->allpass_tilde_06_feedBack_buffer->allocateIfNeeded();
                        
                            if (this->allpass_tilde_06_feedBack_bufferobj->hasRequestedSize()) {
                                if (this->allpass_tilde_06_feedBack_bufferobj->wantsFill())
                                    this->zeroDataRef(this->allpass_tilde_06_feedBack_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(17);
                            }
                        
                            this->allpass_tilde_07_feedForward_buffer = this->allpass_tilde_07_feedForward_buffer->allocateIfNeeded();
                        
                            if (this->allpass_tilde_07_feedForward_bufferobj->hasRequestedSize()) {
                                if (this->allpass_tilde_07_feedForward_bufferobj->wantsFill())
                                    this->zeroDataRef(this->allpass_tilde_07_feedForward_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(18);
                            }
                        
                            this->allpass_tilde_07_feedBack_buffer = this->allpass_tilde_07_feedBack_buffer->allocateIfNeeded();
                        
                            if (this->allpass_tilde_07_feedBack_bufferobj->hasRequestedSize()) {
                                if (this->allpass_tilde_07_feedBack_bufferobj->wantsFill())
                                    this->zeroDataRef(this->allpass_tilde_07_feedBack_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(19);
                            }
                        
                            this->allpass_tilde_08_feedForward_buffer = this->allpass_tilde_08_feedForward_buffer->allocateIfNeeded();
                        
                            if (this->allpass_tilde_08_feedForward_bufferobj->hasRequestedSize()) {
                                if (this->allpass_tilde_08_feedForward_bufferobj->wantsFill())
                                    this->zeroDataRef(this->allpass_tilde_08_feedForward_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(20);
                            }
                        
                            this->allpass_tilde_08_feedBack_buffer = this->allpass_tilde_08_feedBack_buffer->allocateIfNeeded();
                        
                            if (this->allpass_tilde_08_feedBack_bufferobj->hasRequestedSize()) {
                                if (this->allpass_tilde_08_feedBack_bufferobj->wantsFill())
                                    this->zeroDataRef(this->allpass_tilde_08_feedBack_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(21);
                            }
                        }
                        
                        void allpass_tilde_04_perform(
                            const Sample * x,
                            number delayTime,
                            number gain,
                            SampleValue * out1,
                            Index n
                        ) {
                            RNBO_UNUSED(gain);
                            RNBO_UNUSED(delayTime);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                number __gain = 0.75;
                                auto delayTimeinSamps = this->mstosamps(4.76);
                                delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                                __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                                number ff = this->allpass_tilde_04_feedForward_read(delayTimeinSamps, 0);
                                number fb = this->allpass_tilde_04_feedBack_read(delayTimeinSamps, 0);
                                number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                                fixdenorm(ov);
                                this->allpass_tilde_04_feedForward_write(x[(Index)i]);
                                this->allpass_tilde_04_feedBack_write(ov);
                                this->allpass_tilde_04_feedForward_step();
                                this->allpass_tilde_04_feedBack_step();
                                out1[(Index)i] = ov;
                            }
                        }
                        
                        void allpass_tilde_03_perform(
                            const Sample * x,
                            number delayTime,
                            number gain,
                            SampleValue * out1,
                            Index n
                        ) {
                            RNBO_UNUSED(gain);
                            RNBO_UNUSED(delayTime);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                number __gain = 0.75;
                                auto delayTimeinSamps = this->mstosamps(3.58);
                                delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                                __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                                number ff = this->allpass_tilde_03_feedForward_read(delayTimeinSamps, 0);
                                number fb = this->allpass_tilde_03_feedBack_read(delayTimeinSamps, 0);
                                number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                                fixdenorm(ov);
                                this->allpass_tilde_03_feedForward_write(x[(Index)i]);
                                this->allpass_tilde_03_feedBack_write(ov);
                                this->allpass_tilde_03_feedForward_step();
                                this->allpass_tilde_03_feedBack_step();
                                out1[(Index)i] = ov;
                            }
                        }
                        
                        void allpass_tilde_02_perform(
                            const Sample * x,
                            number delayTime,
                            number gain,
                            SampleValue * out1,
                            Index n
                        ) {
                            RNBO_UNUSED(gain);
                            RNBO_UNUSED(delayTime);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                number __gain = 0.625;
                                auto delayTimeinSamps = this->mstosamps(12.73);
                                delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                                __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                                number ff = this->allpass_tilde_02_feedForward_read(delayTimeinSamps, 0);
                                number fb = this->allpass_tilde_02_feedBack_read(delayTimeinSamps, 0);
                                number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                                fixdenorm(ov);
                                this->allpass_tilde_02_feedForward_write(x[(Index)i]);
                                this->allpass_tilde_02_feedBack_write(ov);
                                this->allpass_tilde_02_feedForward_step();
                                this->allpass_tilde_02_feedBack_step();
                                out1[(Index)i] = ov;
                            }
                        }
                        
                        void allpass_tilde_01_perform(
                            const Sample * x,
                            number delayTime,
                            number gain,
                            SampleValue * out1,
                            Index n
                        ) {
                            RNBO_UNUSED(gain);
                            RNBO_UNUSED(delayTime);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                number __gain = 0.625;
                                auto delayTimeinSamps = this->mstosamps(9.3);
                                delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                                __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                                number ff = this->allpass_tilde_01_feedForward_read(delayTimeinSamps, 0);
                                number fb = this->allpass_tilde_01_feedBack_read(delayTimeinSamps, 0);
                                number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                                fixdenorm(ov);
                                this->allpass_tilde_01_feedForward_write(x[(Index)i]);
                                this->allpass_tilde_01_feedBack_write(ov);
                                this->allpass_tilde_01_feedForward_step();
                                this->allpass_tilde_01_feedBack_step();
                                out1[(Index)i] = ov;
                            }
                        }
                        
                        void allpass_tilde_08_perform(
                            const Sample * x,
                            number delayTime,
                            number gain,
                            SampleValue * out1,
                            Index n
                        ) {
                            RNBO_UNUSED(gain);
                            RNBO_UNUSED(delayTime);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                number __gain = 0.75;
                                auto delayTimeinSamps = this->mstosamps(4.76);
                                delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                                __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                                number ff = this->allpass_tilde_08_feedForward_read(delayTimeinSamps, 0);
                                number fb = this->allpass_tilde_08_feedBack_read(delayTimeinSamps, 0);
                                number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                                fixdenorm(ov);
                                this->allpass_tilde_08_feedForward_write(x[(Index)i]);
                                this->allpass_tilde_08_feedBack_write(ov);
                                this->allpass_tilde_08_feedForward_step();
                                this->allpass_tilde_08_feedBack_step();
                                out1[(Index)i] = ov;
                            }
                        }
                        
                        void allpass_tilde_07_perform(
                            const Sample * x,
                            number delayTime,
                            number gain,
                            SampleValue * out1,
                            Index n
                        ) {
                            RNBO_UNUSED(gain);
                            RNBO_UNUSED(delayTime);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                number __gain = 0.75;
                                auto delayTimeinSamps = this->mstosamps(3.58);
                                delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                                __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                                number ff = this->allpass_tilde_07_feedForward_read(delayTimeinSamps, 0);
                                number fb = this->allpass_tilde_07_feedBack_read(delayTimeinSamps, 0);
                                number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                                fixdenorm(ov);
                                this->allpass_tilde_07_feedForward_write(x[(Index)i]);
                                this->allpass_tilde_07_feedBack_write(ov);
                                this->allpass_tilde_07_feedForward_step();
                                this->allpass_tilde_07_feedBack_step();
                                out1[(Index)i] = ov;
                            }
                        }
                        
                        void allpass_tilde_06_perform(
                            const Sample * x,
                            number delayTime,
                            number gain,
                            SampleValue * out1,
                            Index n
                        ) {
                            RNBO_UNUSED(gain);
                            RNBO_UNUSED(delayTime);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                number __gain = 0.625;
                                auto delayTimeinSamps = this->mstosamps(12.73);
                                delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                                __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                                number ff = this->allpass_tilde_06_feedForward_read(delayTimeinSamps, 0);
                                number fb = this->allpass_tilde_06_feedBack_read(delayTimeinSamps, 0);
                                number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                                fixdenorm(ov);
                                this->allpass_tilde_06_feedForward_write(x[(Index)i]);
                                this->allpass_tilde_06_feedBack_write(ov);
                                this->allpass_tilde_06_feedForward_step();
                                this->allpass_tilde_06_feedBack_step();
                                out1[(Index)i] = ov;
                            }
                        }
                        
                        void allpass_tilde_05_perform(
                            const Sample * x,
                            number delayTime,
                            number gain,
                            SampleValue * out1,
                            Index n
                        ) {
                            RNBO_UNUSED(gain);
                            RNBO_UNUSED(delayTime);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                number __gain = 0.625;
                                auto delayTimeinSamps = this->mstosamps(9.3);
                                delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                                __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                                number ff = this->allpass_tilde_05_feedForward_read(delayTimeinSamps, 0);
                                number fb = this->allpass_tilde_05_feedBack_read(delayTimeinSamps, 0);
                                number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                                fixdenorm(ov);
                                this->allpass_tilde_05_feedForward_write(x[(Index)i]);
                                this->allpass_tilde_05_feedBack_write(ov);
                                this->allpass_tilde_05_feedForward_step();
                                this->allpass_tilde_05_feedBack_step();
                                out1[(Index)i] = ov;
                            }
                        }
                        
                        void stackprotect_perform(Index n) {
                            RNBO_UNUSED(n);
                            auto __stackprotect_count = this->stackprotect_count;
                            __stackprotect_count = 0;
                            this->stackprotect_count = __stackprotect_count;
                        }
                        
                        void allpass_tilde_01_feedForward_step() {
                            this->allpass_tilde_01_feedForward_reader++;
                        
                            if (this->allpass_tilde_01_feedForward_reader >= (int)(this->allpass_tilde_01_feedForward_buffer->getSize()))
                                this->allpass_tilde_01_feedForward_reader = 0;
                        }
                        
                        number allpass_tilde_01_feedForward_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->allpass_tilde_01_feedForward_buffer->getSize()) + this->allpass_tilde_01_feedForward_reader - ((size > this->allpass_tilde_01_feedForward__maxdelay ? this->allpass_tilde_01_feedForward__maxdelay : (size < (this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer) ? this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->allpass_tilde_01_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                                ), this->allpass_tilde_01_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->allpass_tilde_01_feedForward_buffer->getSize()) + this->allpass_tilde_01_feedForward_reader - ((size > this->allpass_tilde_01_feedForward__maxdelay ? this->allpass_tilde_01_feedForward__maxdelay : (size < (1 + this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer) ? 1 + this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->allpass_tilde_01_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                                ), this->allpass_tilde_01_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                                ), this->allpass_tilde_01_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                                ), this->allpass_tilde_01_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->allpass_tilde_01_feedForward_buffer->getSize()) + this->allpass_tilde_01_feedForward_reader - ((size > this->allpass_tilde_01_feedForward__maxdelay ? this->allpass_tilde_01_feedForward__maxdelay : (size < (1 + this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer) ? 1 + this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->allpass_tilde_01_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                                ), this->allpass_tilde_01_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                                ), this->allpass_tilde_01_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                                ), this->allpass_tilde_01_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->allpass_tilde_01_feedForward_buffer->getSize()) + this->allpass_tilde_01_feedForward_reader - ((size > this->allpass_tilde_01_feedForward__maxdelay ? this->allpass_tilde_01_feedForward__maxdelay : (size < (1 + this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer) ? 1 + this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->allpass_tilde_01_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                                ), this->allpass_tilde_01_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                                ), this->allpass_tilde_01_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                                ), this->allpass_tilde_01_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->allpass_tilde_01_feedForward_buffer->getSize()) + this->allpass_tilde_01_feedForward_reader - ((size > this->allpass_tilde_01_feedForward__maxdelay ? this->allpass_tilde_01_feedForward__maxdelay : (size < (1 + this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer) ? 1 + this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->allpass_tilde_01_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                                ), this->allpass_tilde_01_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                                ), this->allpass_tilde_01_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                                ), this->allpass_tilde_01_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                                ), this->allpass_tilde_01_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                                ), this->allpass_tilde_01_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->allpass_tilde_01_feedForward_buffer->getSize()) + this->allpass_tilde_01_feedForward_reader - ((size > this->allpass_tilde_01_feedForward__maxdelay ? this->allpass_tilde_01_feedForward__maxdelay : (size < (this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer) ? this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->allpass_tilde_01_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                                ), this->allpass_tilde_01_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                                ));
                            }
                        
                            number r = (int)(this->allpass_tilde_01_feedForward_buffer->getSize()) + this->allpass_tilde_01_feedForward_reader - ((size > this->allpass_tilde_01_feedForward__maxdelay ? this->allpass_tilde_01_feedForward__maxdelay : (size < (this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer) ? this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->allpass_tilde_01_feedForward_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                            );
                        }
                        
                        void allpass_tilde_01_feedForward_write(number v) {
                            this->allpass_tilde_01_feedForward_writer = this->allpass_tilde_01_feedForward_reader;
                            this->allpass_tilde_01_feedForward_buffer[(Index)this->allpass_tilde_01_feedForward_writer] = v;
                        }
                        
                        number allpass_tilde_01_feedForward_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->allpass_tilde_01_feedForward__maxdelay : size);
                            number val = this->allpass_tilde_01_feedForward_read(effectiveSize, 0);
                            this->allpass_tilde_01_feedForward_write(v);
                            this->allpass_tilde_01_feedForward_step();
                            return val;
                        }
                        
                        array<Index, 2> allpass_tilde_01_feedForward_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->allpass_tilde_01_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->allpass_tilde_01_feedForward_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void allpass_tilde_01_feedForward_init() {
                            auto result = this->allpass_tilde_01_feedForward_calcSizeInSamples();
                            this->allpass_tilde_01_feedForward__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_01_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                            this->allpass_tilde_01_feedForward_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void allpass_tilde_01_feedForward_clear() {
                            this->allpass_tilde_01_feedForward_buffer->setZero();
                        }
                        
                        void allpass_tilde_01_feedForward_reset() {
                            auto result = this->allpass_tilde_01_feedForward_calcSizeInSamples();
                            this->allpass_tilde_01_feedForward__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_01_feedForward_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->allpass_tilde_01_feedForward_buffer);
                            this->allpass_tilde_01_feedForward_wrap = this->allpass_tilde_01_feedForward_buffer->getSize() - 1;
                            this->allpass_tilde_01_feedForward_clear();
                        
                            if (this->allpass_tilde_01_feedForward_reader >= this->allpass_tilde_01_feedForward__maxdelay || this->allpass_tilde_01_feedForward_writer >= this->allpass_tilde_01_feedForward__maxdelay) {
                                this->allpass_tilde_01_feedForward_reader = 0;
                                this->allpass_tilde_01_feedForward_writer = 0;
                            }
                        }
                        
                        void allpass_tilde_01_feedForward_dspsetup() {
                            this->allpass_tilde_01_feedForward_reset();
                        }
                        
                        number allpass_tilde_01_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number allpass_tilde_01_feedForward_size() {
                            return this->allpass_tilde_01_feedForward__maxdelay;
                        }
                        
                        void allpass_tilde_01_feedBack_step() {
                            this->allpass_tilde_01_feedBack_reader++;
                        
                            if (this->allpass_tilde_01_feedBack_reader >= (int)(this->allpass_tilde_01_feedBack_buffer->getSize()))
                                this->allpass_tilde_01_feedBack_reader = 0;
                        }
                        
                        number allpass_tilde_01_feedBack_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->allpass_tilde_01_feedBack_buffer->getSize()) + this->allpass_tilde_01_feedBack_reader - ((size > this->allpass_tilde_01_feedBack__maxdelay ? this->allpass_tilde_01_feedBack__maxdelay : (size < (this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer) ? this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->allpass_tilde_01_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                                ), this->allpass_tilde_01_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->allpass_tilde_01_feedBack_buffer->getSize()) + this->allpass_tilde_01_feedBack_reader - ((size > this->allpass_tilde_01_feedBack__maxdelay ? this->allpass_tilde_01_feedBack__maxdelay : (size < (1 + this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer) ? 1 + this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->allpass_tilde_01_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                                ), this->allpass_tilde_01_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                                ), this->allpass_tilde_01_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                                ), this->allpass_tilde_01_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->allpass_tilde_01_feedBack_buffer->getSize()) + this->allpass_tilde_01_feedBack_reader - ((size > this->allpass_tilde_01_feedBack__maxdelay ? this->allpass_tilde_01_feedBack__maxdelay : (size < (1 + this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer) ? 1 + this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->allpass_tilde_01_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                                ), this->allpass_tilde_01_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                                ), this->allpass_tilde_01_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                                ), this->allpass_tilde_01_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->allpass_tilde_01_feedBack_buffer->getSize()) + this->allpass_tilde_01_feedBack_reader - ((size > this->allpass_tilde_01_feedBack__maxdelay ? this->allpass_tilde_01_feedBack__maxdelay : (size < (1 + this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer) ? 1 + this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->allpass_tilde_01_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                                ), this->allpass_tilde_01_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                                ), this->allpass_tilde_01_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                                ), this->allpass_tilde_01_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->allpass_tilde_01_feedBack_buffer->getSize()) + this->allpass_tilde_01_feedBack_reader - ((size > this->allpass_tilde_01_feedBack__maxdelay ? this->allpass_tilde_01_feedBack__maxdelay : (size < (1 + this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer) ? 1 + this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->allpass_tilde_01_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                                ), this->allpass_tilde_01_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                                ), this->allpass_tilde_01_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                                ), this->allpass_tilde_01_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                                ), this->allpass_tilde_01_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                                ), this->allpass_tilde_01_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->allpass_tilde_01_feedBack_buffer->getSize()) + this->allpass_tilde_01_feedBack_reader - ((size > this->allpass_tilde_01_feedBack__maxdelay ? this->allpass_tilde_01_feedBack__maxdelay : (size < (this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer) ? this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->allpass_tilde_01_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                                ), this->allpass_tilde_01_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                                ));
                            }
                        
                            number r = (int)(this->allpass_tilde_01_feedBack_buffer->getSize()) + this->allpass_tilde_01_feedBack_reader - ((size > this->allpass_tilde_01_feedBack__maxdelay ? this->allpass_tilde_01_feedBack__maxdelay : (size < (this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer) ? this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->allpass_tilde_01_feedBack_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                            );
                        }
                        
                        void allpass_tilde_01_feedBack_write(number v) {
                            this->allpass_tilde_01_feedBack_writer = this->allpass_tilde_01_feedBack_reader;
                            this->allpass_tilde_01_feedBack_buffer[(Index)this->allpass_tilde_01_feedBack_writer] = v;
                        }
                        
                        number allpass_tilde_01_feedBack_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->allpass_tilde_01_feedBack__maxdelay : size);
                            number val = this->allpass_tilde_01_feedBack_read(effectiveSize, 0);
                            this->allpass_tilde_01_feedBack_write(v);
                            this->allpass_tilde_01_feedBack_step();
                            return val;
                        }
                        
                        array<Index, 2> allpass_tilde_01_feedBack_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->allpass_tilde_01_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->allpass_tilde_01_feedBack_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void allpass_tilde_01_feedBack_init() {
                            auto result = this->allpass_tilde_01_feedBack_calcSizeInSamples();
                            this->allpass_tilde_01_feedBack__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_01_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                            this->allpass_tilde_01_feedBack_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void allpass_tilde_01_feedBack_clear() {
                            this->allpass_tilde_01_feedBack_buffer->setZero();
                        }
                        
                        void allpass_tilde_01_feedBack_reset() {
                            auto result = this->allpass_tilde_01_feedBack_calcSizeInSamples();
                            this->allpass_tilde_01_feedBack__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_01_feedBack_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->allpass_tilde_01_feedBack_buffer);
                            this->allpass_tilde_01_feedBack_wrap = this->allpass_tilde_01_feedBack_buffer->getSize() - 1;
                            this->allpass_tilde_01_feedBack_clear();
                        
                            if (this->allpass_tilde_01_feedBack_reader >= this->allpass_tilde_01_feedBack__maxdelay || this->allpass_tilde_01_feedBack_writer >= this->allpass_tilde_01_feedBack__maxdelay) {
                                this->allpass_tilde_01_feedBack_reader = 0;
                                this->allpass_tilde_01_feedBack_writer = 0;
                            }
                        }
                        
                        void allpass_tilde_01_feedBack_dspsetup() {
                            this->allpass_tilde_01_feedBack_reset();
                        }
                        
                        number allpass_tilde_01_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number allpass_tilde_01_feedBack_size() {
                            return this->allpass_tilde_01_feedBack__maxdelay;
                        }
                        
                        void allpass_tilde_01_init() {
                            this->allpass_tilde_01_feedForward_init();
                            this->allpass_tilde_01_feedBack_init();
                        }
                        
                        void allpass_tilde_01_clear() {
                            this->allpass_tilde_01_feedForward_clear();
                            this->allpass_tilde_01_feedBack_clear();
                        }
                        
                        void allpass_tilde_01_reset() {
                            this->allpass_tilde_01_init();
                            this->allpass_tilde_01_clear();
                        }
                        
                        void allpass_tilde_01_dspsetup(bool force) {
                            if ((bool)(this->allpass_tilde_01_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->allpass_tilde_01_reset();
                            this->allpass_tilde_01_setupDone = true;
                            this->allpass_tilde_01_feedForward_dspsetup();
                            this->allpass_tilde_01_feedBack_dspsetup();
                        }
                        
                        void allpass_tilde_02_feedForward_step() {
                            this->allpass_tilde_02_feedForward_reader++;
                        
                            if (this->allpass_tilde_02_feedForward_reader >= (int)(this->allpass_tilde_02_feedForward_buffer->getSize()))
                                this->allpass_tilde_02_feedForward_reader = 0;
                        }
                        
                        number allpass_tilde_02_feedForward_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->allpass_tilde_02_feedForward_buffer->getSize()) + this->allpass_tilde_02_feedForward_reader - ((size > this->allpass_tilde_02_feedForward__maxdelay ? this->allpass_tilde_02_feedForward__maxdelay : (size < (this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer) ? this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->allpass_tilde_02_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                                ), this->allpass_tilde_02_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->allpass_tilde_02_feedForward_buffer->getSize()) + this->allpass_tilde_02_feedForward_reader - ((size > this->allpass_tilde_02_feedForward__maxdelay ? this->allpass_tilde_02_feedForward__maxdelay : (size < (1 + this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer) ? 1 + this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->allpass_tilde_02_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                                ), this->allpass_tilde_02_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                                ), this->allpass_tilde_02_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                                ), this->allpass_tilde_02_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->allpass_tilde_02_feedForward_buffer->getSize()) + this->allpass_tilde_02_feedForward_reader - ((size > this->allpass_tilde_02_feedForward__maxdelay ? this->allpass_tilde_02_feedForward__maxdelay : (size < (1 + this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer) ? 1 + this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->allpass_tilde_02_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                                ), this->allpass_tilde_02_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                                ), this->allpass_tilde_02_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                                ), this->allpass_tilde_02_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->allpass_tilde_02_feedForward_buffer->getSize()) + this->allpass_tilde_02_feedForward_reader - ((size > this->allpass_tilde_02_feedForward__maxdelay ? this->allpass_tilde_02_feedForward__maxdelay : (size < (1 + this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer) ? 1 + this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->allpass_tilde_02_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                                ), this->allpass_tilde_02_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                                ), this->allpass_tilde_02_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                                ), this->allpass_tilde_02_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->allpass_tilde_02_feedForward_buffer->getSize()) + this->allpass_tilde_02_feedForward_reader - ((size > this->allpass_tilde_02_feedForward__maxdelay ? this->allpass_tilde_02_feedForward__maxdelay : (size < (1 + this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer) ? 1 + this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->allpass_tilde_02_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                                ), this->allpass_tilde_02_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                                ), this->allpass_tilde_02_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                                ), this->allpass_tilde_02_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                                ), this->allpass_tilde_02_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                                ), this->allpass_tilde_02_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->allpass_tilde_02_feedForward_buffer->getSize()) + this->allpass_tilde_02_feedForward_reader - ((size > this->allpass_tilde_02_feedForward__maxdelay ? this->allpass_tilde_02_feedForward__maxdelay : (size < (this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer) ? this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->allpass_tilde_02_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                                ), this->allpass_tilde_02_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                                ));
                            }
                        
                            number r = (int)(this->allpass_tilde_02_feedForward_buffer->getSize()) + this->allpass_tilde_02_feedForward_reader - ((size > this->allpass_tilde_02_feedForward__maxdelay ? this->allpass_tilde_02_feedForward__maxdelay : (size < (this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer) ? this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->allpass_tilde_02_feedForward_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                            );
                        }
                        
                        void allpass_tilde_02_feedForward_write(number v) {
                            this->allpass_tilde_02_feedForward_writer = this->allpass_tilde_02_feedForward_reader;
                            this->allpass_tilde_02_feedForward_buffer[(Index)this->allpass_tilde_02_feedForward_writer] = v;
                        }
                        
                        number allpass_tilde_02_feedForward_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->allpass_tilde_02_feedForward__maxdelay : size);
                            number val = this->allpass_tilde_02_feedForward_read(effectiveSize, 0);
                            this->allpass_tilde_02_feedForward_write(v);
                            this->allpass_tilde_02_feedForward_step();
                            return val;
                        }
                        
                        array<Index, 2> allpass_tilde_02_feedForward_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->allpass_tilde_02_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->allpass_tilde_02_feedForward_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void allpass_tilde_02_feedForward_init() {
                            auto result = this->allpass_tilde_02_feedForward_calcSizeInSamples();
                            this->allpass_tilde_02_feedForward__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_02_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                            this->allpass_tilde_02_feedForward_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void allpass_tilde_02_feedForward_clear() {
                            this->allpass_tilde_02_feedForward_buffer->setZero();
                        }
                        
                        void allpass_tilde_02_feedForward_reset() {
                            auto result = this->allpass_tilde_02_feedForward_calcSizeInSamples();
                            this->allpass_tilde_02_feedForward__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_02_feedForward_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->allpass_tilde_02_feedForward_buffer);
                            this->allpass_tilde_02_feedForward_wrap = this->allpass_tilde_02_feedForward_buffer->getSize() - 1;
                            this->allpass_tilde_02_feedForward_clear();
                        
                            if (this->allpass_tilde_02_feedForward_reader >= this->allpass_tilde_02_feedForward__maxdelay || this->allpass_tilde_02_feedForward_writer >= this->allpass_tilde_02_feedForward__maxdelay) {
                                this->allpass_tilde_02_feedForward_reader = 0;
                                this->allpass_tilde_02_feedForward_writer = 0;
                            }
                        }
                        
                        void allpass_tilde_02_feedForward_dspsetup() {
                            this->allpass_tilde_02_feedForward_reset();
                        }
                        
                        number allpass_tilde_02_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number allpass_tilde_02_feedForward_size() {
                            return this->allpass_tilde_02_feedForward__maxdelay;
                        }
                        
                        void allpass_tilde_02_feedBack_step() {
                            this->allpass_tilde_02_feedBack_reader++;
                        
                            if (this->allpass_tilde_02_feedBack_reader >= (int)(this->allpass_tilde_02_feedBack_buffer->getSize()))
                                this->allpass_tilde_02_feedBack_reader = 0;
                        }
                        
                        number allpass_tilde_02_feedBack_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->allpass_tilde_02_feedBack_buffer->getSize()) + this->allpass_tilde_02_feedBack_reader - ((size > this->allpass_tilde_02_feedBack__maxdelay ? this->allpass_tilde_02_feedBack__maxdelay : (size < (this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer) ? this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->allpass_tilde_02_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                                ), this->allpass_tilde_02_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->allpass_tilde_02_feedBack_buffer->getSize()) + this->allpass_tilde_02_feedBack_reader - ((size > this->allpass_tilde_02_feedBack__maxdelay ? this->allpass_tilde_02_feedBack__maxdelay : (size < (1 + this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer) ? 1 + this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->allpass_tilde_02_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                                ), this->allpass_tilde_02_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                                ), this->allpass_tilde_02_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                                ), this->allpass_tilde_02_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->allpass_tilde_02_feedBack_buffer->getSize()) + this->allpass_tilde_02_feedBack_reader - ((size > this->allpass_tilde_02_feedBack__maxdelay ? this->allpass_tilde_02_feedBack__maxdelay : (size < (1 + this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer) ? 1 + this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->allpass_tilde_02_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                                ), this->allpass_tilde_02_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                                ), this->allpass_tilde_02_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                                ), this->allpass_tilde_02_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->allpass_tilde_02_feedBack_buffer->getSize()) + this->allpass_tilde_02_feedBack_reader - ((size > this->allpass_tilde_02_feedBack__maxdelay ? this->allpass_tilde_02_feedBack__maxdelay : (size < (1 + this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer) ? 1 + this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->allpass_tilde_02_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                                ), this->allpass_tilde_02_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                                ), this->allpass_tilde_02_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                                ), this->allpass_tilde_02_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->allpass_tilde_02_feedBack_buffer->getSize()) + this->allpass_tilde_02_feedBack_reader - ((size > this->allpass_tilde_02_feedBack__maxdelay ? this->allpass_tilde_02_feedBack__maxdelay : (size < (1 + this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer) ? 1 + this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->allpass_tilde_02_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                                ), this->allpass_tilde_02_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                                ), this->allpass_tilde_02_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                                ), this->allpass_tilde_02_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                                ), this->allpass_tilde_02_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                                ), this->allpass_tilde_02_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->allpass_tilde_02_feedBack_buffer->getSize()) + this->allpass_tilde_02_feedBack_reader - ((size > this->allpass_tilde_02_feedBack__maxdelay ? this->allpass_tilde_02_feedBack__maxdelay : (size < (this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer) ? this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->allpass_tilde_02_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                                ), this->allpass_tilde_02_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                                ));
                            }
                        
                            number r = (int)(this->allpass_tilde_02_feedBack_buffer->getSize()) + this->allpass_tilde_02_feedBack_reader - ((size > this->allpass_tilde_02_feedBack__maxdelay ? this->allpass_tilde_02_feedBack__maxdelay : (size < (this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer) ? this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->allpass_tilde_02_feedBack_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                            );
                        }
                        
                        void allpass_tilde_02_feedBack_write(number v) {
                            this->allpass_tilde_02_feedBack_writer = this->allpass_tilde_02_feedBack_reader;
                            this->allpass_tilde_02_feedBack_buffer[(Index)this->allpass_tilde_02_feedBack_writer] = v;
                        }
                        
                        number allpass_tilde_02_feedBack_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->allpass_tilde_02_feedBack__maxdelay : size);
                            number val = this->allpass_tilde_02_feedBack_read(effectiveSize, 0);
                            this->allpass_tilde_02_feedBack_write(v);
                            this->allpass_tilde_02_feedBack_step();
                            return val;
                        }
                        
                        array<Index, 2> allpass_tilde_02_feedBack_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->allpass_tilde_02_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->allpass_tilde_02_feedBack_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void allpass_tilde_02_feedBack_init() {
                            auto result = this->allpass_tilde_02_feedBack_calcSizeInSamples();
                            this->allpass_tilde_02_feedBack__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_02_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                            this->allpass_tilde_02_feedBack_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void allpass_tilde_02_feedBack_clear() {
                            this->allpass_tilde_02_feedBack_buffer->setZero();
                        }
                        
                        void allpass_tilde_02_feedBack_reset() {
                            auto result = this->allpass_tilde_02_feedBack_calcSizeInSamples();
                            this->allpass_tilde_02_feedBack__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_02_feedBack_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->allpass_tilde_02_feedBack_buffer);
                            this->allpass_tilde_02_feedBack_wrap = this->allpass_tilde_02_feedBack_buffer->getSize() - 1;
                            this->allpass_tilde_02_feedBack_clear();
                        
                            if (this->allpass_tilde_02_feedBack_reader >= this->allpass_tilde_02_feedBack__maxdelay || this->allpass_tilde_02_feedBack_writer >= this->allpass_tilde_02_feedBack__maxdelay) {
                                this->allpass_tilde_02_feedBack_reader = 0;
                                this->allpass_tilde_02_feedBack_writer = 0;
                            }
                        }
                        
                        void allpass_tilde_02_feedBack_dspsetup() {
                            this->allpass_tilde_02_feedBack_reset();
                        }
                        
                        number allpass_tilde_02_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number allpass_tilde_02_feedBack_size() {
                            return this->allpass_tilde_02_feedBack__maxdelay;
                        }
                        
                        void allpass_tilde_02_init() {
                            this->allpass_tilde_02_feedForward_init();
                            this->allpass_tilde_02_feedBack_init();
                        }
                        
                        void allpass_tilde_02_clear() {
                            this->allpass_tilde_02_feedForward_clear();
                            this->allpass_tilde_02_feedBack_clear();
                        }
                        
                        void allpass_tilde_02_reset() {
                            this->allpass_tilde_02_init();
                            this->allpass_tilde_02_clear();
                        }
                        
                        void allpass_tilde_02_dspsetup(bool force) {
                            if ((bool)(this->allpass_tilde_02_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->allpass_tilde_02_reset();
                            this->allpass_tilde_02_setupDone = true;
                            this->allpass_tilde_02_feedForward_dspsetup();
                            this->allpass_tilde_02_feedBack_dspsetup();
                        }
                        
                        void allpass_tilde_03_feedForward_step() {
                            this->allpass_tilde_03_feedForward_reader++;
                        
                            if (this->allpass_tilde_03_feedForward_reader >= (int)(this->allpass_tilde_03_feedForward_buffer->getSize()))
                                this->allpass_tilde_03_feedForward_reader = 0;
                        }
                        
                        number allpass_tilde_03_feedForward_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->allpass_tilde_03_feedForward_buffer->getSize()) + this->allpass_tilde_03_feedForward_reader - ((size > this->allpass_tilde_03_feedForward__maxdelay ? this->allpass_tilde_03_feedForward__maxdelay : (size < (this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer) ? this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->allpass_tilde_03_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                                ), this->allpass_tilde_03_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->allpass_tilde_03_feedForward_buffer->getSize()) + this->allpass_tilde_03_feedForward_reader - ((size > this->allpass_tilde_03_feedForward__maxdelay ? this->allpass_tilde_03_feedForward__maxdelay : (size < (1 + this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer) ? 1 + this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->allpass_tilde_03_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                                ), this->allpass_tilde_03_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                                ), this->allpass_tilde_03_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                                ), this->allpass_tilde_03_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->allpass_tilde_03_feedForward_buffer->getSize()) + this->allpass_tilde_03_feedForward_reader - ((size > this->allpass_tilde_03_feedForward__maxdelay ? this->allpass_tilde_03_feedForward__maxdelay : (size < (1 + this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer) ? 1 + this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->allpass_tilde_03_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                                ), this->allpass_tilde_03_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                                ), this->allpass_tilde_03_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                                ), this->allpass_tilde_03_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->allpass_tilde_03_feedForward_buffer->getSize()) + this->allpass_tilde_03_feedForward_reader - ((size > this->allpass_tilde_03_feedForward__maxdelay ? this->allpass_tilde_03_feedForward__maxdelay : (size < (1 + this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer) ? 1 + this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->allpass_tilde_03_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                                ), this->allpass_tilde_03_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                                ), this->allpass_tilde_03_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                                ), this->allpass_tilde_03_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->allpass_tilde_03_feedForward_buffer->getSize()) + this->allpass_tilde_03_feedForward_reader - ((size > this->allpass_tilde_03_feedForward__maxdelay ? this->allpass_tilde_03_feedForward__maxdelay : (size < (1 + this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer) ? 1 + this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->allpass_tilde_03_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                                ), this->allpass_tilde_03_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                                ), this->allpass_tilde_03_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                                ), this->allpass_tilde_03_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                                ), this->allpass_tilde_03_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                                ), this->allpass_tilde_03_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->allpass_tilde_03_feedForward_buffer->getSize()) + this->allpass_tilde_03_feedForward_reader - ((size > this->allpass_tilde_03_feedForward__maxdelay ? this->allpass_tilde_03_feedForward__maxdelay : (size < (this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer) ? this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->allpass_tilde_03_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                                ), this->allpass_tilde_03_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                                ));
                            }
                        
                            number r = (int)(this->allpass_tilde_03_feedForward_buffer->getSize()) + this->allpass_tilde_03_feedForward_reader - ((size > this->allpass_tilde_03_feedForward__maxdelay ? this->allpass_tilde_03_feedForward__maxdelay : (size < (this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer) ? this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->allpass_tilde_03_feedForward_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                            );
                        }
                        
                        void allpass_tilde_03_feedForward_write(number v) {
                            this->allpass_tilde_03_feedForward_writer = this->allpass_tilde_03_feedForward_reader;
                            this->allpass_tilde_03_feedForward_buffer[(Index)this->allpass_tilde_03_feedForward_writer] = v;
                        }
                        
                        number allpass_tilde_03_feedForward_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->allpass_tilde_03_feedForward__maxdelay : size);
                            number val = this->allpass_tilde_03_feedForward_read(effectiveSize, 0);
                            this->allpass_tilde_03_feedForward_write(v);
                            this->allpass_tilde_03_feedForward_step();
                            return val;
                        }
                        
                        array<Index, 2> allpass_tilde_03_feedForward_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->allpass_tilde_03_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->allpass_tilde_03_feedForward_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void allpass_tilde_03_feedForward_init() {
                            auto result = this->allpass_tilde_03_feedForward_calcSizeInSamples();
                            this->allpass_tilde_03_feedForward__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_03_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                            this->allpass_tilde_03_feedForward_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void allpass_tilde_03_feedForward_clear() {
                            this->allpass_tilde_03_feedForward_buffer->setZero();
                        }
                        
                        void allpass_tilde_03_feedForward_reset() {
                            auto result = this->allpass_tilde_03_feedForward_calcSizeInSamples();
                            this->allpass_tilde_03_feedForward__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_03_feedForward_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->allpass_tilde_03_feedForward_buffer);
                            this->allpass_tilde_03_feedForward_wrap = this->allpass_tilde_03_feedForward_buffer->getSize() - 1;
                            this->allpass_tilde_03_feedForward_clear();
                        
                            if (this->allpass_tilde_03_feedForward_reader >= this->allpass_tilde_03_feedForward__maxdelay || this->allpass_tilde_03_feedForward_writer >= this->allpass_tilde_03_feedForward__maxdelay) {
                                this->allpass_tilde_03_feedForward_reader = 0;
                                this->allpass_tilde_03_feedForward_writer = 0;
                            }
                        }
                        
                        void allpass_tilde_03_feedForward_dspsetup() {
                            this->allpass_tilde_03_feedForward_reset();
                        }
                        
                        number allpass_tilde_03_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number allpass_tilde_03_feedForward_size() {
                            return this->allpass_tilde_03_feedForward__maxdelay;
                        }
                        
                        void allpass_tilde_03_feedBack_step() {
                            this->allpass_tilde_03_feedBack_reader++;
                        
                            if (this->allpass_tilde_03_feedBack_reader >= (int)(this->allpass_tilde_03_feedBack_buffer->getSize()))
                                this->allpass_tilde_03_feedBack_reader = 0;
                        }
                        
                        number allpass_tilde_03_feedBack_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->allpass_tilde_03_feedBack_buffer->getSize()) + this->allpass_tilde_03_feedBack_reader - ((size > this->allpass_tilde_03_feedBack__maxdelay ? this->allpass_tilde_03_feedBack__maxdelay : (size < (this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer) ? this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->allpass_tilde_03_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                                ), this->allpass_tilde_03_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->allpass_tilde_03_feedBack_buffer->getSize()) + this->allpass_tilde_03_feedBack_reader - ((size > this->allpass_tilde_03_feedBack__maxdelay ? this->allpass_tilde_03_feedBack__maxdelay : (size < (1 + this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer) ? 1 + this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->allpass_tilde_03_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                                ), this->allpass_tilde_03_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                                ), this->allpass_tilde_03_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                                ), this->allpass_tilde_03_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->allpass_tilde_03_feedBack_buffer->getSize()) + this->allpass_tilde_03_feedBack_reader - ((size > this->allpass_tilde_03_feedBack__maxdelay ? this->allpass_tilde_03_feedBack__maxdelay : (size < (1 + this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer) ? 1 + this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->allpass_tilde_03_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                                ), this->allpass_tilde_03_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                                ), this->allpass_tilde_03_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                                ), this->allpass_tilde_03_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->allpass_tilde_03_feedBack_buffer->getSize()) + this->allpass_tilde_03_feedBack_reader - ((size > this->allpass_tilde_03_feedBack__maxdelay ? this->allpass_tilde_03_feedBack__maxdelay : (size < (1 + this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer) ? 1 + this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->allpass_tilde_03_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                                ), this->allpass_tilde_03_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                                ), this->allpass_tilde_03_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                                ), this->allpass_tilde_03_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->allpass_tilde_03_feedBack_buffer->getSize()) + this->allpass_tilde_03_feedBack_reader - ((size > this->allpass_tilde_03_feedBack__maxdelay ? this->allpass_tilde_03_feedBack__maxdelay : (size < (1 + this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer) ? 1 + this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->allpass_tilde_03_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                                ), this->allpass_tilde_03_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                                ), this->allpass_tilde_03_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                                ), this->allpass_tilde_03_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                                ), this->allpass_tilde_03_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                                ), this->allpass_tilde_03_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->allpass_tilde_03_feedBack_buffer->getSize()) + this->allpass_tilde_03_feedBack_reader - ((size > this->allpass_tilde_03_feedBack__maxdelay ? this->allpass_tilde_03_feedBack__maxdelay : (size < (this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer) ? this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->allpass_tilde_03_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                                ), this->allpass_tilde_03_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                                ));
                            }
                        
                            number r = (int)(this->allpass_tilde_03_feedBack_buffer->getSize()) + this->allpass_tilde_03_feedBack_reader - ((size > this->allpass_tilde_03_feedBack__maxdelay ? this->allpass_tilde_03_feedBack__maxdelay : (size < (this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer) ? this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->allpass_tilde_03_feedBack_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                            );
                        }
                        
                        void allpass_tilde_03_feedBack_write(number v) {
                            this->allpass_tilde_03_feedBack_writer = this->allpass_tilde_03_feedBack_reader;
                            this->allpass_tilde_03_feedBack_buffer[(Index)this->allpass_tilde_03_feedBack_writer] = v;
                        }
                        
                        number allpass_tilde_03_feedBack_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->allpass_tilde_03_feedBack__maxdelay : size);
                            number val = this->allpass_tilde_03_feedBack_read(effectiveSize, 0);
                            this->allpass_tilde_03_feedBack_write(v);
                            this->allpass_tilde_03_feedBack_step();
                            return val;
                        }
                        
                        array<Index, 2> allpass_tilde_03_feedBack_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->allpass_tilde_03_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->allpass_tilde_03_feedBack_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void allpass_tilde_03_feedBack_init() {
                            auto result = this->allpass_tilde_03_feedBack_calcSizeInSamples();
                            this->allpass_tilde_03_feedBack__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_03_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                            this->allpass_tilde_03_feedBack_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void allpass_tilde_03_feedBack_clear() {
                            this->allpass_tilde_03_feedBack_buffer->setZero();
                        }
                        
                        void allpass_tilde_03_feedBack_reset() {
                            auto result = this->allpass_tilde_03_feedBack_calcSizeInSamples();
                            this->allpass_tilde_03_feedBack__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_03_feedBack_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->allpass_tilde_03_feedBack_buffer);
                            this->allpass_tilde_03_feedBack_wrap = this->allpass_tilde_03_feedBack_buffer->getSize() - 1;
                            this->allpass_tilde_03_feedBack_clear();
                        
                            if (this->allpass_tilde_03_feedBack_reader >= this->allpass_tilde_03_feedBack__maxdelay || this->allpass_tilde_03_feedBack_writer >= this->allpass_tilde_03_feedBack__maxdelay) {
                                this->allpass_tilde_03_feedBack_reader = 0;
                                this->allpass_tilde_03_feedBack_writer = 0;
                            }
                        }
                        
                        void allpass_tilde_03_feedBack_dspsetup() {
                            this->allpass_tilde_03_feedBack_reset();
                        }
                        
                        number allpass_tilde_03_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number allpass_tilde_03_feedBack_size() {
                            return this->allpass_tilde_03_feedBack__maxdelay;
                        }
                        
                        void allpass_tilde_03_init() {
                            this->allpass_tilde_03_feedForward_init();
                            this->allpass_tilde_03_feedBack_init();
                        }
                        
                        void allpass_tilde_03_clear() {
                            this->allpass_tilde_03_feedForward_clear();
                            this->allpass_tilde_03_feedBack_clear();
                        }
                        
                        void allpass_tilde_03_reset() {
                            this->allpass_tilde_03_init();
                            this->allpass_tilde_03_clear();
                        }
                        
                        void allpass_tilde_03_dspsetup(bool force) {
                            if ((bool)(this->allpass_tilde_03_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->allpass_tilde_03_reset();
                            this->allpass_tilde_03_setupDone = true;
                            this->allpass_tilde_03_feedForward_dspsetup();
                            this->allpass_tilde_03_feedBack_dspsetup();
                        }
                        
                        void allpass_tilde_04_feedForward_step() {
                            this->allpass_tilde_04_feedForward_reader++;
                        
                            if (this->allpass_tilde_04_feedForward_reader >= (int)(this->allpass_tilde_04_feedForward_buffer->getSize()))
                                this->allpass_tilde_04_feedForward_reader = 0;
                        }
                        
                        number allpass_tilde_04_feedForward_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->allpass_tilde_04_feedForward_buffer->getSize()) + this->allpass_tilde_04_feedForward_reader - ((size > this->allpass_tilde_04_feedForward__maxdelay ? this->allpass_tilde_04_feedForward__maxdelay : (size < (this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer) ? this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->allpass_tilde_04_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                                ), this->allpass_tilde_04_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->allpass_tilde_04_feedForward_buffer->getSize()) + this->allpass_tilde_04_feedForward_reader - ((size > this->allpass_tilde_04_feedForward__maxdelay ? this->allpass_tilde_04_feedForward__maxdelay : (size < (1 + this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer) ? 1 + this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->allpass_tilde_04_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                                ), this->allpass_tilde_04_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                                ), this->allpass_tilde_04_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                                ), this->allpass_tilde_04_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->allpass_tilde_04_feedForward_buffer->getSize()) + this->allpass_tilde_04_feedForward_reader - ((size > this->allpass_tilde_04_feedForward__maxdelay ? this->allpass_tilde_04_feedForward__maxdelay : (size < (1 + this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer) ? 1 + this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->allpass_tilde_04_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                                ), this->allpass_tilde_04_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                                ), this->allpass_tilde_04_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                                ), this->allpass_tilde_04_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->allpass_tilde_04_feedForward_buffer->getSize()) + this->allpass_tilde_04_feedForward_reader - ((size > this->allpass_tilde_04_feedForward__maxdelay ? this->allpass_tilde_04_feedForward__maxdelay : (size < (1 + this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer) ? 1 + this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->allpass_tilde_04_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                                ), this->allpass_tilde_04_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                                ), this->allpass_tilde_04_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                                ), this->allpass_tilde_04_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->allpass_tilde_04_feedForward_buffer->getSize()) + this->allpass_tilde_04_feedForward_reader - ((size > this->allpass_tilde_04_feedForward__maxdelay ? this->allpass_tilde_04_feedForward__maxdelay : (size < (1 + this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer) ? 1 + this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->allpass_tilde_04_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                                ), this->allpass_tilde_04_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                                ), this->allpass_tilde_04_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                                ), this->allpass_tilde_04_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                                ), this->allpass_tilde_04_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                                ), this->allpass_tilde_04_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->allpass_tilde_04_feedForward_buffer->getSize()) + this->allpass_tilde_04_feedForward_reader - ((size > this->allpass_tilde_04_feedForward__maxdelay ? this->allpass_tilde_04_feedForward__maxdelay : (size < (this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer) ? this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->allpass_tilde_04_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                                ), this->allpass_tilde_04_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                                ));
                            }
                        
                            number r = (int)(this->allpass_tilde_04_feedForward_buffer->getSize()) + this->allpass_tilde_04_feedForward_reader - ((size > this->allpass_tilde_04_feedForward__maxdelay ? this->allpass_tilde_04_feedForward__maxdelay : (size < (this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer) ? this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->allpass_tilde_04_feedForward_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                            );
                        }
                        
                        void allpass_tilde_04_feedForward_write(number v) {
                            this->allpass_tilde_04_feedForward_writer = this->allpass_tilde_04_feedForward_reader;
                            this->allpass_tilde_04_feedForward_buffer[(Index)this->allpass_tilde_04_feedForward_writer] = v;
                        }
                        
                        number allpass_tilde_04_feedForward_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->allpass_tilde_04_feedForward__maxdelay : size);
                            number val = this->allpass_tilde_04_feedForward_read(effectiveSize, 0);
                            this->allpass_tilde_04_feedForward_write(v);
                            this->allpass_tilde_04_feedForward_step();
                            return val;
                        }
                        
                        array<Index, 2> allpass_tilde_04_feedForward_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->allpass_tilde_04_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->allpass_tilde_04_feedForward_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void allpass_tilde_04_feedForward_init() {
                            auto result = this->allpass_tilde_04_feedForward_calcSizeInSamples();
                            this->allpass_tilde_04_feedForward__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_04_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                            this->allpass_tilde_04_feedForward_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void allpass_tilde_04_feedForward_clear() {
                            this->allpass_tilde_04_feedForward_buffer->setZero();
                        }
                        
                        void allpass_tilde_04_feedForward_reset() {
                            auto result = this->allpass_tilde_04_feedForward_calcSizeInSamples();
                            this->allpass_tilde_04_feedForward__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_04_feedForward_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->allpass_tilde_04_feedForward_buffer);
                            this->allpass_tilde_04_feedForward_wrap = this->allpass_tilde_04_feedForward_buffer->getSize() - 1;
                            this->allpass_tilde_04_feedForward_clear();
                        
                            if (this->allpass_tilde_04_feedForward_reader >= this->allpass_tilde_04_feedForward__maxdelay || this->allpass_tilde_04_feedForward_writer >= this->allpass_tilde_04_feedForward__maxdelay) {
                                this->allpass_tilde_04_feedForward_reader = 0;
                                this->allpass_tilde_04_feedForward_writer = 0;
                            }
                        }
                        
                        void allpass_tilde_04_feedForward_dspsetup() {
                            this->allpass_tilde_04_feedForward_reset();
                        }
                        
                        number allpass_tilde_04_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number allpass_tilde_04_feedForward_size() {
                            return this->allpass_tilde_04_feedForward__maxdelay;
                        }
                        
                        void allpass_tilde_04_feedBack_step() {
                            this->allpass_tilde_04_feedBack_reader++;
                        
                            if (this->allpass_tilde_04_feedBack_reader >= (int)(this->allpass_tilde_04_feedBack_buffer->getSize()))
                                this->allpass_tilde_04_feedBack_reader = 0;
                        }
                        
                        number allpass_tilde_04_feedBack_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->allpass_tilde_04_feedBack_buffer->getSize()) + this->allpass_tilde_04_feedBack_reader - ((size > this->allpass_tilde_04_feedBack__maxdelay ? this->allpass_tilde_04_feedBack__maxdelay : (size < (this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer) ? this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->allpass_tilde_04_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                                ), this->allpass_tilde_04_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->allpass_tilde_04_feedBack_buffer->getSize()) + this->allpass_tilde_04_feedBack_reader - ((size > this->allpass_tilde_04_feedBack__maxdelay ? this->allpass_tilde_04_feedBack__maxdelay : (size < (1 + this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer) ? 1 + this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->allpass_tilde_04_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                                ), this->allpass_tilde_04_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                                ), this->allpass_tilde_04_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                                ), this->allpass_tilde_04_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->allpass_tilde_04_feedBack_buffer->getSize()) + this->allpass_tilde_04_feedBack_reader - ((size > this->allpass_tilde_04_feedBack__maxdelay ? this->allpass_tilde_04_feedBack__maxdelay : (size < (1 + this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer) ? 1 + this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->allpass_tilde_04_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                                ), this->allpass_tilde_04_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                                ), this->allpass_tilde_04_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                                ), this->allpass_tilde_04_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->allpass_tilde_04_feedBack_buffer->getSize()) + this->allpass_tilde_04_feedBack_reader - ((size > this->allpass_tilde_04_feedBack__maxdelay ? this->allpass_tilde_04_feedBack__maxdelay : (size < (1 + this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer) ? 1 + this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->allpass_tilde_04_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                                ), this->allpass_tilde_04_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                                ), this->allpass_tilde_04_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                                ), this->allpass_tilde_04_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->allpass_tilde_04_feedBack_buffer->getSize()) + this->allpass_tilde_04_feedBack_reader - ((size > this->allpass_tilde_04_feedBack__maxdelay ? this->allpass_tilde_04_feedBack__maxdelay : (size < (1 + this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer) ? 1 + this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->allpass_tilde_04_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                                ), this->allpass_tilde_04_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                                ), this->allpass_tilde_04_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                                ), this->allpass_tilde_04_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                                ), this->allpass_tilde_04_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                                ), this->allpass_tilde_04_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->allpass_tilde_04_feedBack_buffer->getSize()) + this->allpass_tilde_04_feedBack_reader - ((size > this->allpass_tilde_04_feedBack__maxdelay ? this->allpass_tilde_04_feedBack__maxdelay : (size < (this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer) ? this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->allpass_tilde_04_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                                ), this->allpass_tilde_04_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                                ));
                            }
                        
                            number r = (int)(this->allpass_tilde_04_feedBack_buffer->getSize()) + this->allpass_tilde_04_feedBack_reader - ((size > this->allpass_tilde_04_feedBack__maxdelay ? this->allpass_tilde_04_feedBack__maxdelay : (size < (this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer) ? this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->allpass_tilde_04_feedBack_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                            );
                        }
                        
                        void allpass_tilde_04_feedBack_write(number v) {
                            this->allpass_tilde_04_feedBack_writer = this->allpass_tilde_04_feedBack_reader;
                            this->allpass_tilde_04_feedBack_buffer[(Index)this->allpass_tilde_04_feedBack_writer] = v;
                        }
                        
                        number allpass_tilde_04_feedBack_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->allpass_tilde_04_feedBack__maxdelay : size);
                            number val = this->allpass_tilde_04_feedBack_read(effectiveSize, 0);
                            this->allpass_tilde_04_feedBack_write(v);
                            this->allpass_tilde_04_feedBack_step();
                            return val;
                        }
                        
                        array<Index, 2> allpass_tilde_04_feedBack_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->allpass_tilde_04_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->allpass_tilde_04_feedBack_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void allpass_tilde_04_feedBack_init() {
                            auto result = this->allpass_tilde_04_feedBack_calcSizeInSamples();
                            this->allpass_tilde_04_feedBack__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_04_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                            this->allpass_tilde_04_feedBack_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void allpass_tilde_04_feedBack_clear() {
                            this->allpass_tilde_04_feedBack_buffer->setZero();
                        }
                        
                        void allpass_tilde_04_feedBack_reset() {
                            auto result = this->allpass_tilde_04_feedBack_calcSizeInSamples();
                            this->allpass_tilde_04_feedBack__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_04_feedBack_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->allpass_tilde_04_feedBack_buffer);
                            this->allpass_tilde_04_feedBack_wrap = this->allpass_tilde_04_feedBack_buffer->getSize() - 1;
                            this->allpass_tilde_04_feedBack_clear();
                        
                            if (this->allpass_tilde_04_feedBack_reader >= this->allpass_tilde_04_feedBack__maxdelay || this->allpass_tilde_04_feedBack_writer >= this->allpass_tilde_04_feedBack__maxdelay) {
                                this->allpass_tilde_04_feedBack_reader = 0;
                                this->allpass_tilde_04_feedBack_writer = 0;
                            }
                        }
                        
                        void allpass_tilde_04_feedBack_dspsetup() {
                            this->allpass_tilde_04_feedBack_reset();
                        }
                        
                        number allpass_tilde_04_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number allpass_tilde_04_feedBack_size() {
                            return this->allpass_tilde_04_feedBack__maxdelay;
                        }
                        
                        void allpass_tilde_04_init() {
                            this->allpass_tilde_04_feedForward_init();
                            this->allpass_tilde_04_feedBack_init();
                        }
                        
                        void allpass_tilde_04_clear() {
                            this->allpass_tilde_04_feedForward_clear();
                            this->allpass_tilde_04_feedBack_clear();
                        }
                        
                        void allpass_tilde_04_reset() {
                            this->allpass_tilde_04_init();
                            this->allpass_tilde_04_clear();
                        }
                        
                        void allpass_tilde_04_dspsetup(bool force) {
                            if ((bool)(this->allpass_tilde_04_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->allpass_tilde_04_reset();
                            this->allpass_tilde_04_setupDone = true;
                            this->allpass_tilde_04_feedForward_dspsetup();
                            this->allpass_tilde_04_feedBack_dspsetup();
                        }
                        
                        void allpass_tilde_05_feedForward_step() {
                            this->allpass_tilde_05_feedForward_reader++;
                        
                            if (this->allpass_tilde_05_feedForward_reader >= (int)(this->allpass_tilde_05_feedForward_buffer->getSize()))
                                this->allpass_tilde_05_feedForward_reader = 0;
                        }
                        
                        number allpass_tilde_05_feedForward_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->allpass_tilde_05_feedForward_buffer->getSize()) + this->allpass_tilde_05_feedForward_reader - ((size > this->allpass_tilde_05_feedForward__maxdelay ? this->allpass_tilde_05_feedForward__maxdelay : (size < (this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer) ? this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->allpass_tilde_05_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                                ), this->allpass_tilde_05_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->allpass_tilde_05_feedForward_buffer->getSize()) + this->allpass_tilde_05_feedForward_reader - ((size > this->allpass_tilde_05_feedForward__maxdelay ? this->allpass_tilde_05_feedForward__maxdelay : (size < (1 + this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer) ? 1 + this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->allpass_tilde_05_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                                ), this->allpass_tilde_05_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                                ), this->allpass_tilde_05_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                                ), this->allpass_tilde_05_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->allpass_tilde_05_feedForward_buffer->getSize()) + this->allpass_tilde_05_feedForward_reader - ((size > this->allpass_tilde_05_feedForward__maxdelay ? this->allpass_tilde_05_feedForward__maxdelay : (size < (1 + this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer) ? 1 + this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->allpass_tilde_05_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                                ), this->allpass_tilde_05_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                                ), this->allpass_tilde_05_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                                ), this->allpass_tilde_05_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->allpass_tilde_05_feedForward_buffer->getSize()) + this->allpass_tilde_05_feedForward_reader - ((size > this->allpass_tilde_05_feedForward__maxdelay ? this->allpass_tilde_05_feedForward__maxdelay : (size < (1 + this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer) ? 1 + this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->allpass_tilde_05_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                                ), this->allpass_tilde_05_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                                ), this->allpass_tilde_05_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                                ), this->allpass_tilde_05_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->allpass_tilde_05_feedForward_buffer->getSize()) + this->allpass_tilde_05_feedForward_reader - ((size > this->allpass_tilde_05_feedForward__maxdelay ? this->allpass_tilde_05_feedForward__maxdelay : (size < (1 + this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer) ? 1 + this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->allpass_tilde_05_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                                ), this->allpass_tilde_05_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                                ), this->allpass_tilde_05_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                                ), this->allpass_tilde_05_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                                ), this->allpass_tilde_05_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                                ), this->allpass_tilde_05_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->allpass_tilde_05_feedForward_buffer->getSize()) + this->allpass_tilde_05_feedForward_reader - ((size > this->allpass_tilde_05_feedForward__maxdelay ? this->allpass_tilde_05_feedForward__maxdelay : (size < (this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer) ? this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->allpass_tilde_05_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                                ), this->allpass_tilde_05_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                                ));
                            }
                        
                            number r = (int)(this->allpass_tilde_05_feedForward_buffer->getSize()) + this->allpass_tilde_05_feedForward_reader - ((size > this->allpass_tilde_05_feedForward__maxdelay ? this->allpass_tilde_05_feedForward__maxdelay : (size < (this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer) ? this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->allpass_tilde_05_feedForward_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                            );
                        }
                        
                        void allpass_tilde_05_feedForward_write(number v) {
                            this->allpass_tilde_05_feedForward_writer = this->allpass_tilde_05_feedForward_reader;
                            this->allpass_tilde_05_feedForward_buffer[(Index)this->allpass_tilde_05_feedForward_writer] = v;
                        }
                        
                        number allpass_tilde_05_feedForward_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->allpass_tilde_05_feedForward__maxdelay : size);
                            number val = this->allpass_tilde_05_feedForward_read(effectiveSize, 0);
                            this->allpass_tilde_05_feedForward_write(v);
                            this->allpass_tilde_05_feedForward_step();
                            return val;
                        }
                        
                        array<Index, 2> allpass_tilde_05_feedForward_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->allpass_tilde_05_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->allpass_tilde_05_feedForward_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void allpass_tilde_05_feedForward_init() {
                            auto result = this->allpass_tilde_05_feedForward_calcSizeInSamples();
                            this->allpass_tilde_05_feedForward__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_05_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                            this->allpass_tilde_05_feedForward_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void allpass_tilde_05_feedForward_clear() {
                            this->allpass_tilde_05_feedForward_buffer->setZero();
                        }
                        
                        void allpass_tilde_05_feedForward_reset() {
                            auto result = this->allpass_tilde_05_feedForward_calcSizeInSamples();
                            this->allpass_tilde_05_feedForward__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_05_feedForward_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->allpass_tilde_05_feedForward_buffer);
                            this->allpass_tilde_05_feedForward_wrap = this->allpass_tilde_05_feedForward_buffer->getSize() - 1;
                            this->allpass_tilde_05_feedForward_clear();
                        
                            if (this->allpass_tilde_05_feedForward_reader >= this->allpass_tilde_05_feedForward__maxdelay || this->allpass_tilde_05_feedForward_writer >= this->allpass_tilde_05_feedForward__maxdelay) {
                                this->allpass_tilde_05_feedForward_reader = 0;
                                this->allpass_tilde_05_feedForward_writer = 0;
                            }
                        }
                        
                        void allpass_tilde_05_feedForward_dspsetup() {
                            this->allpass_tilde_05_feedForward_reset();
                        }
                        
                        number allpass_tilde_05_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number allpass_tilde_05_feedForward_size() {
                            return this->allpass_tilde_05_feedForward__maxdelay;
                        }
                        
                        void allpass_tilde_05_feedBack_step() {
                            this->allpass_tilde_05_feedBack_reader++;
                        
                            if (this->allpass_tilde_05_feedBack_reader >= (int)(this->allpass_tilde_05_feedBack_buffer->getSize()))
                                this->allpass_tilde_05_feedBack_reader = 0;
                        }
                        
                        number allpass_tilde_05_feedBack_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->allpass_tilde_05_feedBack_buffer->getSize()) + this->allpass_tilde_05_feedBack_reader - ((size > this->allpass_tilde_05_feedBack__maxdelay ? this->allpass_tilde_05_feedBack__maxdelay : (size < (this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer) ? this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->allpass_tilde_05_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                                ), this->allpass_tilde_05_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->allpass_tilde_05_feedBack_buffer->getSize()) + this->allpass_tilde_05_feedBack_reader - ((size > this->allpass_tilde_05_feedBack__maxdelay ? this->allpass_tilde_05_feedBack__maxdelay : (size < (1 + this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer) ? 1 + this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->allpass_tilde_05_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                                ), this->allpass_tilde_05_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                                ), this->allpass_tilde_05_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                                ), this->allpass_tilde_05_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->allpass_tilde_05_feedBack_buffer->getSize()) + this->allpass_tilde_05_feedBack_reader - ((size > this->allpass_tilde_05_feedBack__maxdelay ? this->allpass_tilde_05_feedBack__maxdelay : (size < (1 + this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer) ? 1 + this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->allpass_tilde_05_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                                ), this->allpass_tilde_05_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                                ), this->allpass_tilde_05_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                                ), this->allpass_tilde_05_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->allpass_tilde_05_feedBack_buffer->getSize()) + this->allpass_tilde_05_feedBack_reader - ((size > this->allpass_tilde_05_feedBack__maxdelay ? this->allpass_tilde_05_feedBack__maxdelay : (size < (1 + this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer) ? 1 + this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->allpass_tilde_05_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                                ), this->allpass_tilde_05_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                                ), this->allpass_tilde_05_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                                ), this->allpass_tilde_05_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->allpass_tilde_05_feedBack_buffer->getSize()) + this->allpass_tilde_05_feedBack_reader - ((size > this->allpass_tilde_05_feedBack__maxdelay ? this->allpass_tilde_05_feedBack__maxdelay : (size < (1 + this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer) ? 1 + this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->allpass_tilde_05_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                                ), this->allpass_tilde_05_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                                ), this->allpass_tilde_05_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                                ), this->allpass_tilde_05_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                                ), this->allpass_tilde_05_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                                ), this->allpass_tilde_05_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->allpass_tilde_05_feedBack_buffer->getSize()) + this->allpass_tilde_05_feedBack_reader - ((size > this->allpass_tilde_05_feedBack__maxdelay ? this->allpass_tilde_05_feedBack__maxdelay : (size < (this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer) ? this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->allpass_tilde_05_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                                ), this->allpass_tilde_05_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                                ));
                            }
                        
                            number r = (int)(this->allpass_tilde_05_feedBack_buffer->getSize()) + this->allpass_tilde_05_feedBack_reader - ((size > this->allpass_tilde_05_feedBack__maxdelay ? this->allpass_tilde_05_feedBack__maxdelay : (size < (this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer) ? this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->allpass_tilde_05_feedBack_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                            );
                        }
                        
                        void allpass_tilde_05_feedBack_write(number v) {
                            this->allpass_tilde_05_feedBack_writer = this->allpass_tilde_05_feedBack_reader;
                            this->allpass_tilde_05_feedBack_buffer[(Index)this->allpass_tilde_05_feedBack_writer] = v;
                        }
                        
                        number allpass_tilde_05_feedBack_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->allpass_tilde_05_feedBack__maxdelay : size);
                            number val = this->allpass_tilde_05_feedBack_read(effectiveSize, 0);
                            this->allpass_tilde_05_feedBack_write(v);
                            this->allpass_tilde_05_feedBack_step();
                            return val;
                        }
                        
                        array<Index, 2> allpass_tilde_05_feedBack_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->allpass_tilde_05_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->allpass_tilde_05_feedBack_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void allpass_tilde_05_feedBack_init() {
                            auto result = this->allpass_tilde_05_feedBack_calcSizeInSamples();
                            this->allpass_tilde_05_feedBack__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_05_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                            this->allpass_tilde_05_feedBack_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void allpass_tilde_05_feedBack_clear() {
                            this->allpass_tilde_05_feedBack_buffer->setZero();
                        }
                        
                        void allpass_tilde_05_feedBack_reset() {
                            auto result = this->allpass_tilde_05_feedBack_calcSizeInSamples();
                            this->allpass_tilde_05_feedBack__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_05_feedBack_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->allpass_tilde_05_feedBack_buffer);
                            this->allpass_tilde_05_feedBack_wrap = this->allpass_tilde_05_feedBack_buffer->getSize() - 1;
                            this->allpass_tilde_05_feedBack_clear();
                        
                            if (this->allpass_tilde_05_feedBack_reader >= this->allpass_tilde_05_feedBack__maxdelay || this->allpass_tilde_05_feedBack_writer >= this->allpass_tilde_05_feedBack__maxdelay) {
                                this->allpass_tilde_05_feedBack_reader = 0;
                                this->allpass_tilde_05_feedBack_writer = 0;
                            }
                        }
                        
                        void allpass_tilde_05_feedBack_dspsetup() {
                            this->allpass_tilde_05_feedBack_reset();
                        }
                        
                        number allpass_tilde_05_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number allpass_tilde_05_feedBack_size() {
                            return this->allpass_tilde_05_feedBack__maxdelay;
                        }
                        
                        void allpass_tilde_05_init() {
                            this->allpass_tilde_05_feedForward_init();
                            this->allpass_tilde_05_feedBack_init();
                        }
                        
                        void allpass_tilde_05_clear() {
                            this->allpass_tilde_05_feedForward_clear();
                            this->allpass_tilde_05_feedBack_clear();
                        }
                        
                        void allpass_tilde_05_reset() {
                            this->allpass_tilde_05_init();
                            this->allpass_tilde_05_clear();
                        }
                        
                        void allpass_tilde_05_dspsetup(bool force) {
                            if ((bool)(this->allpass_tilde_05_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->allpass_tilde_05_reset();
                            this->allpass_tilde_05_setupDone = true;
                            this->allpass_tilde_05_feedForward_dspsetup();
                            this->allpass_tilde_05_feedBack_dspsetup();
                        }
                        
                        void allpass_tilde_06_feedForward_step() {
                            this->allpass_tilde_06_feedForward_reader++;
                        
                            if (this->allpass_tilde_06_feedForward_reader >= (int)(this->allpass_tilde_06_feedForward_buffer->getSize()))
                                this->allpass_tilde_06_feedForward_reader = 0;
                        }
                        
                        number allpass_tilde_06_feedForward_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->allpass_tilde_06_feedForward_buffer->getSize()) + this->allpass_tilde_06_feedForward_reader - ((size > this->allpass_tilde_06_feedForward__maxdelay ? this->allpass_tilde_06_feedForward__maxdelay : (size < (this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer) ? this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->allpass_tilde_06_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                                ), this->allpass_tilde_06_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->allpass_tilde_06_feedForward_buffer->getSize()) + this->allpass_tilde_06_feedForward_reader - ((size > this->allpass_tilde_06_feedForward__maxdelay ? this->allpass_tilde_06_feedForward__maxdelay : (size < (1 + this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer) ? 1 + this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->allpass_tilde_06_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                                ), this->allpass_tilde_06_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                                ), this->allpass_tilde_06_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                                ), this->allpass_tilde_06_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->allpass_tilde_06_feedForward_buffer->getSize()) + this->allpass_tilde_06_feedForward_reader - ((size > this->allpass_tilde_06_feedForward__maxdelay ? this->allpass_tilde_06_feedForward__maxdelay : (size < (1 + this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer) ? 1 + this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->allpass_tilde_06_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                                ), this->allpass_tilde_06_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                                ), this->allpass_tilde_06_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                                ), this->allpass_tilde_06_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->allpass_tilde_06_feedForward_buffer->getSize()) + this->allpass_tilde_06_feedForward_reader - ((size > this->allpass_tilde_06_feedForward__maxdelay ? this->allpass_tilde_06_feedForward__maxdelay : (size < (1 + this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer) ? 1 + this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->allpass_tilde_06_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                                ), this->allpass_tilde_06_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                                ), this->allpass_tilde_06_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                                ), this->allpass_tilde_06_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->allpass_tilde_06_feedForward_buffer->getSize()) + this->allpass_tilde_06_feedForward_reader - ((size > this->allpass_tilde_06_feedForward__maxdelay ? this->allpass_tilde_06_feedForward__maxdelay : (size < (1 + this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer) ? 1 + this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->allpass_tilde_06_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                                ), this->allpass_tilde_06_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                                ), this->allpass_tilde_06_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                                ), this->allpass_tilde_06_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                                ), this->allpass_tilde_06_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                                ), this->allpass_tilde_06_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->allpass_tilde_06_feedForward_buffer->getSize()) + this->allpass_tilde_06_feedForward_reader - ((size > this->allpass_tilde_06_feedForward__maxdelay ? this->allpass_tilde_06_feedForward__maxdelay : (size < (this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer) ? this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->allpass_tilde_06_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                                ), this->allpass_tilde_06_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                                ));
                            }
                        
                            number r = (int)(this->allpass_tilde_06_feedForward_buffer->getSize()) + this->allpass_tilde_06_feedForward_reader - ((size > this->allpass_tilde_06_feedForward__maxdelay ? this->allpass_tilde_06_feedForward__maxdelay : (size < (this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer) ? this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->allpass_tilde_06_feedForward_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                            );
                        }
                        
                        void allpass_tilde_06_feedForward_write(number v) {
                            this->allpass_tilde_06_feedForward_writer = this->allpass_tilde_06_feedForward_reader;
                            this->allpass_tilde_06_feedForward_buffer[(Index)this->allpass_tilde_06_feedForward_writer] = v;
                        }
                        
                        number allpass_tilde_06_feedForward_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->allpass_tilde_06_feedForward__maxdelay : size);
                            number val = this->allpass_tilde_06_feedForward_read(effectiveSize, 0);
                            this->allpass_tilde_06_feedForward_write(v);
                            this->allpass_tilde_06_feedForward_step();
                            return val;
                        }
                        
                        array<Index, 2> allpass_tilde_06_feedForward_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->allpass_tilde_06_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->allpass_tilde_06_feedForward_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void allpass_tilde_06_feedForward_init() {
                            auto result = this->allpass_tilde_06_feedForward_calcSizeInSamples();
                            this->allpass_tilde_06_feedForward__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_06_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                            this->allpass_tilde_06_feedForward_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void allpass_tilde_06_feedForward_clear() {
                            this->allpass_tilde_06_feedForward_buffer->setZero();
                        }
                        
                        void allpass_tilde_06_feedForward_reset() {
                            auto result = this->allpass_tilde_06_feedForward_calcSizeInSamples();
                            this->allpass_tilde_06_feedForward__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_06_feedForward_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->allpass_tilde_06_feedForward_buffer);
                            this->allpass_tilde_06_feedForward_wrap = this->allpass_tilde_06_feedForward_buffer->getSize() - 1;
                            this->allpass_tilde_06_feedForward_clear();
                        
                            if (this->allpass_tilde_06_feedForward_reader >= this->allpass_tilde_06_feedForward__maxdelay || this->allpass_tilde_06_feedForward_writer >= this->allpass_tilde_06_feedForward__maxdelay) {
                                this->allpass_tilde_06_feedForward_reader = 0;
                                this->allpass_tilde_06_feedForward_writer = 0;
                            }
                        }
                        
                        void allpass_tilde_06_feedForward_dspsetup() {
                            this->allpass_tilde_06_feedForward_reset();
                        }
                        
                        number allpass_tilde_06_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number allpass_tilde_06_feedForward_size() {
                            return this->allpass_tilde_06_feedForward__maxdelay;
                        }
                        
                        void allpass_tilde_06_feedBack_step() {
                            this->allpass_tilde_06_feedBack_reader++;
                        
                            if (this->allpass_tilde_06_feedBack_reader >= (int)(this->allpass_tilde_06_feedBack_buffer->getSize()))
                                this->allpass_tilde_06_feedBack_reader = 0;
                        }
                        
                        number allpass_tilde_06_feedBack_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->allpass_tilde_06_feedBack_buffer->getSize()) + this->allpass_tilde_06_feedBack_reader - ((size > this->allpass_tilde_06_feedBack__maxdelay ? this->allpass_tilde_06_feedBack__maxdelay : (size < (this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer) ? this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->allpass_tilde_06_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                                ), this->allpass_tilde_06_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->allpass_tilde_06_feedBack_buffer->getSize()) + this->allpass_tilde_06_feedBack_reader - ((size > this->allpass_tilde_06_feedBack__maxdelay ? this->allpass_tilde_06_feedBack__maxdelay : (size < (1 + this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer) ? 1 + this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->allpass_tilde_06_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                                ), this->allpass_tilde_06_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                                ), this->allpass_tilde_06_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                                ), this->allpass_tilde_06_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->allpass_tilde_06_feedBack_buffer->getSize()) + this->allpass_tilde_06_feedBack_reader - ((size > this->allpass_tilde_06_feedBack__maxdelay ? this->allpass_tilde_06_feedBack__maxdelay : (size < (1 + this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer) ? 1 + this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->allpass_tilde_06_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                                ), this->allpass_tilde_06_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                                ), this->allpass_tilde_06_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                                ), this->allpass_tilde_06_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->allpass_tilde_06_feedBack_buffer->getSize()) + this->allpass_tilde_06_feedBack_reader - ((size > this->allpass_tilde_06_feedBack__maxdelay ? this->allpass_tilde_06_feedBack__maxdelay : (size < (1 + this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer) ? 1 + this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->allpass_tilde_06_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                                ), this->allpass_tilde_06_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                                ), this->allpass_tilde_06_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                                ), this->allpass_tilde_06_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->allpass_tilde_06_feedBack_buffer->getSize()) + this->allpass_tilde_06_feedBack_reader - ((size > this->allpass_tilde_06_feedBack__maxdelay ? this->allpass_tilde_06_feedBack__maxdelay : (size < (1 + this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer) ? 1 + this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->allpass_tilde_06_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                                ), this->allpass_tilde_06_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                                ), this->allpass_tilde_06_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                                ), this->allpass_tilde_06_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                                ), this->allpass_tilde_06_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                                ), this->allpass_tilde_06_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->allpass_tilde_06_feedBack_buffer->getSize()) + this->allpass_tilde_06_feedBack_reader - ((size > this->allpass_tilde_06_feedBack__maxdelay ? this->allpass_tilde_06_feedBack__maxdelay : (size < (this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer) ? this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->allpass_tilde_06_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                                ), this->allpass_tilde_06_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                                ));
                            }
                        
                            number r = (int)(this->allpass_tilde_06_feedBack_buffer->getSize()) + this->allpass_tilde_06_feedBack_reader - ((size > this->allpass_tilde_06_feedBack__maxdelay ? this->allpass_tilde_06_feedBack__maxdelay : (size < (this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer) ? this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->allpass_tilde_06_feedBack_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                            );
                        }
                        
                        void allpass_tilde_06_feedBack_write(number v) {
                            this->allpass_tilde_06_feedBack_writer = this->allpass_tilde_06_feedBack_reader;
                            this->allpass_tilde_06_feedBack_buffer[(Index)this->allpass_tilde_06_feedBack_writer] = v;
                        }
                        
                        number allpass_tilde_06_feedBack_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->allpass_tilde_06_feedBack__maxdelay : size);
                            number val = this->allpass_tilde_06_feedBack_read(effectiveSize, 0);
                            this->allpass_tilde_06_feedBack_write(v);
                            this->allpass_tilde_06_feedBack_step();
                            return val;
                        }
                        
                        array<Index, 2> allpass_tilde_06_feedBack_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->allpass_tilde_06_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->allpass_tilde_06_feedBack_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void allpass_tilde_06_feedBack_init() {
                            auto result = this->allpass_tilde_06_feedBack_calcSizeInSamples();
                            this->allpass_tilde_06_feedBack__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_06_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                            this->allpass_tilde_06_feedBack_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void allpass_tilde_06_feedBack_clear() {
                            this->allpass_tilde_06_feedBack_buffer->setZero();
                        }
                        
                        void allpass_tilde_06_feedBack_reset() {
                            auto result = this->allpass_tilde_06_feedBack_calcSizeInSamples();
                            this->allpass_tilde_06_feedBack__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_06_feedBack_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->allpass_tilde_06_feedBack_buffer);
                            this->allpass_tilde_06_feedBack_wrap = this->allpass_tilde_06_feedBack_buffer->getSize() - 1;
                            this->allpass_tilde_06_feedBack_clear();
                        
                            if (this->allpass_tilde_06_feedBack_reader >= this->allpass_tilde_06_feedBack__maxdelay || this->allpass_tilde_06_feedBack_writer >= this->allpass_tilde_06_feedBack__maxdelay) {
                                this->allpass_tilde_06_feedBack_reader = 0;
                                this->allpass_tilde_06_feedBack_writer = 0;
                            }
                        }
                        
                        void allpass_tilde_06_feedBack_dspsetup() {
                            this->allpass_tilde_06_feedBack_reset();
                        }
                        
                        number allpass_tilde_06_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number allpass_tilde_06_feedBack_size() {
                            return this->allpass_tilde_06_feedBack__maxdelay;
                        }
                        
                        void allpass_tilde_06_init() {
                            this->allpass_tilde_06_feedForward_init();
                            this->allpass_tilde_06_feedBack_init();
                        }
                        
                        void allpass_tilde_06_clear() {
                            this->allpass_tilde_06_feedForward_clear();
                            this->allpass_tilde_06_feedBack_clear();
                        }
                        
                        void allpass_tilde_06_reset() {
                            this->allpass_tilde_06_init();
                            this->allpass_tilde_06_clear();
                        }
                        
                        void allpass_tilde_06_dspsetup(bool force) {
                            if ((bool)(this->allpass_tilde_06_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->allpass_tilde_06_reset();
                            this->allpass_tilde_06_setupDone = true;
                            this->allpass_tilde_06_feedForward_dspsetup();
                            this->allpass_tilde_06_feedBack_dspsetup();
                        }
                        
                        void allpass_tilde_07_feedForward_step() {
                            this->allpass_tilde_07_feedForward_reader++;
                        
                            if (this->allpass_tilde_07_feedForward_reader >= (int)(this->allpass_tilde_07_feedForward_buffer->getSize()))
                                this->allpass_tilde_07_feedForward_reader = 0;
                        }
                        
                        number allpass_tilde_07_feedForward_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->allpass_tilde_07_feedForward_buffer->getSize()) + this->allpass_tilde_07_feedForward_reader - ((size > this->allpass_tilde_07_feedForward__maxdelay ? this->allpass_tilde_07_feedForward__maxdelay : (size < (this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer) ? this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->allpass_tilde_07_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                                ), this->allpass_tilde_07_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->allpass_tilde_07_feedForward_buffer->getSize()) + this->allpass_tilde_07_feedForward_reader - ((size > this->allpass_tilde_07_feedForward__maxdelay ? this->allpass_tilde_07_feedForward__maxdelay : (size < (1 + this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer) ? 1 + this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->allpass_tilde_07_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                                ), this->allpass_tilde_07_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                                ), this->allpass_tilde_07_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                                ), this->allpass_tilde_07_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->allpass_tilde_07_feedForward_buffer->getSize()) + this->allpass_tilde_07_feedForward_reader - ((size > this->allpass_tilde_07_feedForward__maxdelay ? this->allpass_tilde_07_feedForward__maxdelay : (size < (1 + this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer) ? 1 + this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->allpass_tilde_07_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                                ), this->allpass_tilde_07_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                                ), this->allpass_tilde_07_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                                ), this->allpass_tilde_07_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->allpass_tilde_07_feedForward_buffer->getSize()) + this->allpass_tilde_07_feedForward_reader - ((size > this->allpass_tilde_07_feedForward__maxdelay ? this->allpass_tilde_07_feedForward__maxdelay : (size < (1 + this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer) ? 1 + this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->allpass_tilde_07_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                                ), this->allpass_tilde_07_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                                ), this->allpass_tilde_07_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                                ), this->allpass_tilde_07_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->allpass_tilde_07_feedForward_buffer->getSize()) + this->allpass_tilde_07_feedForward_reader - ((size > this->allpass_tilde_07_feedForward__maxdelay ? this->allpass_tilde_07_feedForward__maxdelay : (size < (1 + this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer) ? 1 + this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->allpass_tilde_07_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                                ), this->allpass_tilde_07_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                                ), this->allpass_tilde_07_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                                ), this->allpass_tilde_07_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                                ), this->allpass_tilde_07_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                                ), this->allpass_tilde_07_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->allpass_tilde_07_feedForward_buffer->getSize()) + this->allpass_tilde_07_feedForward_reader - ((size > this->allpass_tilde_07_feedForward__maxdelay ? this->allpass_tilde_07_feedForward__maxdelay : (size < (this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer) ? this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->allpass_tilde_07_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                                ), this->allpass_tilde_07_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                                ));
                            }
                        
                            number r = (int)(this->allpass_tilde_07_feedForward_buffer->getSize()) + this->allpass_tilde_07_feedForward_reader - ((size > this->allpass_tilde_07_feedForward__maxdelay ? this->allpass_tilde_07_feedForward__maxdelay : (size < (this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer) ? this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->allpass_tilde_07_feedForward_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                            );
                        }
                        
                        void allpass_tilde_07_feedForward_write(number v) {
                            this->allpass_tilde_07_feedForward_writer = this->allpass_tilde_07_feedForward_reader;
                            this->allpass_tilde_07_feedForward_buffer[(Index)this->allpass_tilde_07_feedForward_writer] = v;
                        }
                        
                        number allpass_tilde_07_feedForward_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->allpass_tilde_07_feedForward__maxdelay : size);
                            number val = this->allpass_tilde_07_feedForward_read(effectiveSize, 0);
                            this->allpass_tilde_07_feedForward_write(v);
                            this->allpass_tilde_07_feedForward_step();
                            return val;
                        }
                        
                        array<Index, 2> allpass_tilde_07_feedForward_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->allpass_tilde_07_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->allpass_tilde_07_feedForward_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void allpass_tilde_07_feedForward_init() {
                            auto result = this->allpass_tilde_07_feedForward_calcSizeInSamples();
                            this->allpass_tilde_07_feedForward__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_07_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                            this->allpass_tilde_07_feedForward_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void allpass_tilde_07_feedForward_clear() {
                            this->allpass_tilde_07_feedForward_buffer->setZero();
                        }
                        
                        void allpass_tilde_07_feedForward_reset() {
                            auto result = this->allpass_tilde_07_feedForward_calcSizeInSamples();
                            this->allpass_tilde_07_feedForward__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_07_feedForward_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->allpass_tilde_07_feedForward_buffer);
                            this->allpass_tilde_07_feedForward_wrap = this->allpass_tilde_07_feedForward_buffer->getSize() - 1;
                            this->allpass_tilde_07_feedForward_clear();
                        
                            if (this->allpass_tilde_07_feedForward_reader >= this->allpass_tilde_07_feedForward__maxdelay || this->allpass_tilde_07_feedForward_writer >= this->allpass_tilde_07_feedForward__maxdelay) {
                                this->allpass_tilde_07_feedForward_reader = 0;
                                this->allpass_tilde_07_feedForward_writer = 0;
                            }
                        }
                        
                        void allpass_tilde_07_feedForward_dspsetup() {
                            this->allpass_tilde_07_feedForward_reset();
                        }
                        
                        number allpass_tilde_07_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number allpass_tilde_07_feedForward_size() {
                            return this->allpass_tilde_07_feedForward__maxdelay;
                        }
                        
                        void allpass_tilde_07_feedBack_step() {
                            this->allpass_tilde_07_feedBack_reader++;
                        
                            if (this->allpass_tilde_07_feedBack_reader >= (int)(this->allpass_tilde_07_feedBack_buffer->getSize()))
                                this->allpass_tilde_07_feedBack_reader = 0;
                        }
                        
                        number allpass_tilde_07_feedBack_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->allpass_tilde_07_feedBack_buffer->getSize()) + this->allpass_tilde_07_feedBack_reader - ((size > this->allpass_tilde_07_feedBack__maxdelay ? this->allpass_tilde_07_feedBack__maxdelay : (size < (this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer) ? this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->allpass_tilde_07_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                                ), this->allpass_tilde_07_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->allpass_tilde_07_feedBack_buffer->getSize()) + this->allpass_tilde_07_feedBack_reader - ((size > this->allpass_tilde_07_feedBack__maxdelay ? this->allpass_tilde_07_feedBack__maxdelay : (size < (1 + this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer) ? 1 + this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->allpass_tilde_07_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                                ), this->allpass_tilde_07_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                                ), this->allpass_tilde_07_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                                ), this->allpass_tilde_07_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->allpass_tilde_07_feedBack_buffer->getSize()) + this->allpass_tilde_07_feedBack_reader - ((size > this->allpass_tilde_07_feedBack__maxdelay ? this->allpass_tilde_07_feedBack__maxdelay : (size < (1 + this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer) ? 1 + this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->allpass_tilde_07_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                                ), this->allpass_tilde_07_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                                ), this->allpass_tilde_07_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                                ), this->allpass_tilde_07_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->allpass_tilde_07_feedBack_buffer->getSize()) + this->allpass_tilde_07_feedBack_reader - ((size > this->allpass_tilde_07_feedBack__maxdelay ? this->allpass_tilde_07_feedBack__maxdelay : (size < (1 + this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer) ? 1 + this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->allpass_tilde_07_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                                ), this->allpass_tilde_07_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                                ), this->allpass_tilde_07_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                                ), this->allpass_tilde_07_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->allpass_tilde_07_feedBack_buffer->getSize()) + this->allpass_tilde_07_feedBack_reader - ((size > this->allpass_tilde_07_feedBack__maxdelay ? this->allpass_tilde_07_feedBack__maxdelay : (size < (1 + this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer) ? 1 + this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->allpass_tilde_07_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                                ), this->allpass_tilde_07_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                                ), this->allpass_tilde_07_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                                ), this->allpass_tilde_07_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                                ), this->allpass_tilde_07_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                                ), this->allpass_tilde_07_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->allpass_tilde_07_feedBack_buffer->getSize()) + this->allpass_tilde_07_feedBack_reader - ((size > this->allpass_tilde_07_feedBack__maxdelay ? this->allpass_tilde_07_feedBack__maxdelay : (size < (this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer) ? this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->allpass_tilde_07_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                                ), this->allpass_tilde_07_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                                ));
                            }
                        
                            number r = (int)(this->allpass_tilde_07_feedBack_buffer->getSize()) + this->allpass_tilde_07_feedBack_reader - ((size > this->allpass_tilde_07_feedBack__maxdelay ? this->allpass_tilde_07_feedBack__maxdelay : (size < (this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer) ? this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->allpass_tilde_07_feedBack_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                            );
                        }
                        
                        void allpass_tilde_07_feedBack_write(number v) {
                            this->allpass_tilde_07_feedBack_writer = this->allpass_tilde_07_feedBack_reader;
                            this->allpass_tilde_07_feedBack_buffer[(Index)this->allpass_tilde_07_feedBack_writer] = v;
                        }
                        
                        number allpass_tilde_07_feedBack_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->allpass_tilde_07_feedBack__maxdelay : size);
                            number val = this->allpass_tilde_07_feedBack_read(effectiveSize, 0);
                            this->allpass_tilde_07_feedBack_write(v);
                            this->allpass_tilde_07_feedBack_step();
                            return val;
                        }
                        
                        array<Index, 2> allpass_tilde_07_feedBack_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->allpass_tilde_07_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->allpass_tilde_07_feedBack_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void allpass_tilde_07_feedBack_init() {
                            auto result = this->allpass_tilde_07_feedBack_calcSizeInSamples();
                            this->allpass_tilde_07_feedBack__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_07_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                            this->allpass_tilde_07_feedBack_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void allpass_tilde_07_feedBack_clear() {
                            this->allpass_tilde_07_feedBack_buffer->setZero();
                        }
                        
                        void allpass_tilde_07_feedBack_reset() {
                            auto result = this->allpass_tilde_07_feedBack_calcSizeInSamples();
                            this->allpass_tilde_07_feedBack__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_07_feedBack_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->allpass_tilde_07_feedBack_buffer);
                            this->allpass_tilde_07_feedBack_wrap = this->allpass_tilde_07_feedBack_buffer->getSize() - 1;
                            this->allpass_tilde_07_feedBack_clear();
                        
                            if (this->allpass_tilde_07_feedBack_reader >= this->allpass_tilde_07_feedBack__maxdelay || this->allpass_tilde_07_feedBack_writer >= this->allpass_tilde_07_feedBack__maxdelay) {
                                this->allpass_tilde_07_feedBack_reader = 0;
                                this->allpass_tilde_07_feedBack_writer = 0;
                            }
                        }
                        
                        void allpass_tilde_07_feedBack_dspsetup() {
                            this->allpass_tilde_07_feedBack_reset();
                        }
                        
                        number allpass_tilde_07_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number allpass_tilde_07_feedBack_size() {
                            return this->allpass_tilde_07_feedBack__maxdelay;
                        }
                        
                        void allpass_tilde_07_init() {
                            this->allpass_tilde_07_feedForward_init();
                            this->allpass_tilde_07_feedBack_init();
                        }
                        
                        void allpass_tilde_07_clear() {
                            this->allpass_tilde_07_feedForward_clear();
                            this->allpass_tilde_07_feedBack_clear();
                        }
                        
                        void allpass_tilde_07_reset() {
                            this->allpass_tilde_07_init();
                            this->allpass_tilde_07_clear();
                        }
                        
                        void allpass_tilde_07_dspsetup(bool force) {
                            if ((bool)(this->allpass_tilde_07_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->allpass_tilde_07_reset();
                            this->allpass_tilde_07_setupDone = true;
                            this->allpass_tilde_07_feedForward_dspsetup();
                            this->allpass_tilde_07_feedBack_dspsetup();
                        }
                        
                        void allpass_tilde_08_feedForward_step() {
                            this->allpass_tilde_08_feedForward_reader++;
                        
                            if (this->allpass_tilde_08_feedForward_reader >= (int)(this->allpass_tilde_08_feedForward_buffer->getSize()))
                                this->allpass_tilde_08_feedForward_reader = 0;
                        }
                        
                        number allpass_tilde_08_feedForward_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->allpass_tilde_08_feedForward_buffer->getSize()) + this->allpass_tilde_08_feedForward_reader - ((size > this->allpass_tilde_08_feedForward__maxdelay ? this->allpass_tilde_08_feedForward__maxdelay : (size < (this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer) ? this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->allpass_tilde_08_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                                ), this->allpass_tilde_08_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->allpass_tilde_08_feedForward_buffer->getSize()) + this->allpass_tilde_08_feedForward_reader - ((size > this->allpass_tilde_08_feedForward__maxdelay ? this->allpass_tilde_08_feedForward__maxdelay : (size < (1 + this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer) ? 1 + this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->allpass_tilde_08_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                                ), this->allpass_tilde_08_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                                ), this->allpass_tilde_08_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                                ), this->allpass_tilde_08_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->allpass_tilde_08_feedForward_buffer->getSize()) + this->allpass_tilde_08_feedForward_reader - ((size > this->allpass_tilde_08_feedForward__maxdelay ? this->allpass_tilde_08_feedForward__maxdelay : (size < (1 + this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer) ? 1 + this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->allpass_tilde_08_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                                ), this->allpass_tilde_08_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                                ), this->allpass_tilde_08_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                                ), this->allpass_tilde_08_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->allpass_tilde_08_feedForward_buffer->getSize()) + this->allpass_tilde_08_feedForward_reader - ((size > this->allpass_tilde_08_feedForward__maxdelay ? this->allpass_tilde_08_feedForward__maxdelay : (size < (1 + this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer) ? 1 + this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->allpass_tilde_08_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                                ), this->allpass_tilde_08_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                                ), this->allpass_tilde_08_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                                ), this->allpass_tilde_08_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->allpass_tilde_08_feedForward_buffer->getSize()) + this->allpass_tilde_08_feedForward_reader - ((size > this->allpass_tilde_08_feedForward__maxdelay ? this->allpass_tilde_08_feedForward__maxdelay : (size < (1 + this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer) ? 1 + this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->allpass_tilde_08_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                                ), this->allpass_tilde_08_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                                ), this->allpass_tilde_08_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                                ), this->allpass_tilde_08_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                                ), this->allpass_tilde_08_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                                ), this->allpass_tilde_08_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->allpass_tilde_08_feedForward_buffer->getSize()) + this->allpass_tilde_08_feedForward_reader - ((size > this->allpass_tilde_08_feedForward__maxdelay ? this->allpass_tilde_08_feedForward__maxdelay : (size < (this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer) ? this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->allpass_tilde_08_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                                ), this->allpass_tilde_08_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                                ));
                            }
                        
                            number r = (int)(this->allpass_tilde_08_feedForward_buffer->getSize()) + this->allpass_tilde_08_feedForward_reader - ((size > this->allpass_tilde_08_feedForward__maxdelay ? this->allpass_tilde_08_feedForward__maxdelay : (size < (this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer) ? this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->allpass_tilde_08_feedForward_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                            );
                        }
                        
                        void allpass_tilde_08_feedForward_write(number v) {
                            this->allpass_tilde_08_feedForward_writer = this->allpass_tilde_08_feedForward_reader;
                            this->allpass_tilde_08_feedForward_buffer[(Index)this->allpass_tilde_08_feedForward_writer] = v;
                        }
                        
                        number allpass_tilde_08_feedForward_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->allpass_tilde_08_feedForward__maxdelay : size);
                            number val = this->allpass_tilde_08_feedForward_read(effectiveSize, 0);
                            this->allpass_tilde_08_feedForward_write(v);
                            this->allpass_tilde_08_feedForward_step();
                            return val;
                        }
                        
                        array<Index, 2> allpass_tilde_08_feedForward_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->allpass_tilde_08_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->allpass_tilde_08_feedForward_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void allpass_tilde_08_feedForward_init() {
                            auto result = this->allpass_tilde_08_feedForward_calcSizeInSamples();
                            this->allpass_tilde_08_feedForward__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_08_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                            this->allpass_tilde_08_feedForward_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void allpass_tilde_08_feedForward_clear() {
                            this->allpass_tilde_08_feedForward_buffer->setZero();
                        }
                        
                        void allpass_tilde_08_feedForward_reset() {
                            auto result = this->allpass_tilde_08_feedForward_calcSizeInSamples();
                            this->allpass_tilde_08_feedForward__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_08_feedForward_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->allpass_tilde_08_feedForward_buffer);
                            this->allpass_tilde_08_feedForward_wrap = this->allpass_tilde_08_feedForward_buffer->getSize() - 1;
                            this->allpass_tilde_08_feedForward_clear();
                        
                            if (this->allpass_tilde_08_feedForward_reader >= this->allpass_tilde_08_feedForward__maxdelay || this->allpass_tilde_08_feedForward_writer >= this->allpass_tilde_08_feedForward__maxdelay) {
                                this->allpass_tilde_08_feedForward_reader = 0;
                                this->allpass_tilde_08_feedForward_writer = 0;
                            }
                        }
                        
                        void allpass_tilde_08_feedForward_dspsetup() {
                            this->allpass_tilde_08_feedForward_reset();
                        }
                        
                        number allpass_tilde_08_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number allpass_tilde_08_feedForward_size() {
                            return this->allpass_tilde_08_feedForward__maxdelay;
                        }
                        
                        void allpass_tilde_08_feedBack_step() {
                            this->allpass_tilde_08_feedBack_reader++;
                        
                            if (this->allpass_tilde_08_feedBack_reader >= (int)(this->allpass_tilde_08_feedBack_buffer->getSize()))
                                this->allpass_tilde_08_feedBack_reader = 0;
                        }
                        
                        number allpass_tilde_08_feedBack_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->allpass_tilde_08_feedBack_buffer->getSize()) + this->allpass_tilde_08_feedBack_reader - ((size > this->allpass_tilde_08_feedBack__maxdelay ? this->allpass_tilde_08_feedBack__maxdelay : (size < (this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer) ? this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->allpass_tilde_08_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                                ), this->allpass_tilde_08_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->allpass_tilde_08_feedBack_buffer->getSize()) + this->allpass_tilde_08_feedBack_reader - ((size > this->allpass_tilde_08_feedBack__maxdelay ? this->allpass_tilde_08_feedBack__maxdelay : (size < (1 + this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer) ? 1 + this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->allpass_tilde_08_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                                ), this->allpass_tilde_08_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                                ), this->allpass_tilde_08_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                                ), this->allpass_tilde_08_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->allpass_tilde_08_feedBack_buffer->getSize()) + this->allpass_tilde_08_feedBack_reader - ((size > this->allpass_tilde_08_feedBack__maxdelay ? this->allpass_tilde_08_feedBack__maxdelay : (size < (1 + this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer) ? 1 + this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->allpass_tilde_08_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                                ), this->allpass_tilde_08_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                                ), this->allpass_tilde_08_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                                ), this->allpass_tilde_08_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->allpass_tilde_08_feedBack_buffer->getSize()) + this->allpass_tilde_08_feedBack_reader - ((size > this->allpass_tilde_08_feedBack__maxdelay ? this->allpass_tilde_08_feedBack__maxdelay : (size < (1 + this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer) ? 1 + this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->allpass_tilde_08_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                                ), this->allpass_tilde_08_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                                ), this->allpass_tilde_08_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                                ), this->allpass_tilde_08_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->allpass_tilde_08_feedBack_buffer->getSize()) + this->allpass_tilde_08_feedBack_reader - ((size > this->allpass_tilde_08_feedBack__maxdelay ? this->allpass_tilde_08_feedBack__maxdelay : (size < (1 + this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer) ? 1 + this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->allpass_tilde_08_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                                ), this->allpass_tilde_08_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                                ), this->allpass_tilde_08_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                                ), this->allpass_tilde_08_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                                ), this->allpass_tilde_08_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                                ), this->allpass_tilde_08_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->allpass_tilde_08_feedBack_buffer->getSize()) + this->allpass_tilde_08_feedBack_reader - ((size > this->allpass_tilde_08_feedBack__maxdelay ? this->allpass_tilde_08_feedBack__maxdelay : (size < (this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer) ? this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->allpass_tilde_08_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                                ), this->allpass_tilde_08_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                                ));
                            }
                        
                            number r = (int)(this->allpass_tilde_08_feedBack_buffer->getSize()) + this->allpass_tilde_08_feedBack_reader - ((size > this->allpass_tilde_08_feedBack__maxdelay ? this->allpass_tilde_08_feedBack__maxdelay : (size < (this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer) ? this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->allpass_tilde_08_feedBack_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                            );
                        }
                        
                        void allpass_tilde_08_feedBack_write(number v) {
                            this->allpass_tilde_08_feedBack_writer = this->allpass_tilde_08_feedBack_reader;
                            this->allpass_tilde_08_feedBack_buffer[(Index)this->allpass_tilde_08_feedBack_writer] = v;
                        }
                        
                        number allpass_tilde_08_feedBack_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->allpass_tilde_08_feedBack__maxdelay : size);
                            number val = this->allpass_tilde_08_feedBack_read(effectiveSize, 0);
                            this->allpass_tilde_08_feedBack_write(v);
                            this->allpass_tilde_08_feedBack_step();
                            return val;
                        }
                        
                        array<Index, 2> allpass_tilde_08_feedBack_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->allpass_tilde_08_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->allpass_tilde_08_feedBack_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void allpass_tilde_08_feedBack_init() {
                            auto result = this->allpass_tilde_08_feedBack_calcSizeInSamples();
                            this->allpass_tilde_08_feedBack__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_08_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                            this->allpass_tilde_08_feedBack_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void allpass_tilde_08_feedBack_clear() {
                            this->allpass_tilde_08_feedBack_buffer->setZero();
                        }
                        
                        void allpass_tilde_08_feedBack_reset() {
                            auto result = this->allpass_tilde_08_feedBack_calcSizeInSamples();
                            this->allpass_tilde_08_feedBack__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_08_feedBack_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->allpass_tilde_08_feedBack_buffer);
                            this->allpass_tilde_08_feedBack_wrap = this->allpass_tilde_08_feedBack_buffer->getSize() - 1;
                            this->allpass_tilde_08_feedBack_clear();
                        
                            if (this->allpass_tilde_08_feedBack_reader >= this->allpass_tilde_08_feedBack__maxdelay || this->allpass_tilde_08_feedBack_writer >= this->allpass_tilde_08_feedBack__maxdelay) {
                                this->allpass_tilde_08_feedBack_reader = 0;
                                this->allpass_tilde_08_feedBack_writer = 0;
                            }
                        }
                        
                        void allpass_tilde_08_feedBack_dspsetup() {
                            this->allpass_tilde_08_feedBack_reset();
                        }
                        
                        number allpass_tilde_08_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number allpass_tilde_08_feedBack_size() {
                            return this->allpass_tilde_08_feedBack__maxdelay;
                        }
                        
                        void allpass_tilde_08_init() {
                            this->allpass_tilde_08_feedForward_init();
                            this->allpass_tilde_08_feedBack_init();
                        }
                        
                        void allpass_tilde_08_clear() {
                            this->allpass_tilde_08_feedForward_clear();
                            this->allpass_tilde_08_feedBack_clear();
                        }
                        
                        void allpass_tilde_08_reset() {
                            this->allpass_tilde_08_init();
                            this->allpass_tilde_08_clear();
                        }
                        
                        void allpass_tilde_08_dspsetup(bool force) {
                            if ((bool)(this->allpass_tilde_08_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->allpass_tilde_08_reset();
                            this->allpass_tilde_08_setupDone = true;
                            this->allpass_tilde_08_feedForward_dspsetup();
                            this->allpass_tilde_08_feedBack_dspsetup();
                        }
                        
                        bool stackprotect_check() {
                            this->stackprotect_count++;
                        
                            if (this->stackprotect_count > 128) {
                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                return true;
                            }
                        
                            return false;
                        }
                        
                        void updateTime(MillisecondTime time) {
                            this->_currentTime = time;
                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                        
                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                        
                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                this->sampleOffsetIntoNextAudioBuffer = 0;
                        }
                        
                        void assign_defaults()
                        {
                            allpass_tilde_01_x = 0;
                            allpass_tilde_01_delayTime = 9.3;
                            allpass_tilde_01_gain = 0.625;
                            allpass_tilde_02_x = 0;
                            allpass_tilde_02_delayTime = 12.73;
                            allpass_tilde_02_gain = 0.625;
                            allpass_tilde_03_x = 0;
                            allpass_tilde_03_delayTime = 3.58;
                            allpass_tilde_03_gain = 0.75;
                            allpass_tilde_04_x = 0;
                            allpass_tilde_04_delayTime = 4.76;
                            allpass_tilde_04_gain = 0.75;
                            allpass_tilde_05_x = 0;
                            allpass_tilde_05_delayTime = 9.3;
                            allpass_tilde_05_gain = 0.625;
                            allpass_tilde_06_x = 0;
                            allpass_tilde_06_delayTime = 12.73;
                            allpass_tilde_06_gain = 0.625;
                            allpass_tilde_07_x = 0;
                            allpass_tilde_07_delayTime = 3.58;
                            allpass_tilde_07_gain = 0.75;
                            allpass_tilde_08_x = 0;
                            allpass_tilde_08_delayTime = 4.76;
                            allpass_tilde_08_gain = 0.75;
                            _currentTime = 0;
                            audioProcessSampleCount = 0;
                            sampleOffsetIntoNextAudioBuffer = 0;
                            zeroBuffer = nullptr;
                            dummyBuffer = nullptr;
                            signals[0] = nullptr;
                            signals[1] = nullptr;
                            didAllocateSignals = 0;
                            vs = 0;
                            maxvs = 0;
                            sr = 44100;
                            invsr = 0.00002267573696;
                            allpass_tilde_01_feedForward__maxdelay = 0;
                            allpass_tilde_01_feedForward_sizemode = 0;
                            allpass_tilde_01_feedForward_wrap = 0;
                            allpass_tilde_01_feedForward_reader = 0;
                            allpass_tilde_01_feedForward_writer = 0;
                            allpass_tilde_01_feedBack__maxdelay = 0;
                            allpass_tilde_01_feedBack_sizemode = 0;
                            allpass_tilde_01_feedBack_wrap = 0;
                            allpass_tilde_01_feedBack_reader = 0;
                            allpass_tilde_01_feedBack_writer = 0;
                            allpass_tilde_01_setupDone = false;
                            allpass_tilde_02_feedForward__maxdelay = 0;
                            allpass_tilde_02_feedForward_sizemode = 0;
                            allpass_tilde_02_feedForward_wrap = 0;
                            allpass_tilde_02_feedForward_reader = 0;
                            allpass_tilde_02_feedForward_writer = 0;
                            allpass_tilde_02_feedBack__maxdelay = 0;
                            allpass_tilde_02_feedBack_sizemode = 0;
                            allpass_tilde_02_feedBack_wrap = 0;
                            allpass_tilde_02_feedBack_reader = 0;
                            allpass_tilde_02_feedBack_writer = 0;
                            allpass_tilde_02_setupDone = false;
                            allpass_tilde_03_feedForward__maxdelay = 0;
                            allpass_tilde_03_feedForward_sizemode = 0;
                            allpass_tilde_03_feedForward_wrap = 0;
                            allpass_tilde_03_feedForward_reader = 0;
                            allpass_tilde_03_feedForward_writer = 0;
                            allpass_tilde_03_feedBack__maxdelay = 0;
                            allpass_tilde_03_feedBack_sizemode = 0;
                            allpass_tilde_03_feedBack_wrap = 0;
                            allpass_tilde_03_feedBack_reader = 0;
                            allpass_tilde_03_feedBack_writer = 0;
                            allpass_tilde_03_setupDone = false;
                            allpass_tilde_04_feedForward__maxdelay = 0;
                            allpass_tilde_04_feedForward_sizemode = 0;
                            allpass_tilde_04_feedForward_wrap = 0;
                            allpass_tilde_04_feedForward_reader = 0;
                            allpass_tilde_04_feedForward_writer = 0;
                            allpass_tilde_04_feedBack__maxdelay = 0;
                            allpass_tilde_04_feedBack_sizemode = 0;
                            allpass_tilde_04_feedBack_wrap = 0;
                            allpass_tilde_04_feedBack_reader = 0;
                            allpass_tilde_04_feedBack_writer = 0;
                            allpass_tilde_04_setupDone = false;
                            allpass_tilde_05_feedForward__maxdelay = 0;
                            allpass_tilde_05_feedForward_sizemode = 0;
                            allpass_tilde_05_feedForward_wrap = 0;
                            allpass_tilde_05_feedForward_reader = 0;
                            allpass_tilde_05_feedForward_writer = 0;
                            allpass_tilde_05_feedBack__maxdelay = 0;
                            allpass_tilde_05_feedBack_sizemode = 0;
                            allpass_tilde_05_feedBack_wrap = 0;
                            allpass_tilde_05_feedBack_reader = 0;
                            allpass_tilde_05_feedBack_writer = 0;
                            allpass_tilde_05_setupDone = false;
                            allpass_tilde_06_feedForward__maxdelay = 0;
                            allpass_tilde_06_feedForward_sizemode = 0;
                            allpass_tilde_06_feedForward_wrap = 0;
                            allpass_tilde_06_feedForward_reader = 0;
                            allpass_tilde_06_feedForward_writer = 0;
                            allpass_tilde_06_feedBack__maxdelay = 0;
                            allpass_tilde_06_feedBack_sizemode = 0;
                            allpass_tilde_06_feedBack_wrap = 0;
                            allpass_tilde_06_feedBack_reader = 0;
                            allpass_tilde_06_feedBack_writer = 0;
                            allpass_tilde_06_setupDone = false;
                            allpass_tilde_07_feedForward__maxdelay = 0;
                            allpass_tilde_07_feedForward_sizemode = 0;
                            allpass_tilde_07_feedForward_wrap = 0;
                            allpass_tilde_07_feedForward_reader = 0;
                            allpass_tilde_07_feedForward_writer = 0;
                            allpass_tilde_07_feedBack__maxdelay = 0;
                            allpass_tilde_07_feedBack_sizemode = 0;
                            allpass_tilde_07_feedBack_wrap = 0;
                            allpass_tilde_07_feedBack_reader = 0;
                            allpass_tilde_07_feedBack_writer = 0;
                            allpass_tilde_07_setupDone = false;
                            allpass_tilde_08_feedForward__maxdelay = 0;
                            allpass_tilde_08_feedForward_sizemode = 0;
                            allpass_tilde_08_feedForward_wrap = 0;
                            allpass_tilde_08_feedForward_reader = 0;
                            allpass_tilde_08_feedForward_writer = 0;
                            allpass_tilde_08_feedBack__maxdelay = 0;
                            allpass_tilde_08_feedBack_sizemode = 0;
                            allpass_tilde_08_feedBack_wrap = 0;
                            allpass_tilde_08_feedBack_reader = 0;
                            allpass_tilde_08_feedBack_writer = 0;
                            allpass_tilde_08_setupDone = false;
                            stackprotect_count = 0;
                            _voiceIndex = 0;
                            _noteNumber = 0;
                            isMuted = 1;
                            parameterOffset = 0;
                        }
                        
                        // member variables
                        
                            number allpass_tilde_01_x;
                            number allpass_tilde_01_delayTime;
                            number allpass_tilde_01_gain;
                            number allpass_tilde_02_x;
                            number allpass_tilde_02_delayTime;
                            number allpass_tilde_02_gain;
                            number allpass_tilde_03_x;
                            number allpass_tilde_03_delayTime;
                            number allpass_tilde_03_gain;
                            number allpass_tilde_04_x;
                            number allpass_tilde_04_delayTime;
                            number allpass_tilde_04_gain;
                            number allpass_tilde_05_x;
                            number allpass_tilde_05_delayTime;
                            number allpass_tilde_05_gain;
                            number allpass_tilde_06_x;
                            number allpass_tilde_06_delayTime;
                            number allpass_tilde_06_gain;
                            number allpass_tilde_07_x;
                            number allpass_tilde_07_delayTime;
                            number allpass_tilde_07_gain;
                            number allpass_tilde_08_x;
                            number allpass_tilde_08_delayTime;
                            number allpass_tilde_08_gain;
                            MillisecondTime _currentTime;
                            UInt64 audioProcessSampleCount;
                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                            signal zeroBuffer;
                            signal dummyBuffer;
                            SampleValue * signals[2];
                            bool didAllocateSignals;
                            Index vs;
                            Index maxvs;
                            number sr;
                            number invsr;
                            Float64BufferRef allpass_tilde_01_feedForward_buffer;
                            Index allpass_tilde_01_feedForward__maxdelay;
                            Int allpass_tilde_01_feedForward_sizemode;
                            Index allpass_tilde_01_feedForward_wrap;
                            Int allpass_tilde_01_feedForward_reader;
                            Int allpass_tilde_01_feedForward_writer;
                            Float64BufferRef allpass_tilde_01_feedBack_buffer;
                            Index allpass_tilde_01_feedBack__maxdelay;
                            Int allpass_tilde_01_feedBack_sizemode;
                            Index allpass_tilde_01_feedBack_wrap;
                            Int allpass_tilde_01_feedBack_reader;
                            Int allpass_tilde_01_feedBack_writer;
                            bool allpass_tilde_01_setupDone;
                            Float64BufferRef allpass_tilde_02_feedForward_buffer;
                            Index allpass_tilde_02_feedForward__maxdelay;
                            Int allpass_tilde_02_feedForward_sizemode;
                            Index allpass_tilde_02_feedForward_wrap;
                            Int allpass_tilde_02_feedForward_reader;
                            Int allpass_tilde_02_feedForward_writer;
                            Float64BufferRef allpass_tilde_02_feedBack_buffer;
                            Index allpass_tilde_02_feedBack__maxdelay;
                            Int allpass_tilde_02_feedBack_sizemode;
                            Index allpass_tilde_02_feedBack_wrap;
                            Int allpass_tilde_02_feedBack_reader;
                            Int allpass_tilde_02_feedBack_writer;
                            bool allpass_tilde_02_setupDone;
                            Float64BufferRef allpass_tilde_03_feedForward_buffer;
                            Index allpass_tilde_03_feedForward__maxdelay;
                            Int allpass_tilde_03_feedForward_sizemode;
                            Index allpass_tilde_03_feedForward_wrap;
                            Int allpass_tilde_03_feedForward_reader;
                            Int allpass_tilde_03_feedForward_writer;
                            Float64BufferRef allpass_tilde_03_feedBack_buffer;
                            Index allpass_tilde_03_feedBack__maxdelay;
                            Int allpass_tilde_03_feedBack_sizemode;
                            Index allpass_tilde_03_feedBack_wrap;
                            Int allpass_tilde_03_feedBack_reader;
                            Int allpass_tilde_03_feedBack_writer;
                            bool allpass_tilde_03_setupDone;
                            Float64BufferRef allpass_tilde_04_feedForward_buffer;
                            Index allpass_tilde_04_feedForward__maxdelay;
                            Int allpass_tilde_04_feedForward_sizemode;
                            Index allpass_tilde_04_feedForward_wrap;
                            Int allpass_tilde_04_feedForward_reader;
                            Int allpass_tilde_04_feedForward_writer;
                            Float64BufferRef allpass_tilde_04_feedBack_buffer;
                            Index allpass_tilde_04_feedBack__maxdelay;
                            Int allpass_tilde_04_feedBack_sizemode;
                            Index allpass_tilde_04_feedBack_wrap;
                            Int allpass_tilde_04_feedBack_reader;
                            Int allpass_tilde_04_feedBack_writer;
                            bool allpass_tilde_04_setupDone;
                            Float64BufferRef allpass_tilde_05_feedForward_buffer;
                            Index allpass_tilde_05_feedForward__maxdelay;
                            Int allpass_tilde_05_feedForward_sizemode;
                            Index allpass_tilde_05_feedForward_wrap;
                            Int allpass_tilde_05_feedForward_reader;
                            Int allpass_tilde_05_feedForward_writer;
                            Float64BufferRef allpass_tilde_05_feedBack_buffer;
                            Index allpass_tilde_05_feedBack__maxdelay;
                            Int allpass_tilde_05_feedBack_sizemode;
                            Index allpass_tilde_05_feedBack_wrap;
                            Int allpass_tilde_05_feedBack_reader;
                            Int allpass_tilde_05_feedBack_writer;
                            bool allpass_tilde_05_setupDone;
                            Float64BufferRef allpass_tilde_06_feedForward_buffer;
                            Index allpass_tilde_06_feedForward__maxdelay;
                            Int allpass_tilde_06_feedForward_sizemode;
                            Index allpass_tilde_06_feedForward_wrap;
                            Int allpass_tilde_06_feedForward_reader;
                            Int allpass_tilde_06_feedForward_writer;
                            Float64BufferRef allpass_tilde_06_feedBack_buffer;
                            Index allpass_tilde_06_feedBack__maxdelay;
                            Int allpass_tilde_06_feedBack_sizemode;
                            Index allpass_tilde_06_feedBack_wrap;
                            Int allpass_tilde_06_feedBack_reader;
                            Int allpass_tilde_06_feedBack_writer;
                            bool allpass_tilde_06_setupDone;
                            Float64BufferRef allpass_tilde_07_feedForward_buffer;
                            Index allpass_tilde_07_feedForward__maxdelay;
                            Int allpass_tilde_07_feedForward_sizemode;
                            Index allpass_tilde_07_feedForward_wrap;
                            Int allpass_tilde_07_feedForward_reader;
                            Int allpass_tilde_07_feedForward_writer;
                            Float64BufferRef allpass_tilde_07_feedBack_buffer;
                            Index allpass_tilde_07_feedBack__maxdelay;
                            Int allpass_tilde_07_feedBack_sizemode;
                            Index allpass_tilde_07_feedBack_wrap;
                            Int allpass_tilde_07_feedBack_reader;
                            Int allpass_tilde_07_feedBack_writer;
                            bool allpass_tilde_07_setupDone;
                            Float64BufferRef allpass_tilde_08_feedForward_buffer;
                            Index allpass_tilde_08_feedForward__maxdelay;
                            Int allpass_tilde_08_feedForward_sizemode;
                            Index allpass_tilde_08_feedForward_wrap;
                            Int allpass_tilde_08_feedForward_reader;
                            Int allpass_tilde_08_feedForward_writer;
                            Float64BufferRef allpass_tilde_08_feedBack_buffer;
                            Index allpass_tilde_08_feedBack__maxdelay;
                            Int allpass_tilde_08_feedBack_sizemode;
                            Index allpass_tilde_08_feedBack_wrap;
                            Int allpass_tilde_08_feedBack_reader;
                            Int allpass_tilde_08_feedBack_writer;
                            bool allpass_tilde_08_setupDone;
                            number stackprotect_count;
                            DataRef allpass_tilde_01_feedForward_bufferobj;
                            DataRef allpass_tilde_01_feedBack_bufferobj;
                            DataRef allpass_tilde_02_feedForward_bufferobj;
                            DataRef allpass_tilde_02_feedBack_bufferobj;
                            DataRef allpass_tilde_03_feedForward_bufferobj;
                            DataRef allpass_tilde_03_feedBack_bufferobj;
                            DataRef allpass_tilde_04_feedForward_bufferobj;
                            DataRef allpass_tilde_04_feedBack_bufferobj;
                            DataRef allpass_tilde_05_feedForward_bufferobj;
                            DataRef allpass_tilde_05_feedBack_bufferobj;
                            DataRef allpass_tilde_06_feedForward_bufferobj;
                            DataRef allpass_tilde_06_feedBack_bufferobj;
                            DataRef allpass_tilde_07_feedForward_bufferobj;
                            DataRef allpass_tilde_07_feedBack_bufferobj;
                            DataRef allpass_tilde_08_feedForward_bufferobj;
                            DataRef allpass_tilde_08_feedBack_bufferobj;
                            Index _voiceIndex;
                            Int _noteNumber;
                            Index isMuted;
                            ParameterIndex parameterOffset;
                        
            };
            
            class RNBOSubpatcher_792 : public PatcherInterfaceImpl {
                        
                        friend class RNBOSubpatcher_805;
                        friend class rnbomatic;
                        
                        public:
                        
                        RNBOSubpatcher_792()
                        {
                        }
                        
                        ~RNBOSubpatcher_792()
                        {
                        }
                        
                        virtual RNBOSubpatcher_805* getPatcher() const {
                            return static_cast<RNBOSubpatcher_805 *>(_parentPatcher);
                        }
                        
                        rnbomatic* getTopLevelPatcher() {
                            return this->getPatcher()->getTopLevelPatcher();
                        }
                        
                        void cancelClockEvents()
                        {
                        }
                        
                        inline number linearinterp(number frac, number x, number y) {
                            return x + (y - x) * frac;
                        }
                        
                        inline number cubicinterp(number a, number w, number x, number y, number z) {
                            number a1 = 1. + a;
                            number aa = a * a1;
                            number b = 1. - a;
                            number b1 = 2. - a;
                            number bb = b * b1;
                            number fw = -.1666667 * bb * a;
                            number fx = .5 * bb * a1;
                            number fy = .5 * aa * b1;
                            number fz = -.1666667 * aa * b;
                            return w * fw + x * fx + y * fy + z * fz;
                        }
                        
                        inline number fastcubicinterp(number a, number w, number x, number y, number z) {
                            number a2 = a * a;
                            number f0 = z - y - w + x;
                            number f1 = w - x - f0;
                            number f2 = y - w;
                            number f3 = x;
                            return f0 * a * a2 + f1 * a2 + f2 * a + f3;
                        }
                        
                        inline number splineinterp(number a, number w, number x, number y, number z) {
                            number a2 = a * a;
                            number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
                            number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
                            number f2 = -0.5 * w + 0.5 * y;
                            return f0 * a * a2 + f1 * a2 + f2 * a + x;
                        }
                        
                        inline number spline6interp(number a, number y0, number y1, number y2, number y3, number y4, number y5) {
                            number ym2py2 = y0 + y4;
                            number ym1py1 = y1 + y3;
                            number y2mym2 = y4 - y0;
                            number y1mym1 = y3 - y1;
                            number sixthym1py1 = (number)1 / (number)6.0 * ym1py1;
                            number c0 = (number)1 / (number)120.0 * ym2py2 + (number)13 / (number)60.0 * ym1py1 + (number)11 / (number)20.0 * y2;
                            number c1 = (number)1 / (number)24.0 * y2mym2 + (number)5 / (number)12.0 * y1mym1;
                            number c2 = (number)1 / (number)12.0 * ym2py2 + sixthym1py1 - (number)1 / (number)2.0 * y2;
                            number c3 = (number)1 / (number)12.0 * y2mym2 - (number)1 / (number)6.0 * y1mym1;
                            number c4 = (number)1 / (number)24.0 * ym2py2 - sixthym1py1 + (number)1 / (number)4.0 * y2;
                            number c5 = (number)1 / (number)120.0 * (y5 - y0) + (number)1 / (number)24.0 * (y1 - y4) + (number)1 / (number)12.0 * (y3 - y2);
                            return ((((c5 * a + c4) * a + c3) * a + c2) * a + c1) * a + c0;
                        }
                        
                        inline number cosT8(number r) {
                            number t84 = 56.0;
                            number t83 = 1680.0;
                            number t82 = 20160.0;
                            number t81 = 2.4801587302e-05;
                            number t73 = 42.0;
                            number t72 = 840.0;
                            number t71 = 1.9841269841e-04;
                        
                            if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
                                number rr = r * r;
                                return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
                            } else if (r > 0.0) {
                                r -= 1.57079632679489661923132169163975144;
                                number rr = r * r;
                                return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                            } else {
                                r += 1.57079632679489661923132169163975144;
                                number rr = r * r;
                                return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                            }
                        }
                        
                        inline number cosineinterp(number frac, number x, number y) {
                            number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
                            return x * (1.0 - a2) + y * a2;
                        }
                        
                        number mstosamps(MillisecondTime ms) {
                            return ms * this->sr * 0.001;
                        }
                        
                        number samplerate() const {
                            return this->sr;
                        }
                        
                        Index vectorsize() const {
                            return this->vs;
                        }
                        
                        number maximum(number x, number y) {
                            return (x < y ? y : x);
                        }
                        
                        Index voice() {
                            return this->_voiceIndex;
                        }
                        
                        number random(number low, number high) {
                            number range = high - low;
                            return globalrandom() * range + low;
                        }
                        
                        Index getNumMidiInputPorts() const {
                            return 0;
                        }
                        
                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                        
                        Index getNumMidiOutputPorts() const {
                            return 0;
                        }
                        
                        void process(
                            const SampleValue * const* inputs,
                            Index numInputs,
                            SampleValue * const* outputs,
                            Index numOutputs,
                            Index n
                        ) {
                            this->vs = n;
                            this->updateTime(this->getEngine()->getCurrentTime());
                            SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                            SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                            SampleValue * out3 = (numOutputs >= 3 && outputs[2] ? outputs[2] : this->dummyBuffer);
                            SampleValue * out4 = (numOutputs >= 4 && outputs[3] ? outputs[3] : this->dummyBuffer);
                            const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                            const SampleValue * in3 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                            const SampleValue * in4 = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
                            const SampleValue * in5 = (numInputs >= 4 && inputs[3] ? inputs[3] : this->zeroBuffer);
                            const SampleValue * in6 = (numInputs >= 5 && inputs[4] ? inputs[4] : this->zeroBuffer);
                            this->noise_tilde_03_perform(this->signals[0], n);
                        
                            this->lores_01_perform(
                                this->lores_01_cutoff,
                                this->lores_01_resonance,
                                this->signals[0],
                                this->signals[1],
                                n
                            );
                        
                            this->dspexpr_29_perform(this->signals[1], in5, this->signals[0], n);
                            this->dspexpr_31_perform(in6, this->dspexpr_31_in2, this->signals[1], n);
                            this->mstosamps_tilde_01_perform(this->signals[1], this->signals[2], n);
                            this->dspexpr_30_perform(in6, this->dspexpr_30_in2, this->signals[1], n);
                            this->dspexpr_27_perform(in6, this->dspexpr_27_in2, this->signals[3], n);
                            this->dspexpr_26_perform(this->signals[3], this->signals[0], this->signals[4], n);
                            this->dspexpr_25_perform(in6, this->dspexpr_25_in2, this->signals[0], n);
                            this->feedbackreader_03_perform(this->signals[3], n);
                            this->signaladder_12_perform(in1, this->signals[3], this->signals[3], n);
                            this->allpass_tilde_09_perform(this->signals[3], this->signals[0], this->allpass_tilde_09_gain, out1, n);
                        
                            this->comb_tilde_01_perform(
                                out1,
                                this->signals[4],
                                this->comb_tilde_01_gain,
                                this->comb_tilde_01_ffGain,
                                this->comb_tilde_01_fbGain,
                                this->signals[0],
                                n
                            );
                        
                            this->onepole_tilde_04_perform(this->signals[0], in3, this->signals[4], n);
                            this->dspexpr_28_perform(this->signals[4], in4, this->signals[5], n);
                        
                            this->allpass_tilde_10_perform(
                                this->signals[5],
                                this->signals[1],
                                this->allpass_tilde_10_gain,
                                this->signals[4],
                                n
                            );
                        
                            this->delaytilde_07_perform(this->signals[2], this->signals[4], out4, n);
                            this->feedbackwriter_03_perform(out4, n);
                            this->signalforwarder_04_perform(this->signals[4], out3, n);
                            this->signalforwarder_03_perform(this->signals[0], out2, n);
                            this->stackprotect_perform(n);
                            this->audioProcessSampleCount += this->vs;
                        }
                        
                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                Index i;
                        
                                for (i = 0; i < 6; i++) {
                                    this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                                }
                        
                                this->feedbacktilde_03_feedbackbuffer = resizeSignal(this->feedbacktilde_03_feedbackbuffer, this->maxvs, maxBlockSize);
                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                this->didAllocateSignals = true;
                            }
                        
                            const bool sampleRateChanged = sampleRate != this->sr;
                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                        
                            if (sampleRateChanged || maxvsChanged) {
                                this->vs = maxBlockSize;
                                this->maxvs = maxBlockSize;
                                this->sr = sampleRate;
                                this->invsr = 1 / sampleRate;
                            }
                        
                            this->lores_01_dspsetup(forceDSPSetup);
                            this->allpass_tilde_09_dspsetup(forceDSPSetup);
                            this->comb_tilde_01_dspsetup(forceDSPSetup);
                            this->onepole_tilde_04_dspsetup(forceDSPSetup);
                            this->allpass_tilde_10_dspsetup(forceDSPSetup);
                            this->delaytilde_07_dspsetup(forceDSPSetup);
                        
                            if (sampleRateChanged)
                                this->onSampleRateChanged(sampleRate);
                        }
                        
                        void setProbingTarget(MessageTag id) {
                            switch (id) {
                            default:
                                {
                                this->setProbingIndex(-1);
                                break;
                                }
                            }
                        }
                        
                        void setProbingIndex(ProbingIndex ) {}
                        
                        Index getProbingChannels(MessageTag outletId) const {
                            RNBO_UNUSED(outletId);
                            return 0;
                        }
                        
                        Index getIsMuted()  {
                            return this->isMuted;
                        }
                        
                        void setIsMuted(Index v)  {
                            this->isMuted = v;
                        }
                        
                        void onSampleRateChanged(double ) {}
                        
                        Index getPatcherSerial() const {
                            return 0;
                        }
                        
                        void getState(PatcherStateInterface& ) {}
                        
                        void setState() {}
                        
                        void getPreset(PatcherStateInterface& ) {}
                        
                        void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                        
                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValue(index, value, time);
                        }
                        
                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                            this->setParameterValue(index, this->getParameterValue(index), time);
                        }
                        
                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValueNormalized(index, value, time);
                        }
                        
                        ParameterValue getParameterValue(ParameterIndex index)  {
                            switch (index) {
                            default:
                                {
                                return 0;
                                }
                            }
                        }
                        
                        ParameterIndex getNumSignalInParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumSignalOutParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumParameters() const {
                            return 0;
                        }
                        
                        ConstCharPointer getParameterName(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        ConstCharPointer getParameterId(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                        
                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                        }
                        
                        void setParameterOffset(ParameterIndex offset) {
                            this->parameterOffset = offset;
                        }
                        
                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                            if (steps == 1) {
                                if (normalizedValue > 0) {
                                    normalizedValue = 1.;
                                }
                            } else {
                                ParameterValue oneStep = (number)1. / (steps - 1);
                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                normalizedValue = numberOfSteps * oneStep;
                            }
                        
                            return normalizedValue;
                        }
                        
                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        void scheduleParamInit(ParameterIndex index, Index order) {
                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                        }
                        
                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                        
                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                        
                        void processOutletEvent(
                            EngineLink* sender,
                            OutletIndex index,
                            ParameterValue value,
                            MillisecondTime time
                        ) {
                            this->updateTime(time);
                            this->processOutletAtCurrentTime(sender, index, value);
                        }
                        
                        void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
                        
                        void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
                        
                        void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
                        
                        MessageTagInfo resolveTag(MessageTag tag) const {
                            switch (tag) {
                        
                            }
                        
                            return nullptr;
                        }
                        
                        DataRef* getDataRef(DataRefIndex index)  {
                            switch (index) {
                            case 6:
                                {
                                return addressOf(this->allpass_tilde_09_feedForward_bufferobj);
                                break;
                                }
                            case 7:
                                {
                                return addressOf(this->allpass_tilde_09_feedBack_bufferobj);
                                break;
                                }
                            case 8:
                                {
                                return addressOf(this->comb_tilde_01_feedForward_bufferobj);
                                break;
                                }
                            case 9:
                                {
                                return addressOf(this->comb_tilde_01_feedBack_bufferobj);
                                break;
                                }
                            case 10:
                                {
                                return addressOf(this->allpass_tilde_10_feedForward_bufferobj);
                                break;
                                }
                            case 11:
                                {
                                return addressOf(this->allpass_tilde_10_feedBack_bufferobj);
                                break;
                                }
                            case 12:
                                {
                                return addressOf(this->delaytilde_07_del_bufferobj);
                                break;
                                }
                            default:
                                {
                                return nullptr;
                                }
                            }
                        }
                        
                        DataRefIndex getNumDataRefs() const {
                            return 7;
                        }
                        
                        void fillDataRef(DataRefIndex , DataRef& ) {}
                        
                        void zeroDataRef(DataRef& ref) {
                            ref->setZero();
                        }
                        
                        void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                            this->updateTime(time);
                        
                            if (index == 6) {
                                this->allpass_tilde_09_feedForward_buffer = new Float64Buffer(this->allpass_tilde_09_feedForward_bufferobj);
                            }
                        
                            if (index == 7) {
                                this->allpass_tilde_09_feedBack_buffer = new Float64Buffer(this->allpass_tilde_09_feedBack_bufferobj);
                            }
                        
                            if (index == 8) {
                                this->comb_tilde_01_feedForward_buffer = new Float64Buffer(this->comb_tilde_01_feedForward_bufferobj);
                            }
                        
                            if (index == 9) {
                                this->comb_tilde_01_feedBack_buffer = new Float64Buffer(this->comb_tilde_01_feedBack_bufferobj);
                            }
                        
                            if (index == 10) {
                                this->allpass_tilde_10_feedForward_buffer = new Float64Buffer(this->allpass_tilde_10_feedForward_bufferobj);
                            }
                        
                            if (index == 11) {
                                this->allpass_tilde_10_feedBack_buffer = new Float64Buffer(this->allpass_tilde_10_feedBack_bufferobj);
                            }
                        
                            if (index == 12) {
                                this->delaytilde_07_del_buffer = new Float64Buffer(this->delaytilde_07_del_bufferobj);
                            }
                        }
                        
                        void initialize() {
                            this->allpass_tilde_09_feedForward_bufferobj = initDataRef("allpass_tilde_09_feedForward_bufferobj", true, nullptr, "buffer~");
                            this->allpass_tilde_09_feedBack_bufferobj = initDataRef("allpass_tilde_09_feedBack_bufferobj", true, nullptr, "buffer~");
                            this->comb_tilde_01_feedForward_bufferobj = initDataRef("comb_tilde_01_feedForward_bufferobj", true, nullptr, "buffer~");
                            this->comb_tilde_01_feedBack_bufferobj = initDataRef("comb_tilde_01_feedBack_bufferobj", true, nullptr, "buffer~");
                            this->allpass_tilde_10_feedForward_bufferobj = initDataRef("allpass_tilde_10_feedForward_bufferobj", true, nullptr, "buffer~");
                            this->allpass_tilde_10_feedBack_bufferobj = initDataRef("allpass_tilde_10_feedBack_bufferobj", true, nullptr, "buffer~");
                            this->delaytilde_07_del_bufferobj = initDataRef("delaytilde_07_del_bufferobj", true, nullptr, "buffer~");
                            this->assign_defaults();
                            this->setState();
                            this->allpass_tilde_09_feedForward_bufferobj->setIndex(6);
                            this->allpass_tilde_09_feedForward_buffer = new Float64Buffer(this->allpass_tilde_09_feedForward_bufferobj);
                            this->allpass_tilde_09_feedBack_bufferobj->setIndex(7);
                            this->allpass_tilde_09_feedBack_buffer = new Float64Buffer(this->allpass_tilde_09_feedBack_bufferobj);
                            this->comb_tilde_01_feedForward_bufferobj->setIndex(8);
                            this->comb_tilde_01_feedForward_buffer = new Float64Buffer(this->comb_tilde_01_feedForward_bufferobj);
                            this->comb_tilde_01_feedBack_bufferobj->setIndex(9);
                            this->comb_tilde_01_feedBack_buffer = new Float64Buffer(this->comb_tilde_01_feedBack_bufferobj);
                            this->allpass_tilde_10_feedForward_bufferobj->setIndex(10);
                            this->allpass_tilde_10_feedForward_buffer = new Float64Buffer(this->allpass_tilde_10_feedForward_bufferobj);
                            this->allpass_tilde_10_feedBack_bufferobj->setIndex(11);
                            this->allpass_tilde_10_feedBack_buffer = new Float64Buffer(this->allpass_tilde_10_feedBack_bufferobj);
                            this->delaytilde_07_del_bufferobj->setIndex(12);
                            this->delaytilde_07_del_buffer = new Float64Buffer(this->delaytilde_07_del_bufferobj);
                        }
                        
                        protected:
                        
                        number msToSamps(MillisecondTime ms, number sampleRate) {
                            return ms * sampleRate * 0.001;
                        }
                        
                        MillisecondTime sampsToMs(SampleIndex samps) {
                            return samps * (this->invsr * 1000);
                        }
                        
                        Index getMaxBlockSize() const {
                            return this->maxvs;
                        }
                        
                        number getSampleRate() const {
                            return this->sr;
                        }
                        
                        bool hasFixedVectorSize() const {
                            return false;
                        }
                        
                        Index getNumInputChannels() const {
                            return 5;
                        }
                        
                        Index getNumOutputChannels() const {
                            return 4;
                        }
                        
                        void initializeObjects() {
                            this->allpass_tilde_09_feedForward_init();
                            this->allpass_tilde_09_feedBack_init();
                            this->allpass_tilde_09_init();
                            this->comb_tilde_01_feedForward_init();
                            this->comb_tilde_01_feedBack_init();
                            this->comb_tilde_01_init();
                            this->allpass_tilde_10_feedForward_init();
                            this->allpass_tilde_10_feedBack_init();
                            this->allpass_tilde_10_init();
                            this->noise_tilde_03_init();
                            this->delaytilde_07_del_init();
                        }
                        
                        void sendOutlet(OutletIndex index, ParameterValue value) {
                            this->getEngine()->sendOutlet(this, index, value);
                        }
                        
                        void startup() {}
                        
                        void allocateDataRefs() {
                            this->allpass_tilde_09_feedForward_buffer = this->allpass_tilde_09_feedForward_buffer->allocateIfNeeded();
                        
                            if (this->allpass_tilde_09_feedForward_bufferobj->hasRequestedSize()) {
                                if (this->allpass_tilde_09_feedForward_bufferobj->wantsFill())
                                    this->zeroDataRef(this->allpass_tilde_09_feedForward_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(6);
                            }
                        
                            this->allpass_tilde_09_feedBack_buffer = this->allpass_tilde_09_feedBack_buffer->allocateIfNeeded();
                        
                            if (this->allpass_tilde_09_feedBack_bufferobj->hasRequestedSize()) {
                                if (this->allpass_tilde_09_feedBack_bufferobj->wantsFill())
                                    this->zeroDataRef(this->allpass_tilde_09_feedBack_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(7);
                            }
                        
                            this->comb_tilde_01_feedForward_buffer = this->comb_tilde_01_feedForward_buffer->allocateIfNeeded();
                        
                            if (this->comb_tilde_01_feedForward_bufferobj->hasRequestedSize()) {
                                if (this->comb_tilde_01_feedForward_bufferobj->wantsFill())
                                    this->zeroDataRef(this->comb_tilde_01_feedForward_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(8);
                            }
                        
                            this->comb_tilde_01_feedBack_buffer = this->comb_tilde_01_feedBack_buffer->allocateIfNeeded();
                        
                            if (this->comb_tilde_01_feedBack_bufferobj->hasRequestedSize()) {
                                if (this->comb_tilde_01_feedBack_bufferobj->wantsFill())
                                    this->zeroDataRef(this->comb_tilde_01_feedBack_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(9);
                            }
                        
                            this->allpass_tilde_10_feedForward_buffer = this->allpass_tilde_10_feedForward_buffer->allocateIfNeeded();
                        
                            if (this->allpass_tilde_10_feedForward_bufferobj->hasRequestedSize()) {
                                if (this->allpass_tilde_10_feedForward_bufferobj->wantsFill())
                                    this->zeroDataRef(this->allpass_tilde_10_feedForward_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(10);
                            }
                        
                            this->allpass_tilde_10_feedBack_buffer = this->allpass_tilde_10_feedBack_buffer->allocateIfNeeded();
                        
                            if (this->allpass_tilde_10_feedBack_bufferobj->hasRequestedSize()) {
                                if (this->allpass_tilde_10_feedBack_bufferobj->wantsFill())
                                    this->zeroDataRef(this->allpass_tilde_10_feedBack_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(11);
                            }
                        
                            this->delaytilde_07_del_buffer = this->delaytilde_07_del_buffer->allocateIfNeeded();
                        
                            if (this->delaytilde_07_del_bufferobj->hasRequestedSize()) {
                                if (this->delaytilde_07_del_bufferobj->wantsFill())
                                    this->zeroDataRef(this->delaytilde_07_del_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(12);
                            }
                        }
                        
                        void noise_tilde_03_perform(SampleValue * out1, Index n) {
                            auto __noise_tilde_03_state = this->noise_tilde_03_state;
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = xoshiro_next(__noise_tilde_03_state);
                            }
                        }
                        
                        void lores_01_perform(
                            number cutoff,
                            number resonance,
                            const SampleValue * input,
                            SampleValue * out,
                            Index n
                        ) {
                            RNBO_UNUSED(resonance);
                            RNBO_UNUSED(cutoff);
                            auto __lores_01_y_2 = this->lores_01_y_2;
                            auto __lores_01_y_1 = this->lores_01_y_1;
                            auto __lores_01_x_0 = this->lores_01_x_0;
                            auto __lores_01_b_0 = this->lores_01_b_0;
                            auto __lores_01_a_1 = this->lores_01_a_1;
                            auto __lores_01_a_2 = this->lores_01_a_2;
                            auto __lores_01_last_freq_calc = this->lores_01_last_freq_calc;
                            auto __lores_01_last_res_calc = this->lores_01_last_res_calc;
                            auto __lores_01_last_frequency = this->lores_01_last_frequency;
                            auto __lores_01_last_resonance = this->lores_01_last_resonance;
                        
                            for (Index i = 0; i < n; i++) {
                                if (0.995 != __lores_01_last_resonance || 0 != __lores_01_last_frequency) {
                                    __lores_01_last_res_calc = rnbo_exp(0.995 * 0.125) * 0.882497;
                                    __lores_01_last_freq_calc = rnbo_cos(2.0 * pi01() / this->sr * 0);
                                    __lores_01_last_resonance = 0.995;
                                    __lores_01_last_frequency = 0;
                                }
                        
                                number res_temp = __lores_01_last_res_calc;
                                number freq_temp = __lores_01_last_freq_calc;
                                __lores_01_a_2 = res_temp * res_temp;
                                __lores_01_a_1 = -2.0 * res_temp * freq_temp;
                                __lores_01_b_0 = 1.0 + __lores_01_a_1 + __lores_01_a_2;
                                __lores_01_x_0 = input[(Index)i];
                                number y_0 = __lores_01_x_0 * __lores_01_b_0 - __lores_01_y_1 * __lores_01_a_1 - __lores_01_y_2 * __lores_01_a_2;
                                __lores_01_y_2 = __lores_01_y_1;
                                __lores_01_y_1 = y_0;
                                out[(Index)i] = y_0;
                            }
                        
                            this->lores_01_last_resonance = __lores_01_last_resonance;
                            this->lores_01_last_frequency = __lores_01_last_frequency;
                            this->lores_01_last_res_calc = __lores_01_last_res_calc;
                            this->lores_01_last_freq_calc = __lores_01_last_freq_calc;
                            this->lores_01_a_2 = __lores_01_a_2;
                            this->lores_01_a_1 = __lores_01_a_1;
                            this->lores_01_b_0 = __lores_01_b_0;
                            this->lores_01_x_0 = __lores_01_x_0;
                            this->lores_01_y_1 = __lores_01_y_1;
                            this->lores_01_y_2 = __lores_01_y_2;
                        }
                        
                        void dspexpr_29_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                            }
                        }
                        
                        void dspexpr_31_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                            RNBO_UNUSED(in2);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * 125;//#map:_###_obj_###_:1
                            }
                        }
                        
                        void mstosamps_tilde_01_perform(const Sample * ms, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = ms[(Index)i] * this->sr * 0.001;
                            }
                        }
                        
                        void dspexpr_30_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                            RNBO_UNUSED(in2);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * 60.48;//#map:_###_obj_###_:1
                            }
                        }
                        
                        void dspexpr_27_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                            RNBO_UNUSED(in2);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * 149.6;//#map:_###_obj_###_:1
                            }
                        }
                        
                        void dspexpr_26_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] + in2[(Index)i];//#map:_###_obj_###_:1
                            }
                        }
                        
                        void dspexpr_25_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                            RNBO_UNUSED(in2);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * 22.58;//#map:_###_obj_###_:1
                            }
                        }
                        
                        void feedbackreader_03_perform(SampleValue * output, Index n) {
                            auto& buffer = this->feedbacktilde_03_feedbackbuffer;
                        
                            for (Index i = 0; i < n; i++) {
                                output[(Index)i] = buffer[(Index)i];
                            }
                        }
                        
                        void signaladder_12_perform(
                            const SampleValue * in1,
                            const SampleValue * in2,
                            SampleValue * out,
                            Index n
                        ) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out[(Index)i] = in1[(Index)i] + in2[(Index)i];
                            }
                        }
                        
                        void allpass_tilde_09_perform(
                            const Sample * x,
                            const Sample * delayTime,
                            number gain,
                            SampleValue * out1,
                            Index n
                        ) {
                            RNBO_UNUSED(gain);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                number __gain = -0.7;
                                auto delayTimeinSamps = this->mstosamps(delayTime[(Index)i]);
                                delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                                __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                                number ff = this->allpass_tilde_09_feedForward_read(delayTimeinSamps, 0);
                                number fb = this->allpass_tilde_09_feedBack_read(delayTimeinSamps, 0);
                                number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                                fixdenorm(ov);
                                this->allpass_tilde_09_feedForward_write(x[(Index)i]);
                                this->allpass_tilde_09_feedBack_write(ov);
                                this->allpass_tilde_09_feedForward_step();
                                this->allpass_tilde_09_feedBack_step();
                                out1[(Index)i] = ov;
                            }
                        }
                        
                        void comb_tilde_01_perform(
                            const Sample * x,
                            const Sample * delayTime,
                            number gain,
                            number ffGain,
                            number fbGain,
                            SampleValue * out1,
                            Index n
                        ) {
                            RNBO_UNUSED(fbGain);
                            RNBO_UNUSED(ffGain);
                            RNBO_UNUSED(gain);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                number __fbGain = 0;
                                number __ffGain = 1;
                                number __gain = 0;
                                number __delayTime = delayTime[(Index)i];
                                __delayTime = this->mstosamps(__delayTime);
                                __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                                __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                                __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                                __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                                number tmp = x[(Index)i] * __gain;
                                number ff = this->comb_tilde_01_feedForward_read(__delayTime, 0);
                                number fb = this->comb_tilde_01_feedBack_read(__delayTime, 0);
                                number ov = tmp + ff * __ffGain + fb * __fbGain;
                                fixdenorm(ov);
                                this->comb_tilde_01_feedForward_write(x[(Index)i]);
                                this->comb_tilde_01_feedBack_write(ov);
                                this->comb_tilde_01_feedForward_step();
                                this->comb_tilde_01_feedBack_step();
                                out1[(Index)i] = ov;
                            }
                        }
                        
                        void onepole_tilde_04_perform(const Sample * x, const Sample * freqInHz, SampleValue * out1, Index n) {
                            auto __onepole_tilde_04_lastY = this->onepole_tilde_04_lastY;
                            auto __onepole_tilde_04_b1 = this->onepole_tilde_04_b1;
                            auto __onepole_tilde_04_a0 = this->onepole_tilde_04_a0;
                            auto __onepole_tilde_04_needsUpdate = this->onepole_tilde_04_needsUpdate;
                            auto __onepole_tilde_04_freq = this->onepole_tilde_04_freq;
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                if (__onepole_tilde_04_freq != freqInHz[(Index)i] || (bool)(__onepole_tilde_04_needsUpdate)) {
                                    __onepole_tilde_04_freq = freqInHz[(Index)i];
                                    __onepole_tilde_04_a0 = 1 - rnbo_exp(-6.28318530717958647692 * freqInHz[(Index)i] / this->sr);
                                    __onepole_tilde_04_a0 = (__onepole_tilde_04_a0 > 0.99999 ? 0.99999 : (__onepole_tilde_04_a0 < 0.00001 ? 0.00001 : __onepole_tilde_04_a0));
                                    __onepole_tilde_04_b1 = 1 - __onepole_tilde_04_a0;
                                    __onepole_tilde_04_needsUpdate = false;
                                }
                        
                                __onepole_tilde_04_lastY = __onepole_tilde_04_a0 * x[(Index)i] + __onepole_tilde_04_b1 * __onepole_tilde_04_lastY;
                                out1[(Index)i] = __onepole_tilde_04_lastY;
                            }
                        
                            this->onepole_tilde_04_freq = __onepole_tilde_04_freq;
                            this->onepole_tilde_04_needsUpdate = __onepole_tilde_04_needsUpdate;
                            this->onepole_tilde_04_a0 = __onepole_tilde_04_a0;
                            this->onepole_tilde_04_b1 = __onepole_tilde_04_b1;
                            this->onepole_tilde_04_lastY = __onepole_tilde_04_lastY;
                        }
                        
                        void dspexpr_28_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                            }
                        }
                        
                        void allpass_tilde_10_perform(
                            const Sample * x,
                            const Sample * delayTime,
                            number gain,
                            SampleValue * out1,
                            Index n
                        ) {
                            RNBO_UNUSED(gain);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                number __gain = 0.5;
                                auto delayTimeinSamps = this->mstosamps(delayTime[(Index)i]);
                                delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                                __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                                number ff = this->allpass_tilde_10_feedForward_read(delayTimeinSamps, 0);
                                number fb = this->allpass_tilde_10_feedBack_read(delayTimeinSamps, 0);
                                number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                                fixdenorm(ov);
                                this->allpass_tilde_10_feedForward_write(x[(Index)i]);
                                this->allpass_tilde_10_feedBack_write(ov);
                                this->allpass_tilde_10_feedForward_step();
                                this->allpass_tilde_10_feedBack_step();
                                out1[(Index)i] = ov;
                            }
                        }
                        
                        void delaytilde_07_perform(
                            const Sample * delay,
                            const SampleValue * input,
                            SampleValue * output,
                            Index n
                        ) {
                            auto __delaytilde_07_crossfadeDelay = this->delaytilde_07_crossfadeDelay;
                            auto __delaytilde_07_rampInSamples = this->delaytilde_07_rampInSamples;
                            auto __delaytilde_07_ramp = this->delaytilde_07_ramp;
                            auto __delaytilde_07_lastDelay = this->delaytilde_07_lastDelay;
                        
                            for (Index i = 0; i < n; i++) {
                                if (__delaytilde_07_lastDelay == -1) {
                                    __delaytilde_07_lastDelay = delay[(Index)i];
                                }
                        
                                if (__delaytilde_07_ramp > 0) {
                                    number factor = __delaytilde_07_ramp / __delaytilde_07_rampInSamples;
                                    output[(Index)i] = this->delaytilde_07_del_read(__delaytilde_07_crossfadeDelay, 0) * factor + this->delaytilde_07_del_read(__delaytilde_07_lastDelay, 0) * (1. - factor);
                                    __delaytilde_07_ramp--;
                                } else {
                                    number effectiveDelay = delay[(Index)i];
                        
                                    if (effectiveDelay != __delaytilde_07_lastDelay) {
                                        __delaytilde_07_ramp = __delaytilde_07_rampInSamples;
                                        __delaytilde_07_crossfadeDelay = __delaytilde_07_lastDelay;
                                        __delaytilde_07_lastDelay = effectiveDelay;
                                        output[(Index)i] = this->delaytilde_07_del_read(__delaytilde_07_crossfadeDelay, 0);
                                        __delaytilde_07_ramp--;
                                    } else {
                                        output[(Index)i] = this->delaytilde_07_del_read(effectiveDelay, 0);
                                    }
                                }
                        
                                this->delaytilde_07_del_write(input[(Index)i]);
                                this->delaytilde_07_del_step();
                            }
                        
                            this->delaytilde_07_lastDelay = __delaytilde_07_lastDelay;
                            this->delaytilde_07_ramp = __delaytilde_07_ramp;
                            this->delaytilde_07_crossfadeDelay = __delaytilde_07_crossfadeDelay;
                        }
                        
                        void feedbackwriter_03_perform(const SampleValue * input, Index n) {
                            auto& buffer = this->feedbacktilde_03_feedbackbuffer;
                        
                            for (Index i = 0; i < n; i++) {
                                buffer[(Index)i] = input[(Index)i];
                            }
                        }
                        
                        void signalforwarder_04_perform(const SampleValue * input, SampleValue * output, Index n) {
                            for (Index i = 0; i < n; i++) {
                                output[(Index)i] = input[(Index)i];
                            }
                        }
                        
                        void signalforwarder_03_perform(const SampleValue * input, SampleValue * output, Index n) {
                            for (Index i = 0; i < n; i++) {
                                output[(Index)i] = input[(Index)i];
                            }
                        }
                        
                        void stackprotect_perform(Index n) {
                            RNBO_UNUSED(n);
                            auto __stackprotect_count = this->stackprotect_count;
                            __stackprotect_count = 0;
                            this->stackprotect_count = __stackprotect_count;
                        }
                        
                        void lores_01_resonance_setter(number v) {
                            if (v < 0.0) {
                                v = 0.0;
                            } else if (v >= 1.0) {
                                v = 1.0 - 1E-20;
                            }
                        
                            this->lores_01_resonance = v;
                        }
                        
                        void allpass_tilde_09_feedForward_step() {
                            this->allpass_tilde_09_feedForward_reader++;
                        
                            if (this->allpass_tilde_09_feedForward_reader >= (int)(this->allpass_tilde_09_feedForward_buffer->getSize()))
                                this->allpass_tilde_09_feedForward_reader = 0;
                        }
                        
                        number allpass_tilde_09_feedForward_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->allpass_tilde_09_feedForward_buffer->getSize()) + this->allpass_tilde_09_feedForward_reader - ((size > this->allpass_tilde_09_feedForward__maxdelay ? this->allpass_tilde_09_feedForward__maxdelay : (size < (this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer) ? this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->allpass_tilde_09_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                                ), this->allpass_tilde_09_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->allpass_tilde_09_feedForward_buffer->getSize()) + this->allpass_tilde_09_feedForward_reader - ((size > this->allpass_tilde_09_feedForward__maxdelay ? this->allpass_tilde_09_feedForward__maxdelay : (size < (1 + this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer) ? 1 + this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->allpass_tilde_09_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                                ), this->allpass_tilde_09_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                                ), this->allpass_tilde_09_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                                ), this->allpass_tilde_09_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->allpass_tilde_09_feedForward_buffer->getSize()) + this->allpass_tilde_09_feedForward_reader - ((size > this->allpass_tilde_09_feedForward__maxdelay ? this->allpass_tilde_09_feedForward__maxdelay : (size < (1 + this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer) ? 1 + this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->allpass_tilde_09_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                                ), this->allpass_tilde_09_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                                ), this->allpass_tilde_09_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                                ), this->allpass_tilde_09_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->allpass_tilde_09_feedForward_buffer->getSize()) + this->allpass_tilde_09_feedForward_reader - ((size > this->allpass_tilde_09_feedForward__maxdelay ? this->allpass_tilde_09_feedForward__maxdelay : (size < (1 + this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer) ? 1 + this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->allpass_tilde_09_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                                ), this->allpass_tilde_09_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                                ), this->allpass_tilde_09_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                                ), this->allpass_tilde_09_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->allpass_tilde_09_feedForward_buffer->getSize()) + this->allpass_tilde_09_feedForward_reader - ((size > this->allpass_tilde_09_feedForward__maxdelay ? this->allpass_tilde_09_feedForward__maxdelay : (size < (1 + this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer) ? 1 + this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->allpass_tilde_09_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                                ), this->allpass_tilde_09_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                                ), this->allpass_tilde_09_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                                ), this->allpass_tilde_09_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                                ), this->allpass_tilde_09_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                                ), this->allpass_tilde_09_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->allpass_tilde_09_feedForward_buffer->getSize()) + this->allpass_tilde_09_feedForward_reader - ((size > this->allpass_tilde_09_feedForward__maxdelay ? this->allpass_tilde_09_feedForward__maxdelay : (size < (this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer) ? this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->allpass_tilde_09_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                                ), this->allpass_tilde_09_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                                ));
                            }
                        
                            number r = (int)(this->allpass_tilde_09_feedForward_buffer->getSize()) + this->allpass_tilde_09_feedForward_reader - ((size > this->allpass_tilde_09_feedForward__maxdelay ? this->allpass_tilde_09_feedForward__maxdelay : (size < (this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer) ? this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->allpass_tilde_09_feedForward_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                            );
                        }
                        
                        void allpass_tilde_09_feedForward_write(number v) {
                            this->allpass_tilde_09_feedForward_writer = this->allpass_tilde_09_feedForward_reader;
                            this->allpass_tilde_09_feedForward_buffer[(Index)this->allpass_tilde_09_feedForward_writer] = v;
                        }
                        
                        number allpass_tilde_09_feedForward_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->allpass_tilde_09_feedForward__maxdelay : size);
                            number val = this->allpass_tilde_09_feedForward_read(effectiveSize, 0);
                            this->allpass_tilde_09_feedForward_write(v);
                            this->allpass_tilde_09_feedForward_step();
                            return val;
                        }
                        
                        array<Index, 2> allpass_tilde_09_feedForward_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->allpass_tilde_09_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->allpass_tilde_09_feedForward_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void allpass_tilde_09_feedForward_init() {
                            auto result = this->allpass_tilde_09_feedForward_calcSizeInSamples();
                            this->allpass_tilde_09_feedForward__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_09_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                            this->allpass_tilde_09_feedForward_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void allpass_tilde_09_feedForward_clear() {
                            this->allpass_tilde_09_feedForward_buffer->setZero();
                        }
                        
                        void allpass_tilde_09_feedForward_reset() {
                            auto result = this->allpass_tilde_09_feedForward_calcSizeInSamples();
                            this->allpass_tilde_09_feedForward__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_09_feedForward_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->allpass_tilde_09_feedForward_buffer);
                            this->allpass_tilde_09_feedForward_wrap = this->allpass_tilde_09_feedForward_buffer->getSize() - 1;
                            this->allpass_tilde_09_feedForward_clear();
                        
                            if (this->allpass_tilde_09_feedForward_reader >= this->allpass_tilde_09_feedForward__maxdelay || this->allpass_tilde_09_feedForward_writer >= this->allpass_tilde_09_feedForward__maxdelay) {
                                this->allpass_tilde_09_feedForward_reader = 0;
                                this->allpass_tilde_09_feedForward_writer = 0;
                            }
                        }
                        
                        void allpass_tilde_09_feedForward_dspsetup() {
                            this->allpass_tilde_09_feedForward_reset();
                        }
                        
                        number allpass_tilde_09_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number allpass_tilde_09_feedForward_size() {
                            return this->allpass_tilde_09_feedForward__maxdelay;
                        }
                        
                        void allpass_tilde_09_feedBack_step() {
                            this->allpass_tilde_09_feedBack_reader++;
                        
                            if (this->allpass_tilde_09_feedBack_reader >= (int)(this->allpass_tilde_09_feedBack_buffer->getSize()))
                                this->allpass_tilde_09_feedBack_reader = 0;
                        }
                        
                        number allpass_tilde_09_feedBack_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->allpass_tilde_09_feedBack_buffer->getSize()) + this->allpass_tilde_09_feedBack_reader - ((size > this->allpass_tilde_09_feedBack__maxdelay ? this->allpass_tilde_09_feedBack__maxdelay : (size < (this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer) ? this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->allpass_tilde_09_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                                ), this->allpass_tilde_09_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->allpass_tilde_09_feedBack_buffer->getSize()) + this->allpass_tilde_09_feedBack_reader - ((size > this->allpass_tilde_09_feedBack__maxdelay ? this->allpass_tilde_09_feedBack__maxdelay : (size < (1 + this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer) ? 1 + this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->allpass_tilde_09_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                                ), this->allpass_tilde_09_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                                ), this->allpass_tilde_09_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                                ), this->allpass_tilde_09_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->allpass_tilde_09_feedBack_buffer->getSize()) + this->allpass_tilde_09_feedBack_reader - ((size > this->allpass_tilde_09_feedBack__maxdelay ? this->allpass_tilde_09_feedBack__maxdelay : (size < (1 + this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer) ? 1 + this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->allpass_tilde_09_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                                ), this->allpass_tilde_09_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                                ), this->allpass_tilde_09_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                                ), this->allpass_tilde_09_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->allpass_tilde_09_feedBack_buffer->getSize()) + this->allpass_tilde_09_feedBack_reader - ((size > this->allpass_tilde_09_feedBack__maxdelay ? this->allpass_tilde_09_feedBack__maxdelay : (size < (1 + this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer) ? 1 + this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->allpass_tilde_09_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                                ), this->allpass_tilde_09_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                                ), this->allpass_tilde_09_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                                ), this->allpass_tilde_09_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->allpass_tilde_09_feedBack_buffer->getSize()) + this->allpass_tilde_09_feedBack_reader - ((size > this->allpass_tilde_09_feedBack__maxdelay ? this->allpass_tilde_09_feedBack__maxdelay : (size < (1 + this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer) ? 1 + this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->allpass_tilde_09_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                                ), this->allpass_tilde_09_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                                ), this->allpass_tilde_09_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                                ), this->allpass_tilde_09_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                                ), this->allpass_tilde_09_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                                ), this->allpass_tilde_09_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->allpass_tilde_09_feedBack_buffer->getSize()) + this->allpass_tilde_09_feedBack_reader - ((size > this->allpass_tilde_09_feedBack__maxdelay ? this->allpass_tilde_09_feedBack__maxdelay : (size < (this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer) ? this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->allpass_tilde_09_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                                ), this->allpass_tilde_09_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                                ));
                            }
                        
                            number r = (int)(this->allpass_tilde_09_feedBack_buffer->getSize()) + this->allpass_tilde_09_feedBack_reader - ((size > this->allpass_tilde_09_feedBack__maxdelay ? this->allpass_tilde_09_feedBack__maxdelay : (size < (this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer) ? this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->allpass_tilde_09_feedBack_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                            );
                        }
                        
                        void allpass_tilde_09_feedBack_write(number v) {
                            this->allpass_tilde_09_feedBack_writer = this->allpass_tilde_09_feedBack_reader;
                            this->allpass_tilde_09_feedBack_buffer[(Index)this->allpass_tilde_09_feedBack_writer] = v;
                        }
                        
                        number allpass_tilde_09_feedBack_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->allpass_tilde_09_feedBack__maxdelay : size);
                            number val = this->allpass_tilde_09_feedBack_read(effectiveSize, 0);
                            this->allpass_tilde_09_feedBack_write(v);
                            this->allpass_tilde_09_feedBack_step();
                            return val;
                        }
                        
                        array<Index, 2> allpass_tilde_09_feedBack_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->allpass_tilde_09_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->allpass_tilde_09_feedBack_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void allpass_tilde_09_feedBack_init() {
                            auto result = this->allpass_tilde_09_feedBack_calcSizeInSamples();
                            this->allpass_tilde_09_feedBack__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_09_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                            this->allpass_tilde_09_feedBack_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void allpass_tilde_09_feedBack_clear() {
                            this->allpass_tilde_09_feedBack_buffer->setZero();
                        }
                        
                        void allpass_tilde_09_feedBack_reset() {
                            auto result = this->allpass_tilde_09_feedBack_calcSizeInSamples();
                            this->allpass_tilde_09_feedBack__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_09_feedBack_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->allpass_tilde_09_feedBack_buffer);
                            this->allpass_tilde_09_feedBack_wrap = this->allpass_tilde_09_feedBack_buffer->getSize() - 1;
                            this->allpass_tilde_09_feedBack_clear();
                        
                            if (this->allpass_tilde_09_feedBack_reader >= this->allpass_tilde_09_feedBack__maxdelay || this->allpass_tilde_09_feedBack_writer >= this->allpass_tilde_09_feedBack__maxdelay) {
                                this->allpass_tilde_09_feedBack_reader = 0;
                                this->allpass_tilde_09_feedBack_writer = 0;
                            }
                        }
                        
                        void allpass_tilde_09_feedBack_dspsetup() {
                            this->allpass_tilde_09_feedBack_reset();
                        }
                        
                        number allpass_tilde_09_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number allpass_tilde_09_feedBack_size() {
                            return this->allpass_tilde_09_feedBack__maxdelay;
                        }
                        
                        void allpass_tilde_09_init() {
                            this->allpass_tilde_09_feedForward_init();
                            this->allpass_tilde_09_feedBack_init();
                        }
                        
                        void allpass_tilde_09_clear() {
                            this->allpass_tilde_09_feedForward_clear();
                            this->allpass_tilde_09_feedBack_clear();
                        }
                        
                        void allpass_tilde_09_reset() {
                            this->allpass_tilde_09_init();
                            this->allpass_tilde_09_clear();
                        }
                        
                        void allpass_tilde_09_dspsetup(bool force) {
                            if ((bool)(this->allpass_tilde_09_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->allpass_tilde_09_reset();
                            this->allpass_tilde_09_setupDone = true;
                            this->allpass_tilde_09_feedForward_dspsetup();
                            this->allpass_tilde_09_feedBack_dspsetup();
                        }
                        
                        void comb_tilde_01_feedForward_step() {
                            this->comb_tilde_01_feedForward_reader++;
                        
                            if (this->comb_tilde_01_feedForward_reader >= (int)(this->comb_tilde_01_feedForward_buffer->getSize()))
                                this->comb_tilde_01_feedForward_reader = 0;
                        }
                        
                        number comb_tilde_01_feedForward_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->comb_tilde_01_feedForward_buffer->getSize()) + this->comb_tilde_01_feedForward_reader - ((size > this->comb_tilde_01_feedForward__maxdelay ? this->comb_tilde_01_feedForward__maxdelay : (size < (this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer) ? this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->comb_tilde_01_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                                ), this->comb_tilde_01_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->comb_tilde_01_feedForward_buffer->getSize()) + this->comb_tilde_01_feedForward_reader - ((size > this->comb_tilde_01_feedForward__maxdelay ? this->comb_tilde_01_feedForward__maxdelay : (size < (1 + this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer) ? 1 + this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->comb_tilde_01_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                                ), this->comb_tilde_01_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                                ), this->comb_tilde_01_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                                ), this->comb_tilde_01_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->comb_tilde_01_feedForward_buffer->getSize()) + this->comb_tilde_01_feedForward_reader - ((size > this->comb_tilde_01_feedForward__maxdelay ? this->comb_tilde_01_feedForward__maxdelay : (size < (1 + this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer) ? 1 + this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->comb_tilde_01_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                                ), this->comb_tilde_01_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                                ), this->comb_tilde_01_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                                ), this->comb_tilde_01_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->comb_tilde_01_feedForward_buffer->getSize()) + this->comb_tilde_01_feedForward_reader - ((size > this->comb_tilde_01_feedForward__maxdelay ? this->comb_tilde_01_feedForward__maxdelay : (size < (1 + this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer) ? 1 + this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->comb_tilde_01_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                                ), this->comb_tilde_01_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                                ), this->comb_tilde_01_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                                ), this->comb_tilde_01_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->comb_tilde_01_feedForward_buffer->getSize()) + this->comb_tilde_01_feedForward_reader - ((size > this->comb_tilde_01_feedForward__maxdelay ? this->comb_tilde_01_feedForward__maxdelay : (size < (1 + this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer) ? 1 + this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->comb_tilde_01_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                                ), this->comb_tilde_01_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                                ), this->comb_tilde_01_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                                ), this->comb_tilde_01_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                                ), this->comb_tilde_01_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                                ), this->comb_tilde_01_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->comb_tilde_01_feedForward_buffer->getSize()) + this->comb_tilde_01_feedForward_reader - ((size > this->comb_tilde_01_feedForward__maxdelay ? this->comb_tilde_01_feedForward__maxdelay : (size < (this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer) ? this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->comb_tilde_01_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                                ), this->comb_tilde_01_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                                ));
                            }
                        
                            number r = (int)(this->comb_tilde_01_feedForward_buffer->getSize()) + this->comb_tilde_01_feedForward_reader - ((size > this->comb_tilde_01_feedForward__maxdelay ? this->comb_tilde_01_feedForward__maxdelay : (size < (this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer) ? this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->comb_tilde_01_feedForward_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                            );
                        }
                        
                        void comb_tilde_01_feedForward_write(number v) {
                            this->comb_tilde_01_feedForward_writer = this->comb_tilde_01_feedForward_reader;
                            this->comb_tilde_01_feedForward_buffer[(Index)this->comb_tilde_01_feedForward_writer] = v;
                        }
                        
                        number comb_tilde_01_feedForward_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->comb_tilde_01_feedForward__maxdelay : size);
                            number val = this->comb_tilde_01_feedForward_read(effectiveSize, 0);
                            this->comb_tilde_01_feedForward_write(v);
                            this->comb_tilde_01_feedForward_step();
                            return val;
                        }
                        
                        array<Index, 2> comb_tilde_01_feedForward_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->comb_tilde_01_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->comb_tilde_01_feedForward_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void comb_tilde_01_feedForward_init() {
                            auto result = this->comb_tilde_01_feedForward_calcSizeInSamples();
                            this->comb_tilde_01_feedForward__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_01_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                            this->comb_tilde_01_feedForward_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void comb_tilde_01_feedForward_clear() {
                            this->comb_tilde_01_feedForward_buffer->setZero();
                        }
                        
                        void comb_tilde_01_feedForward_reset() {
                            auto result = this->comb_tilde_01_feedForward_calcSizeInSamples();
                            this->comb_tilde_01_feedForward__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_01_feedForward_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->comb_tilde_01_feedForward_buffer);
                            this->comb_tilde_01_feedForward_wrap = this->comb_tilde_01_feedForward_buffer->getSize() - 1;
                            this->comb_tilde_01_feedForward_clear();
                        
                            if (this->comb_tilde_01_feedForward_reader >= this->comb_tilde_01_feedForward__maxdelay || this->comb_tilde_01_feedForward_writer >= this->comb_tilde_01_feedForward__maxdelay) {
                                this->comb_tilde_01_feedForward_reader = 0;
                                this->comb_tilde_01_feedForward_writer = 0;
                            }
                        }
                        
                        void comb_tilde_01_feedForward_dspsetup() {
                            this->comb_tilde_01_feedForward_reset();
                        }
                        
                        number comb_tilde_01_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number comb_tilde_01_feedForward_size() {
                            return this->comb_tilde_01_feedForward__maxdelay;
                        }
                        
                        void comb_tilde_01_feedBack_step() {
                            this->comb_tilde_01_feedBack_reader++;
                        
                            if (this->comb_tilde_01_feedBack_reader >= (int)(this->comb_tilde_01_feedBack_buffer->getSize()))
                                this->comb_tilde_01_feedBack_reader = 0;
                        }
                        
                        number comb_tilde_01_feedBack_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->comb_tilde_01_feedBack_buffer->getSize()) + this->comb_tilde_01_feedBack_reader - ((size > this->comb_tilde_01_feedBack__maxdelay ? this->comb_tilde_01_feedBack__maxdelay : (size < (this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer) ? this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->comb_tilde_01_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                                ), this->comb_tilde_01_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->comb_tilde_01_feedBack_buffer->getSize()) + this->comb_tilde_01_feedBack_reader - ((size > this->comb_tilde_01_feedBack__maxdelay ? this->comb_tilde_01_feedBack__maxdelay : (size < (1 + this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer) ? 1 + this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->comb_tilde_01_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                                ), this->comb_tilde_01_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                                ), this->comb_tilde_01_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                                ), this->comb_tilde_01_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->comb_tilde_01_feedBack_buffer->getSize()) + this->comb_tilde_01_feedBack_reader - ((size > this->comb_tilde_01_feedBack__maxdelay ? this->comb_tilde_01_feedBack__maxdelay : (size < (1 + this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer) ? 1 + this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->comb_tilde_01_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                                ), this->comb_tilde_01_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                                ), this->comb_tilde_01_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                                ), this->comb_tilde_01_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->comb_tilde_01_feedBack_buffer->getSize()) + this->comb_tilde_01_feedBack_reader - ((size > this->comb_tilde_01_feedBack__maxdelay ? this->comb_tilde_01_feedBack__maxdelay : (size < (1 + this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer) ? 1 + this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->comb_tilde_01_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                                ), this->comb_tilde_01_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                                ), this->comb_tilde_01_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                                ), this->comb_tilde_01_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->comb_tilde_01_feedBack_buffer->getSize()) + this->comb_tilde_01_feedBack_reader - ((size > this->comb_tilde_01_feedBack__maxdelay ? this->comb_tilde_01_feedBack__maxdelay : (size < (1 + this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer) ? 1 + this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->comb_tilde_01_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                                ), this->comb_tilde_01_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                                ), this->comb_tilde_01_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                                ), this->comb_tilde_01_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                                ), this->comb_tilde_01_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                                ), this->comb_tilde_01_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->comb_tilde_01_feedBack_buffer->getSize()) + this->comb_tilde_01_feedBack_reader - ((size > this->comb_tilde_01_feedBack__maxdelay ? this->comb_tilde_01_feedBack__maxdelay : (size < (this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer) ? this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->comb_tilde_01_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                                ), this->comb_tilde_01_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                                ));
                            }
                        
                            number r = (int)(this->comb_tilde_01_feedBack_buffer->getSize()) + this->comb_tilde_01_feedBack_reader - ((size > this->comb_tilde_01_feedBack__maxdelay ? this->comb_tilde_01_feedBack__maxdelay : (size < (this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer) ? this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->comb_tilde_01_feedBack_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                            );
                        }
                        
                        void comb_tilde_01_feedBack_write(number v) {
                            this->comb_tilde_01_feedBack_writer = this->comb_tilde_01_feedBack_reader;
                            this->comb_tilde_01_feedBack_buffer[(Index)this->comb_tilde_01_feedBack_writer] = v;
                        }
                        
                        number comb_tilde_01_feedBack_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->comb_tilde_01_feedBack__maxdelay : size);
                            number val = this->comb_tilde_01_feedBack_read(effectiveSize, 0);
                            this->comb_tilde_01_feedBack_write(v);
                            this->comb_tilde_01_feedBack_step();
                            return val;
                        }
                        
                        array<Index, 2> comb_tilde_01_feedBack_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->comb_tilde_01_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->comb_tilde_01_feedBack_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void comb_tilde_01_feedBack_init() {
                            auto result = this->comb_tilde_01_feedBack_calcSizeInSamples();
                            this->comb_tilde_01_feedBack__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_01_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                            this->comb_tilde_01_feedBack_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void comb_tilde_01_feedBack_clear() {
                            this->comb_tilde_01_feedBack_buffer->setZero();
                        }
                        
                        void comb_tilde_01_feedBack_reset() {
                            auto result = this->comb_tilde_01_feedBack_calcSizeInSamples();
                            this->comb_tilde_01_feedBack__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_01_feedBack_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->comb_tilde_01_feedBack_buffer);
                            this->comb_tilde_01_feedBack_wrap = this->comb_tilde_01_feedBack_buffer->getSize() - 1;
                            this->comb_tilde_01_feedBack_clear();
                        
                            if (this->comb_tilde_01_feedBack_reader >= this->comb_tilde_01_feedBack__maxdelay || this->comb_tilde_01_feedBack_writer >= this->comb_tilde_01_feedBack__maxdelay) {
                                this->comb_tilde_01_feedBack_reader = 0;
                                this->comb_tilde_01_feedBack_writer = 0;
                            }
                        }
                        
                        void comb_tilde_01_feedBack_dspsetup() {
                            this->comb_tilde_01_feedBack_reset();
                        }
                        
                        number comb_tilde_01_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number comb_tilde_01_feedBack_size() {
                            return this->comb_tilde_01_feedBack__maxdelay;
                        }
                        
                        void comb_tilde_01_init() {
                            this->comb_tilde_01_feedForward_init();
                            this->comb_tilde_01_feedBack_init();
                        }
                        
                        void comb_tilde_01_clear() {
                            this->comb_tilde_01_feedForward_clear();
                            this->comb_tilde_01_feedBack_clear();
                        }
                        
                        void comb_tilde_01_reset() {
                            this->comb_tilde_01_init();
                            this->comb_tilde_01_clear();
                        }
                        
                        void comb_tilde_01_dspsetup(bool force) {
                            if ((bool)(this->comb_tilde_01_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->comb_tilde_01_reset();
                            this->comb_tilde_01_setupDone = true;
                            this->comb_tilde_01_feedForward_dspsetup();
                            this->comb_tilde_01_feedBack_dspsetup();
                        }
                        
                        void allpass_tilde_10_feedForward_step() {
                            this->allpass_tilde_10_feedForward_reader++;
                        
                            if (this->allpass_tilde_10_feedForward_reader >= (int)(this->allpass_tilde_10_feedForward_buffer->getSize()))
                                this->allpass_tilde_10_feedForward_reader = 0;
                        }
                        
                        number allpass_tilde_10_feedForward_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->allpass_tilde_10_feedForward_buffer->getSize()) + this->allpass_tilde_10_feedForward_reader - ((size > this->allpass_tilde_10_feedForward__maxdelay ? this->allpass_tilde_10_feedForward__maxdelay : (size < (this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer) ? this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->allpass_tilde_10_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                                ), this->allpass_tilde_10_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->allpass_tilde_10_feedForward_buffer->getSize()) + this->allpass_tilde_10_feedForward_reader - ((size > this->allpass_tilde_10_feedForward__maxdelay ? this->allpass_tilde_10_feedForward__maxdelay : (size < (1 + this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer) ? 1 + this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->allpass_tilde_10_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                                ), this->allpass_tilde_10_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                                ), this->allpass_tilde_10_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                                ), this->allpass_tilde_10_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->allpass_tilde_10_feedForward_buffer->getSize()) + this->allpass_tilde_10_feedForward_reader - ((size > this->allpass_tilde_10_feedForward__maxdelay ? this->allpass_tilde_10_feedForward__maxdelay : (size < (1 + this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer) ? 1 + this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->allpass_tilde_10_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                                ), this->allpass_tilde_10_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                                ), this->allpass_tilde_10_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                                ), this->allpass_tilde_10_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->allpass_tilde_10_feedForward_buffer->getSize()) + this->allpass_tilde_10_feedForward_reader - ((size > this->allpass_tilde_10_feedForward__maxdelay ? this->allpass_tilde_10_feedForward__maxdelay : (size < (1 + this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer) ? 1 + this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->allpass_tilde_10_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                                ), this->allpass_tilde_10_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                                ), this->allpass_tilde_10_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                                ), this->allpass_tilde_10_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->allpass_tilde_10_feedForward_buffer->getSize()) + this->allpass_tilde_10_feedForward_reader - ((size > this->allpass_tilde_10_feedForward__maxdelay ? this->allpass_tilde_10_feedForward__maxdelay : (size < (1 + this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer) ? 1 + this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->allpass_tilde_10_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                                ), this->allpass_tilde_10_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                                ), this->allpass_tilde_10_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                                ), this->allpass_tilde_10_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                                ), this->allpass_tilde_10_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                                ), this->allpass_tilde_10_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->allpass_tilde_10_feedForward_buffer->getSize()) + this->allpass_tilde_10_feedForward_reader - ((size > this->allpass_tilde_10_feedForward__maxdelay ? this->allpass_tilde_10_feedForward__maxdelay : (size < (this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer) ? this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->allpass_tilde_10_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                                ), this->allpass_tilde_10_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                                ));
                            }
                        
                            number r = (int)(this->allpass_tilde_10_feedForward_buffer->getSize()) + this->allpass_tilde_10_feedForward_reader - ((size > this->allpass_tilde_10_feedForward__maxdelay ? this->allpass_tilde_10_feedForward__maxdelay : (size < (this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer) ? this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->allpass_tilde_10_feedForward_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                            );
                        }
                        
                        void allpass_tilde_10_feedForward_write(number v) {
                            this->allpass_tilde_10_feedForward_writer = this->allpass_tilde_10_feedForward_reader;
                            this->allpass_tilde_10_feedForward_buffer[(Index)this->allpass_tilde_10_feedForward_writer] = v;
                        }
                        
                        number allpass_tilde_10_feedForward_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->allpass_tilde_10_feedForward__maxdelay : size);
                            number val = this->allpass_tilde_10_feedForward_read(effectiveSize, 0);
                            this->allpass_tilde_10_feedForward_write(v);
                            this->allpass_tilde_10_feedForward_step();
                            return val;
                        }
                        
                        array<Index, 2> allpass_tilde_10_feedForward_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->allpass_tilde_10_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->allpass_tilde_10_feedForward_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void allpass_tilde_10_feedForward_init() {
                            auto result = this->allpass_tilde_10_feedForward_calcSizeInSamples();
                            this->allpass_tilde_10_feedForward__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_10_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                            this->allpass_tilde_10_feedForward_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void allpass_tilde_10_feedForward_clear() {
                            this->allpass_tilde_10_feedForward_buffer->setZero();
                        }
                        
                        void allpass_tilde_10_feedForward_reset() {
                            auto result = this->allpass_tilde_10_feedForward_calcSizeInSamples();
                            this->allpass_tilde_10_feedForward__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_10_feedForward_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->allpass_tilde_10_feedForward_buffer);
                            this->allpass_tilde_10_feedForward_wrap = this->allpass_tilde_10_feedForward_buffer->getSize() - 1;
                            this->allpass_tilde_10_feedForward_clear();
                        
                            if (this->allpass_tilde_10_feedForward_reader >= this->allpass_tilde_10_feedForward__maxdelay || this->allpass_tilde_10_feedForward_writer >= this->allpass_tilde_10_feedForward__maxdelay) {
                                this->allpass_tilde_10_feedForward_reader = 0;
                                this->allpass_tilde_10_feedForward_writer = 0;
                            }
                        }
                        
                        void allpass_tilde_10_feedForward_dspsetup() {
                            this->allpass_tilde_10_feedForward_reset();
                        }
                        
                        number allpass_tilde_10_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number allpass_tilde_10_feedForward_size() {
                            return this->allpass_tilde_10_feedForward__maxdelay;
                        }
                        
                        void allpass_tilde_10_feedBack_step() {
                            this->allpass_tilde_10_feedBack_reader++;
                        
                            if (this->allpass_tilde_10_feedBack_reader >= (int)(this->allpass_tilde_10_feedBack_buffer->getSize()))
                                this->allpass_tilde_10_feedBack_reader = 0;
                        }
                        
                        number allpass_tilde_10_feedBack_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->allpass_tilde_10_feedBack_buffer->getSize()) + this->allpass_tilde_10_feedBack_reader - ((size > this->allpass_tilde_10_feedBack__maxdelay ? this->allpass_tilde_10_feedBack__maxdelay : (size < (this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer) ? this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->allpass_tilde_10_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                                ), this->allpass_tilde_10_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->allpass_tilde_10_feedBack_buffer->getSize()) + this->allpass_tilde_10_feedBack_reader - ((size > this->allpass_tilde_10_feedBack__maxdelay ? this->allpass_tilde_10_feedBack__maxdelay : (size < (1 + this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer) ? 1 + this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->allpass_tilde_10_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                                ), this->allpass_tilde_10_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                                ), this->allpass_tilde_10_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                                ), this->allpass_tilde_10_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->allpass_tilde_10_feedBack_buffer->getSize()) + this->allpass_tilde_10_feedBack_reader - ((size > this->allpass_tilde_10_feedBack__maxdelay ? this->allpass_tilde_10_feedBack__maxdelay : (size < (1 + this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer) ? 1 + this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->allpass_tilde_10_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                                ), this->allpass_tilde_10_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                                ), this->allpass_tilde_10_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                                ), this->allpass_tilde_10_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->allpass_tilde_10_feedBack_buffer->getSize()) + this->allpass_tilde_10_feedBack_reader - ((size > this->allpass_tilde_10_feedBack__maxdelay ? this->allpass_tilde_10_feedBack__maxdelay : (size < (1 + this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer) ? 1 + this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->allpass_tilde_10_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                                ), this->allpass_tilde_10_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                                ), this->allpass_tilde_10_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                                ), this->allpass_tilde_10_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->allpass_tilde_10_feedBack_buffer->getSize()) + this->allpass_tilde_10_feedBack_reader - ((size > this->allpass_tilde_10_feedBack__maxdelay ? this->allpass_tilde_10_feedBack__maxdelay : (size < (1 + this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer) ? 1 + this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->allpass_tilde_10_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                                ), this->allpass_tilde_10_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                                ), this->allpass_tilde_10_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                                ), this->allpass_tilde_10_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                                ), this->allpass_tilde_10_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                                ), this->allpass_tilde_10_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->allpass_tilde_10_feedBack_buffer->getSize()) + this->allpass_tilde_10_feedBack_reader - ((size > this->allpass_tilde_10_feedBack__maxdelay ? this->allpass_tilde_10_feedBack__maxdelay : (size < (this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer) ? this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->allpass_tilde_10_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                                ), this->allpass_tilde_10_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                                ));
                            }
                        
                            number r = (int)(this->allpass_tilde_10_feedBack_buffer->getSize()) + this->allpass_tilde_10_feedBack_reader - ((size > this->allpass_tilde_10_feedBack__maxdelay ? this->allpass_tilde_10_feedBack__maxdelay : (size < (this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer) ? this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->allpass_tilde_10_feedBack_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                            );
                        }
                        
                        void allpass_tilde_10_feedBack_write(number v) {
                            this->allpass_tilde_10_feedBack_writer = this->allpass_tilde_10_feedBack_reader;
                            this->allpass_tilde_10_feedBack_buffer[(Index)this->allpass_tilde_10_feedBack_writer] = v;
                        }
                        
                        number allpass_tilde_10_feedBack_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->allpass_tilde_10_feedBack__maxdelay : size);
                            number val = this->allpass_tilde_10_feedBack_read(effectiveSize, 0);
                            this->allpass_tilde_10_feedBack_write(v);
                            this->allpass_tilde_10_feedBack_step();
                            return val;
                        }
                        
                        array<Index, 2> allpass_tilde_10_feedBack_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->allpass_tilde_10_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->allpass_tilde_10_feedBack_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void allpass_tilde_10_feedBack_init() {
                            auto result = this->allpass_tilde_10_feedBack_calcSizeInSamples();
                            this->allpass_tilde_10_feedBack__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_10_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                            this->allpass_tilde_10_feedBack_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void allpass_tilde_10_feedBack_clear() {
                            this->allpass_tilde_10_feedBack_buffer->setZero();
                        }
                        
                        void allpass_tilde_10_feedBack_reset() {
                            auto result = this->allpass_tilde_10_feedBack_calcSizeInSamples();
                            this->allpass_tilde_10_feedBack__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_10_feedBack_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->allpass_tilde_10_feedBack_buffer);
                            this->allpass_tilde_10_feedBack_wrap = this->allpass_tilde_10_feedBack_buffer->getSize() - 1;
                            this->allpass_tilde_10_feedBack_clear();
                        
                            if (this->allpass_tilde_10_feedBack_reader >= this->allpass_tilde_10_feedBack__maxdelay || this->allpass_tilde_10_feedBack_writer >= this->allpass_tilde_10_feedBack__maxdelay) {
                                this->allpass_tilde_10_feedBack_reader = 0;
                                this->allpass_tilde_10_feedBack_writer = 0;
                            }
                        }
                        
                        void allpass_tilde_10_feedBack_dspsetup() {
                            this->allpass_tilde_10_feedBack_reset();
                        }
                        
                        number allpass_tilde_10_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number allpass_tilde_10_feedBack_size() {
                            return this->allpass_tilde_10_feedBack__maxdelay;
                        }
                        
                        void allpass_tilde_10_init() {
                            this->allpass_tilde_10_feedForward_init();
                            this->allpass_tilde_10_feedBack_init();
                        }
                        
                        void allpass_tilde_10_clear() {
                            this->allpass_tilde_10_feedForward_clear();
                            this->allpass_tilde_10_feedBack_clear();
                        }
                        
                        void allpass_tilde_10_reset() {
                            this->allpass_tilde_10_init();
                            this->allpass_tilde_10_clear();
                        }
                        
                        void allpass_tilde_10_dspsetup(bool force) {
                            if ((bool)(this->allpass_tilde_10_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->allpass_tilde_10_reset();
                            this->allpass_tilde_10_setupDone = true;
                            this->allpass_tilde_10_feedForward_dspsetup();
                            this->allpass_tilde_10_feedBack_dspsetup();
                        }
                        
                        void onepole_tilde_04_reset() {
                            this->onepole_tilde_04_lastY = 0;
                            this->onepole_tilde_04_a0 = 0;
                            this->onepole_tilde_04_b1 = 0;
                        }
                        
                        void onepole_tilde_04_dspsetup(bool force) {
                            if ((bool)(this->onepole_tilde_04_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->onepole_tilde_04_needsUpdate = true;
                            this->onepole_tilde_04_reset();
                            this->onepole_tilde_04_setupDone = true;
                        }
                        
                        void lores_01_reset() {
                            this->lores_01_y_1 = 0;
                            this->lores_01_y_2 = 0;
                            this->lores_01_last_resonance = 0;
                            this->lores_01_last_frequency = 0;
                            this->lores_01_last_res_calc = 0;
                            this->lores_01_last_freq_calc = 0;
                        }
                        
                        void lores_01_dspsetup(bool force) {
                            if ((bool)(this->lores_01_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->lores_01_reset();
                            this->lores_01_setupDone = true;
                        }
                        
                        void noise_tilde_03_init() {
                            this->noise_tilde_03_reset();
                        }
                        
                        void noise_tilde_03_reset() {
                            xoshiro_reset(
                                systemticks() + this->voice() + this->random(0, 10000),
                                this->noise_tilde_03_state
                            );
                        }
                        
                        void delaytilde_07_del_step() {
                            this->delaytilde_07_del_reader++;
                        
                            if (this->delaytilde_07_del_reader >= (int)(this->delaytilde_07_del_buffer->getSize()))
                                this->delaytilde_07_del_reader = 0;
                        }
                        
                        number delaytilde_07_del_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->delaytilde_07_del_buffer->getSize()) + this->delaytilde_07_del_reader - ((size > this->delaytilde_07_del__maxdelay ? this->delaytilde_07_del__maxdelay : (size < (this->delaytilde_07_del_reader != this->delaytilde_07_del_writer) ? this->delaytilde_07_del_reader != this->delaytilde_07_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->delaytilde_07_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_07_del_wrap))
                                ), this->delaytilde_07_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_07_del_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->delaytilde_07_del_buffer->getSize()) + this->delaytilde_07_del_reader - ((size > this->delaytilde_07_del__maxdelay ? this->delaytilde_07_del__maxdelay : (size < (1 + this->delaytilde_07_del_reader != this->delaytilde_07_del_writer) ? 1 + this->delaytilde_07_del_reader != this->delaytilde_07_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->delaytilde_07_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_07_del_wrap))
                                ), this->delaytilde_07_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_07_del_wrap))
                                ), this->delaytilde_07_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_07_del_wrap))
                                ), this->delaytilde_07_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_07_del_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->delaytilde_07_del_buffer->getSize()) + this->delaytilde_07_del_reader - ((size > this->delaytilde_07_del__maxdelay ? this->delaytilde_07_del__maxdelay : (size < (1 + this->delaytilde_07_del_reader != this->delaytilde_07_del_writer) ? 1 + this->delaytilde_07_del_reader != this->delaytilde_07_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->delaytilde_07_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_07_del_wrap))
                                ), this->delaytilde_07_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_07_del_wrap))
                                ), this->delaytilde_07_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_07_del_wrap))
                                ), this->delaytilde_07_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_07_del_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->delaytilde_07_del_buffer->getSize()) + this->delaytilde_07_del_reader - ((size > this->delaytilde_07_del__maxdelay ? this->delaytilde_07_del__maxdelay : (size < (1 + this->delaytilde_07_del_reader != this->delaytilde_07_del_writer) ? 1 + this->delaytilde_07_del_reader != this->delaytilde_07_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->delaytilde_07_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_07_del_wrap))
                                ), this->delaytilde_07_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_07_del_wrap))
                                ), this->delaytilde_07_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_07_del_wrap))
                                ), this->delaytilde_07_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_07_del_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->delaytilde_07_del_buffer->getSize()) + this->delaytilde_07_del_reader - ((size > this->delaytilde_07_del__maxdelay ? this->delaytilde_07_del__maxdelay : (size < (1 + this->delaytilde_07_del_reader != this->delaytilde_07_del_writer) ? 1 + this->delaytilde_07_del_reader != this->delaytilde_07_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->delaytilde_07_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_07_del_wrap))
                                ), this->delaytilde_07_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_07_del_wrap))
                                ), this->delaytilde_07_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_07_del_wrap))
                                ), this->delaytilde_07_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_07_del_wrap))
                                ), this->delaytilde_07_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->delaytilde_07_del_wrap))
                                ), this->delaytilde_07_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->delaytilde_07_del_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->delaytilde_07_del_buffer->getSize()) + this->delaytilde_07_del_reader - ((size > this->delaytilde_07_del__maxdelay ? this->delaytilde_07_del__maxdelay : (size < (this->delaytilde_07_del_reader != this->delaytilde_07_del_writer) ? this->delaytilde_07_del_reader != this->delaytilde_07_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->delaytilde_07_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_07_del_wrap))
                                ), this->delaytilde_07_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_07_del_wrap))
                                ));
                            }
                        
                            number r = (int)(this->delaytilde_07_del_buffer->getSize()) + this->delaytilde_07_del_reader - ((size > this->delaytilde_07_del__maxdelay ? this->delaytilde_07_del__maxdelay : (size < (this->delaytilde_07_del_reader != this->delaytilde_07_del_writer) ? this->delaytilde_07_del_reader != this->delaytilde_07_del_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->delaytilde_07_del_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_07_del_wrap))
                            );
                        }
                        
                        void delaytilde_07_del_write(number v) {
                            this->delaytilde_07_del_writer = this->delaytilde_07_del_reader;
                            this->delaytilde_07_del_buffer[(Index)this->delaytilde_07_del_writer] = v;
                        }
                        
                        number delaytilde_07_del_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->delaytilde_07_del__maxdelay : size);
                            number val = this->delaytilde_07_del_read(effectiveSize, 0);
                            this->delaytilde_07_del_write(v);
                            this->delaytilde_07_del_step();
                            return val;
                        }
                        
                        array<Index, 2> delaytilde_07_del_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->delaytilde_07_del_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->delaytilde_07_del_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void delaytilde_07_del_init() {
                            auto result = this->delaytilde_07_del_calcSizeInSamples();
                            this->delaytilde_07_del__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->delaytilde_07_del_buffer->requestSize(requestedSizeInSamples, 1);
                            this->delaytilde_07_del_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void delaytilde_07_del_clear() {
                            this->delaytilde_07_del_buffer->setZero();
                        }
                        
                        void delaytilde_07_del_reset() {
                            auto result = this->delaytilde_07_del_calcSizeInSamples();
                            this->delaytilde_07_del__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->delaytilde_07_del_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->delaytilde_07_del_buffer);
                            this->delaytilde_07_del_wrap = this->delaytilde_07_del_buffer->getSize() - 1;
                            this->delaytilde_07_del_clear();
                        
                            if (this->delaytilde_07_del_reader >= this->delaytilde_07_del__maxdelay || this->delaytilde_07_del_writer >= this->delaytilde_07_del__maxdelay) {
                                this->delaytilde_07_del_reader = 0;
                                this->delaytilde_07_del_writer = 0;
                            }
                        }
                        
                        void delaytilde_07_del_dspsetup() {
                            this->delaytilde_07_del_reset();
                        }
                        
                        number delaytilde_07_del_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 38400;
                        }
                        
                        number delaytilde_07_del_size() {
                            return this->delaytilde_07_del__maxdelay;
                        }
                        
                        void delaytilde_07_dspsetup(bool force) {
                            if ((bool)(this->delaytilde_07_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->delaytilde_07_rampInSamples = (long)(this->mstosamps(0));
                            this->delaytilde_07_lastDelay = -1;
                            this->delaytilde_07_setupDone = true;
                            this->delaytilde_07_del_dspsetup();
                        }
                        
                        bool stackprotect_check() {
                            this->stackprotect_count++;
                        
                            if (this->stackprotect_count > 128) {
                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                return true;
                            }
                        
                            return false;
                        }
                        
                        void updateTime(MillisecondTime time) {
                            this->_currentTime = time;
                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                        
                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                        
                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                this->sampleOffsetIntoNextAudioBuffer = 0;
                        }
                        
                        void assign_defaults()
                        {
                            allpass_tilde_09_x = 0;
                            allpass_tilde_09_delayTime = 22.58;
                            allpass_tilde_09_gain = -0.7;
                            dspexpr_25_in1 = 0;
                            dspexpr_25_in2 = 22.58;
                            comb_tilde_01_x = 0;
                            comb_tilde_01_delayTime = 149.6;
                            comb_tilde_01_gain = 0;
                            comb_tilde_01_ffGain = 1;
                            comb_tilde_01_fbGain = 0;
                            dspexpr_26_in1 = 0;
                            dspexpr_26_in2 = 0;
                            dspexpr_27_in1 = 0;
                            dspexpr_27_in2 = 149.6;
                            dspexpr_28_in1 = 0;
                            dspexpr_28_in2 = 0.5;
                            allpass_tilde_10_x = 0;
                            allpass_tilde_10_delayTime = 60.48;
                            allpass_tilde_10_gain = 0.5;
                            onepole_tilde_04_x = 0;
                            onepole_tilde_04_freqInHz = 1800;
                            dspexpr_29_in1 = 0;
                            dspexpr_29_in2 = 20;
                            lores_01_cutoff = 0;
                            lores_01_resonance = 0.995;
                            lores_01_resonance_setter(lores_01_resonance);
                            dspexpr_30_in1 = 0;
                            dspexpr_30_in2 = 60.48;
                            delaytilde_07_delay = 0;
                            mstosamps_tilde_01_ms = 0;
                            dspexpr_31_in1 = 0;
                            dspexpr_31_in2 = 125;
                            _currentTime = 0;
                            audioProcessSampleCount = 0;
                            sampleOffsetIntoNextAudioBuffer = 0;
                            zeroBuffer = nullptr;
                            dummyBuffer = nullptr;
                            signals[0] = nullptr;
                            signals[1] = nullptr;
                            signals[2] = nullptr;
                            signals[3] = nullptr;
                            signals[4] = nullptr;
                            signals[5] = nullptr;
                            didAllocateSignals = 0;
                            vs = 0;
                            maxvs = 0;
                            sr = 44100;
                            invsr = 0.00002267573696;
                            allpass_tilde_09_feedForward__maxdelay = 0;
                            allpass_tilde_09_feedForward_sizemode = 0;
                            allpass_tilde_09_feedForward_wrap = 0;
                            allpass_tilde_09_feedForward_reader = 0;
                            allpass_tilde_09_feedForward_writer = 0;
                            allpass_tilde_09_feedBack__maxdelay = 0;
                            allpass_tilde_09_feedBack_sizemode = 0;
                            allpass_tilde_09_feedBack_wrap = 0;
                            allpass_tilde_09_feedBack_reader = 0;
                            allpass_tilde_09_feedBack_writer = 0;
                            allpass_tilde_09_setupDone = false;
                            comb_tilde_01_feedForward__maxdelay = 0;
                            comb_tilde_01_feedForward_sizemode = 0;
                            comb_tilde_01_feedForward_wrap = 0;
                            comb_tilde_01_feedForward_reader = 0;
                            comb_tilde_01_feedForward_writer = 0;
                            comb_tilde_01_feedBack__maxdelay = 0;
                            comb_tilde_01_feedBack_sizemode = 0;
                            comb_tilde_01_feedBack_wrap = 0;
                            comb_tilde_01_feedBack_reader = 0;
                            comb_tilde_01_feedBack_writer = 0;
                            comb_tilde_01_setupDone = false;
                            allpass_tilde_10_feedForward__maxdelay = 0;
                            allpass_tilde_10_feedForward_sizemode = 0;
                            allpass_tilde_10_feedForward_wrap = 0;
                            allpass_tilde_10_feedForward_reader = 0;
                            allpass_tilde_10_feedForward_writer = 0;
                            allpass_tilde_10_feedBack__maxdelay = 0;
                            allpass_tilde_10_feedBack_sizemode = 0;
                            allpass_tilde_10_feedBack_wrap = 0;
                            allpass_tilde_10_feedBack_reader = 0;
                            allpass_tilde_10_feedBack_writer = 0;
                            allpass_tilde_10_setupDone = false;
                            onepole_tilde_04_freq = 0;
                            onepole_tilde_04_needsUpdate = false;
                            onepole_tilde_04_lastY = 0;
                            onepole_tilde_04_a0 = 0;
                            onepole_tilde_04_b1 = 0;
                            onepole_tilde_04_setupDone = false;
                            lores_01_setupDone = false;
                            delaytilde_07_lastDelay = -1;
                            delaytilde_07_crossfadeDelay = 0;
                            delaytilde_07_ramp = 0;
                            delaytilde_07_rampInSamples = 0;
                            delaytilde_07_del__maxdelay = 0;
                            delaytilde_07_del_sizemode = 0;
                            delaytilde_07_del_wrap = 0;
                            delaytilde_07_del_reader = 0;
                            delaytilde_07_del_writer = 0;
                            delaytilde_07_setupDone = false;
                            feedbacktilde_03_feedbackbuffer = nullptr;
                            stackprotect_count = 0;
                            _voiceIndex = 0;
                            _noteNumber = 0;
                            isMuted = 1;
                            parameterOffset = 0;
                        }
                        
                        // member variables
                        
                            number allpass_tilde_09_x;
                            number allpass_tilde_09_delayTime;
                            number allpass_tilde_09_gain;
                            number dspexpr_25_in1;
                            number dspexpr_25_in2;
                            number comb_tilde_01_x;
                            number comb_tilde_01_delayTime;
                            number comb_tilde_01_gain;
                            number comb_tilde_01_ffGain;
                            number comb_tilde_01_fbGain;
                            number dspexpr_26_in1;
                            number dspexpr_26_in2;
                            number dspexpr_27_in1;
                            number dspexpr_27_in2;
                            number dspexpr_28_in1;
                            number dspexpr_28_in2;
                            number allpass_tilde_10_x;
                            number allpass_tilde_10_delayTime;
                            number allpass_tilde_10_gain;
                            number onepole_tilde_04_x;
                            number onepole_tilde_04_freqInHz;
                            number dspexpr_29_in1;
                            number dspexpr_29_in2;
                            number lores_01_cutoff;
                            number lores_01_resonance;
                            number dspexpr_30_in1;
                            number dspexpr_30_in2;
                            number delaytilde_07_delay;
                            number mstosamps_tilde_01_ms;
                            number dspexpr_31_in1;
                            number dspexpr_31_in2;
                            MillisecondTime _currentTime;
                            UInt64 audioProcessSampleCount;
                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                            signal zeroBuffer;
                            signal dummyBuffer;
                            SampleValue * signals[6];
                            bool didAllocateSignals;
                            Index vs;
                            Index maxvs;
                            number sr;
                            number invsr;
                            Float64BufferRef allpass_tilde_09_feedForward_buffer;
                            Index allpass_tilde_09_feedForward__maxdelay;
                            Int allpass_tilde_09_feedForward_sizemode;
                            Index allpass_tilde_09_feedForward_wrap;
                            Int allpass_tilde_09_feedForward_reader;
                            Int allpass_tilde_09_feedForward_writer;
                            Float64BufferRef allpass_tilde_09_feedBack_buffer;
                            Index allpass_tilde_09_feedBack__maxdelay;
                            Int allpass_tilde_09_feedBack_sizemode;
                            Index allpass_tilde_09_feedBack_wrap;
                            Int allpass_tilde_09_feedBack_reader;
                            Int allpass_tilde_09_feedBack_writer;
                            bool allpass_tilde_09_setupDone;
                            Float64BufferRef comb_tilde_01_feedForward_buffer;
                            Index comb_tilde_01_feedForward__maxdelay;
                            Int comb_tilde_01_feedForward_sizemode;
                            Index comb_tilde_01_feedForward_wrap;
                            Int comb_tilde_01_feedForward_reader;
                            Int comb_tilde_01_feedForward_writer;
                            Float64BufferRef comb_tilde_01_feedBack_buffer;
                            Index comb_tilde_01_feedBack__maxdelay;
                            Int comb_tilde_01_feedBack_sizemode;
                            Index comb_tilde_01_feedBack_wrap;
                            Int comb_tilde_01_feedBack_reader;
                            Int comb_tilde_01_feedBack_writer;
                            bool comb_tilde_01_setupDone;
                            Float64BufferRef allpass_tilde_10_feedForward_buffer;
                            Index allpass_tilde_10_feedForward__maxdelay;
                            Int allpass_tilde_10_feedForward_sizemode;
                            Index allpass_tilde_10_feedForward_wrap;
                            Int allpass_tilde_10_feedForward_reader;
                            Int allpass_tilde_10_feedForward_writer;
                            Float64BufferRef allpass_tilde_10_feedBack_buffer;
                            Index allpass_tilde_10_feedBack__maxdelay;
                            Int allpass_tilde_10_feedBack_sizemode;
                            Index allpass_tilde_10_feedBack_wrap;
                            Int allpass_tilde_10_feedBack_reader;
                            Int allpass_tilde_10_feedBack_writer;
                            bool allpass_tilde_10_setupDone;
                            number onepole_tilde_04_freq;
                            bool onepole_tilde_04_needsUpdate;
                            number onepole_tilde_04_lastY;
                            number onepole_tilde_04_a0;
                            number onepole_tilde_04_b1;
                            bool onepole_tilde_04_setupDone;
                            number lores_01_b_0;
                            number lores_01_a_1;
                            number lores_01_a_2;
                            number lores_01_x_0;
                            number lores_01_y_1;
                            number lores_01_y_2;
                            number lores_01_last_resonance;
                            number lores_01_last_frequency;
                            number lores_01_last_res_calc;
                            number lores_01_last_freq_calc;
                            bool lores_01_setupDone;
                            UInt noise_tilde_03_state[4] = { };
                            number delaytilde_07_lastDelay;
                            number delaytilde_07_crossfadeDelay;
                            number delaytilde_07_ramp;
                            long delaytilde_07_rampInSamples;
                            Float64BufferRef delaytilde_07_del_buffer;
                            Index delaytilde_07_del__maxdelay;
                            Int delaytilde_07_del_sizemode;
                            Index delaytilde_07_del_wrap;
                            Int delaytilde_07_del_reader;
                            Int delaytilde_07_del_writer;
                            bool delaytilde_07_setupDone;
                            signal feedbacktilde_03_feedbackbuffer;
                            number stackprotect_count;
                            DataRef allpass_tilde_09_feedForward_bufferobj;
                            DataRef allpass_tilde_09_feedBack_bufferobj;
                            DataRef comb_tilde_01_feedForward_bufferobj;
                            DataRef comb_tilde_01_feedBack_bufferobj;
                            DataRef allpass_tilde_10_feedForward_bufferobj;
                            DataRef allpass_tilde_10_feedBack_bufferobj;
                            DataRef delaytilde_07_del_bufferobj;
                            Index _voiceIndex;
                            Int _noteNumber;
                            Index isMuted;
                            ParameterIndex parameterOffset;
                        
            };
            
            class RNBOSubpatcher_793 : public PatcherInterfaceImpl {
                        
                        friend class RNBOSubpatcher_805;
                        friend class rnbomatic;
                        
                        public:
                        
                        RNBOSubpatcher_793()
                        {
                        }
                        
                        ~RNBOSubpatcher_793()
                        {
                        }
                        
                        virtual RNBOSubpatcher_805* getPatcher() const {
                            return static_cast<RNBOSubpatcher_805 *>(_parentPatcher);
                        }
                        
                        rnbomatic* getTopLevelPatcher() {
                            return this->getPatcher()->getTopLevelPatcher();
                        }
                        
                        void cancelClockEvents()
                        {
                        }
                        
                        Index getNumMidiInputPorts() const {
                            return 0;
                        }
                        
                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                        
                        Index getNumMidiOutputPorts() const {
                            return 0;
                        }
                        
                        void process(
                            const SampleValue * const* inputs,
                            Index numInputs,
                            SampleValue * const* outputs,
                            Index numOutputs,
                            Index n
                        ) {
                            this->vs = n;
                            this->updateTime(this->getEngine()->getCurrentTime());
                            SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                            SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                            const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                            const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                            const SampleValue * in3 = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
                            this->onepole_tilde_06_perform(in2, in3, out2, n);
                            this->onepole_tilde_05_perform(in1, in3, out1, n);
                            this->stackprotect_perform(n);
                            this->audioProcessSampleCount += this->vs;
                        }
                        
                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                this->didAllocateSignals = true;
                            }
                        
                            const bool sampleRateChanged = sampleRate != this->sr;
                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                        
                            if (sampleRateChanged || maxvsChanged) {
                                this->vs = maxBlockSize;
                                this->maxvs = maxBlockSize;
                                this->sr = sampleRate;
                                this->invsr = 1 / sampleRate;
                            }
                        
                            this->onepole_tilde_06_dspsetup(forceDSPSetup);
                            this->onepole_tilde_05_dspsetup(forceDSPSetup);
                        
                            if (sampleRateChanged)
                                this->onSampleRateChanged(sampleRate);
                        }
                        
                        void setProbingTarget(MessageTag id) {
                            switch (id) {
                            default:
                                {
                                this->setProbingIndex(-1);
                                break;
                                }
                            }
                        }
                        
                        void setProbingIndex(ProbingIndex ) {}
                        
                        Index getProbingChannels(MessageTag outletId) const {
                            RNBO_UNUSED(outletId);
                            return 0;
                        }
                        
                        Index getIsMuted()  {
                            return this->isMuted;
                        }
                        
                        void setIsMuted(Index v)  {
                            this->isMuted = v;
                        }
                        
                        void onSampleRateChanged(double ) {}
                        
                        Index getPatcherSerial() const {
                            return 0;
                        }
                        
                        void getState(PatcherStateInterface& ) {}
                        
                        void setState() {}
                        
                        void getPreset(PatcherStateInterface& ) {}
                        
                        void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                        
                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValue(index, value, time);
                        }
                        
                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                            this->setParameterValue(index, this->getParameterValue(index), time);
                        }
                        
                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValueNormalized(index, value, time);
                        }
                        
                        ParameterValue getParameterValue(ParameterIndex index)  {
                            switch (index) {
                            default:
                                {
                                return 0;
                                }
                            }
                        }
                        
                        ParameterIndex getNumSignalInParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumSignalOutParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumParameters() const {
                            return 0;
                        }
                        
                        ConstCharPointer getParameterName(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        ConstCharPointer getParameterId(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                        
                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                        }
                        
                        void setParameterOffset(ParameterIndex offset) {
                            this->parameterOffset = offset;
                        }
                        
                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                            if (steps == 1) {
                                if (normalizedValue > 0) {
                                    normalizedValue = 1.;
                                }
                            } else {
                                ParameterValue oneStep = (number)1. / (steps - 1);
                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                normalizedValue = numberOfSteps * oneStep;
                            }
                        
                            return normalizedValue;
                        }
                        
                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        void scheduleParamInit(ParameterIndex index, Index order) {
                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                        }
                        
                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                        
                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                        
                        void processOutletEvent(
                            EngineLink* sender,
                            OutletIndex index,
                            ParameterValue value,
                            MillisecondTime time
                        ) {
                            this->updateTime(time);
                            this->processOutletAtCurrentTime(sender, index, value);
                        }
                        
                        void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
                        
                        void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
                        
                        void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
                        
                        MessageTagInfo resolveTag(MessageTag tag) const {
                            switch (tag) {
                        
                            }
                        
                            return nullptr;
                        }
                        
                        DataRef* getDataRef(DataRefIndex index)  {
                            switch (index) {
                            default:
                                {
                                return nullptr;
                                }
                            }
                        }
                        
                        DataRefIndex getNumDataRefs() const {
                            return 0;
                        }
                        
                        void fillDataRef(DataRefIndex , DataRef& ) {}
                        
                        void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
                        
                        void initialize() {
                            this->assign_defaults();
                            this->setState();
                        }
                        
                        protected:
                        
                        number msToSamps(MillisecondTime ms, number sampleRate) {
                            return ms * sampleRate * 0.001;
                        }
                        
                        MillisecondTime sampsToMs(SampleIndex samps) {
                            return samps * (this->invsr * 1000);
                        }
                        
                        Index getMaxBlockSize() const {
                            return this->maxvs;
                        }
                        
                        number getSampleRate() const {
                            return this->sr;
                        }
                        
                        bool hasFixedVectorSize() const {
                            return false;
                        }
                        
                        Index getNumInputChannels() const {
                            return 3;
                        }
                        
                        Index getNumOutputChannels() const {
                            return 2;
                        }
                        
                        void initializeObjects() {}
                        
                        void sendOutlet(OutletIndex index, ParameterValue value) {
                            this->getEngine()->sendOutlet(this, index, value);
                        }
                        
                        void startup() {}
                        
                        void allocateDataRefs() {}
                        
                        void onepole_tilde_06_perform(const Sample * x, const Sample * freqInHz, SampleValue * out1, Index n) {
                            auto __onepole_tilde_06_lastY = this->onepole_tilde_06_lastY;
                            auto __onepole_tilde_06_b1 = this->onepole_tilde_06_b1;
                            auto __onepole_tilde_06_a0 = this->onepole_tilde_06_a0;
                            auto __onepole_tilde_06_needsUpdate = this->onepole_tilde_06_needsUpdate;
                            auto __onepole_tilde_06_freq = this->onepole_tilde_06_freq;
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                if (__onepole_tilde_06_freq != freqInHz[(Index)i] || (bool)(__onepole_tilde_06_needsUpdate)) {
                                    __onepole_tilde_06_freq = freqInHz[(Index)i];
                                    __onepole_tilde_06_a0 = 1 - rnbo_exp(-6.28318530717958647692 * freqInHz[(Index)i] / this->sr);
                                    __onepole_tilde_06_a0 = (__onepole_tilde_06_a0 > 0.99999 ? 0.99999 : (__onepole_tilde_06_a0 < 0.00001 ? 0.00001 : __onepole_tilde_06_a0));
                                    __onepole_tilde_06_b1 = 1 - __onepole_tilde_06_a0;
                                    __onepole_tilde_06_needsUpdate = false;
                                }
                        
                                __onepole_tilde_06_lastY = __onepole_tilde_06_a0 * x[(Index)i] + __onepole_tilde_06_b1 * __onepole_tilde_06_lastY;
                                out1[(Index)i] = __onepole_tilde_06_lastY;
                            }
                        
                            this->onepole_tilde_06_freq = __onepole_tilde_06_freq;
                            this->onepole_tilde_06_needsUpdate = __onepole_tilde_06_needsUpdate;
                            this->onepole_tilde_06_a0 = __onepole_tilde_06_a0;
                            this->onepole_tilde_06_b1 = __onepole_tilde_06_b1;
                            this->onepole_tilde_06_lastY = __onepole_tilde_06_lastY;
                        }
                        
                        void onepole_tilde_05_perform(const Sample * x, const Sample * freqInHz, SampleValue * out1, Index n) {
                            auto __onepole_tilde_05_lastY = this->onepole_tilde_05_lastY;
                            auto __onepole_tilde_05_b1 = this->onepole_tilde_05_b1;
                            auto __onepole_tilde_05_a0 = this->onepole_tilde_05_a0;
                            auto __onepole_tilde_05_needsUpdate = this->onepole_tilde_05_needsUpdate;
                            auto __onepole_tilde_05_freq = this->onepole_tilde_05_freq;
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                if (__onepole_tilde_05_freq != freqInHz[(Index)i] || (bool)(__onepole_tilde_05_needsUpdate)) {
                                    __onepole_tilde_05_freq = freqInHz[(Index)i];
                                    __onepole_tilde_05_a0 = 1 - rnbo_exp(-6.28318530717958647692 * freqInHz[(Index)i] / this->sr);
                                    __onepole_tilde_05_a0 = (__onepole_tilde_05_a0 > 0.99999 ? 0.99999 : (__onepole_tilde_05_a0 < 0.00001 ? 0.00001 : __onepole_tilde_05_a0));
                                    __onepole_tilde_05_b1 = 1 - __onepole_tilde_05_a0;
                                    __onepole_tilde_05_needsUpdate = false;
                                }
                        
                                __onepole_tilde_05_lastY = __onepole_tilde_05_a0 * x[(Index)i] + __onepole_tilde_05_b1 * __onepole_tilde_05_lastY;
                                out1[(Index)i] = __onepole_tilde_05_lastY;
                            }
                        
                            this->onepole_tilde_05_freq = __onepole_tilde_05_freq;
                            this->onepole_tilde_05_needsUpdate = __onepole_tilde_05_needsUpdate;
                            this->onepole_tilde_05_a0 = __onepole_tilde_05_a0;
                            this->onepole_tilde_05_b1 = __onepole_tilde_05_b1;
                            this->onepole_tilde_05_lastY = __onepole_tilde_05_lastY;
                        }
                        
                        void stackprotect_perform(Index n) {
                            RNBO_UNUSED(n);
                            auto __stackprotect_count = this->stackprotect_count;
                            __stackprotect_count = 0;
                            this->stackprotect_count = __stackprotect_count;
                        }
                        
                        void onepole_tilde_05_reset() {
                            this->onepole_tilde_05_lastY = 0;
                            this->onepole_tilde_05_a0 = 0;
                            this->onepole_tilde_05_b1 = 0;
                        }
                        
                        void onepole_tilde_05_dspsetup(bool force) {
                            if ((bool)(this->onepole_tilde_05_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->onepole_tilde_05_needsUpdate = true;
                            this->onepole_tilde_05_reset();
                            this->onepole_tilde_05_setupDone = true;
                        }
                        
                        void onepole_tilde_06_reset() {
                            this->onepole_tilde_06_lastY = 0;
                            this->onepole_tilde_06_a0 = 0;
                            this->onepole_tilde_06_b1 = 0;
                        }
                        
                        void onepole_tilde_06_dspsetup(bool force) {
                            if ((bool)(this->onepole_tilde_06_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->onepole_tilde_06_needsUpdate = true;
                            this->onepole_tilde_06_reset();
                            this->onepole_tilde_06_setupDone = true;
                        }
                        
                        bool stackprotect_check() {
                            this->stackprotect_count++;
                        
                            if (this->stackprotect_count > 128) {
                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                return true;
                            }
                        
                            return false;
                        }
                        
                        void updateTime(MillisecondTime time) {
                            this->_currentTime = time;
                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                        
                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                        
                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                this->sampleOffsetIntoNextAudioBuffer = 0;
                        }
                        
                        void assign_defaults()
                        {
                            onepole_tilde_05_x = 0;
                            onepole_tilde_05_freqInHz = 1800;
                            onepole_tilde_06_x = 0;
                            onepole_tilde_06_freqInHz = 1800;
                            _currentTime = 0;
                            audioProcessSampleCount = 0;
                            sampleOffsetIntoNextAudioBuffer = 0;
                            zeroBuffer = nullptr;
                            dummyBuffer = nullptr;
                            didAllocateSignals = 0;
                            vs = 0;
                            maxvs = 0;
                            sr = 44100;
                            invsr = 0.00002267573696;
                            onepole_tilde_05_freq = 0;
                            onepole_tilde_05_needsUpdate = false;
                            onepole_tilde_05_lastY = 0;
                            onepole_tilde_05_a0 = 0;
                            onepole_tilde_05_b1 = 0;
                            onepole_tilde_05_setupDone = false;
                            onepole_tilde_06_freq = 0;
                            onepole_tilde_06_needsUpdate = false;
                            onepole_tilde_06_lastY = 0;
                            onepole_tilde_06_a0 = 0;
                            onepole_tilde_06_b1 = 0;
                            onepole_tilde_06_setupDone = false;
                            stackprotect_count = 0;
                            _voiceIndex = 0;
                            _noteNumber = 0;
                            isMuted = 1;
                            parameterOffset = 0;
                        }
                        
                        // member variables
                        
                            number onepole_tilde_05_x;
                            number onepole_tilde_05_freqInHz;
                            number onepole_tilde_06_x;
                            number onepole_tilde_06_freqInHz;
                            MillisecondTime _currentTime;
                            UInt64 audioProcessSampleCount;
                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                            signal zeroBuffer;
                            signal dummyBuffer;
                            bool didAllocateSignals;
                            Index vs;
                            Index maxvs;
                            number sr;
                            number invsr;
                            number onepole_tilde_05_freq;
                            bool onepole_tilde_05_needsUpdate;
                            number onepole_tilde_05_lastY;
                            number onepole_tilde_05_a0;
                            number onepole_tilde_05_b1;
                            bool onepole_tilde_05_setupDone;
                            number onepole_tilde_06_freq;
                            bool onepole_tilde_06_needsUpdate;
                            number onepole_tilde_06_lastY;
                            number onepole_tilde_06_a0;
                            number onepole_tilde_06_b1;
                            bool onepole_tilde_06_setupDone;
                            number stackprotect_count;
                            Index _voiceIndex;
                            Int _noteNumber;
                            Index isMuted;
                            ParameterIndex parameterOffset;
                        
            };
            
            class RNBOSubpatcher_794 : public PatcherInterfaceImpl {
                        
                        friend class RNBOSubpatcher_805;
                        friend class rnbomatic;
                        
                        public:
                        
                        RNBOSubpatcher_794()
                        {
                        }
                        
                        ~RNBOSubpatcher_794()
                        {
                        }
                        
                        virtual RNBOSubpatcher_805* getPatcher() const {
                            return static_cast<RNBOSubpatcher_805 *>(_parentPatcher);
                        }
                        
                        rnbomatic* getTopLevelPatcher() {
                            return this->getPatcher()->getTopLevelPatcher();
                        }
                        
                        void cancelClockEvents()
                        {
                        }
                        
                        Index getNumMidiInputPorts() const {
                            return 0;
                        }
                        
                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                        
                        Index getNumMidiOutputPorts() const {
                            return 0;
                        }
                        
                        void process(
                            const SampleValue * const* inputs,
                            Index numInputs,
                            SampleValue * const* outputs,
                            Index numOutputs,
                            Index n
                        ) {
                            this->vs = n;
                            this->updateTime(this->getEngine()->getCurrentTime());
                            SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                            SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                            SampleValue * out3 = (numOutputs >= 3 && outputs[2] ? outputs[2] : this->dummyBuffer);
                            SampleValue * out4 = (numOutputs >= 4 && outputs[3] ? outputs[3] : this->dummyBuffer);
                            SampleValue * out5 = (numOutputs >= 5 && outputs[4] ? outputs[4] : this->dummyBuffer);
                            SampleValue * out6 = (numOutputs >= 6 && outputs[5] ? outputs[5] : this->dummyBuffer);
                            SampleValue * out7 = (numOutputs >= 7 && outputs[6] ? outputs[6] : this->dummyBuffer);
                            SampleValue * out8 = (numOutputs >= 8 && outputs[7] ? outputs[7] : this->dummyBuffer);
                            SampleValue * out9 = (numOutputs >= 9 && outputs[8] ? outputs[8] : this->dummyBuffer);
                            SampleValue * out10 = (numOutputs >= 10 && outputs[9] ? outputs[9] : this->dummyBuffer);
                            SampleValue * out11 = (numOutputs >= 11 && outputs[10] ? outputs[10] : this->dummyBuffer);
                            SampleValue * out12 = (numOutputs >= 12 && outputs[11] ? outputs[11] : this->dummyBuffer);
                            SampleValue * out13 = (numOutputs >= 13 && outputs[12] ? outputs[12] : this->dummyBuffer);
                            SampleValue * out14 = (numOutputs >= 14 && outputs[13] ? outputs[13] : this->dummyBuffer);
                            const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                            const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                            const SampleValue * in3 = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
                            const SampleValue * in4 = (numInputs >= 4 && inputs[3] ? inputs[3] : this->zeroBuffer);
                            const SampleValue * in5 = (numInputs >= 5 && inputs[4] ? inputs[4] : this->zeroBuffer);
                            const SampleValue * in6 = (numInputs >= 6 && inputs[5] ? inputs[5] : this->zeroBuffer);
                            const SampleValue * in7 = (numInputs >= 7 && inputs[6] ? inputs[6] : this->zeroBuffer);
                            const SampleValue * in8 = (numInputs >= 8 && inputs[7] ? inputs[7] : this->zeroBuffer);
                            this->signalforwarder_05_perform(in1, out2, n);
                            this->signalforwarder_06_perform(in1, out1, n);
                            this->signalforwarder_07_perform(in2, out12, n);
                            this->signalforwarder_08_perform(in3, out13, n);
                            this->signalforwarder_09_perform(in3, out3, n);
                            this->signalforwarder_10_perform(in4, out14, n);
                            this->signalforwarder_11_perform(in4, out4, n);
                            this->signalforwarder_12_perform(in5, out8, n);
                            this->signalforwarder_13_perform(in5, out9, n);
                            this->signalforwarder_14_perform(in6, out5, n);
                            this->signalforwarder_15_perform(in7, out10, n);
                            this->signalforwarder_16_perform(in7, out6, n);
                            this->signalforwarder_17_perform(in8, out11, n);
                            this->signalforwarder_18_perform(in8, out7, n);
                            this->stackprotect_perform(n);
                            this->audioProcessSampleCount += this->vs;
                        }
                        
                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                this->didAllocateSignals = true;
                            }
                        
                            const bool sampleRateChanged = sampleRate != this->sr;
                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                        
                            if (sampleRateChanged || maxvsChanged) {
                                this->vs = maxBlockSize;
                                this->maxvs = maxBlockSize;
                                this->sr = sampleRate;
                                this->invsr = 1 / sampleRate;
                            }
                        
                            RNBO_UNUSED(forceDSPSetup);
                        
                            if (sampleRateChanged)
                                this->onSampleRateChanged(sampleRate);
                        }
                        
                        void setProbingTarget(MessageTag id) {
                            switch (id) {
                            default:
                                {
                                this->setProbingIndex(-1);
                                break;
                                }
                            }
                        }
                        
                        void setProbingIndex(ProbingIndex ) {}
                        
                        Index getProbingChannels(MessageTag outletId) const {
                            RNBO_UNUSED(outletId);
                            return 0;
                        }
                        
                        Index getIsMuted()  {
                            return this->isMuted;
                        }
                        
                        void setIsMuted(Index v)  {
                            this->isMuted = v;
                        }
                        
                        void onSampleRateChanged(double ) {}
                        
                        Index getPatcherSerial() const {
                            return 0;
                        }
                        
                        void getState(PatcherStateInterface& ) {}
                        
                        void setState() {}
                        
                        void getPreset(PatcherStateInterface& ) {}
                        
                        void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                        
                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValue(index, value, time);
                        }
                        
                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                            this->setParameterValue(index, this->getParameterValue(index), time);
                        }
                        
                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValueNormalized(index, value, time);
                        }
                        
                        ParameterValue getParameterValue(ParameterIndex index)  {
                            switch (index) {
                            default:
                                {
                                return 0;
                                }
                            }
                        }
                        
                        ParameterIndex getNumSignalInParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumSignalOutParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumParameters() const {
                            return 0;
                        }
                        
                        ConstCharPointer getParameterName(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        ConstCharPointer getParameterId(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                        
                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                        }
                        
                        void setParameterOffset(ParameterIndex offset) {
                            this->parameterOffset = offset;
                        }
                        
                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                            if (steps == 1) {
                                if (normalizedValue > 0) {
                                    normalizedValue = 1.;
                                }
                            } else {
                                ParameterValue oneStep = (number)1. / (steps - 1);
                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                normalizedValue = numberOfSteps * oneStep;
                            }
                        
                            return normalizedValue;
                        }
                        
                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        void scheduleParamInit(ParameterIndex index, Index order) {
                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                        }
                        
                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                        
                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                        
                        void processOutletEvent(
                            EngineLink* sender,
                            OutletIndex index,
                            ParameterValue value,
                            MillisecondTime time
                        ) {
                            this->updateTime(time);
                            this->processOutletAtCurrentTime(sender, index, value);
                        }
                        
                        void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
                        
                        void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
                        
                        void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
                        
                        MessageTagInfo resolveTag(MessageTag tag) const {
                            switch (tag) {
                        
                            }
                        
                            return nullptr;
                        }
                        
                        DataRef* getDataRef(DataRefIndex index)  {
                            switch (index) {
                            default:
                                {
                                return nullptr;
                                }
                            }
                        }
                        
                        DataRefIndex getNumDataRefs() const {
                            return 0;
                        }
                        
                        void fillDataRef(DataRefIndex , DataRef& ) {}
                        
                        void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
                        
                        void initialize() {
                            this->assign_defaults();
                            this->setState();
                        }
                        
                        protected:
                        
                        number msToSamps(MillisecondTime ms, number sampleRate) {
                            return ms * sampleRate * 0.001;
                        }
                        
                        MillisecondTime sampsToMs(SampleIndex samps) {
                            return samps * (this->invsr * 1000);
                        }
                        
                        Index getMaxBlockSize() const {
                            return this->maxvs;
                        }
                        
                        number getSampleRate() const {
                            return this->sr;
                        }
                        
                        bool hasFixedVectorSize() const {
                            return false;
                        }
                        
                        Index getNumInputChannels() const {
                            return 8;
                        }
                        
                        Index getNumOutputChannels() const {
                            return 14;
                        }
                        
                        void initializeObjects() {}
                        
                        void sendOutlet(OutletIndex index, ParameterValue value) {
                            this->getEngine()->sendOutlet(this, index, value);
                        }
                        
                        void startup() {}
                        
                        void allocateDataRefs() {}
                        
                        void signalforwarder_05_perform(const SampleValue * input, SampleValue * output, Index n) {
                            for (Index i = 0; i < n; i++) {
                                output[(Index)i] = input[(Index)i];
                            }
                        }
                        
                        void signalforwarder_06_perform(const SampleValue * input, SampleValue * output, Index n) {
                            for (Index i = 0; i < n; i++) {
                                output[(Index)i] = input[(Index)i];
                            }
                        }
                        
                        void signalforwarder_07_perform(const SampleValue * input, SampleValue * output, Index n) {
                            for (Index i = 0; i < n; i++) {
                                output[(Index)i] = input[(Index)i];
                            }
                        }
                        
                        void signalforwarder_08_perform(const SampleValue * input, SampleValue * output, Index n) {
                            for (Index i = 0; i < n; i++) {
                                output[(Index)i] = input[(Index)i];
                            }
                        }
                        
                        void signalforwarder_09_perform(const SampleValue * input, SampleValue * output, Index n) {
                            for (Index i = 0; i < n; i++) {
                                output[(Index)i] = input[(Index)i];
                            }
                        }
                        
                        void signalforwarder_10_perform(const SampleValue * input, SampleValue * output, Index n) {
                            for (Index i = 0; i < n; i++) {
                                output[(Index)i] = input[(Index)i];
                            }
                        }
                        
                        void signalforwarder_11_perform(const SampleValue * input, SampleValue * output, Index n) {
                            for (Index i = 0; i < n; i++) {
                                output[(Index)i] = input[(Index)i];
                            }
                        }
                        
                        void signalforwarder_12_perform(const SampleValue * input, SampleValue * output, Index n) {
                            for (Index i = 0; i < n; i++) {
                                output[(Index)i] = input[(Index)i];
                            }
                        }
                        
                        void signalforwarder_13_perform(const SampleValue * input, SampleValue * output, Index n) {
                            for (Index i = 0; i < n; i++) {
                                output[(Index)i] = input[(Index)i];
                            }
                        }
                        
                        void signalforwarder_14_perform(const SampleValue * input, SampleValue * output, Index n) {
                            for (Index i = 0; i < n; i++) {
                                output[(Index)i] = input[(Index)i];
                            }
                        }
                        
                        void signalforwarder_15_perform(const SampleValue * input, SampleValue * output, Index n) {
                            for (Index i = 0; i < n; i++) {
                                output[(Index)i] = input[(Index)i];
                            }
                        }
                        
                        void signalforwarder_16_perform(const SampleValue * input, SampleValue * output, Index n) {
                            for (Index i = 0; i < n; i++) {
                                output[(Index)i] = input[(Index)i];
                            }
                        }
                        
                        void signalforwarder_17_perform(const SampleValue * input, SampleValue * output, Index n) {
                            for (Index i = 0; i < n; i++) {
                                output[(Index)i] = input[(Index)i];
                            }
                        }
                        
                        void signalforwarder_18_perform(const SampleValue * input, SampleValue * output, Index n) {
                            for (Index i = 0; i < n; i++) {
                                output[(Index)i] = input[(Index)i];
                            }
                        }
                        
                        void stackprotect_perform(Index n) {
                            RNBO_UNUSED(n);
                            auto __stackprotect_count = this->stackprotect_count;
                            __stackprotect_count = 0;
                            this->stackprotect_count = __stackprotect_count;
                        }
                        
                        bool stackprotect_check() {
                            this->stackprotect_count++;
                        
                            if (this->stackprotect_count > 128) {
                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                return true;
                            }
                        
                            return false;
                        }
                        
                        void updateTime(MillisecondTime time) {
                            this->_currentTime = time;
                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                        
                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                        
                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                this->sampleOffsetIntoNextAudioBuffer = 0;
                        }
                        
                        void assign_defaults()
                        {
                            _currentTime = 0;
                            audioProcessSampleCount = 0;
                            sampleOffsetIntoNextAudioBuffer = 0;
                            zeroBuffer = nullptr;
                            dummyBuffer = nullptr;
                            didAllocateSignals = 0;
                            vs = 0;
                            maxvs = 0;
                            sr = 44100;
                            invsr = 0.00002267573696;
                            stackprotect_count = 0;
                            _voiceIndex = 0;
                            _noteNumber = 0;
                            isMuted = 1;
                            parameterOffset = 0;
                        }
                        
                        // member variables
                        
                            MillisecondTime _currentTime;
                            UInt64 audioProcessSampleCount;
                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                            signal zeroBuffer;
                            signal dummyBuffer;
                            bool didAllocateSignals;
                            Index vs;
                            Index maxvs;
                            number sr;
                            number invsr;
                            number stackprotect_count;
                            Index _voiceIndex;
                            Int _noteNumber;
                            Index isMuted;
                            ParameterIndex parameterOffset;
                        
            };
            
            class RNBOSubpatcher_795 : public PatcherInterfaceImpl {
                        
                        friend class RNBOSubpatcher_805;
                        friend class rnbomatic;
                        
                        public:
                        
                        RNBOSubpatcher_795()
                        {
                        }
                        
                        ~RNBOSubpatcher_795()
                        {
                        }
                        
                        virtual RNBOSubpatcher_805* getPatcher() const {
                            return static_cast<RNBOSubpatcher_805 *>(_parentPatcher);
                        }
                        
                        rnbomatic* getTopLevelPatcher() {
                            return this->getPatcher()->getTopLevelPatcher();
                        }
                        
                        void cancelClockEvents()
                        {
                        }
                        
                        inline number linearinterp(number frac, number x, number y) {
                            return x + (y - x) * frac;
                        }
                        
                        inline number cubicinterp(number a, number w, number x, number y, number z) {
                            number a1 = 1. + a;
                            number aa = a * a1;
                            number b = 1. - a;
                            number b1 = 2. - a;
                            number bb = b * b1;
                            number fw = -.1666667 * bb * a;
                            number fx = .5 * bb * a1;
                            number fy = .5 * aa * b1;
                            number fz = -.1666667 * aa * b;
                            return w * fw + x * fx + y * fy + z * fz;
                        }
                        
                        inline number fastcubicinterp(number a, number w, number x, number y, number z) {
                            number a2 = a * a;
                            number f0 = z - y - w + x;
                            number f1 = w - x - f0;
                            number f2 = y - w;
                            number f3 = x;
                            return f0 * a * a2 + f1 * a2 + f2 * a + f3;
                        }
                        
                        inline number splineinterp(number a, number w, number x, number y, number z) {
                            number a2 = a * a;
                            number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
                            number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
                            number f2 = -0.5 * w + 0.5 * y;
                            return f0 * a * a2 + f1 * a2 + f2 * a + x;
                        }
                        
                        inline number spline6interp(number a, number y0, number y1, number y2, number y3, number y4, number y5) {
                            number ym2py2 = y0 + y4;
                            number ym1py1 = y1 + y3;
                            number y2mym2 = y4 - y0;
                            number y1mym1 = y3 - y1;
                            number sixthym1py1 = (number)1 / (number)6.0 * ym1py1;
                            number c0 = (number)1 / (number)120.0 * ym2py2 + (number)13 / (number)60.0 * ym1py1 + (number)11 / (number)20.0 * y2;
                            number c1 = (number)1 / (number)24.0 * y2mym2 + (number)5 / (number)12.0 * y1mym1;
                            number c2 = (number)1 / (number)12.0 * ym2py2 + sixthym1py1 - (number)1 / (number)2.0 * y2;
                            number c3 = (number)1 / (number)12.0 * y2mym2 - (number)1 / (number)6.0 * y1mym1;
                            number c4 = (number)1 / (number)24.0 * ym2py2 - sixthym1py1 + (number)1 / (number)4.0 * y2;
                            number c5 = (number)1 / (number)120.0 * (y5 - y0) + (number)1 / (number)24.0 * (y1 - y4) + (number)1 / (number)12.0 * (y3 - y2);
                            return ((((c5 * a + c4) * a + c3) * a + c2) * a + c1) * a + c0;
                        }
                        
                        inline number cosT8(number r) {
                            number t84 = 56.0;
                            number t83 = 1680.0;
                            number t82 = 20160.0;
                            number t81 = 2.4801587302e-05;
                            number t73 = 42.0;
                            number t72 = 840.0;
                            number t71 = 1.9841269841e-04;
                        
                            if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
                                number rr = r * r;
                                return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
                            } else if (r > 0.0) {
                                r -= 1.57079632679489661923132169163975144;
                                number rr = r * r;
                                return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                            } else {
                                r += 1.57079632679489661923132169163975144;
                                number rr = r * r;
                                return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                            }
                        }
                        
                        inline number cosineinterp(number frac, number x, number y) {
                            number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
                            return x * (1.0 - a2) + y * a2;
                        }
                        
                        number mstosamps(MillisecondTime ms) {
                            return ms * this->sr * 0.001;
                        }
                        
                        number samplerate() const {
                            return this->sr;
                        }
                        
                        Index vectorsize() const {
                            return this->vs;
                        }
                        
                        number maximum(number x, number y) {
                            return (x < y ? y : x);
                        }
                        
                        Index getNumMidiInputPorts() const {
                            return 0;
                        }
                        
                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                        
                        Index getNumMidiOutputPorts() const {
                            return 0;
                        }
                        
                        void process(
                            const SampleValue * const* inputs,
                            Index numInputs,
                            SampleValue * const* outputs,
                            Index numOutputs,
                            Index n
                        ) {
                            this->vs = n;
                            this->updateTime(this->getEngine()->getCurrentTime());
                            SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                            const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                            const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                            const SampleValue * in3 = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
                            const SampleValue * in4 = (numInputs >= 4 && inputs[3] ? inputs[3] : this->zeroBuffer);
                            const SampleValue * in5 = (numInputs >= 5 && inputs[4] ? inputs[4] : this->zeroBuffer);
                            const SampleValue * in6 = (numInputs >= 6 && inputs[5] ? inputs[5] : this->zeroBuffer);
                            const SampleValue * in7 = (numInputs >= 7 && inputs[6] ? inputs[6] : this->zeroBuffer);
                            const SampleValue * in8 = (numInputs >= 8 && inputs[7] ? inputs[7] : this->zeroBuffer);
                            const SampleValue * in9 = (numInputs >= 9 && inputs[8] ? inputs[8] : this->zeroBuffer);
                            this->dspexpr_41_perform(in8, in9, this->signals[0], n);
                            this->dspexpr_40_perform(this->signals[0], this->dspexpr_40_in2, this->signals[1], n);
                        
                            this->comb_tilde_08_perform(
                                in7,
                                this->signals[1],
                                this->comb_tilde_08_gain,
                                this->comb_tilde_08_ffGain,
                                this->comb_tilde_08_fbGain,
                                this->signals[2],
                                n
                            );
                        
                            this->dspexpr_32_perform(this->signals[0], this->dspexpr_32_in2, this->signals[1], n);
                        
                            this->comb_tilde_02_perform(
                                in1,
                                this->signals[1],
                                this->comb_tilde_02_gain,
                                this->comb_tilde_02_ffGain,
                                this->comb_tilde_02_fbGain,
                                this->signals[3],
                                n
                            );
                        
                            this->dspexpr_33_perform(this->signals[0], this->dspexpr_33_in2, this->signals[1], n);
                        
                            this->comb_tilde_03_perform(
                                in2,
                                this->signals[1],
                                this->comb_tilde_03_gain,
                                this->comb_tilde_03_ffGain,
                                this->comb_tilde_03_fbGain,
                                this->signals[4],
                                n
                            );
                        
                            this->dspexpr_34_perform(this->signals[0], this->dspexpr_34_in2, this->signals[1], n);
                        
                            this->comb_tilde_04_perform(
                                in3,
                                this->signals[1],
                                this->comb_tilde_04_gain,
                                this->comb_tilde_04_ffGain,
                                this->comb_tilde_04_fbGain,
                                this->signals[5],
                                n
                            );
                        
                            this->dspexpr_36_perform(this->signals[0], this->dspexpr_36_in2, this->signals[1], n);
                        
                            this->comb_tilde_05_perform(
                                in4,
                                this->signals[1],
                                this->comb_tilde_05_gain,
                                this->comb_tilde_05_ffGain,
                                this->comb_tilde_05_fbGain,
                                this->signals[6],
                                n
                            );
                        
                            this->dspexpr_38_perform(this->signals[0], this->dspexpr_38_in2, this->signals[1], n);
                        
                            this->comb_tilde_06_perform(
                                in5,
                                this->signals[1],
                                this->comb_tilde_06_gain,
                                this->comb_tilde_06_ffGain,
                                this->comb_tilde_06_fbGain,
                                this->signals[7],
                                n
                            );
                        
                            this->dspexpr_39_perform(this->signals[0], this->dspexpr_39_in2, this->signals[1], n);
                        
                            this->comb_tilde_07_perform(
                                in6,
                                this->signals[1],
                                this->comb_tilde_07_gain,
                                this->comb_tilde_07_ffGain,
                                this->comb_tilde_07_fbGain,
                                this->signals[0],
                                n
                            );
                        
                            this->signaladder_13_perform(
                                this->signals[2],
                                this->signals[0],
                                this->signals[7],
                                this->signals[5],
                                this->signals[5],
                                n
                            );
                        
                            this->dspexpr_37_perform(this->signals[5], this->dspexpr_37_in2, this->signals[1], n);
                        
                            this->signaladder_14_perform(
                                this->signals[6],
                                this->signals[4],
                                this->signals[3],
                                this->signals[1],
                                this->signals[1],
                                n
                            );
                        
                            this->dspexpr_35_perform(this->signals[1], this->dspexpr_35_in2, out1, n);
                            this->stackprotect_perform(n);
                            this->audioProcessSampleCount += this->vs;
                        }
                        
                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                Index i;
                        
                                for (i = 0; i < 8; i++) {
                                    this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                                }
                        
                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                this->didAllocateSignals = true;
                            }
                        
                            const bool sampleRateChanged = sampleRate != this->sr;
                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                        
                            if (sampleRateChanged || maxvsChanged) {
                                this->vs = maxBlockSize;
                                this->maxvs = maxBlockSize;
                                this->sr = sampleRate;
                                this->invsr = 1 / sampleRate;
                            }
                        
                            this->comb_tilde_08_dspsetup(forceDSPSetup);
                            this->comb_tilde_02_dspsetup(forceDSPSetup);
                            this->comb_tilde_03_dspsetup(forceDSPSetup);
                            this->comb_tilde_04_dspsetup(forceDSPSetup);
                            this->comb_tilde_05_dspsetup(forceDSPSetup);
                            this->comb_tilde_06_dspsetup(forceDSPSetup);
                            this->comb_tilde_07_dspsetup(forceDSPSetup);
                        
                            if (sampleRateChanged)
                                this->onSampleRateChanged(sampleRate);
                        }
                        
                        void setProbingTarget(MessageTag id) {
                            switch (id) {
                            default:
                                {
                                this->setProbingIndex(-1);
                                break;
                                }
                            }
                        }
                        
                        void setProbingIndex(ProbingIndex ) {}
                        
                        Index getProbingChannels(MessageTag outletId) const {
                            RNBO_UNUSED(outletId);
                            return 0;
                        }
                        
                        Index getIsMuted()  {
                            return this->isMuted;
                        }
                        
                        void setIsMuted(Index v)  {
                            this->isMuted = v;
                        }
                        
                        void onSampleRateChanged(double ) {}
                        
                        Index getPatcherSerial() const {
                            return 0;
                        }
                        
                        void getState(PatcherStateInterface& ) {}
                        
                        void setState() {}
                        
                        void getPreset(PatcherStateInterface& ) {}
                        
                        void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                        
                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValue(index, value, time);
                        }
                        
                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                            this->setParameterValue(index, this->getParameterValue(index), time);
                        }
                        
                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValueNormalized(index, value, time);
                        }
                        
                        ParameterValue getParameterValue(ParameterIndex index)  {
                            switch (index) {
                            default:
                                {
                                return 0;
                                }
                            }
                        }
                        
                        ParameterIndex getNumSignalInParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumSignalOutParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumParameters() const {
                            return 0;
                        }
                        
                        ConstCharPointer getParameterName(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        ConstCharPointer getParameterId(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                        
                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                        }
                        
                        void setParameterOffset(ParameterIndex offset) {
                            this->parameterOffset = offset;
                        }
                        
                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                            if (steps == 1) {
                                if (normalizedValue > 0) {
                                    normalizedValue = 1.;
                                }
                            } else {
                                ParameterValue oneStep = (number)1. / (steps - 1);
                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                normalizedValue = numberOfSteps * oneStep;
                            }
                        
                            return normalizedValue;
                        }
                        
                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        void scheduleParamInit(ParameterIndex index, Index order) {
                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                        }
                        
                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                        
                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                        
                        void processOutletEvent(
                            EngineLink* sender,
                            OutletIndex index,
                            ParameterValue value,
                            MillisecondTime time
                        ) {
                            this->updateTime(time);
                            this->processOutletAtCurrentTime(sender, index, value);
                        }
                        
                        void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
                        
                        void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
                        
                        void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
                        
                        MessageTagInfo resolveTag(MessageTag tag) const {
                            switch (tag) {
                        
                            }
                        
                            return nullptr;
                        }
                        
                        DataRef* getDataRef(DataRefIndex index)  {
                            switch (index) {
                            case 6:
                                {
                                return addressOf(this->comb_tilde_02_feedForward_bufferobj);
                                break;
                                }
                            case 7:
                                {
                                return addressOf(this->comb_tilde_02_feedBack_bufferobj);
                                break;
                                }
                            case 8:
                                {
                                return addressOf(this->comb_tilde_03_feedForward_bufferobj);
                                break;
                                }
                            case 9:
                                {
                                return addressOf(this->comb_tilde_03_feedBack_bufferobj);
                                break;
                                }
                            case 10:
                                {
                                return addressOf(this->comb_tilde_04_feedForward_bufferobj);
                                break;
                                }
                            case 11:
                                {
                                return addressOf(this->comb_tilde_04_feedBack_bufferobj);
                                break;
                                }
                            case 12:
                                {
                                return addressOf(this->comb_tilde_05_feedForward_bufferobj);
                                break;
                                }
                            case 13:
                                {
                                return addressOf(this->comb_tilde_05_feedBack_bufferobj);
                                break;
                                }
                            case 14:
                                {
                                return addressOf(this->comb_tilde_06_feedForward_bufferobj);
                                break;
                                }
                            case 15:
                                {
                                return addressOf(this->comb_tilde_06_feedBack_bufferobj);
                                break;
                                }
                            case 16:
                                {
                                return addressOf(this->comb_tilde_07_feedForward_bufferobj);
                                break;
                                }
                            case 17:
                                {
                                return addressOf(this->comb_tilde_07_feedBack_bufferobj);
                                break;
                                }
                            case 18:
                                {
                                return addressOf(this->comb_tilde_08_feedForward_bufferobj);
                                break;
                                }
                            case 19:
                                {
                                return addressOf(this->comb_tilde_08_feedBack_bufferobj);
                                break;
                                }
                            default:
                                {
                                return nullptr;
                                }
                            }
                        }
                        
                        DataRefIndex getNumDataRefs() const {
                            return 14;
                        }
                        
                        void fillDataRef(DataRefIndex , DataRef& ) {}
                        
                        void zeroDataRef(DataRef& ref) {
                            ref->setZero();
                        }
                        
                        void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                            this->updateTime(time);
                        
                            if (index == 6) {
                                this->comb_tilde_02_feedForward_buffer = new Float64Buffer(this->comb_tilde_02_feedForward_bufferobj);
                            }
                        
                            if (index == 7) {
                                this->comb_tilde_02_feedBack_buffer = new Float64Buffer(this->comb_tilde_02_feedBack_bufferobj);
                            }
                        
                            if (index == 8) {
                                this->comb_tilde_03_feedForward_buffer = new Float64Buffer(this->comb_tilde_03_feedForward_bufferobj);
                            }
                        
                            if (index == 9) {
                                this->comb_tilde_03_feedBack_buffer = new Float64Buffer(this->comb_tilde_03_feedBack_bufferobj);
                            }
                        
                            if (index == 10) {
                                this->comb_tilde_04_feedForward_buffer = new Float64Buffer(this->comb_tilde_04_feedForward_bufferobj);
                            }
                        
                            if (index == 11) {
                                this->comb_tilde_04_feedBack_buffer = new Float64Buffer(this->comb_tilde_04_feedBack_bufferobj);
                            }
                        
                            if (index == 12) {
                                this->comb_tilde_05_feedForward_buffer = new Float64Buffer(this->comb_tilde_05_feedForward_bufferobj);
                            }
                        
                            if (index == 13) {
                                this->comb_tilde_05_feedBack_buffer = new Float64Buffer(this->comb_tilde_05_feedBack_bufferobj);
                            }
                        
                            if (index == 14) {
                                this->comb_tilde_06_feedForward_buffer = new Float64Buffer(this->comb_tilde_06_feedForward_bufferobj);
                            }
                        
                            if (index == 15) {
                                this->comb_tilde_06_feedBack_buffer = new Float64Buffer(this->comb_tilde_06_feedBack_bufferobj);
                            }
                        
                            if (index == 16) {
                                this->comb_tilde_07_feedForward_buffer = new Float64Buffer(this->comb_tilde_07_feedForward_bufferobj);
                            }
                        
                            if (index == 17) {
                                this->comb_tilde_07_feedBack_buffer = new Float64Buffer(this->comb_tilde_07_feedBack_bufferobj);
                            }
                        
                            if (index == 18) {
                                this->comb_tilde_08_feedForward_buffer = new Float64Buffer(this->comb_tilde_08_feedForward_bufferobj);
                            }
                        
                            if (index == 19) {
                                this->comb_tilde_08_feedBack_buffer = new Float64Buffer(this->comb_tilde_08_feedBack_bufferobj);
                            }
                        }
                        
                        void initialize() {
                            this->comb_tilde_02_feedForward_bufferobj = initDataRef("comb_tilde_02_feedForward_bufferobj", true, nullptr, "buffer~");
                            this->comb_tilde_02_feedBack_bufferobj = initDataRef("comb_tilde_02_feedBack_bufferobj", true, nullptr, "buffer~");
                            this->comb_tilde_03_feedForward_bufferobj = initDataRef("comb_tilde_03_feedForward_bufferobj", true, nullptr, "buffer~");
                            this->comb_tilde_03_feedBack_bufferobj = initDataRef("comb_tilde_03_feedBack_bufferobj", true, nullptr, "buffer~");
                            this->comb_tilde_04_feedForward_bufferobj = initDataRef("comb_tilde_04_feedForward_bufferobj", true, nullptr, "buffer~");
                            this->comb_tilde_04_feedBack_bufferobj = initDataRef("comb_tilde_04_feedBack_bufferobj", true, nullptr, "buffer~");
                            this->comb_tilde_05_feedForward_bufferobj = initDataRef("comb_tilde_05_feedForward_bufferobj", true, nullptr, "buffer~");
                            this->comb_tilde_05_feedBack_bufferobj = initDataRef("comb_tilde_05_feedBack_bufferobj", true, nullptr, "buffer~");
                            this->comb_tilde_06_feedForward_bufferobj = initDataRef("comb_tilde_06_feedForward_bufferobj", true, nullptr, "buffer~");
                            this->comb_tilde_06_feedBack_bufferobj = initDataRef("comb_tilde_06_feedBack_bufferobj", true, nullptr, "buffer~");
                            this->comb_tilde_07_feedForward_bufferobj = initDataRef("comb_tilde_07_feedForward_bufferobj", true, nullptr, "buffer~");
                            this->comb_tilde_07_feedBack_bufferobj = initDataRef("comb_tilde_07_feedBack_bufferobj", true, nullptr, "buffer~");
                            this->comb_tilde_08_feedForward_bufferobj = initDataRef("comb_tilde_08_feedForward_bufferobj", true, nullptr, "buffer~");
                            this->comb_tilde_08_feedBack_bufferobj = initDataRef("comb_tilde_08_feedBack_bufferobj", true, nullptr, "buffer~");
                            this->assign_defaults();
                            this->setState();
                            this->comb_tilde_02_feedForward_bufferobj->setIndex(6);
                            this->comb_tilde_02_feedForward_buffer = new Float64Buffer(this->comb_tilde_02_feedForward_bufferobj);
                            this->comb_tilde_02_feedBack_bufferobj->setIndex(7);
                            this->comb_tilde_02_feedBack_buffer = new Float64Buffer(this->comb_tilde_02_feedBack_bufferobj);
                            this->comb_tilde_03_feedForward_bufferobj->setIndex(8);
                            this->comb_tilde_03_feedForward_buffer = new Float64Buffer(this->comb_tilde_03_feedForward_bufferobj);
                            this->comb_tilde_03_feedBack_bufferobj->setIndex(9);
                            this->comb_tilde_03_feedBack_buffer = new Float64Buffer(this->comb_tilde_03_feedBack_bufferobj);
                            this->comb_tilde_04_feedForward_bufferobj->setIndex(10);
                            this->comb_tilde_04_feedForward_buffer = new Float64Buffer(this->comb_tilde_04_feedForward_bufferobj);
                            this->comb_tilde_04_feedBack_bufferobj->setIndex(11);
                            this->comb_tilde_04_feedBack_buffer = new Float64Buffer(this->comb_tilde_04_feedBack_bufferobj);
                            this->comb_tilde_05_feedForward_bufferobj->setIndex(12);
                            this->comb_tilde_05_feedForward_buffer = new Float64Buffer(this->comb_tilde_05_feedForward_bufferobj);
                            this->comb_tilde_05_feedBack_bufferobj->setIndex(13);
                            this->comb_tilde_05_feedBack_buffer = new Float64Buffer(this->comb_tilde_05_feedBack_bufferobj);
                            this->comb_tilde_06_feedForward_bufferobj->setIndex(14);
                            this->comb_tilde_06_feedForward_buffer = new Float64Buffer(this->comb_tilde_06_feedForward_bufferobj);
                            this->comb_tilde_06_feedBack_bufferobj->setIndex(15);
                            this->comb_tilde_06_feedBack_buffer = new Float64Buffer(this->comb_tilde_06_feedBack_bufferobj);
                            this->comb_tilde_07_feedForward_bufferobj->setIndex(16);
                            this->comb_tilde_07_feedForward_buffer = new Float64Buffer(this->comb_tilde_07_feedForward_bufferobj);
                            this->comb_tilde_07_feedBack_bufferobj->setIndex(17);
                            this->comb_tilde_07_feedBack_buffer = new Float64Buffer(this->comb_tilde_07_feedBack_bufferobj);
                            this->comb_tilde_08_feedForward_bufferobj->setIndex(18);
                            this->comb_tilde_08_feedForward_buffer = new Float64Buffer(this->comb_tilde_08_feedForward_bufferobj);
                            this->comb_tilde_08_feedBack_bufferobj->setIndex(19);
                            this->comb_tilde_08_feedBack_buffer = new Float64Buffer(this->comb_tilde_08_feedBack_bufferobj);
                        }
                        
                        protected:
                        
                        number msToSamps(MillisecondTime ms, number sampleRate) {
                            return ms * sampleRate * 0.001;
                        }
                        
                        MillisecondTime sampsToMs(SampleIndex samps) {
                            return samps * (this->invsr * 1000);
                        }
                        
                        Index getMaxBlockSize() const {
                            return this->maxvs;
                        }
                        
                        number getSampleRate() const {
                            return this->sr;
                        }
                        
                        bool hasFixedVectorSize() const {
                            return false;
                        }
                        
                        Index getNumInputChannels() const {
                            return 9;
                        }
                        
                        Index getNumOutputChannels() const {
                            return 1;
                        }
                        
                        void initializeObjects() {
                            this->comb_tilde_02_feedForward_init();
                            this->comb_tilde_02_feedBack_init();
                            this->comb_tilde_02_init();
                            this->comb_tilde_03_feedForward_init();
                            this->comb_tilde_03_feedBack_init();
                            this->comb_tilde_03_init();
                            this->comb_tilde_04_feedForward_init();
                            this->comb_tilde_04_feedBack_init();
                            this->comb_tilde_04_init();
                            this->comb_tilde_05_feedForward_init();
                            this->comb_tilde_05_feedBack_init();
                            this->comb_tilde_05_init();
                            this->comb_tilde_06_feedForward_init();
                            this->comb_tilde_06_feedBack_init();
                            this->comb_tilde_06_init();
                            this->comb_tilde_07_feedForward_init();
                            this->comb_tilde_07_feedBack_init();
                            this->comb_tilde_07_init();
                            this->comb_tilde_08_feedForward_init();
                            this->comb_tilde_08_feedBack_init();
                            this->comb_tilde_08_init();
                        }
                        
                        void sendOutlet(OutletIndex index, ParameterValue value) {
                            this->getEngine()->sendOutlet(this, index, value);
                        }
                        
                        void startup() {}
                        
                        void allocateDataRefs() {
                            this->comb_tilde_02_feedForward_buffer = this->comb_tilde_02_feedForward_buffer->allocateIfNeeded();
                        
                            if (this->comb_tilde_02_feedForward_bufferobj->hasRequestedSize()) {
                                if (this->comb_tilde_02_feedForward_bufferobj->wantsFill())
                                    this->zeroDataRef(this->comb_tilde_02_feedForward_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(6);
                            }
                        
                            this->comb_tilde_02_feedBack_buffer = this->comb_tilde_02_feedBack_buffer->allocateIfNeeded();
                        
                            if (this->comb_tilde_02_feedBack_bufferobj->hasRequestedSize()) {
                                if (this->comb_tilde_02_feedBack_bufferobj->wantsFill())
                                    this->zeroDataRef(this->comb_tilde_02_feedBack_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(7);
                            }
                        
                            this->comb_tilde_03_feedForward_buffer = this->comb_tilde_03_feedForward_buffer->allocateIfNeeded();
                        
                            if (this->comb_tilde_03_feedForward_bufferobj->hasRequestedSize()) {
                                if (this->comb_tilde_03_feedForward_bufferobj->wantsFill())
                                    this->zeroDataRef(this->comb_tilde_03_feedForward_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(8);
                            }
                        
                            this->comb_tilde_03_feedBack_buffer = this->comb_tilde_03_feedBack_buffer->allocateIfNeeded();
                        
                            if (this->comb_tilde_03_feedBack_bufferobj->hasRequestedSize()) {
                                if (this->comb_tilde_03_feedBack_bufferobj->wantsFill())
                                    this->zeroDataRef(this->comb_tilde_03_feedBack_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(9);
                            }
                        
                            this->comb_tilde_04_feedForward_buffer = this->comb_tilde_04_feedForward_buffer->allocateIfNeeded();
                        
                            if (this->comb_tilde_04_feedForward_bufferobj->hasRequestedSize()) {
                                if (this->comb_tilde_04_feedForward_bufferobj->wantsFill())
                                    this->zeroDataRef(this->comb_tilde_04_feedForward_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(10);
                            }
                        
                            this->comb_tilde_04_feedBack_buffer = this->comb_tilde_04_feedBack_buffer->allocateIfNeeded();
                        
                            if (this->comb_tilde_04_feedBack_bufferobj->hasRequestedSize()) {
                                if (this->comb_tilde_04_feedBack_bufferobj->wantsFill())
                                    this->zeroDataRef(this->comb_tilde_04_feedBack_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(11);
                            }
                        
                            this->comb_tilde_05_feedForward_buffer = this->comb_tilde_05_feedForward_buffer->allocateIfNeeded();
                        
                            if (this->comb_tilde_05_feedForward_bufferobj->hasRequestedSize()) {
                                if (this->comb_tilde_05_feedForward_bufferobj->wantsFill())
                                    this->zeroDataRef(this->comb_tilde_05_feedForward_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(12);
                            }
                        
                            this->comb_tilde_05_feedBack_buffer = this->comb_tilde_05_feedBack_buffer->allocateIfNeeded();
                        
                            if (this->comb_tilde_05_feedBack_bufferobj->hasRequestedSize()) {
                                if (this->comb_tilde_05_feedBack_bufferobj->wantsFill())
                                    this->zeroDataRef(this->comb_tilde_05_feedBack_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(13);
                            }
                        
                            this->comb_tilde_06_feedForward_buffer = this->comb_tilde_06_feedForward_buffer->allocateIfNeeded();
                        
                            if (this->comb_tilde_06_feedForward_bufferobj->hasRequestedSize()) {
                                if (this->comb_tilde_06_feedForward_bufferobj->wantsFill())
                                    this->zeroDataRef(this->comb_tilde_06_feedForward_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(14);
                            }
                        
                            this->comb_tilde_06_feedBack_buffer = this->comb_tilde_06_feedBack_buffer->allocateIfNeeded();
                        
                            if (this->comb_tilde_06_feedBack_bufferobj->hasRequestedSize()) {
                                if (this->comb_tilde_06_feedBack_bufferobj->wantsFill())
                                    this->zeroDataRef(this->comb_tilde_06_feedBack_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(15);
                            }
                        
                            this->comb_tilde_07_feedForward_buffer = this->comb_tilde_07_feedForward_buffer->allocateIfNeeded();
                        
                            if (this->comb_tilde_07_feedForward_bufferobj->hasRequestedSize()) {
                                if (this->comb_tilde_07_feedForward_bufferobj->wantsFill())
                                    this->zeroDataRef(this->comb_tilde_07_feedForward_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(16);
                            }
                        
                            this->comb_tilde_07_feedBack_buffer = this->comb_tilde_07_feedBack_buffer->allocateIfNeeded();
                        
                            if (this->comb_tilde_07_feedBack_bufferobj->hasRequestedSize()) {
                                if (this->comb_tilde_07_feedBack_bufferobj->wantsFill())
                                    this->zeroDataRef(this->comb_tilde_07_feedBack_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(17);
                            }
                        
                            this->comb_tilde_08_feedForward_buffer = this->comb_tilde_08_feedForward_buffer->allocateIfNeeded();
                        
                            if (this->comb_tilde_08_feedForward_bufferobj->hasRequestedSize()) {
                                if (this->comb_tilde_08_feedForward_bufferobj->wantsFill())
                                    this->zeroDataRef(this->comb_tilde_08_feedForward_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(18);
                            }
                        
                            this->comb_tilde_08_feedBack_buffer = this->comb_tilde_08_feedBack_buffer->allocateIfNeeded();
                        
                            if (this->comb_tilde_08_feedBack_bufferobj->hasRequestedSize()) {
                                if (this->comb_tilde_08_feedBack_bufferobj->wantsFill())
                                    this->zeroDataRef(this->comb_tilde_08_feedBack_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(19);
                            }
                        }
                        
                        void dspexpr_41_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                            }
                        }
                        
                        void dspexpr_40_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                            RNBO_UNUSED(in2);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * 75;//#map:_###_obj_###_:1
                            }
                        }
                        
                        void comb_tilde_08_perform(
                            const Sample * x,
                            const Sample * delayTime,
                            number gain,
                            number ffGain,
                            number fbGain,
                            SampleValue * out1,
                            Index n
                        ) {
                            RNBO_UNUSED(fbGain);
                            RNBO_UNUSED(ffGain);
                            RNBO_UNUSED(gain);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                number __fbGain = 0;
                                number __ffGain = 1;
                                number __gain = 0;
                                number __delayTime = delayTime[(Index)i];
                                __delayTime = this->mstosamps(__delayTime);
                                __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                                __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                                __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                                __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                                number tmp = x[(Index)i] * __gain;
                                number ff = this->comb_tilde_08_feedForward_read(__delayTime, 0);
                                number fb = this->comb_tilde_08_feedBack_read(__delayTime, 0);
                                number ov = tmp + ff * __ffGain + fb * __fbGain;
                                fixdenorm(ov);
                                this->comb_tilde_08_feedForward_write(x[(Index)i]);
                                this->comb_tilde_08_feedBack_write(ov);
                                this->comb_tilde_08_feedForward_step();
                                this->comb_tilde_08_feedBack_step();
                                out1[(Index)i] = ov;
                            }
                        }
                        
                        void dspexpr_32_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                            RNBO_UNUSED(in2);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * 110;//#map:_###_obj_###_:1
                            }
                        }
                        
                        void comb_tilde_02_perform(
                            const Sample * x,
                            const Sample * delayTime,
                            number gain,
                            number ffGain,
                            number fbGain,
                            SampleValue * out1,
                            Index n
                        ) {
                            RNBO_UNUSED(fbGain);
                            RNBO_UNUSED(ffGain);
                            RNBO_UNUSED(gain);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                number __fbGain = 0;
                                number __ffGain = 1;
                                number __gain = 0;
                                number __delayTime = delayTime[(Index)i];
                                __delayTime = this->mstosamps(__delayTime);
                                __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                                __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                                __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                                __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                                number tmp = x[(Index)i] * __gain;
                                number ff = this->comb_tilde_02_feedForward_read(__delayTime, 0);
                                number fb = this->comb_tilde_02_feedBack_read(__delayTime, 0);
                                number ov = tmp + ff * __ffGain + fb * __fbGain;
                                fixdenorm(ov);
                                this->comb_tilde_02_feedForward_write(x[(Index)i]);
                                this->comb_tilde_02_feedBack_write(ov);
                                this->comb_tilde_02_feedForward_step();
                                this->comb_tilde_02_feedBack_step();
                                out1[(Index)i] = ov;
                            }
                        }
                        
                        void dspexpr_33_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                            RNBO_UNUSED(in2);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * 160;//#map:_###_obj_###_:1
                            }
                        }
                        
                        void comb_tilde_03_perform(
                            const Sample * x,
                            const Sample * delayTime,
                            number gain,
                            number ffGain,
                            number fbGain,
                            SampleValue * out1,
                            Index n
                        ) {
                            RNBO_UNUSED(fbGain);
                            RNBO_UNUSED(ffGain);
                            RNBO_UNUSED(gain);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                number __fbGain = 0;
                                number __ffGain = 1;
                                number __gain = 0;
                                number __delayTime = delayTime[(Index)i];
                                __delayTime = this->mstosamps(__delayTime);
                                __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                                __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                                __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                                __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                                number tmp = x[(Index)i] * __gain;
                                number ff = this->comb_tilde_03_feedForward_read(__delayTime, 0);
                                number fb = this->comb_tilde_03_feedBack_read(__delayTime, 0);
                                number ov = tmp + ff * __ffGain + fb * __fbGain;
                                fixdenorm(ov);
                                this->comb_tilde_03_feedForward_write(x[(Index)i]);
                                this->comb_tilde_03_feedBack_write(ov);
                                this->comb_tilde_03_feedForward_step();
                                this->comb_tilde_03_feedBack_step();
                                out1[(Index)i] = ov;
                            }
                        }
                        
                        void dspexpr_34_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                            RNBO_UNUSED(in2);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * 50;//#map:_###_obj_###_:1
                            }
                        }
                        
                        void comb_tilde_04_perform(
                            const Sample * x,
                            const Sample * delayTime,
                            number gain,
                            number ffGain,
                            number fbGain,
                            SampleValue * out1,
                            Index n
                        ) {
                            RNBO_UNUSED(fbGain);
                            RNBO_UNUSED(ffGain);
                            RNBO_UNUSED(gain);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                number __fbGain = 0;
                                number __ffGain = 1;
                                number __gain = 0;
                                number __delayTime = delayTime[(Index)i];
                                __delayTime = this->mstosamps(__delayTime);
                                __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                                __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                                __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                                __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                                number tmp = x[(Index)i] * __gain;
                                number ff = this->comb_tilde_04_feedForward_read(__delayTime, 0);
                                number fb = this->comb_tilde_04_feedBack_read(__delayTime, 0);
                                number ov = tmp + ff * __ffGain + fb * __fbGain;
                                fixdenorm(ov);
                                this->comb_tilde_04_feedForward_write(x[(Index)i]);
                                this->comb_tilde_04_feedBack_write(ov);
                                this->comb_tilde_04_feedForward_step();
                                this->comb_tilde_04_feedBack_step();
                                out1[(Index)i] = ov;
                            }
                        }
                        
                        void dspexpr_36_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                            RNBO_UNUSED(in2);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * 25;//#map:_###_obj_###_:1
                            }
                        }
                        
                        void comb_tilde_05_perform(
                            const Sample * x,
                            const Sample * delayTime,
                            number gain,
                            number ffGain,
                            number fbGain,
                            SampleValue * out1,
                            Index n
                        ) {
                            RNBO_UNUSED(fbGain);
                            RNBO_UNUSED(ffGain);
                            RNBO_UNUSED(gain);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                number __fbGain = 0;
                                number __ffGain = 1;
                                number __gain = 0;
                                number __delayTime = delayTime[(Index)i];
                                __delayTime = this->mstosamps(__delayTime);
                                __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                                __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                                __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                                __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                                number tmp = x[(Index)i] * __gain;
                                number ff = this->comb_tilde_05_feedForward_read(__delayTime, 0);
                                number fb = this->comb_tilde_05_feedBack_read(__delayTime, 0);
                                number ov = tmp + ff * __ffGain + fb * __fbGain;
                                fixdenorm(ov);
                                this->comb_tilde_05_feedForward_write(x[(Index)i]);
                                this->comb_tilde_05_feedBack_write(ov);
                                this->comb_tilde_05_feedForward_step();
                                this->comb_tilde_05_feedBack_step();
                                out1[(Index)i] = ov;
                            }
                        }
                        
                        void dspexpr_38_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                            RNBO_UNUSED(in2);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * 69;//#map:_###_obj_###_:1
                            }
                        }
                        
                        void comb_tilde_06_perform(
                            const Sample * x,
                            const Sample * delayTime,
                            number gain,
                            number ffGain,
                            number fbGain,
                            SampleValue * out1,
                            Index n
                        ) {
                            RNBO_UNUSED(fbGain);
                            RNBO_UNUSED(ffGain);
                            RNBO_UNUSED(gain);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                number __fbGain = 0;
                                number __ffGain = 1;
                                number __gain = 0;
                                number __delayTime = delayTime[(Index)i];
                                __delayTime = this->mstosamps(__delayTime);
                                __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                                __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                                __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                                __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                                number tmp = x[(Index)i] * __gain;
                                number ff = this->comb_tilde_06_feedForward_read(__delayTime, 0);
                                number fb = this->comb_tilde_06_feedBack_read(__delayTime, 0);
                                number ov = tmp + ff * __ffGain + fb * __fbGain;
                                fixdenorm(ov);
                                this->comb_tilde_06_feedForward_write(x[(Index)i]);
                                this->comb_tilde_06_feedBack_write(ov);
                                this->comb_tilde_06_feedForward_step();
                                this->comb_tilde_06_feedBack_step();
                                out1[(Index)i] = ov;
                            }
                        }
                        
                        void dspexpr_39_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                            RNBO_UNUSED(in2);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * 80;//#map:_###_obj_###_:1
                            }
                        }
                        
                        void comb_tilde_07_perform(
                            const Sample * x,
                            const Sample * delayTime,
                            number gain,
                            number ffGain,
                            number fbGain,
                            SampleValue * out1,
                            Index n
                        ) {
                            RNBO_UNUSED(fbGain);
                            RNBO_UNUSED(ffGain);
                            RNBO_UNUSED(gain);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                number __fbGain = 0;
                                number __ffGain = 1;
                                number __gain = 0;
                                number __delayTime = delayTime[(Index)i];
                                __delayTime = this->mstosamps(__delayTime);
                                __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                                __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                                __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                                __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                                number tmp = x[(Index)i] * __gain;
                                number ff = this->comb_tilde_07_feedForward_read(__delayTime, 0);
                                number fb = this->comb_tilde_07_feedBack_read(__delayTime, 0);
                                number ov = tmp + ff * __ffGain + fb * __fbGain;
                                fixdenorm(ov);
                                this->comb_tilde_07_feedForward_write(x[(Index)i]);
                                this->comb_tilde_07_feedBack_write(ov);
                                this->comb_tilde_07_feedForward_step();
                                this->comb_tilde_07_feedBack_step();
                                out1[(Index)i] = ov;
                            }
                        }
                        
                        void signaladder_13_perform(
                            const SampleValue * in1,
                            const SampleValue * in2,
                            const SampleValue * in3,
                            const SampleValue * in4,
                            SampleValue * out,
                            Index n
                        ) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out[(Index)i] = in1[(Index)i] + in2[(Index)i] + in3[(Index)i] + in4[(Index)i];
                            }
                        }
                        
                        void dspexpr_37_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                            RNBO_UNUSED(in2);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * -1;//#map:_###_obj_###_:1
                            }
                        }
                        
                        void signaladder_14_perform(
                            const SampleValue * in1,
                            const SampleValue * in2,
                            const SampleValue * in3,
                            const SampleValue * in4,
                            SampleValue * out,
                            Index n
                        ) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out[(Index)i] = in1[(Index)i] + in2[(Index)i] + in3[(Index)i] + in4[(Index)i];
                            }
                        }
                        
                        void dspexpr_35_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                            RNBO_UNUSED(in2);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * 0.355;//#map:_###_obj_###_:1
                            }
                        }
                        
                        void stackprotect_perform(Index n) {
                            RNBO_UNUSED(n);
                            auto __stackprotect_count = this->stackprotect_count;
                            __stackprotect_count = 0;
                            this->stackprotect_count = __stackprotect_count;
                        }
                        
                        void comb_tilde_02_feedForward_step() {
                            this->comb_tilde_02_feedForward_reader++;
                        
                            if (this->comb_tilde_02_feedForward_reader >= (int)(this->comb_tilde_02_feedForward_buffer->getSize()))
                                this->comb_tilde_02_feedForward_reader = 0;
                        }
                        
                        number comb_tilde_02_feedForward_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->comb_tilde_02_feedForward_buffer->getSize()) + this->comb_tilde_02_feedForward_reader - ((size > this->comb_tilde_02_feedForward__maxdelay ? this->comb_tilde_02_feedForward__maxdelay : (size < (this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer) ? this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->comb_tilde_02_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                                ), this->comb_tilde_02_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->comb_tilde_02_feedForward_buffer->getSize()) + this->comb_tilde_02_feedForward_reader - ((size > this->comb_tilde_02_feedForward__maxdelay ? this->comb_tilde_02_feedForward__maxdelay : (size < (1 + this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer) ? 1 + this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->comb_tilde_02_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                                ), this->comb_tilde_02_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                                ), this->comb_tilde_02_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                                ), this->comb_tilde_02_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->comb_tilde_02_feedForward_buffer->getSize()) + this->comb_tilde_02_feedForward_reader - ((size > this->comb_tilde_02_feedForward__maxdelay ? this->comb_tilde_02_feedForward__maxdelay : (size < (1 + this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer) ? 1 + this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->comb_tilde_02_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                                ), this->comb_tilde_02_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                                ), this->comb_tilde_02_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                                ), this->comb_tilde_02_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->comb_tilde_02_feedForward_buffer->getSize()) + this->comb_tilde_02_feedForward_reader - ((size > this->comb_tilde_02_feedForward__maxdelay ? this->comb_tilde_02_feedForward__maxdelay : (size < (1 + this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer) ? 1 + this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->comb_tilde_02_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                                ), this->comb_tilde_02_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                                ), this->comb_tilde_02_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                                ), this->comb_tilde_02_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->comb_tilde_02_feedForward_buffer->getSize()) + this->comb_tilde_02_feedForward_reader - ((size > this->comb_tilde_02_feedForward__maxdelay ? this->comb_tilde_02_feedForward__maxdelay : (size < (1 + this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer) ? 1 + this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->comb_tilde_02_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                                ), this->comb_tilde_02_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                                ), this->comb_tilde_02_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                                ), this->comb_tilde_02_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                                ), this->comb_tilde_02_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                                ), this->comb_tilde_02_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->comb_tilde_02_feedForward_buffer->getSize()) + this->comb_tilde_02_feedForward_reader - ((size > this->comb_tilde_02_feedForward__maxdelay ? this->comb_tilde_02_feedForward__maxdelay : (size < (this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer) ? this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->comb_tilde_02_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                                ), this->comb_tilde_02_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                                ));
                            }
                        
                            number r = (int)(this->comb_tilde_02_feedForward_buffer->getSize()) + this->comb_tilde_02_feedForward_reader - ((size > this->comb_tilde_02_feedForward__maxdelay ? this->comb_tilde_02_feedForward__maxdelay : (size < (this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer) ? this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->comb_tilde_02_feedForward_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                            );
                        }
                        
                        void comb_tilde_02_feedForward_write(number v) {
                            this->comb_tilde_02_feedForward_writer = this->comb_tilde_02_feedForward_reader;
                            this->comb_tilde_02_feedForward_buffer[(Index)this->comb_tilde_02_feedForward_writer] = v;
                        }
                        
                        number comb_tilde_02_feedForward_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->comb_tilde_02_feedForward__maxdelay : size);
                            number val = this->comb_tilde_02_feedForward_read(effectiveSize, 0);
                            this->comb_tilde_02_feedForward_write(v);
                            this->comb_tilde_02_feedForward_step();
                            return val;
                        }
                        
                        array<Index, 2> comb_tilde_02_feedForward_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->comb_tilde_02_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->comb_tilde_02_feedForward_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void comb_tilde_02_feedForward_init() {
                            auto result = this->comb_tilde_02_feedForward_calcSizeInSamples();
                            this->comb_tilde_02_feedForward__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_02_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                            this->comb_tilde_02_feedForward_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void comb_tilde_02_feedForward_clear() {
                            this->comb_tilde_02_feedForward_buffer->setZero();
                        }
                        
                        void comb_tilde_02_feedForward_reset() {
                            auto result = this->comb_tilde_02_feedForward_calcSizeInSamples();
                            this->comb_tilde_02_feedForward__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_02_feedForward_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->comb_tilde_02_feedForward_buffer);
                            this->comb_tilde_02_feedForward_wrap = this->comb_tilde_02_feedForward_buffer->getSize() - 1;
                            this->comb_tilde_02_feedForward_clear();
                        
                            if (this->comb_tilde_02_feedForward_reader >= this->comb_tilde_02_feedForward__maxdelay || this->comb_tilde_02_feedForward_writer >= this->comb_tilde_02_feedForward__maxdelay) {
                                this->comb_tilde_02_feedForward_reader = 0;
                                this->comb_tilde_02_feedForward_writer = 0;
                            }
                        }
                        
                        void comb_tilde_02_feedForward_dspsetup() {
                            this->comb_tilde_02_feedForward_reset();
                        }
                        
                        number comb_tilde_02_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number comb_tilde_02_feedForward_size() {
                            return this->comb_tilde_02_feedForward__maxdelay;
                        }
                        
                        void comb_tilde_02_feedBack_step() {
                            this->comb_tilde_02_feedBack_reader++;
                        
                            if (this->comb_tilde_02_feedBack_reader >= (int)(this->comb_tilde_02_feedBack_buffer->getSize()))
                                this->comb_tilde_02_feedBack_reader = 0;
                        }
                        
                        number comb_tilde_02_feedBack_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->comb_tilde_02_feedBack_buffer->getSize()) + this->comb_tilde_02_feedBack_reader - ((size > this->comb_tilde_02_feedBack__maxdelay ? this->comb_tilde_02_feedBack__maxdelay : (size < (this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer) ? this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->comb_tilde_02_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                                ), this->comb_tilde_02_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->comb_tilde_02_feedBack_buffer->getSize()) + this->comb_tilde_02_feedBack_reader - ((size > this->comb_tilde_02_feedBack__maxdelay ? this->comb_tilde_02_feedBack__maxdelay : (size < (1 + this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer) ? 1 + this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->comb_tilde_02_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                                ), this->comb_tilde_02_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                                ), this->comb_tilde_02_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                                ), this->comb_tilde_02_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->comb_tilde_02_feedBack_buffer->getSize()) + this->comb_tilde_02_feedBack_reader - ((size > this->comb_tilde_02_feedBack__maxdelay ? this->comb_tilde_02_feedBack__maxdelay : (size < (1 + this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer) ? 1 + this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->comb_tilde_02_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                                ), this->comb_tilde_02_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                                ), this->comb_tilde_02_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                                ), this->comb_tilde_02_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->comb_tilde_02_feedBack_buffer->getSize()) + this->comb_tilde_02_feedBack_reader - ((size > this->comb_tilde_02_feedBack__maxdelay ? this->comb_tilde_02_feedBack__maxdelay : (size < (1 + this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer) ? 1 + this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->comb_tilde_02_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                                ), this->comb_tilde_02_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                                ), this->comb_tilde_02_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                                ), this->comb_tilde_02_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->comb_tilde_02_feedBack_buffer->getSize()) + this->comb_tilde_02_feedBack_reader - ((size > this->comb_tilde_02_feedBack__maxdelay ? this->comb_tilde_02_feedBack__maxdelay : (size < (1 + this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer) ? 1 + this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->comb_tilde_02_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                                ), this->comb_tilde_02_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                                ), this->comb_tilde_02_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                                ), this->comb_tilde_02_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                                ), this->comb_tilde_02_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                                ), this->comb_tilde_02_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->comb_tilde_02_feedBack_buffer->getSize()) + this->comb_tilde_02_feedBack_reader - ((size > this->comb_tilde_02_feedBack__maxdelay ? this->comb_tilde_02_feedBack__maxdelay : (size < (this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer) ? this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->comb_tilde_02_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                                ), this->comb_tilde_02_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                                ));
                            }
                        
                            number r = (int)(this->comb_tilde_02_feedBack_buffer->getSize()) + this->comb_tilde_02_feedBack_reader - ((size > this->comb_tilde_02_feedBack__maxdelay ? this->comb_tilde_02_feedBack__maxdelay : (size < (this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer) ? this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->comb_tilde_02_feedBack_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                            );
                        }
                        
                        void comb_tilde_02_feedBack_write(number v) {
                            this->comb_tilde_02_feedBack_writer = this->comb_tilde_02_feedBack_reader;
                            this->comb_tilde_02_feedBack_buffer[(Index)this->comb_tilde_02_feedBack_writer] = v;
                        }
                        
                        number comb_tilde_02_feedBack_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->comb_tilde_02_feedBack__maxdelay : size);
                            number val = this->comb_tilde_02_feedBack_read(effectiveSize, 0);
                            this->comb_tilde_02_feedBack_write(v);
                            this->comb_tilde_02_feedBack_step();
                            return val;
                        }
                        
                        array<Index, 2> comb_tilde_02_feedBack_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->comb_tilde_02_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->comb_tilde_02_feedBack_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void comb_tilde_02_feedBack_init() {
                            auto result = this->comb_tilde_02_feedBack_calcSizeInSamples();
                            this->comb_tilde_02_feedBack__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_02_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                            this->comb_tilde_02_feedBack_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void comb_tilde_02_feedBack_clear() {
                            this->comb_tilde_02_feedBack_buffer->setZero();
                        }
                        
                        void comb_tilde_02_feedBack_reset() {
                            auto result = this->comb_tilde_02_feedBack_calcSizeInSamples();
                            this->comb_tilde_02_feedBack__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_02_feedBack_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->comb_tilde_02_feedBack_buffer);
                            this->comb_tilde_02_feedBack_wrap = this->comb_tilde_02_feedBack_buffer->getSize() - 1;
                            this->comb_tilde_02_feedBack_clear();
                        
                            if (this->comb_tilde_02_feedBack_reader >= this->comb_tilde_02_feedBack__maxdelay || this->comb_tilde_02_feedBack_writer >= this->comb_tilde_02_feedBack__maxdelay) {
                                this->comb_tilde_02_feedBack_reader = 0;
                                this->comb_tilde_02_feedBack_writer = 0;
                            }
                        }
                        
                        void comb_tilde_02_feedBack_dspsetup() {
                            this->comb_tilde_02_feedBack_reset();
                        }
                        
                        number comb_tilde_02_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number comb_tilde_02_feedBack_size() {
                            return this->comb_tilde_02_feedBack__maxdelay;
                        }
                        
                        void comb_tilde_02_init() {
                            this->comb_tilde_02_feedForward_init();
                            this->comb_tilde_02_feedBack_init();
                        }
                        
                        void comb_tilde_02_clear() {
                            this->comb_tilde_02_feedForward_clear();
                            this->comb_tilde_02_feedBack_clear();
                        }
                        
                        void comb_tilde_02_reset() {
                            this->comb_tilde_02_init();
                            this->comb_tilde_02_clear();
                        }
                        
                        void comb_tilde_02_dspsetup(bool force) {
                            if ((bool)(this->comb_tilde_02_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->comb_tilde_02_reset();
                            this->comb_tilde_02_setupDone = true;
                            this->comb_tilde_02_feedForward_dspsetup();
                            this->comb_tilde_02_feedBack_dspsetup();
                        }
                        
                        void comb_tilde_03_feedForward_step() {
                            this->comb_tilde_03_feedForward_reader++;
                        
                            if (this->comb_tilde_03_feedForward_reader >= (int)(this->comb_tilde_03_feedForward_buffer->getSize()))
                                this->comb_tilde_03_feedForward_reader = 0;
                        }
                        
                        number comb_tilde_03_feedForward_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->comb_tilde_03_feedForward_buffer->getSize()) + this->comb_tilde_03_feedForward_reader - ((size > this->comb_tilde_03_feedForward__maxdelay ? this->comb_tilde_03_feedForward__maxdelay : (size < (this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer) ? this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->comb_tilde_03_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                                ), this->comb_tilde_03_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->comb_tilde_03_feedForward_buffer->getSize()) + this->comb_tilde_03_feedForward_reader - ((size > this->comb_tilde_03_feedForward__maxdelay ? this->comb_tilde_03_feedForward__maxdelay : (size < (1 + this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer) ? 1 + this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->comb_tilde_03_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                                ), this->comb_tilde_03_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                                ), this->comb_tilde_03_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                                ), this->comb_tilde_03_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->comb_tilde_03_feedForward_buffer->getSize()) + this->comb_tilde_03_feedForward_reader - ((size > this->comb_tilde_03_feedForward__maxdelay ? this->comb_tilde_03_feedForward__maxdelay : (size < (1 + this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer) ? 1 + this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->comb_tilde_03_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                                ), this->comb_tilde_03_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                                ), this->comb_tilde_03_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                                ), this->comb_tilde_03_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->comb_tilde_03_feedForward_buffer->getSize()) + this->comb_tilde_03_feedForward_reader - ((size > this->comb_tilde_03_feedForward__maxdelay ? this->comb_tilde_03_feedForward__maxdelay : (size < (1 + this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer) ? 1 + this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->comb_tilde_03_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                                ), this->comb_tilde_03_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                                ), this->comb_tilde_03_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                                ), this->comb_tilde_03_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->comb_tilde_03_feedForward_buffer->getSize()) + this->comb_tilde_03_feedForward_reader - ((size > this->comb_tilde_03_feedForward__maxdelay ? this->comb_tilde_03_feedForward__maxdelay : (size < (1 + this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer) ? 1 + this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->comb_tilde_03_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                                ), this->comb_tilde_03_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                                ), this->comb_tilde_03_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                                ), this->comb_tilde_03_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                                ), this->comb_tilde_03_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                                ), this->comb_tilde_03_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->comb_tilde_03_feedForward_buffer->getSize()) + this->comb_tilde_03_feedForward_reader - ((size > this->comb_tilde_03_feedForward__maxdelay ? this->comb_tilde_03_feedForward__maxdelay : (size < (this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer) ? this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->comb_tilde_03_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                                ), this->comb_tilde_03_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                                ));
                            }
                        
                            number r = (int)(this->comb_tilde_03_feedForward_buffer->getSize()) + this->comb_tilde_03_feedForward_reader - ((size > this->comb_tilde_03_feedForward__maxdelay ? this->comb_tilde_03_feedForward__maxdelay : (size < (this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer) ? this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->comb_tilde_03_feedForward_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                            );
                        }
                        
                        void comb_tilde_03_feedForward_write(number v) {
                            this->comb_tilde_03_feedForward_writer = this->comb_tilde_03_feedForward_reader;
                            this->comb_tilde_03_feedForward_buffer[(Index)this->comb_tilde_03_feedForward_writer] = v;
                        }
                        
                        number comb_tilde_03_feedForward_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->comb_tilde_03_feedForward__maxdelay : size);
                            number val = this->comb_tilde_03_feedForward_read(effectiveSize, 0);
                            this->comb_tilde_03_feedForward_write(v);
                            this->comb_tilde_03_feedForward_step();
                            return val;
                        }
                        
                        array<Index, 2> comb_tilde_03_feedForward_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->comb_tilde_03_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->comb_tilde_03_feedForward_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void comb_tilde_03_feedForward_init() {
                            auto result = this->comb_tilde_03_feedForward_calcSizeInSamples();
                            this->comb_tilde_03_feedForward__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_03_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                            this->comb_tilde_03_feedForward_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void comb_tilde_03_feedForward_clear() {
                            this->comb_tilde_03_feedForward_buffer->setZero();
                        }
                        
                        void comb_tilde_03_feedForward_reset() {
                            auto result = this->comb_tilde_03_feedForward_calcSizeInSamples();
                            this->comb_tilde_03_feedForward__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_03_feedForward_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->comb_tilde_03_feedForward_buffer);
                            this->comb_tilde_03_feedForward_wrap = this->comb_tilde_03_feedForward_buffer->getSize() - 1;
                            this->comb_tilde_03_feedForward_clear();
                        
                            if (this->comb_tilde_03_feedForward_reader >= this->comb_tilde_03_feedForward__maxdelay || this->comb_tilde_03_feedForward_writer >= this->comb_tilde_03_feedForward__maxdelay) {
                                this->comb_tilde_03_feedForward_reader = 0;
                                this->comb_tilde_03_feedForward_writer = 0;
                            }
                        }
                        
                        void comb_tilde_03_feedForward_dspsetup() {
                            this->comb_tilde_03_feedForward_reset();
                        }
                        
                        number comb_tilde_03_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number comb_tilde_03_feedForward_size() {
                            return this->comb_tilde_03_feedForward__maxdelay;
                        }
                        
                        void comb_tilde_03_feedBack_step() {
                            this->comb_tilde_03_feedBack_reader++;
                        
                            if (this->comb_tilde_03_feedBack_reader >= (int)(this->comb_tilde_03_feedBack_buffer->getSize()))
                                this->comb_tilde_03_feedBack_reader = 0;
                        }
                        
                        number comb_tilde_03_feedBack_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->comb_tilde_03_feedBack_buffer->getSize()) + this->comb_tilde_03_feedBack_reader - ((size > this->comb_tilde_03_feedBack__maxdelay ? this->comb_tilde_03_feedBack__maxdelay : (size < (this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer) ? this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->comb_tilde_03_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                                ), this->comb_tilde_03_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->comb_tilde_03_feedBack_buffer->getSize()) + this->comb_tilde_03_feedBack_reader - ((size > this->comb_tilde_03_feedBack__maxdelay ? this->comb_tilde_03_feedBack__maxdelay : (size < (1 + this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer) ? 1 + this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->comb_tilde_03_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                                ), this->comb_tilde_03_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                                ), this->comb_tilde_03_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                                ), this->comb_tilde_03_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->comb_tilde_03_feedBack_buffer->getSize()) + this->comb_tilde_03_feedBack_reader - ((size > this->comb_tilde_03_feedBack__maxdelay ? this->comb_tilde_03_feedBack__maxdelay : (size < (1 + this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer) ? 1 + this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->comb_tilde_03_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                                ), this->comb_tilde_03_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                                ), this->comb_tilde_03_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                                ), this->comb_tilde_03_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->comb_tilde_03_feedBack_buffer->getSize()) + this->comb_tilde_03_feedBack_reader - ((size > this->comb_tilde_03_feedBack__maxdelay ? this->comb_tilde_03_feedBack__maxdelay : (size < (1 + this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer) ? 1 + this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->comb_tilde_03_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                                ), this->comb_tilde_03_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                                ), this->comb_tilde_03_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                                ), this->comb_tilde_03_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->comb_tilde_03_feedBack_buffer->getSize()) + this->comb_tilde_03_feedBack_reader - ((size > this->comb_tilde_03_feedBack__maxdelay ? this->comb_tilde_03_feedBack__maxdelay : (size < (1 + this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer) ? 1 + this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->comb_tilde_03_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                                ), this->comb_tilde_03_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                                ), this->comb_tilde_03_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                                ), this->comb_tilde_03_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                                ), this->comb_tilde_03_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                                ), this->comb_tilde_03_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->comb_tilde_03_feedBack_buffer->getSize()) + this->comb_tilde_03_feedBack_reader - ((size > this->comb_tilde_03_feedBack__maxdelay ? this->comb_tilde_03_feedBack__maxdelay : (size < (this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer) ? this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->comb_tilde_03_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                                ), this->comb_tilde_03_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                                ));
                            }
                        
                            number r = (int)(this->comb_tilde_03_feedBack_buffer->getSize()) + this->comb_tilde_03_feedBack_reader - ((size > this->comb_tilde_03_feedBack__maxdelay ? this->comb_tilde_03_feedBack__maxdelay : (size < (this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer) ? this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->comb_tilde_03_feedBack_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                            );
                        }
                        
                        void comb_tilde_03_feedBack_write(number v) {
                            this->comb_tilde_03_feedBack_writer = this->comb_tilde_03_feedBack_reader;
                            this->comb_tilde_03_feedBack_buffer[(Index)this->comb_tilde_03_feedBack_writer] = v;
                        }
                        
                        number comb_tilde_03_feedBack_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->comb_tilde_03_feedBack__maxdelay : size);
                            number val = this->comb_tilde_03_feedBack_read(effectiveSize, 0);
                            this->comb_tilde_03_feedBack_write(v);
                            this->comb_tilde_03_feedBack_step();
                            return val;
                        }
                        
                        array<Index, 2> comb_tilde_03_feedBack_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->comb_tilde_03_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->comb_tilde_03_feedBack_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void comb_tilde_03_feedBack_init() {
                            auto result = this->comb_tilde_03_feedBack_calcSizeInSamples();
                            this->comb_tilde_03_feedBack__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_03_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                            this->comb_tilde_03_feedBack_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void comb_tilde_03_feedBack_clear() {
                            this->comb_tilde_03_feedBack_buffer->setZero();
                        }
                        
                        void comb_tilde_03_feedBack_reset() {
                            auto result = this->comb_tilde_03_feedBack_calcSizeInSamples();
                            this->comb_tilde_03_feedBack__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_03_feedBack_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->comb_tilde_03_feedBack_buffer);
                            this->comb_tilde_03_feedBack_wrap = this->comb_tilde_03_feedBack_buffer->getSize() - 1;
                            this->comb_tilde_03_feedBack_clear();
                        
                            if (this->comb_tilde_03_feedBack_reader >= this->comb_tilde_03_feedBack__maxdelay || this->comb_tilde_03_feedBack_writer >= this->comb_tilde_03_feedBack__maxdelay) {
                                this->comb_tilde_03_feedBack_reader = 0;
                                this->comb_tilde_03_feedBack_writer = 0;
                            }
                        }
                        
                        void comb_tilde_03_feedBack_dspsetup() {
                            this->comb_tilde_03_feedBack_reset();
                        }
                        
                        number comb_tilde_03_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number comb_tilde_03_feedBack_size() {
                            return this->comb_tilde_03_feedBack__maxdelay;
                        }
                        
                        void comb_tilde_03_init() {
                            this->comb_tilde_03_feedForward_init();
                            this->comb_tilde_03_feedBack_init();
                        }
                        
                        void comb_tilde_03_clear() {
                            this->comb_tilde_03_feedForward_clear();
                            this->comb_tilde_03_feedBack_clear();
                        }
                        
                        void comb_tilde_03_reset() {
                            this->comb_tilde_03_init();
                            this->comb_tilde_03_clear();
                        }
                        
                        void comb_tilde_03_dspsetup(bool force) {
                            if ((bool)(this->comb_tilde_03_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->comb_tilde_03_reset();
                            this->comb_tilde_03_setupDone = true;
                            this->comb_tilde_03_feedForward_dspsetup();
                            this->comb_tilde_03_feedBack_dspsetup();
                        }
                        
                        void comb_tilde_04_feedForward_step() {
                            this->comb_tilde_04_feedForward_reader++;
                        
                            if (this->comb_tilde_04_feedForward_reader >= (int)(this->comb_tilde_04_feedForward_buffer->getSize()))
                                this->comb_tilde_04_feedForward_reader = 0;
                        }
                        
                        number comb_tilde_04_feedForward_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->comb_tilde_04_feedForward_buffer->getSize()) + this->comb_tilde_04_feedForward_reader - ((size > this->comb_tilde_04_feedForward__maxdelay ? this->comb_tilde_04_feedForward__maxdelay : (size < (this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer) ? this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->comb_tilde_04_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                                ), this->comb_tilde_04_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->comb_tilde_04_feedForward_buffer->getSize()) + this->comb_tilde_04_feedForward_reader - ((size > this->comb_tilde_04_feedForward__maxdelay ? this->comb_tilde_04_feedForward__maxdelay : (size < (1 + this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer) ? 1 + this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->comb_tilde_04_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                                ), this->comb_tilde_04_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                                ), this->comb_tilde_04_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                                ), this->comb_tilde_04_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->comb_tilde_04_feedForward_buffer->getSize()) + this->comb_tilde_04_feedForward_reader - ((size > this->comb_tilde_04_feedForward__maxdelay ? this->comb_tilde_04_feedForward__maxdelay : (size < (1 + this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer) ? 1 + this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->comb_tilde_04_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                                ), this->comb_tilde_04_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                                ), this->comb_tilde_04_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                                ), this->comb_tilde_04_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->comb_tilde_04_feedForward_buffer->getSize()) + this->comb_tilde_04_feedForward_reader - ((size > this->comb_tilde_04_feedForward__maxdelay ? this->comb_tilde_04_feedForward__maxdelay : (size < (1 + this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer) ? 1 + this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->comb_tilde_04_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                                ), this->comb_tilde_04_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                                ), this->comb_tilde_04_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                                ), this->comb_tilde_04_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->comb_tilde_04_feedForward_buffer->getSize()) + this->comb_tilde_04_feedForward_reader - ((size > this->comb_tilde_04_feedForward__maxdelay ? this->comb_tilde_04_feedForward__maxdelay : (size < (1 + this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer) ? 1 + this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->comb_tilde_04_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                                ), this->comb_tilde_04_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                                ), this->comb_tilde_04_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                                ), this->comb_tilde_04_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                                ), this->comb_tilde_04_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                                ), this->comb_tilde_04_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->comb_tilde_04_feedForward_buffer->getSize()) + this->comb_tilde_04_feedForward_reader - ((size > this->comb_tilde_04_feedForward__maxdelay ? this->comb_tilde_04_feedForward__maxdelay : (size < (this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer) ? this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->comb_tilde_04_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                                ), this->comb_tilde_04_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                                ));
                            }
                        
                            number r = (int)(this->comb_tilde_04_feedForward_buffer->getSize()) + this->comb_tilde_04_feedForward_reader - ((size > this->comb_tilde_04_feedForward__maxdelay ? this->comb_tilde_04_feedForward__maxdelay : (size < (this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer) ? this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->comb_tilde_04_feedForward_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                            );
                        }
                        
                        void comb_tilde_04_feedForward_write(number v) {
                            this->comb_tilde_04_feedForward_writer = this->comb_tilde_04_feedForward_reader;
                            this->comb_tilde_04_feedForward_buffer[(Index)this->comb_tilde_04_feedForward_writer] = v;
                        }
                        
                        number comb_tilde_04_feedForward_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->comb_tilde_04_feedForward__maxdelay : size);
                            number val = this->comb_tilde_04_feedForward_read(effectiveSize, 0);
                            this->comb_tilde_04_feedForward_write(v);
                            this->comb_tilde_04_feedForward_step();
                            return val;
                        }
                        
                        array<Index, 2> comb_tilde_04_feedForward_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->comb_tilde_04_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->comb_tilde_04_feedForward_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void comb_tilde_04_feedForward_init() {
                            auto result = this->comb_tilde_04_feedForward_calcSizeInSamples();
                            this->comb_tilde_04_feedForward__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_04_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                            this->comb_tilde_04_feedForward_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void comb_tilde_04_feedForward_clear() {
                            this->comb_tilde_04_feedForward_buffer->setZero();
                        }
                        
                        void comb_tilde_04_feedForward_reset() {
                            auto result = this->comb_tilde_04_feedForward_calcSizeInSamples();
                            this->comb_tilde_04_feedForward__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_04_feedForward_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->comb_tilde_04_feedForward_buffer);
                            this->comb_tilde_04_feedForward_wrap = this->comb_tilde_04_feedForward_buffer->getSize() - 1;
                            this->comb_tilde_04_feedForward_clear();
                        
                            if (this->comb_tilde_04_feedForward_reader >= this->comb_tilde_04_feedForward__maxdelay || this->comb_tilde_04_feedForward_writer >= this->comb_tilde_04_feedForward__maxdelay) {
                                this->comb_tilde_04_feedForward_reader = 0;
                                this->comb_tilde_04_feedForward_writer = 0;
                            }
                        }
                        
                        void comb_tilde_04_feedForward_dspsetup() {
                            this->comb_tilde_04_feedForward_reset();
                        }
                        
                        number comb_tilde_04_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number comb_tilde_04_feedForward_size() {
                            return this->comb_tilde_04_feedForward__maxdelay;
                        }
                        
                        void comb_tilde_04_feedBack_step() {
                            this->comb_tilde_04_feedBack_reader++;
                        
                            if (this->comb_tilde_04_feedBack_reader >= (int)(this->comb_tilde_04_feedBack_buffer->getSize()))
                                this->comb_tilde_04_feedBack_reader = 0;
                        }
                        
                        number comb_tilde_04_feedBack_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->comb_tilde_04_feedBack_buffer->getSize()) + this->comb_tilde_04_feedBack_reader - ((size > this->comb_tilde_04_feedBack__maxdelay ? this->comb_tilde_04_feedBack__maxdelay : (size < (this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer) ? this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->comb_tilde_04_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                                ), this->comb_tilde_04_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->comb_tilde_04_feedBack_buffer->getSize()) + this->comb_tilde_04_feedBack_reader - ((size > this->comb_tilde_04_feedBack__maxdelay ? this->comb_tilde_04_feedBack__maxdelay : (size < (1 + this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer) ? 1 + this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->comb_tilde_04_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                                ), this->comb_tilde_04_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                                ), this->comb_tilde_04_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                                ), this->comb_tilde_04_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->comb_tilde_04_feedBack_buffer->getSize()) + this->comb_tilde_04_feedBack_reader - ((size > this->comb_tilde_04_feedBack__maxdelay ? this->comb_tilde_04_feedBack__maxdelay : (size < (1 + this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer) ? 1 + this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->comb_tilde_04_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                                ), this->comb_tilde_04_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                                ), this->comb_tilde_04_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                                ), this->comb_tilde_04_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->comb_tilde_04_feedBack_buffer->getSize()) + this->comb_tilde_04_feedBack_reader - ((size > this->comb_tilde_04_feedBack__maxdelay ? this->comb_tilde_04_feedBack__maxdelay : (size < (1 + this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer) ? 1 + this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->comb_tilde_04_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                                ), this->comb_tilde_04_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                                ), this->comb_tilde_04_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                                ), this->comb_tilde_04_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->comb_tilde_04_feedBack_buffer->getSize()) + this->comb_tilde_04_feedBack_reader - ((size > this->comb_tilde_04_feedBack__maxdelay ? this->comb_tilde_04_feedBack__maxdelay : (size < (1 + this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer) ? 1 + this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->comb_tilde_04_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                                ), this->comb_tilde_04_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                                ), this->comb_tilde_04_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                                ), this->comb_tilde_04_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                                ), this->comb_tilde_04_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                                ), this->comb_tilde_04_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->comb_tilde_04_feedBack_buffer->getSize()) + this->comb_tilde_04_feedBack_reader - ((size > this->comb_tilde_04_feedBack__maxdelay ? this->comb_tilde_04_feedBack__maxdelay : (size < (this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer) ? this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->comb_tilde_04_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                                ), this->comb_tilde_04_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                                ));
                            }
                        
                            number r = (int)(this->comb_tilde_04_feedBack_buffer->getSize()) + this->comb_tilde_04_feedBack_reader - ((size > this->comb_tilde_04_feedBack__maxdelay ? this->comb_tilde_04_feedBack__maxdelay : (size < (this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer) ? this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->comb_tilde_04_feedBack_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                            );
                        }
                        
                        void comb_tilde_04_feedBack_write(number v) {
                            this->comb_tilde_04_feedBack_writer = this->comb_tilde_04_feedBack_reader;
                            this->comb_tilde_04_feedBack_buffer[(Index)this->comb_tilde_04_feedBack_writer] = v;
                        }
                        
                        number comb_tilde_04_feedBack_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->comb_tilde_04_feedBack__maxdelay : size);
                            number val = this->comb_tilde_04_feedBack_read(effectiveSize, 0);
                            this->comb_tilde_04_feedBack_write(v);
                            this->comb_tilde_04_feedBack_step();
                            return val;
                        }
                        
                        array<Index, 2> comb_tilde_04_feedBack_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->comb_tilde_04_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->comb_tilde_04_feedBack_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void comb_tilde_04_feedBack_init() {
                            auto result = this->comb_tilde_04_feedBack_calcSizeInSamples();
                            this->comb_tilde_04_feedBack__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_04_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                            this->comb_tilde_04_feedBack_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void comb_tilde_04_feedBack_clear() {
                            this->comb_tilde_04_feedBack_buffer->setZero();
                        }
                        
                        void comb_tilde_04_feedBack_reset() {
                            auto result = this->comb_tilde_04_feedBack_calcSizeInSamples();
                            this->comb_tilde_04_feedBack__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_04_feedBack_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->comb_tilde_04_feedBack_buffer);
                            this->comb_tilde_04_feedBack_wrap = this->comb_tilde_04_feedBack_buffer->getSize() - 1;
                            this->comb_tilde_04_feedBack_clear();
                        
                            if (this->comb_tilde_04_feedBack_reader >= this->comb_tilde_04_feedBack__maxdelay || this->comb_tilde_04_feedBack_writer >= this->comb_tilde_04_feedBack__maxdelay) {
                                this->comb_tilde_04_feedBack_reader = 0;
                                this->comb_tilde_04_feedBack_writer = 0;
                            }
                        }
                        
                        void comb_tilde_04_feedBack_dspsetup() {
                            this->comb_tilde_04_feedBack_reset();
                        }
                        
                        number comb_tilde_04_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number comb_tilde_04_feedBack_size() {
                            return this->comb_tilde_04_feedBack__maxdelay;
                        }
                        
                        void comb_tilde_04_init() {
                            this->comb_tilde_04_feedForward_init();
                            this->comb_tilde_04_feedBack_init();
                        }
                        
                        void comb_tilde_04_clear() {
                            this->comb_tilde_04_feedForward_clear();
                            this->comb_tilde_04_feedBack_clear();
                        }
                        
                        void comb_tilde_04_reset() {
                            this->comb_tilde_04_init();
                            this->comb_tilde_04_clear();
                        }
                        
                        void comb_tilde_04_dspsetup(bool force) {
                            if ((bool)(this->comb_tilde_04_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->comb_tilde_04_reset();
                            this->comb_tilde_04_setupDone = true;
                            this->comb_tilde_04_feedForward_dspsetup();
                            this->comb_tilde_04_feedBack_dspsetup();
                        }
                        
                        void comb_tilde_05_feedForward_step() {
                            this->comb_tilde_05_feedForward_reader++;
                        
                            if (this->comb_tilde_05_feedForward_reader >= (int)(this->comb_tilde_05_feedForward_buffer->getSize()))
                                this->comb_tilde_05_feedForward_reader = 0;
                        }
                        
                        number comb_tilde_05_feedForward_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->comb_tilde_05_feedForward_buffer->getSize()) + this->comb_tilde_05_feedForward_reader - ((size > this->comb_tilde_05_feedForward__maxdelay ? this->comb_tilde_05_feedForward__maxdelay : (size < (this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer) ? this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->comb_tilde_05_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                                ), this->comb_tilde_05_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->comb_tilde_05_feedForward_buffer->getSize()) + this->comb_tilde_05_feedForward_reader - ((size > this->comb_tilde_05_feedForward__maxdelay ? this->comb_tilde_05_feedForward__maxdelay : (size < (1 + this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer) ? 1 + this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->comb_tilde_05_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                                ), this->comb_tilde_05_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                                ), this->comb_tilde_05_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                                ), this->comb_tilde_05_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->comb_tilde_05_feedForward_buffer->getSize()) + this->comb_tilde_05_feedForward_reader - ((size > this->comb_tilde_05_feedForward__maxdelay ? this->comb_tilde_05_feedForward__maxdelay : (size < (1 + this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer) ? 1 + this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->comb_tilde_05_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                                ), this->comb_tilde_05_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                                ), this->comb_tilde_05_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                                ), this->comb_tilde_05_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->comb_tilde_05_feedForward_buffer->getSize()) + this->comb_tilde_05_feedForward_reader - ((size > this->comb_tilde_05_feedForward__maxdelay ? this->comb_tilde_05_feedForward__maxdelay : (size < (1 + this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer) ? 1 + this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->comb_tilde_05_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                                ), this->comb_tilde_05_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                                ), this->comb_tilde_05_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                                ), this->comb_tilde_05_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->comb_tilde_05_feedForward_buffer->getSize()) + this->comb_tilde_05_feedForward_reader - ((size > this->comb_tilde_05_feedForward__maxdelay ? this->comb_tilde_05_feedForward__maxdelay : (size < (1 + this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer) ? 1 + this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->comb_tilde_05_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                                ), this->comb_tilde_05_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                                ), this->comb_tilde_05_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                                ), this->comb_tilde_05_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                                ), this->comb_tilde_05_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                                ), this->comb_tilde_05_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->comb_tilde_05_feedForward_buffer->getSize()) + this->comb_tilde_05_feedForward_reader - ((size > this->comb_tilde_05_feedForward__maxdelay ? this->comb_tilde_05_feedForward__maxdelay : (size < (this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer) ? this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->comb_tilde_05_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                                ), this->comb_tilde_05_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                                ));
                            }
                        
                            number r = (int)(this->comb_tilde_05_feedForward_buffer->getSize()) + this->comb_tilde_05_feedForward_reader - ((size > this->comb_tilde_05_feedForward__maxdelay ? this->comb_tilde_05_feedForward__maxdelay : (size < (this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer) ? this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->comb_tilde_05_feedForward_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                            );
                        }
                        
                        void comb_tilde_05_feedForward_write(number v) {
                            this->comb_tilde_05_feedForward_writer = this->comb_tilde_05_feedForward_reader;
                            this->comb_tilde_05_feedForward_buffer[(Index)this->comb_tilde_05_feedForward_writer] = v;
                        }
                        
                        number comb_tilde_05_feedForward_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->comb_tilde_05_feedForward__maxdelay : size);
                            number val = this->comb_tilde_05_feedForward_read(effectiveSize, 0);
                            this->comb_tilde_05_feedForward_write(v);
                            this->comb_tilde_05_feedForward_step();
                            return val;
                        }
                        
                        array<Index, 2> comb_tilde_05_feedForward_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->comb_tilde_05_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->comb_tilde_05_feedForward_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void comb_tilde_05_feedForward_init() {
                            auto result = this->comb_tilde_05_feedForward_calcSizeInSamples();
                            this->comb_tilde_05_feedForward__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_05_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                            this->comb_tilde_05_feedForward_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void comb_tilde_05_feedForward_clear() {
                            this->comb_tilde_05_feedForward_buffer->setZero();
                        }
                        
                        void comb_tilde_05_feedForward_reset() {
                            auto result = this->comb_tilde_05_feedForward_calcSizeInSamples();
                            this->comb_tilde_05_feedForward__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_05_feedForward_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->comb_tilde_05_feedForward_buffer);
                            this->comb_tilde_05_feedForward_wrap = this->comb_tilde_05_feedForward_buffer->getSize() - 1;
                            this->comb_tilde_05_feedForward_clear();
                        
                            if (this->comb_tilde_05_feedForward_reader >= this->comb_tilde_05_feedForward__maxdelay || this->comb_tilde_05_feedForward_writer >= this->comb_tilde_05_feedForward__maxdelay) {
                                this->comb_tilde_05_feedForward_reader = 0;
                                this->comb_tilde_05_feedForward_writer = 0;
                            }
                        }
                        
                        void comb_tilde_05_feedForward_dspsetup() {
                            this->comb_tilde_05_feedForward_reset();
                        }
                        
                        number comb_tilde_05_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number comb_tilde_05_feedForward_size() {
                            return this->comb_tilde_05_feedForward__maxdelay;
                        }
                        
                        void comb_tilde_05_feedBack_step() {
                            this->comb_tilde_05_feedBack_reader++;
                        
                            if (this->comb_tilde_05_feedBack_reader >= (int)(this->comb_tilde_05_feedBack_buffer->getSize()))
                                this->comb_tilde_05_feedBack_reader = 0;
                        }
                        
                        number comb_tilde_05_feedBack_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->comb_tilde_05_feedBack_buffer->getSize()) + this->comb_tilde_05_feedBack_reader - ((size > this->comb_tilde_05_feedBack__maxdelay ? this->comb_tilde_05_feedBack__maxdelay : (size < (this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer) ? this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->comb_tilde_05_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                                ), this->comb_tilde_05_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->comb_tilde_05_feedBack_buffer->getSize()) + this->comb_tilde_05_feedBack_reader - ((size > this->comb_tilde_05_feedBack__maxdelay ? this->comb_tilde_05_feedBack__maxdelay : (size < (1 + this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer) ? 1 + this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->comb_tilde_05_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                                ), this->comb_tilde_05_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                                ), this->comb_tilde_05_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                                ), this->comb_tilde_05_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->comb_tilde_05_feedBack_buffer->getSize()) + this->comb_tilde_05_feedBack_reader - ((size > this->comb_tilde_05_feedBack__maxdelay ? this->comb_tilde_05_feedBack__maxdelay : (size < (1 + this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer) ? 1 + this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->comb_tilde_05_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                                ), this->comb_tilde_05_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                                ), this->comb_tilde_05_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                                ), this->comb_tilde_05_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->comb_tilde_05_feedBack_buffer->getSize()) + this->comb_tilde_05_feedBack_reader - ((size > this->comb_tilde_05_feedBack__maxdelay ? this->comb_tilde_05_feedBack__maxdelay : (size < (1 + this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer) ? 1 + this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->comb_tilde_05_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                                ), this->comb_tilde_05_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                                ), this->comb_tilde_05_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                                ), this->comb_tilde_05_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->comb_tilde_05_feedBack_buffer->getSize()) + this->comb_tilde_05_feedBack_reader - ((size > this->comb_tilde_05_feedBack__maxdelay ? this->comb_tilde_05_feedBack__maxdelay : (size < (1 + this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer) ? 1 + this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->comb_tilde_05_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                                ), this->comb_tilde_05_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                                ), this->comb_tilde_05_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                                ), this->comb_tilde_05_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                                ), this->comb_tilde_05_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                                ), this->comb_tilde_05_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->comb_tilde_05_feedBack_buffer->getSize()) + this->comb_tilde_05_feedBack_reader - ((size > this->comb_tilde_05_feedBack__maxdelay ? this->comb_tilde_05_feedBack__maxdelay : (size < (this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer) ? this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->comb_tilde_05_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                                ), this->comb_tilde_05_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                                ));
                            }
                        
                            number r = (int)(this->comb_tilde_05_feedBack_buffer->getSize()) + this->comb_tilde_05_feedBack_reader - ((size > this->comb_tilde_05_feedBack__maxdelay ? this->comb_tilde_05_feedBack__maxdelay : (size < (this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer) ? this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->comb_tilde_05_feedBack_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                            );
                        }
                        
                        void comb_tilde_05_feedBack_write(number v) {
                            this->comb_tilde_05_feedBack_writer = this->comb_tilde_05_feedBack_reader;
                            this->comb_tilde_05_feedBack_buffer[(Index)this->comb_tilde_05_feedBack_writer] = v;
                        }
                        
                        number comb_tilde_05_feedBack_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->comb_tilde_05_feedBack__maxdelay : size);
                            number val = this->comb_tilde_05_feedBack_read(effectiveSize, 0);
                            this->comb_tilde_05_feedBack_write(v);
                            this->comb_tilde_05_feedBack_step();
                            return val;
                        }
                        
                        array<Index, 2> comb_tilde_05_feedBack_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->comb_tilde_05_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->comb_tilde_05_feedBack_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void comb_tilde_05_feedBack_init() {
                            auto result = this->comb_tilde_05_feedBack_calcSizeInSamples();
                            this->comb_tilde_05_feedBack__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_05_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                            this->comb_tilde_05_feedBack_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void comb_tilde_05_feedBack_clear() {
                            this->comb_tilde_05_feedBack_buffer->setZero();
                        }
                        
                        void comb_tilde_05_feedBack_reset() {
                            auto result = this->comb_tilde_05_feedBack_calcSizeInSamples();
                            this->comb_tilde_05_feedBack__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_05_feedBack_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->comb_tilde_05_feedBack_buffer);
                            this->comb_tilde_05_feedBack_wrap = this->comb_tilde_05_feedBack_buffer->getSize() - 1;
                            this->comb_tilde_05_feedBack_clear();
                        
                            if (this->comb_tilde_05_feedBack_reader >= this->comb_tilde_05_feedBack__maxdelay || this->comb_tilde_05_feedBack_writer >= this->comb_tilde_05_feedBack__maxdelay) {
                                this->comb_tilde_05_feedBack_reader = 0;
                                this->comb_tilde_05_feedBack_writer = 0;
                            }
                        }
                        
                        void comb_tilde_05_feedBack_dspsetup() {
                            this->comb_tilde_05_feedBack_reset();
                        }
                        
                        number comb_tilde_05_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number comb_tilde_05_feedBack_size() {
                            return this->comb_tilde_05_feedBack__maxdelay;
                        }
                        
                        void comb_tilde_05_init() {
                            this->comb_tilde_05_feedForward_init();
                            this->comb_tilde_05_feedBack_init();
                        }
                        
                        void comb_tilde_05_clear() {
                            this->comb_tilde_05_feedForward_clear();
                            this->comb_tilde_05_feedBack_clear();
                        }
                        
                        void comb_tilde_05_reset() {
                            this->comb_tilde_05_init();
                            this->comb_tilde_05_clear();
                        }
                        
                        void comb_tilde_05_dspsetup(bool force) {
                            if ((bool)(this->comb_tilde_05_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->comb_tilde_05_reset();
                            this->comb_tilde_05_setupDone = true;
                            this->comb_tilde_05_feedForward_dspsetup();
                            this->comb_tilde_05_feedBack_dspsetup();
                        }
                        
                        void comb_tilde_06_feedForward_step() {
                            this->comb_tilde_06_feedForward_reader++;
                        
                            if (this->comb_tilde_06_feedForward_reader >= (int)(this->comb_tilde_06_feedForward_buffer->getSize()))
                                this->comb_tilde_06_feedForward_reader = 0;
                        }
                        
                        number comb_tilde_06_feedForward_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->comb_tilde_06_feedForward_buffer->getSize()) + this->comb_tilde_06_feedForward_reader - ((size > this->comb_tilde_06_feedForward__maxdelay ? this->comb_tilde_06_feedForward__maxdelay : (size < (this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer) ? this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->comb_tilde_06_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                                ), this->comb_tilde_06_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->comb_tilde_06_feedForward_buffer->getSize()) + this->comb_tilde_06_feedForward_reader - ((size > this->comb_tilde_06_feedForward__maxdelay ? this->comb_tilde_06_feedForward__maxdelay : (size < (1 + this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer) ? 1 + this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->comb_tilde_06_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                                ), this->comb_tilde_06_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                                ), this->comb_tilde_06_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                                ), this->comb_tilde_06_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->comb_tilde_06_feedForward_buffer->getSize()) + this->comb_tilde_06_feedForward_reader - ((size > this->comb_tilde_06_feedForward__maxdelay ? this->comb_tilde_06_feedForward__maxdelay : (size < (1 + this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer) ? 1 + this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->comb_tilde_06_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                                ), this->comb_tilde_06_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                                ), this->comb_tilde_06_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                                ), this->comb_tilde_06_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->comb_tilde_06_feedForward_buffer->getSize()) + this->comb_tilde_06_feedForward_reader - ((size > this->comb_tilde_06_feedForward__maxdelay ? this->comb_tilde_06_feedForward__maxdelay : (size < (1 + this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer) ? 1 + this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->comb_tilde_06_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                                ), this->comb_tilde_06_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                                ), this->comb_tilde_06_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                                ), this->comb_tilde_06_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->comb_tilde_06_feedForward_buffer->getSize()) + this->comb_tilde_06_feedForward_reader - ((size > this->comb_tilde_06_feedForward__maxdelay ? this->comb_tilde_06_feedForward__maxdelay : (size < (1 + this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer) ? 1 + this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->comb_tilde_06_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                                ), this->comb_tilde_06_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                                ), this->comb_tilde_06_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                                ), this->comb_tilde_06_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                                ), this->comb_tilde_06_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                                ), this->comb_tilde_06_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->comb_tilde_06_feedForward_buffer->getSize()) + this->comb_tilde_06_feedForward_reader - ((size > this->comb_tilde_06_feedForward__maxdelay ? this->comb_tilde_06_feedForward__maxdelay : (size < (this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer) ? this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->comb_tilde_06_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                                ), this->comb_tilde_06_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                                ));
                            }
                        
                            number r = (int)(this->comb_tilde_06_feedForward_buffer->getSize()) + this->comb_tilde_06_feedForward_reader - ((size > this->comb_tilde_06_feedForward__maxdelay ? this->comb_tilde_06_feedForward__maxdelay : (size < (this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer) ? this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->comb_tilde_06_feedForward_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                            );
                        }
                        
                        void comb_tilde_06_feedForward_write(number v) {
                            this->comb_tilde_06_feedForward_writer = this->comb_tilde_06_feedForward_reader;
                            this->comb_tilde_06_feedForward_buffer[(Index)this->comb_tilde_06_feedForward_writer] = v;
                        }
                        
                        number comb_tilde_06_feedForward_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->comb_tilde_06_feedForward__maxdelay : size);
                            number val = this->comb_tilde_06_feedForward_read(effectiveSize, 0);
                            this->comb_tilde_06_feedForward_write(v);
                            this->comb_tilde_06_feedForward_step();
                            return val;
                        }
                        
                        array<Index, 2> comb_tilde_06_feedForward_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->comb_tilde_06_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->comb_tilde_06_feedForward_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void comb_tilde_06_feedForward_init() {
                            auto result = this->comb_tilde_06_feedForward_calcSizeInSamples();
                            this->comb_tilde_06_feedForward__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_06_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                            this->comb_tilde_06_feedForward_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void comb_tilde_06_feedForward_clear() {
                            this->comb_tilde_06_feedForward_buffer->setZero();
                        }
                        
                        void comb_tilde_06_feedForward_reset() {
                            auto result = this->comb_tilde_06_feedForward_calcSizeInSamples();
                            this->comb_tilde_06_feedForward__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_06_feedForward_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->comb_tilde_06_feedForward_buffer);
                            this->comb_tilde_06_feedForward_wrap = this->comb_tilde_06_feedForward_buffer->getSize() - 1;
                            this->comb_tilde_06_feedForward_clear();
                        
                            if (this->comb_tilde_06_feedForward_reader >= this->comb_tilde_06_feedForward__maxdelay || this->comb_tilde_06_feedForward_writer >= this->comb_tilde_06_feedForward__maxdelay) {
                                this->comb_tilde_06_feedForward_reader = 0;
                                this->comb_tilde_06_feedForward_writer = 0;
                            }
                        }
                        
                        void comb_tilde_06_feedForward_dspsetup() {
                            this->comb_tilde_06_feedForward_reset();
                        }
                        
                        number comb_tilde_06_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number comb_tilde_06_feedForward_size() {
                            return this->comb_tilde_06_feedForward__maxdelay;
                        }
                        
                        void comb_tilde_06_feedBack_step() {
                            this->comb_tilde_06_feedBack_reader++;
                        
                            if (this->comb_tilde_06_feedBack_reader >= (int)(this->comb_tilde_06_feedBack_buffer->getSize()))
                                this->comb_tilde_06_feedBack_reader = 0;
                        }
                        
                        number comb_tilde_06_feedBack_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->comb_tilde_06_feedBack_buffer->getSize()) + this->comb_tilde_06_feedBack_reader - ((size > this->comb_tilde_06_feedBack__maxdelay ? this->comb_tilde_06_feedBack__maxdelay : (size < (this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer) ? this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->comb_tilde_06_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                                ), this->comb_tilde_06_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->comb_tilde_06_feedBack_buffer->getSize()) + this->comb_tilde_06_feedBack_reader - ((size > this->comb_tilde_06_feedBack__maxdelay ? this->comb_tilde_06_feedBack__maxdelay : (size < (1 + this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer) ? 1 + this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->comb_tilde_06_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                                ), this->comb_tilde_06_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                                ), this->comb_tilde_06_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                                ), this->comb_tilde_06_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->comb_tilde_06_feedBack_buffer->getSize()) + this->comb_tilde_06_feedBack_reader - ((size > this->comb_tilde_06_feedBack__maxdelay ? this->comb_tilde_06_feedBack__maxdelay : (size < (1 + this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer) ? 1 + this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->comb_tilde_06_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                                ), this->comb_tilde_06_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                                ), this->comb_tilde_06_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                                ), this->comb_tilde_06_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->comb_tilde_06_feedBack_buffer->getSize()) + this->comb_tilde_06_feedBack_reader - ((size > this->comb_tilde_06_feedBack__maxdelay ? this->comb_tilde_06_feedBack__maxdelay : (size < (1 + this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer) ? 1 + this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->comb_tilde_06_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                                ), this->comb_tilde_06_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                                ), this->comb_tilde_06_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                                ), this->comb_tilde_06_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->comb_tilde_06_feedBack_buffer->getSize()) + this->comb_tilde_06_feedBack_reader - ((size > this->comb_tilde_06_feedBack__maxdelay ? this->comb_tilde_06_feedBack__maxdelay : (size < (1 + this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer) ? 1 + this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->comb_tilde_06_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                                ), this->comb_tilde_06_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                                ), this->comb_tilde_06_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                                ), this->comb_tilde_06_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                                ), this->comb_tilde_06_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                                ), this->comb_tilde_06_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->comb_tilde_06_feedBack_buffer->getSize()) + this->comb_tilde_06_feedBack_reader - ((size > this->comb_tilde_06_feedBack__maxdelay ? this->comb_tilde_06_feedBack__maxdelay : (size < (this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer) ? this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->comb_tilde_06_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                                ), this->comb_tilde_06_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                                ));
                            }
                        
                            number r = (int)(this->comb_tilde_06_feedBack_buffer->getSize()) + this->comb_tilde_06_feedBack_reader - ((size > this->comb_tilde_06_feedBack__maxdelay ? this->comb_tilde_06_feedBack__maxdelay : (size < (this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer) ? this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->comb_tilde_06_feedBack_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                            );
                        }
                        
                        void comb_tilde_06_feedBack_write(number v) {
                            this->comb_tilde_06_feedBack_writer = this->comb_tilde_06_feedBack_reader;
                            this->comb_tilde_06_feedBack_buffer[(Index)this->comb_tilde_06_feedBack_writer] = v;
                        }
                        
                        number comb_tilde_06_feedBack_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->comb_tilde_06_feedBack__maxdelay : size);
                            number val = this->comb_tilde_06_feedBack_read(effectiveSize, 0);
                            this->comb_tilde_06_feedBack_write(v);
                            this->comb_tilde_06_feedBack_step();
                            return val;
                        }
                        
                        array<Index, 2> comb_tilde_06_feedBack_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->comb_tilde_06_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->comb_tilde_06_feedBack_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void comb_tilde_06_feedBack_init() {
                            auto result = this->comb_tilde_06_feedBack_calcSizeInSamples();
                            this->comb_tilde_06_feedBack__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_06_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                            this->comb_tilde_06_feedBack_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void comb_tilde_06_feedBack_clear() {
                            this->comb_tilde_06_feedBack_buffer->setZero();
                        }
                        
                        void comb_tilde_06_feedBack_reset() {
                            auto result = this->comb_tilde_06_feedBack_calcSizeInSamples();
                            this->comb_tilde_06_feedBack__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_06_feedBack_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->comb_tilde_06_feedBack_buffer);
                            this->comb_tilde_06_feedBack_wrap = this->comb_tilde_06_feedBack_buffer->getSize() - 1;
                            this->comb_tilde_06_feedBack_clear();
                        
                            if (this->comb_tilde_06_feedBack_reader >= this->comb_tilde_06_feedBack__maxdelay || this->comb_tilde_06_feedBack_writer >= this->comb_tilde_06_feedBack__maxdelay) {
                                this->comb_tilde_06_feedBack_reader = 0;
                                this->comb_tilde_06_feedBack_writer = 0;
                            }
                        }
                        
                        void comb_tilde_06_feedBack_dspsetup() {
                            this->comb_tilde_06_feedBack_reset();
                        }
                        
                        number comb_tilde_06_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number comb_tilde_06_feedBack_size() {
                            return this->comb_tilde_06_feedBack__maxdelay;
                        }
                        
                        void comb_tilde_06_init() {
                            this->comb_tilde_06_feedForward_init();
                            this->comb_tilde_06_feedBack_init();
                        }
                        
                        void comb_tilde_06_clear() {
                            this->comb_tilde_06_feedForward_clear();
                            this->comb_tilde_06_feedBack_clear();
                        }
                        
                        void comb_tilde_06_reset() {
                            this->comb_tilde_06_init();
                            this->comb_tilde_06_clear();
                        }
                        
                        void comb_tilde_06_dspsetup(bool force) {
                            if ((bool)(this->comb_tilde_06_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->comb_tilde_06_reset();
                            this->comb_tilde_06_setupDone = true;
                            this->comb_tilde_06_feedForward_dspsetup();
                            this->comb_tilde_06_feedBack_dspsetup();
                        }
                        
                        void comb_tilde_07_feedForward_step() {
                            this->comb_tilde_07_feedForward_reader++;
                        
                            if (this->comb_tilde_07_feedForward_reader >= (int)(this->comb_tilde_07_feedForward_buffer->getSize()))
                                this->comb_tilde_07_feedForward_reader = 0;
                        }
                        
                        number comb_tilde_07_feedForward_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->comb_tilde_07_feedForward_buffer->getSize()) + this->comb_tilde_07_feedForward_reader - ((size > this->comb_tilde_07_feedForward__maxdelay ? this->comb_tilde_07_feedForward__maxdelay : (size < (this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer) ? this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->comb_tilde_07_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                                ), this->comb_tilde_07_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->comb_tilde_07_feedForward_buffer->getSize()) + this->comb_tilde_07_feedForward_reader - ((size > this->comb_tilde_07_feedForward__maxdelay ? this->comb_tilde_07_feedForward__maxdelay : (size < (1 + this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer) ? 1 + this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->comb_tilde_07_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                                ), this->comb_tilde_07_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                                ), this->comb_tilde_07_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                                ), this->comb_tilde_07_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->comb_tilde_07_feedForward_buffer->getSize()) + this->comb_tilde_07_feedForward_reader - ((size > this->comb_tilde_07_feedForward__maxdelay ? this->comb_tilde_07_feedForward__maxdelay : (size < (1 + this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer) ? 1 + this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->comb_tilde_07_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                                ), this->comb_tilde_07_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                                ), this->comb_tilde_07_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                                ), this->comb_tilde_07_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->comb_tilde_07_feedForward_buffer->getSize()) + this->comb_tilde_07_feedForward_reader - ((size > this->comb_tilde_07_feedForward__maxdelay ? this->comb_tilde_07_feedForward__maxdelay : (size < (1 + this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer) ? 1 + this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->comb_tilde_07_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                                ), this->comb_tilde_07_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                                ), this->comb_tilde_07_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                                ), this->comb_tilde_07_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->comb_tilde_07_feedForward_buffer->getSize()) + this->comb_tilde_07_feedForward_reader - ((size > this->comb_tilde_07_feedForward__maxdelay ? this->comb_tilde_07_feedForward__maxdelay : (size < (1 + this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer) ? 1 + this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->comb_tilde_07_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                                ), this->comb_tilde_07_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                                ), this->comb_tilde_07_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                                ), this->comb_tilde_07_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                                ), this->comb_tilde_07_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                                ), this->comb_tilde_07_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->comb_tilde_07_feedForward_buffer->getSize()) + this->comb_tilde_07_feedForward_reader - ((size > this->comb_tilde_07_feedForward__maxdelay ? this->comb_tilde_07_feedForward__maxdelay : (size < (this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer) ? this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->comb_tilde_07_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                                ), this->comb_tilde_07_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                                ));
                            }
                        
                            number r = (int)(this->comb_tilde_07_feedForward_buffer->getSize()) + this->comb_tilde_07_feedForward_reader - ((size > this->comb_tilde_07_feedForward__maxdelay ? this->comb_tilde_07_feedForward__maxdelay : (size < (this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer) ? this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->comb_tilde_07_feedForward_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                            );
                        }
                        
                        void comb_tilde_07_feedForward_write(number v) {
                            this->comb_tilde_07_feedForward_writer = this->comb_tilde_07_feedForward_reader;
                            this->comb_tilde_07_feedForward_buffer[(Index)this->comb_tilde_07_feedForward_writer] = v;
                        }
                        
                        number comb_tilde_07_feedForward_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->comb_tilde_07_feedForward__maxdelay : size);
                            number val = this->comb_tilde_07_feedForward_read(effectiveSize, 0);
                            this->comb_tilde_07_feedForward_write(v);
                            this->comb_tilde_07_feedForward_step();
                            return val;
                        }
                        
                        array<Index, 2> comb_tilde_07_feedForward_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->comb_tilde_07_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->comb_tilde_07_feedForward_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void comb_tilde_07_feedForward_init() {
                            auto result = this->comb_tilde_07_feedForward_calcSizeInSamples();
                            this->comb_tilde_07_feedForward__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_07_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                            this->comb_tilde_07_feedForward_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void comb_tilde_07_feedForward_clear() {
                            this->comb_tilde_07_feedForward_buffer->setZero();
                        }
                        
                        void comb_tilde_07_feedForward_reset() {
                            auto result = this->comb_tilde_07_feedForward_calcSizeInSamples();
                            this->comb_tilde_07_feedForward__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_07_feedForward_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->comb_tilde_07_feedForward_buffer);
                            this->comb_tilde_07_feedForward_wrap = this->comb_tilde_07_feedForward_buffer->getSize() - 1;
                            this->comb_tilde_07_feedForward_clear();
                        
                            if (this->comb_tilde_07_feedForward_reader >= this->comb_tilde_07_feedForward__maxdelay || this->comb_tilde_07_feedForward_writer >= this->comb_tilde_07_feedForward__maxdelay) {
                                this->comb_tilde_07_feedForward_reader = 0;
                                this->comb_tilde_07_feedForward_writer = 0;
                            }
                        }
                        
                        void comb_tilde_07_feedForward_dspsetup() {
                            this->comb_tilde_07_feedForward_reset();
                        }
                        
                        number comb_tilde_07_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number comb_tilde_07_feedForward_size() {
                            return this->comb_tilde_07_feedForward__maxdelay;
                        }
                        
                        void comb_tilde_07_feedBack_step() {
                            this->comb_tilde_07_feedBack_reader++;
                        
                            if (this->comb_tilde_07_feedBack_reader >= (int)(this->comb_tilde_07_feedBack_buffer->getSize()))
                                this->comb_tilde_07_feedBack_reader = 0;
                        }
                        
                        number comb_tilde_07_feedBack_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->comb_tilde_07_feedBack_buffer->getSize()) + this->comb_tilde_07_feedBack_reader - ((size > this->comb_tilde_07_feedBack__maxdelay ? this->comb_tilde_07_feedBack__maxdelay : (size < (this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer) ? this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->comb_tilde_07_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                                ), this->comb_tilde_07_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->comb_tilde_07_feedBack_buffer->getSize()) + this->comb_tilde_07_feedBack_reader - ((size > this->comb_tilde_07_feedBack__maxdelay ? this->comb_tilde_07_feedBack__maxdelay : (size < (1 + this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer) ? 1 + this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->comb_tilde_07_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                                ), this->comb_tilde_07_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                                ), this->comb_tilde_07_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                                ), this->comb_tilde_07_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->comb_tilde_07_feedBack_buffer->getSize()) + this->comb_tilde_07_feedBack_reader - ((size > this->comb_tilde_07_feedBack__maxdelay ? this->comb_tilde_07_feedBack__maxdelay : (size < (1 + this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer) ? 1 + this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->comb_tilde_07_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                                ), this->comb_tilde_07_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                                ), this->comb_tilde_07_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                                ), this->comb_tilde_07_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->comb_tilde_07_feedBack_buffer->getSize()) + this->comb_tilde_07_feedBack_reader - ((size > this->comb_tilde_07_feedBack__maxdelay ? this->comb_tilde_07_feedBack__maxdelay : (size < (1 + this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer) ? 1 + this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->comb_tilde_07_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                                ), this->comb_tilde_07_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                                ), this->comb_tilde_07_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                                ), this->comb_tilde_07_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->comb_tilde_07_feedBack_buffer->getSize()) + this->comb_tilde_07_feedBack_reader - ((size > this->comb_tilde_07_feedBack__maxdelay ? this->comb_tilde_07_feedBack__maxdelay : (size < (1 + this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer) ? 1 + this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->comb_tilde_07_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                                ), this->comb_tilde_07_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                                ), this->comb_tilde_07_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                                ), this->comb_tilde_07_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                                ), this->comb_tilde_07_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                                ), this->comb_tilde_07_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->comb_tilde_07_feedBack_buffer->getSize()) + this->comb_tilde_07_feedBack_reader - ((size > this->comb_tilde_07_feedBack__maxdelay ? this->comb_tilde_07_feedBack__maxdelay : (size < (this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer) ? this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->comb_tilde_07_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                                ), this->comb_tilde_07_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                                ));
                            }
                        
                            number r = (int)(this->comb_tilde_07_feedBack_buffer->getSize()) + this->comb_tilde_07_feedBack_reader - ((size > this->comb_tilde_07_feedBack__maxdelay ? this->comb_tilde_07_feedBack__maxdelay : (size < (this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer) ? this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->comb_tilde_07_feedBack_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                            );
                        }
                        
                        void comb_tilde_07_feedBack_write(number v) {
                            this->comb_tilde_07_feedBack_writer = this->comb_tilde_07_feedBack_reader;
                            this->comb_tilde_07_feedBack_buffer[(Index)this->comb_tilde_07_feedBack_writer] = v;
                        }
                        
                        number comb_tilde_07_feedBack_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->comb_tilde_07_feedBack__maxdelay : size);
                            number val = this->comb_tilde_07_feedBack_read(effectiveSize, 0);
                            this->comb_tilde_07_feedBack_write(v);
                            this->comb_tilde_07_feedBack_step();
                            return val;
                        }
                        
                        array<Index, 2> comb_tilde_07_feedBack_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->comb_tilde_07_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->comb_tilde_07_feedBack_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void comb_tilde_07_feedBack_init() {
                            auto result = this->comb_tilde_07_feedBack_calcSizeInSamples();
                            this->comb_tilde_07_feedBack__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_07_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                            this->comb_tilde_07_feedBack_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void comb_tilde_07_feedBack_clear() {
                            this->comb_tilde_07_feedBack_buffer->setZero();
                        }
                        
                        void comb_tilde_07_feedBack_reset() {
                            auto result = this->comb_tilde_07_feedBack_calcSizeInSamples();
                            this->comb_tilde_07_feedBack__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_07_feedBack_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->comb_tilde_07_feedBack_buffer);
                            this->comb_tilde_07_feedBack_wrap = this->comb_tilde_07_feedBack_buffer->getSize() - 1;
                            this->comb_tilde_07_feedBack_clear();
                        
                            if (this->comb_tilde_07_feedBack_reader >= this->comb_tilde_07_feedBack__maxdelay || this->comb_tilde_07_feedBack_writer >= this->comb_tilde_07_feedBack__maxdelay) {
                                this->comb_tilde_07_feedBack_reader = 0;
                                this->comb_tilde_07_feedBack_writer = 0;
                            }
                        }
                        
                        void comb_tilde_07_feedBack_dspsetup() {
                            this->comb_tilde_07_feedBack_reset();
                        }
                        
                        number comb_tilde_07_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number comb_tilde_07_feedBack_size() {
                            return this->comb_tilde_07_feedBack__maxdelay;
                        }
                        
                        void comb_tilde_07_init() {
                            this->comb_tilde_07_feedForward_init();
                            this->comb_tilde_07_feedBack_init();
                        }
                        
                        void comb_tilde_07_clear() {
                            this->comb_tilde_07_feedForward_clear();
                            this->comb_tilde_07_feedBack_clear();
                        }
                        
                        void comb_tilde_07_reset() {
                            this->comb_tilde_07_init();
                            this->comb_tilde_07_clear();
                        }
                        
                        void comb_tilde_07_dspsetup(bool force) {
                            if ((bool)(this->comb_tilde_07_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->comb_tilde_07_reset();
                            this->comb_tilde_07_setupDone = true;
                            this->comb_tilde_07_feedForward_dspsetup();
                            this->comb_tilde_07_feedBack_dspsetup();
                        }
                        
                        void comb_tilde_08_feedForward_step() {
                            this->comb_tilde_08_feedForward_reader++;
                        
                            if (this->comb_tilde_08_feedForward_reader >= (int)(this->comb_tilde_08_feedForward_buffer->getSize()))
                                this->comb_tilde_08_feedForward_reader = 0;
                        }
                        
                        number comb_tilde_08_feedForward_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->comb_tilde_08_feedForward_buffer->getSize()) + this->comb_tilde_08_feedForward_reader - ((size > this->comb_tilde_08_feedForward__maxdelay ? this->comb_tilde_08_feedForward__maxdelay : (size < (this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer) ? this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->comb_tilde_08_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                                ), this->comb_tilde_08_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->comb_tilde_08_feedForward_buffer->getSize()) + this->comb_tilde_08_feedForward_reader - ((size > this->comb_tilde_08_feedForward__maxdelay ? this->comb_tilde_08_feedForward__maxdelay : (size < (1 + this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer) ? 1 + this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->comb_tilde_08_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                                ), this->comb_tilde_08_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                                ), this->comb_tilde_08_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                                ), this->comb_tilde_08_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->comb_tilde_08_feedForward_buffer->getSize()) + this->comb_tilde_08_feedForward_reader - ((size > this->comb_tilde_08_feedForward__maxdelay ? this->comb_tilde_08_feedForward__maxdelay : (size < (1 + this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer) ? 1 + this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->comb_tilde_08_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                                ), this->comb_tilde_08_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                                ), this->comb_tilde_08_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                                ), this->comb_tilde_08_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->comb_tilde_08_feedForward_buffer->getSize()) + this->comb_tilde_08_feedForward_reader - ((size > this->comb_tilde_08_feedForward__maxdelay ? this->comb_tilde_08_feedForward__maxdelay : (size < (1 + this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer) ? 1 + this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->comb_tilde_08_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                                ), this->comb_tilde_08_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                                ), this->comb_tilde_08_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                                ), this->comb_tilde_08_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->comb_tilde_08_feedForward_buffer->getSize()) + this->comb_tilde_08_feedForward_reader - ((size > this->comb_tilde_08_feedForward__maxdelay ? this->comb_tilde_08_feedForward__maxdelay : (size < (1 + this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer) ? 1 + this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->comb_tilde_08_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                                ), this->comb_tilde_08_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                                ), this->comb_tilde_08_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                                ), this->comb_tilde_08_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                                ), this->comb_tilde_08_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                                ), this->comb_tilde_08_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->comb_tilde_08_feedForward_buffer->getSize()) + this->comb_tilde_08_feedForward_reader - ((size > this->comb_tilde_08_feedForward__maxdelay ? this->comb_tilde_08_feedForward__maxdelay : (size < (this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer) ? this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->comb_tilde_08_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                                ), this->comb_tilde_08_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                                ));
                            }
                        
                            number r = (int)(this->comb_tilde_08_feedForward_buffer->getSize()) + this->comb_tilde_08_feedForward_reader - ((size > this->comb_tilde_08_feedForward__maxdelay ? this->comb_tilde_08_feedForward__maxdelay : (size < (this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer) ? this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->comb_tilde_08_feedForward_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                            );
                        }
                        
                        void comb_tilde_08_feedForward_write(number v) {
                            this->comb_tilde_08_feedForward_writer = this->comb_tilde_08_feedForward_reader;
                            this->comb_tilde_08_feedForward_buffer[(Index)this->comb_tilde_08_feedForward_writer] = v;
                        }
                        
                        number comb_tilde_08_feedForward_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->comb_tilde_08_feedForward__maxdelay : size);
                            number val = this->comb_tilde_08_feedForward_read(effectiveSize, 0);
                            this->comb_tilde_08_feedForward_write(v);
                            this->comb_tilde_08_feedForward_step();
                            return val;
                        }
                        
                        array<Index, 2> comb_tilde_08_feedForward_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->comb_tilde_08_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->comb_tilde_08_feedForward_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void comb_tilde_08_feedForward_init() {
                            auto result = this->comb_tilde_08_feedForward_calcSizeInSamples();
                            this->comb_tilde_08_feedForward__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_08_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                            this->comb_tilde_08_feedForward_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void comb_tilde_08_feedForward_clear() {
                            this->comb_tilde_08_feedForward_buffer->setZero();
                        }
                        
                        void comb_tilde_08_feedForward_reset() {
                            auto result = this->comb_tilde_08_feedForward_calcSizeInSamples();
                            this->comb_tilde_08_feedForward__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_08_feedForward_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->comb_tilde_08_feedForward_buffer);
                            this->comb_tilde_08_feedForward_wrap = this->comb_tilde_08_feedForward_buffer->getSize() - 1;
                            this->comb_tilde_08_feedForward_clear();
                        
                            if (this->comb_tilde_08_feedForward_reader >= this->comb_tilde_08_feedForward__maxdelay || this->comb_tilde_08_feedForward_writer >= this->comb_tilde_08_feedForward__maxdelay) {
                                this->comb_tilde_08_feedForward_reader = 0;
                                this->comb_tilde_08_feedForward_writer = 0;
                            }
                        }
                        
                        void comb_tilde_08_feedForward_dspsetup() {
                            this->comb_tilde_08_feedForward_reset();
                        }
                        
                        number comb_tilde_08_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number comb_tilde_08_feedForward_size() {
                            return this->comb_tilde_08_feedForward__maxdelay;
                        }
                        
                        void comb_tilde_08_feedBack_step() {
                            this->comb_tilde_08_feedBack_reader++;
                        
                            if (this->comb_tilde_08_feedBack_reader >= (int)(this->comb_tilde_08_feedBack_buffer->getSize()))
                                this->comb_tilde_08_feedBack_reader = 0;
                        }
                        
                        number comb_tilde_08_feedBack_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->comb_tilde_08_feedBack_buffer->getSize()) + this->comb_tilde_08_feedBack_reader - ((size > this->comb_tilde_08_feedBack__maxdelay ? this->comb_tilde_08_feedBack__maxdelay : (size < (this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer) ? this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->comb_tilde_08_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                                ), this->comb_tilde_08_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->comb_tilde_08_feedBack_buffer->getSize()) + this->comb_tilde_08_feedBack_reader - ((size > this->comb_tilde_08_feedBack__maxdelay ? this->comb_tilde_08_feedBack__maxdelay : (size < (1 + this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer) ? 1 + this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->comb_tilde_08_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                                ), this->comb_tilde_08_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                                ), this->comb_tilde_08_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                                ), this->comb_tilde_08_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->comb_tilde_08_feedBack_buffer->getSize()) + this->comb_tilde_08_feedBack_reader - ((size > this->comb_tilde_08_feedBack__maxdelay ? this->comb_tilde_08_feedBack__maxdelay : (size < (1 + this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer) ? 1 + this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->comb_tilde_08_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                                ), this->comb_tilde_08_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                                ), this->comb_tilde_08_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                                ), this->comb_tilde_08_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->comb_tilde_08_feedBack_buffer->getSize()) + this->comb_tilde_08_feedBack_reader - ((size > this->comb_tilde_08_feedBack__maxdelay ? this->comb_tilde_08_feedBack__maxdelay : (size < (1 + this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer) ? 1 + this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->comb_tilde_08_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                                ), this->comb_tilde_08_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                                ), this->comb_tilde_08_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                                ), this->comb_tilde_08_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->comb_tilde_08_feedBack_buffer->getSize()) + this->comb_tilde_08_feedBack_reader - ((size > this->comb_tilde_08_feedBack__maxdelay ? this->comb_tilde_08_feedBack__maxdelay : (size < (1 + this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer) ? 1 + this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->comb_tilde_08_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                                ), this->comb_tilde_08_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                                ), this->comb_tilde_08_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                                ), this->comb_tilde_08_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                                ), this->comb_tilde_08_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                                ), this->comb_tilde_08_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->comb_tilde_08_feedBack_buffer->getSize()) + this->comb_tilde_08_feedBack_reader - ((size > this->comb_tilde_08_feedBack__maxdelay ? this->comb_tilde_08_feedBack__maxdelay : (size < (this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer) ? this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->comb_tilde_08_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                                ), this->comb_tilde_08_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                                ));
                            }
                        
                            number r = (int)(this->comb_tilde_08_feedBack_buffer->getSize()) + this->comb_tilde_08_feedBack_reader - ((size > this->comb_tilde_08_feedBack__maxdelay ? this->comb_tilde_08_feedBack__maxdelay : (size < (this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer) ? this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->comb_tilde_08_feedBack_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                            );
                        }
                        
                        void comb_tilde_08_feedBack_write(number v) {
                            this->comb_tilde_08_feedBack_writer = this->comb_tilde_08_feedBack_reader;
                            this->comb_tilde_08_feedBack_buffer[(Index)this->comb_tilde_08_feedBack_writer] = v;
                        }
                        
                        number comb_tilde_08_feedBack_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->comb_tilde_08_feedBack__maxdelay : size);
                            number val = this->comb_tilde_08_feedBack_read(effectiveSize, 0);
                            this->comb_tilde_08_feedBack_write(v);
                            this->comb_tilde_08_feedBack_step();
                            return val;
                        }
                        
                        array<Index, 2> comb_tilde_08_feedBack_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->comb_tilde_08_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->comb_tilde_08_feedBack_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void comb_tilde_08_feedBack_init() {
                            auto result = this->comb_tilde_08_feedBack_calcSizeInSamples();
                            this->comb_tilde_08_feedBack__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_08_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                            this->comb_tilde_08_feedBack_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void comb_tilde_08_feedBack_clear() {
                            this->comb_tilde_08_feedBack_buffer->setZero();
                        }
                        
                        void comb_tilde_08_feedBack_reset() {
                            auto result = this->comb_tilde_08_feedBack_calcSizeInSamples();
                            this->comb_tilde_08_feedBack__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_08_feedBack_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->comb_tilde_08_feedBack_buffer);
                            this->comb_tilde_08_feedBack_wrap = this->comb_tilde_08_feedBack_buffer->getSize() - 1;
                            this->comb_tilde_08_feedBack_clear();
                        
                            if (this->comb_tilde_08_feedBack_reader >= this->comb_tilde_08_feedBack__maxdelay || this->comb_tilde_08_feedBack_writer >= this->comb_tilde_08_feedBack__maxdelay) {
                                this->comb_tilde_08_feedBack_reader = 0;
                                this->comb_tilde_08_feedBack_writer = 0;
                            }
                        }
                        
                        void comb_tilde_08_feedBack_dspsetup() {
                            this->comb_tilde_08_feedBack_reset();
                        }
                        
                        number comb_tilde_08_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number comb_tilde_08_feedBack_size() {
                            return this->comb_tilde_08_feedBack__maxdelay;
                        }
                        
                        void comb_tilde_08_init() {
                            this->comb_tilde_08_feedForward_init();
                            this->comb_tilde_08_feedBack_init();
                        }
                        
                        void comb_tilde_08_clear() {
                            this->comb_tilde_08_feedForward_clear();
                            this->comb_tilde_08_feedBack_clear();
                        }
                        
                        void comb_tilde_08_reset() {
                            this->comb_tilde_08_init();
                            this->comb_tilde_08_clear();
                        }
                        
                        void comb_tilde_08_dspsetup(bool force) {
                            if ((bool)(this->comb_tilde_08_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->comb_tilde_08_reset();
                            this->comb_tilde_08_setupDone = true;
                            this->comb_tilde_08_feedForward_dspsetup();
                            this->comb_tilde_08_feedBack_dspsetup();
                        }
                        
                        bool stackprotect_check() {
                            this->stackprotect_count++;
                        
                            if (this->stackprotect_count > 128) {
                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                return true;
                            }
                        
                            return false;
                        }
                        
                        void updateTime(MillisecondTime time) {
                            this->_currentTime = time;
                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                        
                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                        
                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                this->sampleOffsetIntoNextAudioBuffer = 0;
                        }
                        
                        void assign_defaults()
                        {
                            comb_tilde_02_x = 0;
                            comb_tilde_02_delayTime = 110;
                            comb_tilde_02_gain = 0;
                            comb_tilde_02_ffGain = 1;
                            comb_tilde_02_fbGain = 0;
                            dspexpr_32_in1 = 0;
                            dspexpr_32_in2 = 110;
                            comb_tilde_03_x = 0;
                            comb_tilde_03_delayTime = 160;
                            comb_tilde_03_gain = 0;
                            comb_tilde_03_ffGain = 1;
                            comb_tilde_03_fbGain = 0;
                            dspexpr_33_in1 = 0;
                            dspexpr_33_in2 = 160;
                            comb_tilde_04_x = 0;
                            comb_tilde_04_delayTime = 50;
                            comb_tilde_04_gain = 0;
                            comb_tilde_04_ffGain = 1;
                            comb_tilde_04_fbGain = 0;
                            dspexpr_34_in1 = 0;
                            dspexpr_34_in2 = 50;
                            dspexpr_35_in1 = 0;
                            dspexpr_35_in2 = 0.355;
                            comb_tilde_05_x = 0;
                            comb_tilde_05_delayTime = 25;
                            comb_tilde_05_gain = 0;
                            comb_tilde_05_ffGain = 1;
                            comb_tilde_05_fbGain = 0;
                            dspexpr_36_in1 = 0;
                            dspexpr_36_in2 = 25;
                            dspexpr_37_in1 = 0;
                            dspexpr_37_in2 = -1;
                            comb_tilde_06_x = 0;
                            comb_tilde_06_delayTime = 69;
                            comb_tilde_06_gain = 0;
                            comb_tilde_06_ffGain = 1;
                            comb_tilde_06_fbGain = 0;
                            dspexpr_38_in1 = 0;
                            dspexpr_38_in2 = 69;
                            comb_tilde_07_x = 0;
                            comb_tilde_07_delayTime = 80;
                            comb_tilde_07_gain = 0;
                            comb_tilde_07_ffGain = 1;
                            comb_tilde_07_fbGain = 0;
                            dspexpr_39_in1 = 0;
                            dspexpr_39_in2 = 80;
                            comb_tilde_08_x = 0;
                            comb_tilde_08_delayTime = 75;
                            comb_tilde_08_gain = 0;
                            comb_tilde_08_ffGain = 1;
                            comb_tilde_08_fbGain = 0;
                            dspexpr_40_in1 = 0;
                            dspexpr_40_in2 = 75;
                            dspexpr_41_in1 = 0;
                            dspexpr_41_in2 = 0;
                            _currentTime = 0;
                            audioProcessSampleCount = 0;
                            sampleOffsetIntoNextAudioBuffer = 0;
                            zeroBuffer = nullptr;
                            dummyBuffer = nullptr;
                            signals[0] = nullptr;
                            signals[1] = nullptr;
                            signals[2] = nullptr;
                            signals[3] = nullptr;
                            signals[4] = nullptr;
                            signals[5] = nullptr;
                            signals[6] = nullptr;
                            signals[7] = nullptr;
                            didAllocateSignals = 0;
                            vs = 0;
                            maxvs = 0;
                            sr = 44100;
                            invsr = 0.00002267573696;
                            comb_tilde_02_feedForward__maxdelay = 0;
                            comb_tilde_02_feedForward_sizemode = 0;
                            comb_tilde_02_feedForward_wrap = 0;
                            comb_tilde_02_feedForward_reader = 0;
                            comb_tilde_02_feedForward_writer = 0;
                            comb_tilde_02_feedBack__maxdelay = 0;
                            comb_tilde_02_feedBack_sizemode = 0;
                            comb_tilde_02_feedBack_wrap = 0;
                            comb_tilde_02_feedBack_reader = 0;
                            comb_tilde_02_feedBack_writer = 0;
                            comb_tilde_02_setupDone = false;
                            comb_tilde_03_feedForward__maxdelay = 0;
                            comb_tilde_03_feedForward_sizemode = 0;
                            comb_tilde_03_feedForward_wrap = 0;
                            comb_tilde_03_feedForward_reader = 0;
                            comb_tilde_03_feedForward_writer = 0;
                            comb_tilde_03_feedBack__maxdelay = 0;
                            comb_tilde_03_feedBack_sizemode = 0;
                            comb_tilde_03_feedBack_wrap = 0;
                            comb_tilde_03_feedBack_reader = 0;
                            comb_tilde_03_feedBack_writer = 0;
                            comb_tilde_03_setupDone = false;
                            comb_tilde_04_feedForward__maxdelay = 0;
                            comb_tilde_04_feedForward_sizemode = 0;
                            comb_tilde_04_feedForward_wrap = 0;
                            comb_tilde_04_feedForward_reader = 0;
                            comb_tilde_04_feedForward_writer = 0;
                            comb_tilde_04_feedBack__maxdelay = 0;
                            comb_tilde_04_feedBack_sizemode = 0;
                            comb_tilde_04_feedBack_wrap = 0;
                            comb_tilde_04_feedBack_reader = 0;
                            comb_tilde_04_feedBack_writer = 0;
                            comb_tilde_04_setupDone = false;
                            comb_tilde_05_feedForward__maxdelay = 0;
                            comb_tilde_05_feedForward_sizemode = 0;
                            comb_tilde_05_feedForward_wrap = 0;
                            comb_tilde_05_feedForward_reader = 0;
                            comb_tilde_05_feedForward_writer = 0;
                            comb_tilde_05_feedBack__maxdelay = 0;
                            comb_tilde_05_feedBack_sizemode = 0;
                            comb_tilde_05_feedBack_wrap = 0;
                            comb_tilde_05_feedBack_reader = 0;
                            comb_tilde_05_feedBack_writer = 0;
                            comb_tilde_05_setupDone = false;
                            comb_tilde_06_feedForward__maxdelay = 0;
                            comb_tilde_06_feedForward_sizemode = 0;
                            comb_tilde_06_feedForward_wrap = 0;
                            comb_tilde_06_feedForward_reader = 0;
                            comb_tilde_06_feedForward_writer = 0;
                            comb_tilde_06_feedBack__maxdelay = 0;
                            comb_tilde_06_feedBack_sizemode = 0;
                            comb_tilde_06_feedBack_wrap = 0;
                            comb_tilde_06_feedBack_reader = 0;
                            comb_tilde_06_feedBack_writer = 0;
                            comb_tilde_06_setupDone = false;
                            comb_tilde_07_feedForward__maxdelay = 0;
                            comb_tilde_07_feedForward_sizemode = 0;
                            comb_tilde_07_feedForward_wrap = 0;
                            comb_tilde_07_feedForward_reader = 0;
                            comb_tilde_07_feedForward_writer = 0;
                            comb_tilde_07_feedBack__maxdelay = 0;
                            comb_tilde_07_feedBack_sizemode = 0;
                            comb_tilde_07_feedBack_wrap = 0;
                            comb_tilde_07_feedBack_reader = 0;
                            comb_tilde_07_feedBack_writer = 0;
                            comb_tilde_07_setupDone = false;
                            comb_tilde_08_feedForward__maxdelay = 0;
                            comb_tilde_08_feedForward_sizemode = 0;
                            comb_tilde_08_feedForward_wrap = 0;
                            comb_tilde_08_feedForward_reader = 0;
                            comb_tilde_08_feedForward_writer = 0;
                            comb_tilde_08_feedBack__maxdelay = 0;
                            comb_tilde_08_feedBack_sizemode = 0;
                            comb_tilde_08_feedBack_wrap = 0;
                            comb_tilde_08_feedBack_reader = 0;
                            comb_tilde_08_feedBack_writer = 0;
                            comb_tilde_08_setupDone = false;
                            stackprotect_count = 0;
                            _voiceIndex = 0;
                            _noteNumber = 0;
                            isMuted = 1;
                            parameterOffset = 0;
                        }
                        
                        // member variables
                        
                            number comb_tilde_02_x;
                            number comb_tilde_02_delayTime;
                            number comb_tilde_02_gain;
                            number comb_tilde_02_ffGain;
                            number comb_tilde_02_fbGain;
                            number dspexpr_32_in1;
                            number dspexpr_32_in2;
                            number comb_tilde_03_x;
                            number comb_tilde_03_delayTime;
                            number comb_tilde_03_gain;
                            number comb_tilde_03_ffGain;
                            number comb_tilde_03_fbGain;
                            number dspexpr_33_in1;
                            number dspexpr_33_in2;
                            number comb_tilde_04_x;
                            number comb_tilde_04_delayTime;
                            number comb_tilde_04_gain;
                            number comb_tilde_04_ffGain;
                            number comb_tilde_04_fbGain;
                            number dspexpr_34_in1;
                            number dspexpr_34_in2;
                            number dspexpr_35_in1;
                            number dspexpr_35_in2;
                            number comb_tilde_05_x;
                            number comb_tilde_05_delayTime;
                            number comb_tilde_05_gain;
                            number comb_tilde_05_ffGain;
                            number comb_tilde_05_fbGain;
                            number dspexpr_36_in1;
                            number dspexpr_36_in2;
                            number dspexpr_37_in1;
                            number dspexpr_37_in2;
                            number comb_tilde_06_x;
                            number comb_tilde_06_delayTime;
                            number comb_tilde_06_gain;
                            number comb_tilde_06_ffGain;
                            number comb_tilde_06_fbGain;
                            number dspexpr_38_in1;
                            number dspexpr_38_in2;
                            number comb_tilde_07_x;
                            number comb_tilde_07_delayTime;
                            number comb_tilde_07_gain;
                            number comb_tilde_07_ffGain;
                            number comb_tilde_07_fbGain;
                            number dspexpr_39_in1;
                            number dspexpr_39_in2;
                            number comb_tilde_08_x;
                            number comb_tilde_08_delayTime;
                            number comb_tilde_08_gain;
                            number comb_tilde_08_ffGain;
                            number comb_tilde_08_fbGain;
                            number dspexpr_40_in1;
                            number dspexpr_40_in2;
                            number dspexpr_41_in1;
                            number dspexpr_41_in2;
                            MillisecondTime _currentTime;
                            UInt64 audioProcessSampleCount;
                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                            signal zeroBuffer;
                            signal dummyBuffer;
                            SampleValue * signals[8];
                            bool didAllocateSignals;
                            Index vs;
                            Index maxvs;
                            number sr;
                            number invsr;
                            Float64BufferRef comb_tilde_02_feedForward_buffer;
                            Index comb_tilde_02_feedForward__maxdelay;
                            Int comb_tilde_02_feedForward_sizemode;
                            Index comb_tilde_02_feedForward_wrap;
                            Int comb_tilde_02_feedForward_reader;
                            Int comb_tilde_02_feedForward_writer;
                            Float64BufferRef comb_tilde_02_feedBack_buffer;
                            Index comb_tilde_02_feedBack__maxdelay;
                            Int comb_tilde_02_feedBack_sizemode;
                            Index comb_tilde_02_feedBack_wrap;
                            Int comb_tilde_02_feedBack_reader;
                            Int comb_tilde_02_feedBack_writer;
                            bool comb_tilde_02_setupDone;
                            Float64BufferRef comb_tilde_03_feedForward_buffer;
                            Index comb_tilde_03_feedForward__maxdelay;
                            Int comb_tilde_03_feedForward_sizemode;
                            Index comb_tilde_03_feedForward_wrap;
                            Int comb_tilde_03_feedForward_reader;
                            Int comb_tilde_03_feedForward_writer;
                            Float64BufferRef comb_tilde_03_feedBack_buffer;
                            Index comb_tilde_03_feedBack__maxdelay;
                            Int comb_tilde_03_feedBack_sizemode;
                            Index comb_tilde_03_feedBack_wrap;
                            Int comb_tilde_03_feedBack_reader;
                            Int comb_tilde_03_feedBack_writer;
                            bool comb_tilde_03_setupDone;
                            Float64BufferRef comb_tilde_04_feedForward_buffer;
                            Index comb_tilde_04_feedForward__maxdelay;
                            Int comb_tilde_04_feedForward_sizemode;
                            Index comb_tilde_04_feedForward_wrap;
                            Int comb_tilde_04_feedForward_reader;
                            Int comb_tilde_04_feedForward_writer;
                            Float64BufferRef comb_tilde_04_feedBack_buffer;
                            Index comb_tilde_04_feedBack__maxdelay;
                            Int comb_tilde_04_feedBack_sizemode;
                            Index comb_tilde_04_feedBack_wrap;
                            Int comb_tilde_04_feedBack_reader;
                            Int comb_tilde_04_feedBack_writer;
                            bool comb_tilde_04_setupDone;
                            Float64BufferRef comb_tilde_05_feedForward_buffer;
                            Index comb_tilde_05_feedForward__maxdelay;
                            Int comb_tilde_05_feedForward_sizemode;
                            Index comb_tilde_05_feedForward_wrap;
                            Int comb_tilde_05_feedForward_reader;
                            Int comb_tilde_05_feedForward_writer;
                            Float64BufferRef comb_tilde_05_feedBack_buffer;
                            Index comb_tilde_05_feedBack__maxdelay;
                            Int comb_tilde_05_feedBack_sizemode;
                            Index comb_tilde_05_feedBack_wrap;
                            Int comb_tilde_05_feedBack_reader;
                            Int comb_tilde_05_feedBack_writer;
                            bool comb_tilde_05_setupDone;
                            Float64BufferRef comb_tilde_06_feedForward_buffer;
                            Index comb_tilde_06_feedForward__maxdelay;
                            Int comb_tilde_06_feedForward_sizemode;
                            Index comb_tilde_06_feedForward_wrap;
                            Int comb_tilde_06_feedForward_reader;
                            Int comb_tilde_06_feedForward_writer;
                            Float64BufferRef comb_tilde_06_feedBack_buffer;
                            Index comb_tilde_06_feedBack__maxdelay;
                            Int comb_tilde_06_feedBack_sizemode;
                            Index comb_tilde_06_feedBack_wrap;
                            Int comb_tilde_06_feedBack_reader;
                            Int comb_tilde_06_feedBack_writer;
                            bool comb_tilde_06_setupDone;
                            Float64BufferRef comb_tilde_07_feedForward_buffer;
                            Index comb_tilde_07_feedForward__maxdelay;
                            Int comb_tilde_07_feedForward_sizemode;
                            Index comb_tilde_07_feedForward_wrap;
                            Int comb_tilde_07_feedForward_reader;
                            Int comb_tilde_07_feedForward_writer;
                            Float64BufferRef comb_tilde_07_feedBack_buffer;
                            Index comb_tilde_07_feedBack__maxdelay;
                            Int comb_tilde_07_feedBack_sizemode;
                            Index comb_tilde_07_feedBack_wrap;
                            Int comb_tilde_07_feedBack_reader;
                            Int comb_tilde_07_feedBack_writer;
                            bool comb_tilde_07_setupDone;
                            Float64BufferRef comb_tilde_08_feedForward_buffer;
                            Index comb_tilde_08_feedForward__maxdelay;
                            Int comb_tilde_08_feedForward_sizemode;
                            Index comb_tilde_08_feedForward_wrap;
                            Int comb_tilde_08_feedForward_reader;
                            Int comb_tilde_08_feedForward_writer;
                            Float64BufferRef comb_tilde_08_feedBack_buffer;
                            Index comb_tilde_08_feedBack__maxdelay;
                            Int comb_tilde_08_feedBack_sizemode;
                            Index comb_tilde_08_feedBack_wrap;
                            Int comb_tilde_08_feedBack_reader;
                            Int comb_tilde_08_feedBack_writer;
                            bool comb_tilde_08_setupDone;
                            number stackprotect_count;
                            DataRef comb_tilde_02_feedForward_bufferobj;
                            DataRef comb_tilde_02_feedBack_bufferobj;
                            DataRef comb_tilde_03_feedForward_bufferobj;
                            DataRef comb_tilde_03_feedBack_bufferobj;
                            DataRef comb_tilde_04_feedForward_bufferobj;
                            DataRef comb_tilde_04_feedBack_bufferobj;
                            DataRef comb_tilde_05_feedForward_bufferobj;
                            DataRef comb_tilde_05_feedBack_bufferobj;
                            DataRef comb_tilde_06_feedForward_bufferobj;
                            DataRef comb_tilde_06_feedBack_bufferobj;
                            DataRef comb_tilde_07_feedForward_bufferobj;
                            DataRef comb_tilde_07_feedBack_bufferobj;
                            DataRef comb_tilde_08_feedForward_bufferobj;
                            DataRef comb_tilde_08_feedBack_bufferobj;
                            Index _voiceIndex;
                            Int _noteNumber;
                            Index isMuted;
                            ParameterIndex parameterOffset;
                        
            };
            
            class RNBOSubpatcher_796 : public PatcherInterfaceImpl {
                        
                        friend class RNBOSubpatcher_805;
                        friend class rnbomatic;
                        
                        public:
                        
                        RNBOSubpatcher_796()
                        {
                        }
                        
                        ~RNBOSubpatcher_796()
                        {
                        }
                        
                        virtual RNBOSubpatcher_805* getPatcher() const {
                            return static_cast<RNBOSubpatcher_805 *>(_parentPatcher);
                        }
                        
                        rnbomatic* getTopLevelPatcher() {
                            return this->getPatcher()->getTopLevelPatcher();
                        }
                        
                        void cancelClockEvents()
                        {
                        }
                        
                        inline number linearinterp(number frac, number x, number y) {
                            return x + (y - x) * frac;
                        }
                        
                        inline number cubicinterp(number a, number w, number x, number y, number z) {
                            number a1 = 1. + a;
                            number aa = a * a1;
                            number b = 1. - a;
                            number b1 = 2. - a;
                            number bb = b * b1;
                            number fw = -.1666667 * bb * a;
                            number fx = .5 * bb * a1;
                            number fy = .5 * aa * b1;
                            number fz = -.1666667 * aa * b;
                            return w * fw + x * fx + y * fy + z * fz;
                        }
                        
                        inline number fastcubicinterp(number a, number w, number x, number y, number z) {
                            number a2 = a * a;
                            number f0 = z - y - w + x;
                            number f1 = w - x - f0;
                            number f2 = y - w;
                            number f3 = x;
                            return f0 * a * a2 + f1 * a2 + f2 * a + f3;
                        }
                        
                        inline number splineinterp(number a, number w, number x, number y, number z) {
                            number a2 = a * a;
                            number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
                            number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
                            number f2 = -0.5 * w + 0.5 * y;
                            return f0 * a * a2 + f1 * a2 + f2 * a + x;
                        }
                        
                        inline number spline6interp(number a, number y0, number y1, number y2, number y3, number y4, number y5) {
                            number ym2py2 = y0 + y4;
                            number ym1py1 = y1 + y3;
                            number y2mym2 = y4 - y0;
                            number y1mym1 = y3 - y1;
                            number sixthym1py1 = (number)1 / (number)6.0 * ym1py1;
                            number c0 = (number)1 / (number)120.0 * ym2py2 + (number)13 / (number)60.0 * ym1py1 + (number)11 / (number)20.0 * y2;
                            number c1 = (number)1 / (number)24.0 * y2mym2 + (number)5 / (number)12.0 * y1mym1;
                            number c2 = (number)1 / (number)12.0 * ym2py2 + sixthym1py1 - (number)1 / (number)2.0 * y2;
                            number c3 = (number)1 / (number)12.0 * y2mym2 - (number)1 / (number)6.0 * y1mym1;
                            number c4 = (number)1 / (number)24.0 * ym2py2 - sixthym1py1 + (number)1 / (number)4.0 * y2;
                            number c5 = (number)1 / (number)120.0 * (y5 - y0) + (number)1 / (number)24.0 * (y1 - y4) + (number)1 / (number)12.0 * (y3 - y2);
                            return ((((c5 * a + c4) * a + c3) * a + c2) * a + c1) * a + c0;
                        }
                        
                        inline number cosT8(number r) {
                            number t84 = 56.0;
                            number t83 = 1680.0;
                            number t82 = 20160.0;
                            number t81 = 2.4801587302e-05;
                            number t73 = 42.0;
                            number t72 = 840.0;
                            number t71 = 1.9841269841e-04;
                        
                            if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
                                number rr = r * r;
                                return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
                            } else if (r > 0.0) {
                                r -= 1.57079632679489661923132169163975144;
                                number rr = r * r;
                                return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                            } else {
                                r += 1.57079632679489661923132169163975144;
                                number rr = r * r;
                                return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                            }
                        }
                        
                        inline number cosineinterp(number frac, number x, number y) {
                            number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
                            return x * (1.0 - a2) + y * a2;
                        }
                        
                        number mstosamps(MillisecondTime ms) {
                            return ms * this->sr * 0.001;
                        }
                        
                        number samplerate() const {
                            return this->sr;
                        }
                        
                        Index vectorsize() const {
                            return this->vs;
                        }
                        
                        number maximum(number x, number y) {
                            return (x < y ? y : x);
                        }
                        
                        Index voice() {
                            return this->_voiceIndex;
                        }
                        
                        number random(number low, number high) {
                            number range = high - low;
                            return globalrandom() * range + low;
                        }
                        
                        Index getNumMidiInputPorts() const {
                            return 0;
                        }
                        
                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                        
                        Index getNumMidiOutputPorts() const {
                            return 0;
                        }
                        
                        void process(
                            const SampleValue * const* inputs,
                            Index numInputs,
                            SampleValue * const* outputs,
                            Index numOutputs,
                            Index n
                        ) {
                            this->vs = n;
                            this->updateTime(this->getEngine()->getCurrentTime());
                            SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                            SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                            SampleValue * out3 = (numOutputs >= 3 && outputs[2] ? outputs[2] : this->dummyBuffer);
                            SampleValue * out4 = (numOutputs >= 4 && outputs[3] ? outputs[3] : this->dummyBuffer);
                            const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                            const SampleValue * in3 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                            const SampleValue * in4 = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
                            const SampleValue * in5 = (numInputs >= 4 && inputs[3] ? inputs[3] : this->zeroBuffer);
                            const SampleValue * in6 = (numInputs >= 5 && inputs[4] ? inputs[4] : this->zeroBuffer);
                            this->noise_tilde_04_perform(this->signals[0], n);
                        
                            this->lores_02_perform(
                                this->lores_02_cutoff,
                                this->lores_02_resonance,
                                this->signals[0],
                                this->signals[1],
                                n
                            );
                        
                            this->dspexpr_46_perform(this->signals[1], in5, this->signals[0], n);
                            this->dspexpr_48_perform(in6, this->dspexpr_48_in2, this->signals[1], n);
                            this->mstosamps_tilde_02_perform(this->signals[1], this->signals[2], n);
                            this->dspexpr_47_perform(in6, this->dspexpr_47_in2, this->signals[1], n);
                            this->dspexpr_44_perform(in6, this->dspexpr_44_in2, this->signals[3], n);
                            this->dspexpr_43_perform(this->signals[3], this->signals[0], this->signals[4], n);
                            this->dspexpr_42_perform(in6, this->dspexpr_42_in2, this->signals[0], n);
                            this->feedbackreader_04_perform(this->signals[3], n);
                            this->signaladder_15_perform(in1, this->signals[3], this->signals[3], n);
                            this->allpass_tilde_11_perform(this->signals[3], this->signals[0], this->allpass_tilde_11_gain, out1, n);
                        
                            this->comb_tilde_09_perform(
                                out1,
                                this->signals[4],
                                this->comb_tilde_09_gain,
                                this->comb_tilde_09_ffGain,
                                this->comb_tilde_09_fbGain,
                                this->signals[0],
                                n
                            );
                        
                            this->onepole_tilde_07_perform(this->signals[0], in3, this->signals[4], n);
                            this->dspexpr_45_perform(this->signals[4], in4, this->signals[5], n);
                        
                            this->allpass_tilde_12_perform(
                                this->signals[5],
                                this->signals[1],
                                this->allpass_tilde_12_gain,
                                this->signals[4],
                                n
                            );
                        
                            this->delaytilde_08_perform(this->signals[2], this->signals[4], out4, n);
                            this->feedbackwriter_04_perform(out4, n);
                            this->signalforwarder_20_perform(this->signals[4], out3, n);
                            this->signalforwarder_19_perform(this->signals[0], out2, n);
                            this->stackprotect_perform(n);
                            this->audioProcessSampleCount += this->vs;
                        }
                        
                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                Index i;
                        
                                for (i = 0; i < 6; i++) {
                                    this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                                }
                        
                                this->feedbacktilde_04_feedbackbuffer = resizeSignal(this->feedbacktilde_04_feedbackbuffer, this->maxvs, maxBlockSize);
                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                this->didAllocateSignals = true;
                            }
                        
                            const bool sampleRateChanged = sampleRate != this->sr;
                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                        
                            if (sampleRateChanged || maxvsChanged) {
                                this->vs = maxBlockSize;
                                this->maxvs = maxBlockSize;
                                this->sr = sampleRate;
                                this->invsr = 1 / sampleRate;
                            }
                        
                            this->lores_02_dspsetup(forceDSPSetup);
                            this->allpass_tilde_11_dspsetup(forceDSPSetup);
                            this->comb_tilde_09_dspsetup(forceDSPSetup);
                            this->onepole_tilde_07_dspsetup(forceDSPSetup);
                            this->allpass_tilde_12_dspsetup(forceDSPSetup);
                            this->delaytilde_08_dspsetup(forceDSPSetup);
                        
                            if (sampleRateChanged)
                                this->onSampleRateChanged(sampleRate);
                        }
                        
                        void setProbingTarget(MessageTag id) {
                            switch (id) {
                            default:
                                {
                                this->setProbingIndex(-1);
                                break;
                                }
                            }
                        }
                        
                        void setProbingIndex(ProbingIndex ) {}
                        
                        Index getProbingChannels(MessageTag outletId) const {
                            RNBO_UNUSED(outletId);
                            return 0;
                        }
                        
                        Index getIsMuted()  {
                            return this->isMuted;
                        }
                        
                        void setIsMuted(Index v)  {
                            this->isMuted = v;
                        }
                        
                        void onSampleRateChanged(double ) {}
                        
                        Index getPatcherSerial() const {
                            return 0;
                        }
                        
                        void getState(PatcherStateInterface& ) {}
                        
                        void setState() {}
                        
                        void getPreset(PatcherStateInterface& ) {}
                        
                        void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                        
                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValue(index, value, time);
                        }
                        
                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                            this->setParameterValue(index, this->getParameterValue(index), time);
                        }
                        
                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValueNormalized(index, value, time);
                        }
                        
                        ParameterValue getParameterValue(ParameterIndex index)  {
                            switch (index) {
                            default:
                                {
                                return 0;
                                }
                            }
                        }
                        
                        ParameterIndex getNumSignalInParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumSignalOutParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumParameters() const {
                            return 0;
                        }
                        
                        ConstCharPointer getParameterName(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        ConstCharPointer getParameterId(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                        
                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                        }
                        
                        void setParameterOffset(ParameterIndex offset) {
                            this->parameterOffset = offset;
                        }
                        
                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                            if (steps == 1) {
                                if (normalizedValue > 0) {
                                    normalizedValue = 1.;
                                }
                            } else {
                                ParameterValue oneStep = (number)1. / (steps - 1);
                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                normalizedValue = numberOfSteps * oneStep;
                            }
                        
                            return normalizedValue;
                        }
                        
                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        void scheduleParamInit(ParameterIndex index, Index order) {
                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                        }
                        
                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                        
                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                        
                        void processOutletEvent(
                            EngineLink* sender,
                            OutletIndex index,
                            ParameterValue value,
                            MillisecondTime time
                        ) {
                            this->updateTime(time);
                            this->processOutletAtCurrentTime(sender, index, value);
                        }
                        
                        void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
                        
                        void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
                        
                        void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
                        
                        MessageTagInfo resolveTag(MessageTag tag) const {
                            switch (tag) {
                        
                            }
                        
                            return nullptr;
                        }
                        
                        DataRef* getDataRef(DataRefIndex index)  {
                            switch (index) {
                            case 6:
                                {
                                return addressOf(this->allpass_tilde_11_feedForward_bufferobj);
                                break;
                                }
                            case 7:
                                {
                                return addressOf(this->allpass_tilde_11_feedBack_bufferobj);
                                break;
                                }
                            case 8:
                                {
                                return addressOf(this->comb_tilde_09_feedForward_bufferobj);
                                break;
                                }
                            case 9:
                                {
                                return addressOf(this->comb_tilde_09_feedBack_bufferobj);
                                break;
                                }
                            case 10:
                                {
                                return addressOf(this->allpass_tilde_12_feedForward_bufferobj);
                                break;
                                }
                            case 11:
                                {
                                return addressOf(this->allpass_tilde_12_feedBack_bufferobj);
                                break;
                                }
                            case 12:
                                {
                                return addressOf(this->delaytilde_08_del_bufferobj);
                                break;
                                }
                            default:
                                {
                                return nullptr;
                                }
                            }
                        }
                        
                        DataRefIndex getNumDataRefs() const {
                            return 7;
                        }
                        
                        void fillDataRef(DataRefIndex , DataRef& ) {}
                        
                        void zeroDataRef(DataRef& ref) {
                            ref->setZero();
                        }
                        
                        void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                            this->updateTime(time);
                        
                            if (index == 6) {
                                this->allpass_tilde_11_feedForward_buffer = new Float64Buffer(this->allpass_tilde_11_feedForward_bufferobj);
                            }
                        
                            if (index == 7) {
                                this->allpass_tilde_11_feedBack_buffer = new Float64Buffer(this->allpass_tilde_11_feedBack_bufferobj);
                            }
                        
                            if (index == 8) {
                                this->comb_tilde_09_feedForward_buffer = new Float64Buffer(this->comb_tilde_09_feedForward_bufferobj);
                            }
                        
                            if (index == 9) {
                                this->comb_tilde_09_feedBack_buffer = new Float64Buffer(this->comb_tilde_09_feedBack_bufferobj);
                            }
                        
                            if (index == 10) {
                                this->allpass_tilde_12_feedForward_buffer = new Float64Buffer(this->allpass_tilde_12_feedForward_bufferobj);
                            }
                        
                            if (index == 11) {
                                this->allpass_tilde_12_feedBack_buffer = new Float64Buffer(this->allpass_tilde_12_feedBack_bufferobj);
                            }
                        
                            if (index == 12) {
                                this->delaytilde_08_del_buffer = new Float64Buffer(this->delaytilde_08_del_bufferobj);
                            }
                        }
                        
                        void initialize() {
                            this->allpass_tilde_11_feedForward_bufferobj = initDataRef("allpass_tilde_11_feedForward_bufferobj", true, nullptr, "buffer~");
                            this->allpass_tilde_11_feedBack_bufferobj = initDataRef("allpass_tilde_11_feedBack_bufferobj", true, nullptr, "buffer~");
                            this->comb_tilde_09_feedForward_bufferobj = initDataRef("comb_tilde_09_feedForward_bufferobj", true, nullptr, "buffer~");
                            this->comb_tilde_09_feedBack_bufferobj = initDataRef("comb_tilde_09_feedBack_bufferobj", true, nullptr, "buffer~");
                            this->allpass_tilde_12_feedForward_bufferobj = initDataRef("allpass_tilde_12_feedForward_bufferobj", true, nullptr, "buffer~");
                            this->allpass_tilde_12_feedBack_bufferobj = initDataRef("allpass_tilde_12_feedBack_bufferobj", true, nullptr, "buffer~");
                            this->delaytilde_08_del_bufferobj = initDataRef("delaytilde_08_del_bufferobj", true, nullptr, "buffer~");
                            this->assign_defaults();
                            this->setState();
                            this->allpass_tilde_11_feedForward_bufferobj->setIndex(6);
                            this->allpass_tilde_11_feedForward_buffer = new Float64Buffer(this->allpass_tilde_11_feedForward_bufferobj);
                            this->allpass_tilde_11_feedBack_bufferobj->setIndex(7);
                            this->allpass_tilde_11_feedBack_buffer = new Float64Buffer(this->allpass_tilde_11_feedBack_bufferobj);
                            this->comb_tilde_09_feedForward_bufferobj->setIndex(8);
                            this->comb_tilde_09_feedForward_buffer = new Float64Buffer(this->comb_tilde_09_feedForward_bufferobj);
                            this->comb_tilde_09_feedBack_bufferobj->setIndex(9);
                            this->comb_tilde_09_feedBack_buffer = new Float64Buffer(this->comb_tilde_09_feedBack_bufferobj);
                            this->allpass_tilde_12_feedForward_bufferobj->setIndex(10);
                            this->allpass_tilde_12_feedForward_buffer = new Float64Buffer(this->allpass_tilde_12_feedForward_bufferobj);
                            this->allpass_tilde_12_feedBack_bufferobj->setIndex(11);
                            this->allpass_tilde_12_feedBack_buffer = new Float64Buffer(this->allpass_tilde_12_feedBack_bufferobj);
                            this->delaytilde_08_del_bufferobj->setIndex(12);
                            this->delaytilde_08_del_buffer = new Float64Buffer(this->delaytilde_08_del_bufferobj);
                        }
                        
                        protected:
                        
                        number msToSamps(MillisecondTime ms, number sampleRate) {
                            return ms * sampleRate * 0.001;
                        }
                        
                        MillisecondTime sampsToMs(SampleIndex samps) {
                            return samps * (this->invsr * 1000);
                        }
                        
                        Index getMaxBlockSize() const {
                            return this->maxvs;
                        }
                        
                        number getSampleRate() const {
                            return this->sr;
                        }
                        
                        bool hasFixedVectorSize() const {
                            return false;
                        }
                        
                        Index getNumInputChannels() const {
                            return 5;
                        }
                        
                        Index getNumOutputChannels() const {
                            return 4;
                        }
                        
                        void initializeObjects() {
                            this->allpass_tilde_11_feedForward_init();
                            this->allpass_tilde_11_feedBack_init();
                            this->allpass_tilde_11_init();
                            this->comb_tilde_09_feedForward_init();
                            this->comb_tilde_09_feedBack_init();
                            this->comb_tilde_09_init();
                            this->allpass_tilde_12_feedForward_init();
                            this->allpass_tilde_12_feedBack_init();
                            this->allpass_tilde_12_init();
                            this->noise_tilde_04_init();
                            this->delaytilde_08_del_init();
                        }
                        
                        void sendOutlet(OutletIndex index, ParameterValue value) {
                            this->getEngine()->sendOutlet(this, index, value);
                        }
                        
                        void startup() {}
                        
                        void allocateDataRefs() {
                            this->allpass_tilde_11_feedForward_buffer = this->allpass_tilde_11_feedForward_buffer->allocateIfNeeded();
                        
                            if (this->allpass_tilde_11_feedForward_bufferobj->hasRequestedSize()) {
                                if (this->allpass_tilde_11_feedForward_bufferobj->wantsFill())
                                    this->zeroDataRef(this->allpass_tilde_11_feedForward_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(6);
                            }
                        
                            this->allpass_tilde_11_feedBack_buffer = this->allpass_tilde_11_feedBack_buffer->allocateIfNeeded();
                        
                            if (this->allpass_tilde_11_feedBack_bufferobj->hasRequestedSize()) {
                                if (this->allpass_tilde_11_feedBack_bufferobj->wantsFill())
                                    this->zeroDataRef(this->allpass_tilde_11_feedBack_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(7);
                            }
                        
                            this->comb_tilde_09_feedForward_buffer = this->comb_tilde_09_feedForward_buffer->allocateIfNeeded();
                        
                            if (this->comb_tilde_09_feedForward_bufferobj->hasRequestedSize()) {
                                if (this->comb_tilde_09_feedForward_bufferobj->wantsFill())
                                    this->zeroDataRef(this->comb_tilde_09_feedForward_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(8);
                            }
                        
                            this->comb_tilde_09_feedBack_buffer = this->comb_tilde_09_feedBack_buffer->allocateIfNeeded();
                        
                            if (this->comb_tilde_09_feedBack_bufferobj->hasRequestedSize()) {
                                if (this->comb_tilde_09_feedBack_bufferobj->wantsFill())
                                    this->zeroDataRef(this->comb_tilde_09_feedBack_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(9);
                            }
                        
                            this->allpass_tilde_12_feedForward_buffer = this->allpass_tilde_12_feedForward_buffer->allocateIfNeeded();
                        
                            if (this->allpass_tilde_12_feedForward_bufferobj->hasRequestedSize()) {
                                if (this->allpass_tilde_12_feedForward_bufferobj->wantsFill())
                                    this->zeroDataRef(this->allpass_tilde_12_feedForward_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(10);
                            }
                        
                            this->allpass_tilde_12_feedBack_buffer = this->allpass_tilde_12_feedBack_buffer->allocateIfNeeded();
                        
                            if (this->allpass_tilde_12_feedBack_bufferobj->hasRequestedSize()) {
                                if (this->allpass_tilde_12_feedBack_bufferobj->wantsFill())
                                    this->zeroDataRef(this->allpass_tilde_12_feedBack_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(11);
                            }
                        
                            this->delaytilde_08_del_buffer = this->delaytilde_08_del_buffer->allocateIfNeeded();
                        
                            if (this->delaytilde_08_del_bufferobj->hasRequestedSize()) {
                                if (this->delaytilde_08_del_bufferobj->wantsFill())
                                    this->zeroDataRef(this->delaytilde_08_del_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(12);
                            }
                        }
                        
                        void noise_tilde_04_perform(SampleValue * out1, Index n) {
                            auto __noise_tilde_04_state = this->noise_tilde_04_state;
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = xoshiro_next(__noise_tilde_04_state);
                            }
                        }
                        
                        void lores_02_perform(
                            number cutoff,
                            number resonance,
                            const SampleValue * input,
                            SampleValue * out,
                            Index n
                        ) {
                            RNBO_UNUSED(resonance);
                            RNBO_UNUSED(cutoff);
                            auto __lores_02_y_2 = this->lores_02_y_2;
                            auto __lores_02_y_1 = this->lores_02_y_1;
                            auto __lores_02_x_0 = this->lores_02_x_0;
                            auto __lores_02_b_0 = this->lores_02_b_0;
                            auto __lores_02_a_1 = this->lores_02_a_1;
                            auto __lores_02_a_2 = this->lores_02_a_2;
                            auto __lores_02_last_freq_calc = this->lores_02_last_freq_calc;
                            auto __lores_02_last_res_calc = this->lores_02_last_res_calc;
                            auto __lores_02_last_frequency = this->lores_02_last_frequency;
                            auto __lores_02_last_resonance = this->lores_02_last_resonance;
                        
                            for (Index i = 0; i < n; i++) {
                                if (0.995 != __lores_02_last_resonance || 0 != __lores_02_last_frequency) {
                                    __lores_02_last_res_calc = rnbo_exp(0.995 * 0.125) * 0.882497;
                                    __lores_02_last_freq_calc = rnbo_cos(2.0 * pi01() / this->sr * 0);
                                    __lores_02_last_resonance = 0.995;
                                    __lores_02_last_frequency = 0;
                                }
                        
                                number res_temp = __lores_02_last_res_calc;
                                number freq_temp = __lores_02_last_freq_calc;
                                __lores_02_a_2 = res_temp * res_temp;
                                __lores_02_a_1 = -2.0 * res_temp * freq_temp;
                                __lores_02_b_0 = 1.0 + __lores_02_a_1 + __lores_02_a_2;
                                __lores_02_x_0 = input[(Index)i];
                                number y_0 = __lores_02_x_0 * __lores_02_b_0 - __lores_02_y_1 * __lores_02_a_1 - __lores_02_y_2 * __lores_02_a_2;
                                __lores_02_y_2 = __lores_02_y_1;
                                __lores_02_y_1 = y_0;
                                out[(Index)i] = y_0;
                            }
                        
                            this->lores_02_last_resonance = __lores_02_last_resonance;
                            this->lores_02_last_frequency = __lores_02_last_frequency;
                            this->lores_02_last_res_calc = __lores_02_last_res_calc;
                            this->lores_02_last_freq_calc = __lores_02_last_freq_calc;
                            this->lores_02_a_2 = __lores_02_a_2;
                            this->lores_02_a_1 = __lores_02_a_1;
                            this->lores_02_b_0 = __lores_02_b_0;
                            this->lores_02_x_0 = __lores_02_x_0;
                            this->lores_02_y_1 = __lores_02_y_1;
                            this->lores_02_y_2 = __lores_02_y_2;
                        }
                        
                        void dspexpr_46_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                            }
                        }
                        
                        void dspexpr_48_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                            RNBO_UNUSED(in2);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * 106.28;//#map:_###_obj_###_:1
                            }
                        }
                        
                        void mstosamps_tilde_02_perform(const Sample * ms, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = ms[(Index)i] * this->sr * 0.001;
                            }
                        }
                        
                        void dspexpr_47_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                            RNBO_UNUSED(in2);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * 89.24;//#map:_###_obj_###_:1
                            }
                        }
                        
                        void dspexpr_44_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                            RNBO_UNUSED(in2);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * 141.7;//#map:_###_obj_###_:1
                            }
                        }
                        
                        void dspexpr_43_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] + in2[(Index)i];//#map:_###_obj_###_:1
                            }
                        }
                        
                        void dspexpr_42_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                            RNBO_UNUSED(in2);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * 30.51;//#map:_###_obj_###_:1
                            }
                        }
                        
                        void feedbackreader_04_perform(SampleValue * output, Index n) {
                            auto& buffer = this->feedbacktilde_04_feedbackbuffer;
                        
                            for (Index i = 0; i < n; i++) {
                                output[(Index)i] = buffer[(Index)i];
                            }
                        }
                        
                        void signaladder_15_perform(
                            const SampleValue * in1,
                            const SampleValue * in2,
                            SampleValue * out,
                            Index n
                        ) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out[(Index)i] = in1[(Index)i] + in2[(Index)i];
                            }
                        }
                        
                        void allpass_tilde_11_perform(
                            const Sample * x,
                            const Sample * delayTime,
                            number gain,
                            SampleValue * out1,
                            Index n
                        ) {
                            RNBO_UNUSED(gain);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                number __gain = -0.7;
                                auto delayTimeinSamps = this->mstosamps(delayTime[(Index)i]);
                                delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                                __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                                number ff = this->allpass_tilde_11_feedForward_read(delayTimeinSamps, 0);
                                number fb = this->allpass_tilde_11_feedBack_read(delayTimeinSamps, 0);
                                number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                                fixdenorm(ov);
                                this->allpass_tilde_11_feedForward_write(x[(Index)i]);
                                this->allpass_tilde_11_feedBack_write(ov);
                                this->allpass_tilde_11_feedForward_step();
                                this->allpass_tilde_11_feedBack_step();
                                out1[(Index)i] = ov;
                            }
                        }
                        
                        void comb_tilde_09_perform(
                            const Sample * x,
                            const Sample * delayTime,
                            number gain,
                            number ffGain,
                            number fbGain,
                            SampleValue * out1,
                            Index n
                        ) {
                            RNBO_UNUSED(fbGain);
                            RNBO_UNUSED(ffGain);
                            RNBO_UNUSED(gain);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                number __fbGain = 0;
                                number __ffGain = 1;
                                number __gain = 0;
                                number __delayTime = delayTime[(Index)i];
                                __delayTime = this->mstosamps(__delayTime);
                                __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                                __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                                __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                                __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                                number tmp = x[(Index)i] * __gain;
                                number ff = this->comb_tilde_09_feedForward_read(__delayTime, 0);
                                number fb = this->comb_tilde_09_feedBack_read(__delayTime, 0);
                                number ov = tmp + ff * __ffGain + fb * __fbGain;
                                fixdenorm(ov);
                                this->comb_tilde_09_feedForward_write(x[(Index)i]);
                                this->comb_tilde_09_feedBack_write(ov);
                                this->comb_tilde_09_feedForward_step();
                                this->comb_tilde_09_feedBack_step();
                                out1[(Index)i] = ov;
                            }
                        }
                        
                        void onepole_tilde_07_perform(const Sample * x, const Sample * freqInHz, SampleValue * out1, Index n) {
                            auto __onepole_tilde_07_lastY = this->onepole_tilde_07_lastY;
                            auto __onepole_tilde_07_b1 = this->onepole_tilde_07_b1;
                            auto __onepole_tilde_07_a0 = this->onepole_tilde_07_a0;
                            auto __onepole_tilde_07_needsUpdate = this->onepole_tilde_07_needsUpdate;
                            auto __onepole_tilde_07_freq = this->onepole_tilde_07_freq;
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                if (__onepole_tilde_07_freq != freqInHz[(Index)i] || (bool)(__onepole_tilde_07_needsUpdate)) {
                                    __onepole_tilde_07_freq = freqInHz[(Index)i];
                                    __onepole_tilde_07_a0 = 1 - rnbo_exp(-6.28318530717958647692 * freqInHz[(Index)i] / this->sr);
                                    __onepole_tilde_07_a0 = (__onepole_tilde_07_a0 > 0.99999 ? 0.99999 : (__onepole_tilde_07_a0 < 0.00001 ? 0.00001 : __onepole_tilde_07_a0));
                                    __onepole_tilde_07_b1 = 1 - __onepole_tilde_07_a0;
                                    __onepole_tilde_07_needsUpdate = false;
                                }
                        
                                __onepole_tilde_07_lastY = __onepole_tilde_07_a0 * x[(Index)i] + __onepole_tilde_07_b1 * __onepole_tilde_07_lastY;
                                out1[(Index)i] = __onepole_tilde_07_lastY;
                            }
                        
                            this->onepole_tilde_07_freq = __onepole_tilde_07_freq;
                            this->onepole_tilde_07_needsUpdate = __onepole_tilde_07_needsUpdate;
                            this->onepole_tilde_07_a0 = __onepole_tilde_07_a0;
                            this->onepole_tilde_07_b1 = __onepole_tilde_07_b1;
                            this->onepole_tilde_07_lastY = __onepole_tilde_07_lastY;
                        }
                        
                        void dspexpr_45_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                            }
                        }
                        
                        void allpass_tilde_12_perform(
                            const Sample * x,
                            const Sample * delayTime,
                            number gain,
                            SampleValue * out1,
                            Index n
                        ) {
                            RNBO_UNUSED(gain);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                number __gain = 0.5;
                                auto delayTimeinSamps = this->mstosamps(delayTime[(Index)i]);
                                delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                                __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                                number ff = this->allpass_tilde_12_feedForward_read(delayTimeinSamps, 0);
                                number fb = this->allpass_tilde_12_feedBack_read(delayTimeinSamps, 0);
                                number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                                fixdenorm(ov);
                                this->allpass_tilde_12_feedForward_write(x[(Index)i]);
                                this->allpass_tilde_12_feedBack_write(ov);
                                this->allpass_tilde_12_feedForward_step();
                                this->allpass_tilde_12_feedBack_step();
                                out1[(Index)i] = ov;
                            }
                        }
                        
                        void delaytilde_08_perform(
                            const Sample * delay,
                            const SampleValue * input,
                            SampleValue * output,
                            Index n
                        ) {
                            auto __delaytilde_08_crossfadeDelay = this->delaytilde_08_crossfadeDelay;
                            auto __delaytilde_08_rampInSamples = this->delaytilde_08_rampInSamples;
                            auto __delaytilde_08_ramp = this->delaytilde_08_ramp;
                            auto __delaytilde_08_lastDelay = this->delaytilde_08_lastDelay;
                        
                            for (Index i = 0; i < n; i++) {
                                if (__delaytilde_08_lastDelay == -1) {
                                    __delaytilde_08_lastDelay = delay[(Index)i];
                                }
                        
                                if (__delaytilde_08_ramp > 0) {
                                    number factor = __delaytilde_08_ramp / __delaytilde_08_rampInSamples;
                                    output[(Index)i] = this->delaytilde_08_del_read(__delaytilde_08_crossfadeDelay, 0) * factor + this->delaytilde_08_del_read(__delaytilde_08_lastDelay, 0) * (1. - factor);
                                    __delaytilde_08_ramp--;
                                } else {
                                    number effectiveDelay = delay[(Index)i];
                        
                                    if (effectiveDelay != __delaytilde_08_lastDelay) {
                                        __delaytilde_08_ramp = __delaytilde_08_rampInSamples;
                                        __delaytilde_08_crossfadeDelay = __delaytilde_08_lastDelay;
                                        __delaytilde_08_lastDelay = effectiveDelay;
                                        output[(Index)i] = this->delaytilde_08_del_read(__delaytilde_08_crossfadeDelay, 0);
                                        __delaytilde_08_ramp--;
                                    } else {
                                        output[(Index)i] = this->delaytilde_08_del_read(effectiveDelay, 0);
                                    }
                                }
                        
                                this->delaytilde_08_del_write(input[(Index)i]);
                                this->delaytilde_08_del_step();
                            }
                        
                            this->delaytilde_08_lastDelay = __delaytilde_08_lastDelay;
                            this->delaytilde_08_ramp = __delaytilde_08_ramp;
                            this->delaytilde_08_crossfadeDelay = __delaytilde_08_crossfadeDelay;
                        }
                        
                        void feedbackwriter_04_perform(const SampleValue * input, Index n) {
                            auto& buffer = this->feedbacktilde_04_feedbackbuffer;
                        
                            for (Index i = 0; i < n; i++) {
                                buffer[(Index)i] = input[(Index)i];
                            }
                        }
                        
                        void signalforwarder_20_perform(const SampleValue * input, SampleValue * output, Index n) {
                            for (Index i = 0; i < n; i++) {
                                output[(Index)i] = input[(Index)i];
                            }
                        }
                        
                        void signalforwarder_19_perform(const SampleValue * input, SampleValue * output, Index n) {
                            for (Index i = 0; i < n; i++) {
                                output[(Index)i] = input[(Index)i];
                            }
                        }
                        
                        void stackprotect_perform(Index n) {
                            RNBO_UNUSED(n);
                            auto __stackprotect_count = this->stackprotect_count;
                            __stackprotect_count = 0;
                            this->stackprotect_count = __stackprotect_count;
                        }
                        
                        void lores_02_resonance_setter(number v) {
                            if (v < 0.0) {
                                v = 0.0;
                            } else if (v >= 1.0) {
                                v = 1.0 - 1E-20;
                            }
                        
                            this->lores_02_resonance = v;
                        }
                        
                        void allpass_tilde_11_feedForward_step() {
                            this->allpass_tilde_11_feedForward_reader++;
                        
                            if (this->allpass_tilde_11_feedForward_reader >= (int)(this->allpass_tilde_11_feedForward_buffer->getSize()))
                                this->allpass_tilde_11_feedForward_reader = 0;
                        }
                        
                        number allpass_tilde_11_feedForward_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->allpass_tilde_11_feedForward_buffer->getSize()) + this->allpass_tilde_11_feedForward_reader - ((size > this->allpass_tilde_11_feedForward__maxdelay ? this->allpass_tilde_11_feedForward__maxdelay : (size < (this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer) ? this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->allpass_tilde_11_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                                ), this->allpass_tilde_11_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->allpass_tilde_11_feedForward_buffer->getSize()) + this->allpass_tilde_11_feedForward_reader - ((size > this->allpass_tilde_11_feedForward__maxdelay ? this->allpass_tilde_11_feedForward__maxdelay : (size < (1 + this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer) ? 1 + this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->allpass_tilde_11_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                                ), this->allpass_tilde_11_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                                ), this->allpass_tilde_11_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                                ), this->allpass_tilde_11_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->allpass_tilde_11_feedForward_buffer->getSize()) + this->allpass_tilde_11_feedForward_reader - ((size > this->allpass_tilde_11_feedForward__maxdelay ? this->allpass_tilde_11_feedForward__maxdelay : (size < (1 + this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer) ? 1 + this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->allpass_tilde_11_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                                ), this->allpass_tilde_11_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                                ), this->allpass_tilde_11_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                                ), this->allpass_tilde_11_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->allpass_tilde_11_feedForward_buffer->getSize()) + this->allpass_tilde_11_feedForward_reader - ((size > this->allpass_tilde_11_feedForward__maxdelay ? this->allpass_tilde_11_feedForward__maxdelay : (size < (1 + this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer) ? 1 + this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->allpass_tilde_11_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                                ), this->allpass_tilde_11_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                                ), this->allpass_tilde_11_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                                ), this->allpass_tilde_11_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->allpass_tilde_11_feedForward_buffer->getSize()) + this->allpass_tilde_11_feedForward_reader - ((size > this->allpass_tilde_11_feedForward__maxdelay ? this->allpass_tilde_11_feedForward__maxdelay : (size < (1 + this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer) ? 1 + this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->allpass_tilde_11_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                                ), this->allpass_tilde_11_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                                ), this->allpass_tilde_11_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                                ), this->allpass_tilde_11_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                                ), this->allpass_tilde_11_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                                ), this->allpass_tilde_11_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->allpass_tilde_11_feedForward_buffer->getSize()) + this->allpass_tilde_11_feedForward_reader - ((size > this->allpass_tilde_11_feedForward__maxdelay ? this->allpass_tilde_11_feedForward__maxdelay : (size < (this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer) ? this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->allpass_tilde_11_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                                ), this->allpass_tilde_11_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                                ));
                            }
                        
                            number r = (int)(this->allpass_tilde_11_feedForward_buffer->getSize()) + this->allpass_tilde_11_feedForward_reader - ((size > this->allpass_tilde_11_feedForward__maxdelay ? this->allpass_tilde_11_feedForward__maxdelay : (size < (this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer) ? this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->allpass_tilde_11_feedForward_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                            );
                        }
                        
                        void allpass_tilde_11_feedForward_write(number v) {
                            this->allpass_tilde_11_feedForward_writer = this->allpass_tilde_11_feedForward_reader;
                            this->allpass_tilde_11_feedForward_buffer[(Index)this->allpass_tilde_11_feedForward_writer] = v;
                        }
                        
                        number allpass_tilde_11_feedForward_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->allpass_tilde_11_feedForward__maxdelay : size);
                            number val = this->allpass_tilde_11_feedForward_read(effectiveSize, 0);
                            this->allpass_tilde_11_feedForward_write(v);
                            this->allpass_tilde_11_feedForward_step();
                            return val;
                        }
                        
                        array<Index, 2> allpass_tilde_11_feedForward_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->allpass_tilde_11_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->allpass_tilde_11_feedForward_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void allpass_tilde_11_feedForward_init() {
                            auto result = this->allpass_tilde_11_feedForward_calcSizeInSamples();
                            this->allpass_tilde_11_feedForward__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_11_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                            this->allpass_tilde_11_feedForward_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void allpass_tilde_11_feedForward_clear() {
                            this->allpass_tilde_11_feedForward_buffer->setZero();
                        }
                        
                        void allpass_tilde_11_feedForward_reset() {
                            auto result = this->allpass_tilde_11_feedForward_calcSizeInSamples();
                            this->allpass_tilde_11_feedForward__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_11_feedForward_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->allpass_tilde_11_feedForward_buffer);
                            this->allpass_tilde_11_feedForward_wrap = this->allpass_tilde_11_feedForward_buffer->getSize() - 1;
                            this->allpass_tilde_11_feedForward_clear();
                        
                            if (this->allpass_tilde_11_feedForward_reader >= this->allpass_tilde_11_feedForward__maxdelay || this->allpass_tilde_11_feedForward_writer >= this->allpass_tilde_11_feedForward__maxdelay) {
                                this->allpass_tilde_11_feedForward_reader = 0;
                                this->allpass_tilde_11_feedForward_writer = 0;
                            }
                        }
                        
                        void allpass_tilde_11_feedForward_dspsetup() {
                            this->allpass_tilde_11_feedForward_reset();
                        }
                        
                        number allpass_tilde_11_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number allpass_tilde_11_feedForward_size() {
                            return this->allpass_tilde_11_feedForward__maxdelay;
                        }
                        
                        void allpass_tilde_11_feedBack_step() {
                            this->allpass_tilde_11_feedBack_reader++;
                        
                            if (this->allpass_tilde_11_feedBack_reader >= (int)(this->allpass_tilde_11_feedBack_buffer->getSize()))
                                this->allpass_tilde_11_feedBack_reader = 0;
                        }
                        
                        number allpass_tilde_11_feedBack_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->allpass_tilde_11_feedBack_buffer->getSize()) + this->allpass_tilde_11_feedBack_reader - ((size > this->allpass_tilde_11_feedBack__maxdelay ? this->allpass_tilde_11_feedBack__maxdelay : (size < (this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer) ? this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->allpass_tilde_11_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                                ), this->allpass_tilde_11_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->allpass_tilde_11_feedBack_buffer->getSize()) + this->allpass_tilde_11_feedBack_reader - ((size > this->allpass_tilde_11_feedBack__maxdelay ? this->allpass_tilde_11_feedBack__maxdelay : (size < (1 + this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer) ? 1 + this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->allpass_tilde_11_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                                ), this->allpass_tilde_11_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                                ), this->allpass_tilde_11_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                                ), this->allpass_tilde_11_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->allpass_tilde_11_feedBack_buffer->getSize()) + this->allpass_tilde_11_feedBack_reader - ((size > this->allpass_tilde_11_feedBack__maxdelay ? this->allpass_tilde_11_feedBack__maxdelay : (size < (1 + this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer) ? 1 + this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->allpass_tilde_11_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                                ), this->allpass_tilde_11_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                                ), this->allpass_tilde_11_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                                ), this->allpass_tilde_11_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->allpass_tilde_11_feedBack_buffer->getSize()) + this->allpass_tilde_11_feedBack_reader - ((size > this->allpass_tilde_11_feedBack__maxdelay ? this->allpass_tilde_11_feedBack__maxdelay : (size < (1 + this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer) ? 1 + this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->allpass_tilde_11_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                                ), this->allpass_tilde_11_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                                ), this->allpass_tilde_11_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                                ), this->allpass_tilde_11_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->allpass_tilde_11_feedBack_buffer->getSize()) + this->allpass_tilde_11_feedBack_reader - ((size > this->allpass_tilde_11_feedBack__maxdelay ? this->allpass_tilde_11_feedBack__maxdelay : (size < (1 + this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer) ? 1 + this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->allpass_tilde_11_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                                ), this->allpass_tilde_11_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                                ), this->allpass_tilde_11_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                                ), this->allpass_tilde_11_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                                ), this->allpass_tilde_11_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                                ), this->allpass_tilde_11_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->allpass_tilde_11_feedBack_buffer->getSize()) + this->allpass_tilde_11_feedBack_reader - ((size > this->allpass_tilde_11_feedBack__maxdelay ? this->allpass_tilde_11_feedBack__maxdelay : (size < (this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer) ? this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->allpass_tilde_11_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                                ), this->allpass_tilde_11_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                                ));
                            }
                        
                            number r = (int)(this->allpass_tilde_11_feedBack_buffer->getSize()) + this->allpass_tilde_11_feedBack_reader - ((size > this->allpass_tilde_11_feedBack__maxdelay ? this->allpass_tilde_11_feedBack__maxdelay : (size < (this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer) ? this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->allpass_tilde_11_feedBack_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                            );
                        }
                        
                        void allpass_tilde_11_feedBack_write(number v) {
                            this->allpass_tilde_11_feedBack_writer = this->allpass_tilde_11_feedBack_reader;
                            this->allpass_tilde_11_feedBack_buffer[(Index)this->allpass_tilde_11_feedBack_writer] = v;
                        }
                        
                        number allpass_tilde_11_feedBack_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->allpass_tilde_11_feedBack__maxdelay : size);
                            number val = this->allpass_tilde_11_feedBack_read(effectiveSize, 0);
                            this->allpass_tilde_11_feedBack_write(v);
                            this->allpass_tilde_11_feedBack_step();
                            return val;
                        }
                        
                        array<Index, 2> allpass_tilde_11_feedBack_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->allpass_tilde_11_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->allpass_tilde_11_feedBack_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void allpass_tilde_11_feedBack_init() {
                            auto result = this->allpass_tilde_11_feedBack_calcSizeInSamples();
                            this->allpass_tilde_11_feedBack__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_11_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                            this->allpass_tilde_11_feedBack_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void allpass_tilde_11_feedBack_clear() {
                            this->allpass_tilde_11_feedBack_buffer->setZero();
                        }
                        
                        void allpass_tilde_11_feedBack_reset() {
                            auto result = this->allpass_tilde_11_feedBack_calcSizeInSamples();
                            this->allpass_tilde_11_feedBack__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_11_feedBack_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->allpass_tilde_11_feedBack_buffer);
                            this->allpass_tilde_11_feedBack_wrap = this->allpass_tilde_11_feedBack_buffer->getSize() - 1;
                            this->allpass_tilde_11_feedBack_clear();
                        
                            if (this->allpass_tilde_11_feedBack_reader >= this->allpass_tilde_11_feedBack__maxdelay || this->allpass_tilde_11_feedBack_writer >= this->allpass_tilde_11_feedBack__maxdelay) {
                                this->allpass_tilde_11_feedBack_reader = 0;
                                this->allpass_tilde_11_feedBack_writer = 0;
                            }
                        }
                        
                        void allpass_tilde_11_feedBack_dspsetup() {
                            this->allpass_tilde_11_feedBack_reset();
                        }
                        
                        number allpass_tilde_11_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number allpass_tilde_11_feedBack_size() {
                            return this->allpass_tilde_11_feedBack__maxdelay;
                        }
                        
                        void allpass_tilde_11_init() {
                            this->allpass_tilde_11_feedForward_init();
                            this->allpass_tilde_11_feedBack_init();
                        }
                        
                        void allpass_tilde_11_clear() {
                            this->allpass_tilde_11_feedForward_clear();
                            this->allpass_tilde_11_feedBack_clear();
                        }
                        
                        void allpass_tilde_11_reset() {
                            this->allpass_tilde_11_init();
                            this->allpass_tilde_11_clear();
                        }
                        
                        void allpass_tilde_11_dspsetup(bool force) {
                            if ((bool)(this->allpass_tilde_11_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->allpass_tilde_11_reset();
                            this->allpass_tilde_11_setupDone = true;
                            this->allpass_tilde_11_feedForward_dspsetup();
                            this->allpass_tilde_11_feedBack_dspsetup();
                        }
                        
                        void comb_tilde_09_feedForward_step() {
                            this->comb_tilde_09_feedForward_reader++;
                        
                            if (this->comb_tilde_09_feedForward_reader >= (int)(this->comb_tilde_09_feedForward_buffer->getSize()))
                                this->comb_tilde_09_feedForward_reader = 0;
                        }
                        
                        number comb_tilde_09_feedForward_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->comb_tilde_09_feedForward_buffer->getSize()) + this->comb_tilde_09_feedForward_reader - ((size > this->comb_tilde_09_feedForward__maxdelay ? this->comb_tilde_09_feedForward__maxdelay : (size < (this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer) ? this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->comb_tilde_09_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                                ), this->comb_tilde_09_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->comb_tilde_09_feedForward_buffer->getSize()) + this->comb_tilde_09_feedForward_reader - ((size > this->comb_tilde_09_feedForward__maxdelay ? this->comb_tilde_09_feedForward__maxdelay : (size < (1 + this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer) ? 1 + this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->comb_tilde_09_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                                ), this->comb_tilde_09_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                                ), this->comb_tilde_09_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                                ), this->comb_tilde_09_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->comb_tilde_09_feedForward_buffer->getSize()) + this->comb_tilde_09_feedForward_reader - ((size > this->comb_tilde_09_feedForward__maxdelay ? this->comb_tilde_09_feedForward__maxdelay : (size < (1 + this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer) ? 1 + this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->comb_tilde_09_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                                ), this->comb_tilde_09_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                                ), this->comb_tilde_09_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                                ), this->comb_tilde_09_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->comb_tilde_09_feedForward_buffer->getSize()) + this->comb_tilde_09_feedForward_reader - ((size > this->comb_tilde_09_feedForward__maxdelay ? this->comb_tilde_09_feedForward__maxdelay : (size < (1 + this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer) ? 1 + this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->comb_tilde_09_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                                ), this->comb_tilde_09_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                                ), this->comb_tilde_09_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                                ), this->comb_tilde_09_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->comb_tilde_09_feedForward_buffer->getSize()) + this->comb_tilde_09_feedForward_reader - ((size > this->comb_tilde_09_feedForward__maxdelay ? this->comb_tilde_09_feedForward__maxdelay : (size < (1 + this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer) ? 1 + this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->comb_tilde_09_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                                ), this->comb_tilde_09_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                                ), this->comb_tilde_09_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                                ), this->comb_tilde_09_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                                ), this->comb_tilde_09_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                                ), this->comb_tilde_09_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->comb_tilde_09_feedForward_buffer->getSize()) + this->comb_tilde_09_feedForward_reader - ((size > this->comb_tilde_09_feedForward__maxdelay ? this->comb_tilde_09_feedForward__maxdelay : (size < (this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer) ? this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->comb_tilde_09_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                                ), this->comb_tilde_09_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                                ));
                            }
                        
                            number r = (int)(this->comb_tilde_09_feedForward_buffer->getSize()) + this->comb_tilde_09_feedForward_reader - ((size > this->comb_tilde_09_feedForward__maxdelay ? this->comb_tilde_09_feedForward__maxdelay : (size < (this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer) ? this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->comb_tilde_09_feedForward_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                            );
                        }
                        
                        void comb_tilde_09_feedForward_write(number v) {
                            this->comb_tilde_09_feedForward_writer = this->comb_tilde_09_feedForward_reader;
                            this->comb_tilde_09_feedForward_buffer[(Index)this->comb_tilde_09_feedForward_writer] = v;
                        }
                        
                        number comb_tilde_09_feedForward_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->comb_tilde_09_feedForward__maxdelay : size);
                            number val = this->comb_tilde_09_feedForward_read(effectiveSize, 0);
                            this->comb_tilde_09_feedForward_write(v);
                            this->comb_tilde_09_feedForward_step();
                            return val;
                        }
                        
                        array<Index, 2> comb_tilde_09_feedForward_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->comb_tilde_09_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->comb_tilde_09_feedForward_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void comb_tilde_09_feedForward_init() {
                            auto result = this->comb_tilde_09_feedForward_calcSizeInSamples();
                            this->comb_tilde_09_feedForward__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_09_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                            this->comb_tilde_09_feedForward_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void comb_tilde_09_feedForward_clear() {
                            this->comb_tilde_09_feedForward_buffer->setZero();
                        }
                        
                        void comb_tilde_09_feedForward_reset() {
                            auto result = this->comb_tilde_09_feedForward_calcSizeInSamples();
                            this->comb_tilde_09_feedForward__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_09_feedForward_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->comb_tilde_09_feedForward_buffer);
                            this->comb_tilde_09_feedForward_wrap = this->comb_tilde_09_feedForward_buffer->getSize() - 1;
                            this->comb_tilde_09_feedForward_clear();
                        
                            if (this->comb_tilde_09_feedForward_reader >= this->comb_tilde_09_feedForward__maxdelay || this->comb_tilde_09_feedForward_writer >= this->comb_tilde_09_feedForward__maxdelay) {
                                this->comb_tilde_09_feedForward_reader = 0;
                                this->comb_tilde_09_feedForward_writer = 0;
                            }
                        }
                        
                        void comb_tilde_09_feedForward_dspsetup() {
                            this->comb_tilde_09_feedForward_reset();
                        }
                        
                        number comb_tilde_09_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number comb_tilde_09_feedForward_size() {
                            return this->comb_tilde_09_feedForward__maxdelay;
                        }
                        
                        void comb_tilde_09_feedBack_step() {
                            this->comb_tilde_09_feedBack_reader++;
                        
                            if (this->comb_tilde_09_feedBack_reader >= (int)(this->comb_tilde_09_feedBack_buffer->getSize()))
                                this->comb_tilde_09_feedBack_reader = 0;
                        }
                        
                        number comb_tilde_09_feedBack_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->comb_tilde_09_feedBack_buffer->getSize()) + this->comb_tilde_09_feedBack_reader - ((size > this->comb_tilde_09_feedBack__maxdelay ? this->comb_tilde_09_feedBack__maxdelay : (size < (this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer) ? this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->comb_tilde_09_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                                ), this->comb_tilde_09_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->comb_tilde_09_feedBack_buffer->getSize()) + this->comb_tilde_09_feedBack_reader - ((size > this->comb_tilde_09_feedBack__maxdelay ? this->comb_tilde_09_feedBack__maxdelay : (size < (1 + this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer) ? 1 + this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->comb_tilde_09_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                                ), this->comb_tilde_09_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                                ), this->comb_tilde_09_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                                ), this->comb_tilde_09_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->comb_tilde_09_feedBack_buffer->getSize()) + this->comb_tilde_09_feedBack_reader - ((size > this->comb_tilde_09_feedBack__maxdelay ? this->comb_tilde_09_feedBack__maxdelay : (size < (1 + this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer) ? 1 + this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->comb_tilde_09_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                                ), this->comb_tilde_09_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                                ), this->comb_tilde_09_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                                ), this->comb_tilde_09_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->comb_tilde_09_feedBack_buffer->getSize()) + this->comb_tilde_09_feedBack_reader - ((size > this->comb_tilde_09_feedBack__maxdelay ? this->comb_tilde_09_feedBack__maxdelay : (size < (1 + this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer) ? 1 + this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->comb_tilde_09_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                                ), this->comb_tilde_09_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                                ), this->comb_tilde_09_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                                ), this->comb_tilde_09_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->comb_tilde_09_feedBack_buffer->getSize()) + this->comb_tilde_09_feedBack_reader - ((size > this->comb_tilde_09_feedBack__maxdelay ? this->comb_tilde_09_feedBack__maxdelay : (size < (1 + this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer) ? 1 + this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->comb_tilde_09_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                                ), this->comb_tilde_09_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                                ), this->comb_tilde_09_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                                ), this->comb_tilde_09_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                                ), this->comb_tilde_09_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                                ), this->comb_tilde_09_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->comb_tilde_09_feedBack_buffer->getSize()) + this->comb_tilde_09_feedBack_reader - ((size > this->comb_tilde_09_feedBack__maxdelay ? this->comb_tilde_09_feedBack__maxdelay : (size < (this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer) ? this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->comb_tilde_09_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                                ), this->comb_tilde_09_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                                ));
                            }
                        
                            number r = (int)(this->comb_tilde_09_feedBack_buffer->getSize()) + this->comb_tilde_09_feedBack_reader - ((size > this->comb_tilde_09_feedBack__maxdelay ? this->comb_tilde_09_feedBack__maxdelay : (size < (this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer) ? this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->comb_tilde_09_feedBack_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                            );
                        }
                        
                        void comb_tilde_09_feedBack_write(number v) {
                            this->comb_tilde_09_feedBack_writer = this->comb_tilde_09_feedBack_reader;
                            this->comb_tilde_09_feedBack_buffer[(Index)this->comb_tilde_09_feedBack_writer] = v;
                        }
                        
                        number comb_tilde_09_feedBack_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->comb_tilde_09_feedBack__maxdelay : size);
                            number val = this->comb_tilde_09_feedBack_read(effectiveSize, 0);
                            this->comb_tilde_09_feedBack_write(v);
                            this->comb_tilde_09_feedBack_step();
                            return val;
                        }
                        
                        array<Index, 2> comb_tilde_09_feedBack_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->comb_tilde_09_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->comb_tilde_09_feedBack_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void comb_tilde_09_feedBack_init() {
                            auto result = this->comb_tilde_09_feedBack_calcSizeInSamples();
                            this->comb_tilde_09_feedBack__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_09_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                            this->comb_tilde_09_feedBack_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void comb_tilde_09_feedBack_clear() {
                            this->comb_tilde_09_feedBack_buffer->setZero();
                        }
                        
                        void comb_tilde_09_feedBack_reset() {
                            auto result = this->comb_tilde_09_feedBack_calcSizeInSamples();
                            this->comb_tilde_09_feedBack__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_09_feedBack_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->comb_tilde_09_feedBack_buffer);
                            this->comb_tilde_09_feedBack_wrap = this->comb_tilde_09_feedBack_buffer->getSize() - 1;
                            this->comb_tilde_09_feedBack_clear();
                        
                            if (this->comb_tilde_09_feedBack_reader >= this->comb_tilde_09_feedBack__maxdelay || this->comb_tilde_09_feedBack_writer >= this->comb_tilde_09_feedBack__maxdelay) {
                                this->comb_tilde_09_feedBack_reader = 0;
                                this->comb_tilde_09_feedBack_writer = 0;
                            }
                        }
                        
                        void comb_tilde_09_feedBack_dspsetup() {
                            this->comb_tilde_09_feedBack_reset();
                        }
                        
                        number comb_tilde_09_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number comb_tilde_09_feedBack_size() {
                            return this->comb_tilde_09_feedBack__maxdelay;
                        }
                        
                        void comb_tilde_09_init() {
                            this->comb_tilde_09_feedForward_init();
                            this->comb_tilde_09_feedBack_init();
                        }
                        
                        void comb_tilde_09_clear() {
                            this->comb_tilde_09_feedForward_clear();
                            this->comb_tilde_09_feedBack_clear();
                        }
                        
                        void comb_tilde_09_reset() {
                            this->comb_tilde_09_init();
                            this->comb_tilde_09_clear();
                        }
                        
                        void comb_tilde_09_dspsetup(bool force) {
                            if ((bool)(this->comb_tilde_09_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->comb_tilde_09_reset();
                            this->comb_tilde_09_setupDone = true;
                            this->comb_tilde_09_feedForward_dspsetup();
                            this->comb_tilde_09_feedBack_dspsetup();
                        }
                        
                        void allpass_tilde_12_feedForward_step() {
                            this->allpass_tilde_12_feedForward_reader++;
                        
                            if (this->allpass_tilde_12_feedForward_reader >= (int)(this->allpass_tilde_12_feedForward_buffer->getSize()))
                                this->allpass_tilde_12_feedForward_reader = 0;
                        }
                        
                        number allpass_tilde_12_feedForward_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->allpass_tilde_12_feedForward_buffer->getSize()) + this->allpass_tilde_12_feedForward_reader - ((size > this->allpass_tilde_12_feedForward__maxdelay ? this->allpass_tilde_12_feedForward__maxdelay : (size < (this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer) ? this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->allpass_tilde_12_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                                ), this->allpass_tilde_12_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->allpass_tilde_12_feedForward_buffer->getSize()) + this->allpass_tilde_12_feedForward_reader - ((size > this->allpass_tilde_12_feedForward__maxdelay ? this->allpass_tilde_12_feedForward__maxdelay : (size < (1 + this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer) ? 1 + this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->allpass_tilde_12_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                                ), this->allpass_tilde_12_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                                ), this->allpass_tilde_12_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                                ), this->allpass_tilde_12_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->allpass_tilde_12_feedForward_buffer->getSize()) + this->allpass_tilde_12_feedForward_reader - ((size > this->allpass_tilde_12_feedForward__maxdelay ? this->allpass_tilde_12_feedForward__maxdelay : (size < (1 + this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer) ? 1 + this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->allpass_tilde_12_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                                ), this->allpass_tilde_12_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                                ), this->allpass_tilde_12_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                                ), this->allpass_tilde_12_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->allpass_tilde_12_feedForward_buffer->getSize()) + this->allpass_tilde_12_feedForward_reader - ((size > this->allpass_tilde_12_feedForward__maxdelay ? this->allpass_tilde_12_feedForward__maxdelay : (size < (1 + this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer) ? 1 + this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->allpass_tilde_12_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                                ), this->allpass_tilde_12_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                                ), this->allpass_tilde_12_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                                ), this->allpass_tilde_12_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->allpass_tilde_12_feedForward_buffer->getSize()) + this->allpass_tilde_12_feedForward_reader - ((size > this->allpass_tilde_12_feedForward__maxdelay ? this->allpass_tilde_12_feedForward__maxdelay : (size < (1 + this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer) ? 1 + this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->allpass_tilde_12_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                                ), this->allpass_tilde_12_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                                ), this->allpass_tilde_12_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                                ), this->allpass_tilde_12_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                                ), this->allpass_tilde_12_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                                ), this->allpass_tilde_12_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->allpass_tilde_12_feedForward_buffer->getSize()) + this->allpass_tilde_12_feedForward_reader - ((size > this->allpass_tilde_12_feedForward__maxdelay ? this->allpass_tilde_12_feedForward__maxdelay : (size < (this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer) ? this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->allpass_tilde_12_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                                ), this->allpass_tilde_12_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                                ));
                            }
                        
                            number r = (int)(this->allpass_tilde_12_feedForward_buffer->getSize()) + this->allpass_tilde_12_feedForward_reader - ((size > this->allpass_tilde_12_feedForward__maxdelay ? this->allpass_tilde_12_feedForward__maxdelay : (size < (this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer) ? this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->allpass_tilde_12_feedForward_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                            );
                        }
                        
                        void allpass_tilde_12_feedForward_write(number v) {
                            this->allpass_tilde_12_feedForward_writer = this->allpass_tilde_12_feedForward_reader;
                            this->allpass_tilde_12_feedForward_buffer[(Index)this->allpass_tilde_12_feedForward_writer] = v;
                        }
                        
                        number allpass_tilde_12_feedForward_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->allpass_tilde_12_feedForward__maxdelay : size);
                            number val = this->allpass_tilde_12_feedForward_read(effectiveSize, 0);
                            this->allpass_tilde_12_feedForward_write(v);
                            this->allpass_tilde_12_feedForward_step();
                            return val;
                        }
                        
                        array<Index, 2> allpass_tilde_12_feedForward_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->allpass_tilde_12_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->allpass_tilde_12_feedForward_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void allpass_tilde_12_feedForward_init() {
                            auto result = this->allpass_tilde_12_feedForward_calcSizeInSamples();
                            this->allpass_tilde_12_feedForward__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_12_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                            this->allpass_tilde_12_feedForward_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void allpass_tilde_12_feedForward_clear() {
                            this->allpass_tilde_12_feedForward_buffer->setZero();
                        }
                        
                        void allpass_tilde_12_feedForward_reset() {
                            auto result = this->allpass_tilde_12_feedForward_calcSizeInSamples();
                            this->allpass_tilde_12_feedForward__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_12_feedForward_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->allpass_tilde_12_feedForward_buffer);
                            this->allpass_tilde_12_feedForward_wrap = this->allpass_tilde_12_feedForward_buffer->getSize() - 1;
                            this->allpass_tilde_12_feedForward_clear();
                        
                            if (this->allpass_tilde_12_feedForward_reader >= this->allpass_tilde_12_feedForward__maxdelay || this->allpass_tilde_12_feedForward_writer >= this->allpass_tilde_12_feedForward__maxdelay) {
                                this->allpass_tilde_12_feedForward_reader = 0;
                                this->allpass_tilde_12_feedForward_writer = 0;
                            }
                        }
                        
                        void allpass_tilde_12_feedForward_dspsetup() {
                            this->allpass_tilde_12_feedForward_reset();
                        }
                        
                        number allpass_tilde_12_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number allpass_tilde_12_feedForward_size() {
                            return this->allpass_tilde_12_feedForward__maxdelay;
                        }
                        
                        void allpass_tilde_12_feedBack_step() {
                            this->allpass_tilde_12_feedBack_reader++;
                        
                            if (this->allpass_tilde_12_feedBack_reader >= (int)(this->allpass_tilde_12_feedBack_buffer->getSize()))
                                this->allpass_tilde_12_feedBack_reader = 0;
                        }
                        
                        number allpass_tilde_12_feedBack_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->allpass_tilde_12_feedBack_buffer->getSize()) + this->allpass_tilde_12_feedBack_reader - ((size > this->allpass_tilde_12_feedBack__maxdelay ? this->allpass_tilde_12_feedBack__maxdelay : (size < (this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer) ? this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->allpass_tilde_12_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                                ), this->allpass_tilde_12_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->allpass_tilde_12_feedBack_buffer->getSize()) + this->allpass_tilde_12_feedBack_reader - ((size > this->allpass_tilde_12_feedBack__maxdelay ? this->allpass_tilde_12_feedBack__maxdelay : (size < (1 + this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer) ? 1 + this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->allpass_tilde_12_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                                ), this->allpass_tilde_12_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                                ), this->allpass_tilde_12_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                                ), this->allpass_tilde_12_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->allpass_tilde_12_feedBack_buffer->getSize()) + this->allpass_tilde_12_feedBack_reader - ((size > this->allpass_tilde_12_feedBack__maxdelay ? this->allpass_tilde_12_feedBack__maxdelay : (size < (1 + this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer) ? 1 + this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->allpass_tilde_12_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                                ), this->allpass_tilde_12_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                                ), this->allpass_tilde_12_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                                ), this->allpass_tilde_12_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->allpass_tilde_12_feedBack_buffer->getSize()) + this->allpass_tilde_12_feedBack_reader - ((size > this->allpass_tilde_12_feedBack__maxdelay ? this->allpass_tilde_12_feedBack__maxdelay : (size < (1 + this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer) ? 1 + this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->allpass_tilde_12_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                                ), this->allpass_tilde_12_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                                ), this->allpass_tilde_12_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                                ), this->allpass_tilde_12_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->allpass_tilde_12_feedBack_buffer->getSize()) + this->allpass_tilde_12_feedBack_reader - ((size > this->allpass_tilde_12_feedBack__maxdelay ? this->allpass_tilde_12_feedBack__maxdelay : (size < (1 + this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer) ? 1 + this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->allpass_tilde_12_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                                ), this->allpass_tilde_12_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                                ), this->allpass_tilde_12_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                                ), this->allpass_tilde_12_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                                ), this->allpass_tilde_12_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                                ), this->allpass_tilde_12_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->allpass_tilde_12_feedBack_buffer->getSize()) + this->allpass_tilde_12_feedBack_reader - ((size > this->allpass_tilde_12_feedBack__maxdelay ? this->allpass_tilde_12_feedBack__maxdelay : (size < (this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer) ? this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->allpass_tilde_12_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                                ), this->allpass_tilde_12_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                                ));
                            }
                        
                            number r = (int)(this->allpass_tilde_12_feedBack_buffer->getSize()) + this->allpass_tilde_12_feedBack_reader - ((size > this->allpass_tilde_12_feedBack__maxdelay ? this->allpass_tilde_12_feedBack__maxdelay : (size < (this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer) ? this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->allpass_tilde_12_feedBack_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                            );
                        }
                        
                        void allpass_tilde_12_feedBack_write(number v) {
                            this->allpass_tilde_12_feedBack_writer = this->allpass_tilde_12_feedBack_reader;
                            this->allpass_tilde_12_feedBack_buffer[(Index)this->allpass_tilde_12_feedBack_writer] = v;
                        }
                        
                        number allpass_tilde_12_feedBack_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->allpass_tilde_12_feedBack__maxdelay : size);
                            number val = this->allpass_tilde_12_feedBack_read(effectiveSize, 0);
                            this->allpass_tilde_12_feedBack_write(v);
                            this->allpass_tilde_12_feedBack_step();
                            return val;
                        }
                        
                        array<Index, 2> allpass_tilde_12_feedBack_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->allpass_tilde_12_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->allpass_tilde_12_feedBack_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void allpass_tilde_12_feedBack_init() {
                            auto result = this->allpass_tilde_12_feedBack_calcSizeInSamples();
                            this->allpass_tilde_12_feedBack__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_12_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                            this->allpass_tilde_12_feedBack_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void allpass_tilde_12_feedBack_clear() {
                            this->allpass_tilde_12_feedBack_buffer->setZero();
                        }
                        
                        void allpass_tilde_12_feedBack_reset() {
                            auto result = this->allpass_tilde_12_feedBack_calcSizeInSamples();
                            this->allpass_tilde_12_feedBack__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->allpass_tilde_12_feedBack_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->allpass_tilde_12_feedBack_buffer);
                            this->allpass_tilde_12_feedBack_wrap = this->allpass_tilde_12_feedBack_buffer->getSize() - 1;
                            this->allpass_tilde_12_feedBack_clear();
                        
                            if (this->allpass_tilde_12_feedBack_reader >= this->allpass_tilde_12_feedBack__maxdelay || this->allpass_tilde_12_feedBack_writer >= this->allpass_tilde_12_feedBack__maxdelay) {
                                this->allpass_tilde_12_feedBack_reader = 0;
                                this->allpass_tilde_12_feedBack_writer = 0;
                            }
                        }
                        
                        void allpass_tilde_12_feedBack_dspsetup() {
                            this->allpass_tilde_12_feedBack_reset();
                        }
                        
                        number allpass_tilde_12_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number allpass_tilde_12_feedBack_size() {
                            return this->allpass_tilde_12_feedBack__maxdelay;
                        }
                        
                        void allpass_tilde_12_init() {
                            this->allpass_tilde_12_feedForward_init();
                            this->allpass_tilde_12_feedBack_init();
                        }
                        
                        void allpass_tilde_12_clear() {
                            this->allpass_tilde_12_feedForward_clear();
                            this->allpass_tilde_12_feedBack_clear();
                        }
                        
                        void allpass_tilde_12_reset() {
                            this->allpass_tilde_12_init();
                            this->allpass_tilde_12_clear();
                        }
                        
                        void allpass_tilde_12_dspsetup(bool force) {
                            if ((bool)(this->allpass_tilde_12_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->allpass_tilde_12_reset();
                            this->allpass_tilde_12_setupDone = true;
                            this->allpass_tilde_12_feedForward_dspsetup();
                            this->allpass_tilde_12_feedBack_dspsetup();
                        }
                        
                        void onepole_tilde_07_reset() {
                            this->onepole_tilde_07_lastY = 0;
                            this->onepole_tilde_07_a0 = 0;
                            this->onepole_tilde_07_b1 = 0;
                        }
                        
                        void onepole_tilde_07_dspsetup(bool force) {
                            if ((bool)(this->onepole_tilde_07_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->onepole_tilde_07_needsUpdate = true;
                            this->onepole_tilde_07_reset();
                            this->onepole_tilde_07_setupDone = true;
                        }
                        
                        void lores_02_reset() {
                            this->lores_02_y_1 = 0;
                            this->lores_02_y_2 = 0;
                            this->lores_02_last_resonance = 0;
                            this->lores_02_last_frequency = 0;
                            this->lores_02_last_res_calc = 0;
                            this->lores_02_last_freq_calc = 0;
                        }
                        
                        void lores_02_dspsetup(bool force) {
                            if ((bool)(this->lores_02_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->lores_02_reset();
                            this->lores_02_setupDone = true;
                        }
                        
                        void noise_tilde_04_init() {
                            this->noise_tilde_04_reset();
                        }
                        
                        void noise_tilde_04_reset() {
                            xoshiro_reset(
                                systemticks() + this->voice() + this->random(0, 10000),
                                this->noise_tilde_04_state
                            );
                        }
                        
                        void delaytilde_08_del_step() {
                            this->delaytilde_08_del_reader++;
                        
                            if (this->delaytilde_08_del_reader >= (int)(this->delaytilde_08_del_buffer->getSize()))
                                this->delaytilde_08_del_reader = 0;
                        }
                        
                        number delaytilde_08_del_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->delaytilde_08_del_buffer->getSize()) + this->delaytilde_08_del_reader - ((size > this->delaytilde_08_del__maxdelay ? this->delaytilde_08_del__maxdelay : (size < (this->delaytilde_08_del_reader != this->delaytilde_08_del_writer) ? this->delaytilde_08_del_reader != this->delaytilde_08_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->delaytilde_08_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_08_del_wrap))
                                ), this->delaytilde_08_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_08_del_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->delaytilde_08_del_buffer->getSize()) + this->delaytilde_08_del_reader - ((size > this->delaytilde_08_del__maxdelay ? this->delaytilde_08_del__maxdelay : (size < (1 + this->delaytilde_08_del_reader != this->delaytilde_08_del_writer) ? 1 + this->delaytilde_08_del_reader != this->delaytilde_08_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->delaytilde_08_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_08_del_wrap))
                                ), this->delaytilde_08_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_08_del_wrap))
                                ), this->delaytilde_08_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_08_del_wrap))
                                ), this->delaytilde_08_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_08_del_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->delaytilde_08_del_buffer->getSize()) + this->delaytilde_08_del_reader - ((size > this->delaytilde_08_del__maxdelay ? this->delaytilde_08_del__maxdelay : (size < (1 + this->delaytilde_08_del_reader != this->delaytilde_08_del_writer) ? 1 + this->delaytilde_08_del_reader != this->delaytilde_08_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->delaytilde_08_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_08_del_wrap))
                                ), this->delaytilde_08_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_08_del_wrap))
                                ), this->delaytilde_08_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_08_del_wrap))
                                ), this->delaytilde_08_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_08_del_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->delaytilde_08_del_buffer->getSize()) + this->delaytilde_08_del_reader - ((size > this->delaytilde_08_del__maxdelay ? this->delaytilde_08_del__maxdelay : (size < (1 + this->delaytilde_08_del_reader != this->delaytilde_08_del_writer) ? 1 + this->delaytilde_08_del_reader != this->delaytilde_08_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->delaytilde_08_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_08_del_wrap))
                                ), this->delaytilde_08_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_08_del_wrap))
                                ), this->delaytilde_08_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_08_del_wrap))
                                ), this->delaytilde_08_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_08_del_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->delaytilde_08_del_buffer->getSize()) + this->delaytilde_08_del_reader - ((size > this->delaytilde_08_del__maxdelay ? this->delaytilde_08_del__maxdelay : (size < (1 + this->delaytilde_08_del_reader != this->delaytilde_08_del_writer) ? 1 + this->delaytilde_08_del_reader != this->delaytilde_08_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->delaytilde_08_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_08_del_wrap))
                                ), this->delaytilde_08_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_08_del_wrap))
                                ), this->delaytilde_08_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_08_del_wrap))
                                ), this->delaytilde_08_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_08_del_wrap))
                                ), this->delaytilde_08_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->delaytilde_08_del_wrap))
                                ), this->delaytilde_08_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->delaytilde_08_del_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->delaytilde_08_del_buffer->getSize()) + this->delaytilde_08_del_reader - ((size > this->delaytilde_08_del__maxdelay ? this->delaytilde_08_del__maxdelay : (size < (this->delaytilde_08_del_reader != this->delaytilde_08_del_writer) ? this->delaytilde_08_del_reader != this->delaytilde_08_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->delaytilde_08_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_08_del_wrap))
                                ), this->delaytilde_08_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_08_del_wrap))
                                ));
                            }
                        
                            number r = (int)(this->delaytilde_08_del_buffer->getSize()) + this->delaytilde_08_del_reader - ((size > this->delaytilde_08_del__maxdelay ? this->delaytilde_08_del__maxdelay : (size < (this->delaytilde_08_del_reader != this->delaytilde_08_del_writer) ? this->delaytilde_08_del_reader != this->delaytilde_08_del_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->delaytilde_08_del_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_08_del_wrap))
                            );
                        }
                        
                        void delaytilde_08_del_write(number v) {
                            this->delaytilde_08_del_writer = this->delaytilde_08_del_reader;
                            this->delaytilde_08_del_buffer[(Index)this->delaytilde_08_del_writer] = v;
                        }
                        
                        number delaytilde_08_del_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->delaytilde_08_del__maxdelay : size);
                            number val = this->delaytilde_08_del_read(effectiveSize, 0);
                            this->delaytilde_08_del_write(v);
                            this->delaytilde_08_del_step();
                            return val;
                        }
                        
                        array<Index, 2> delaytilde_08_del_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->delaytilde_08_del_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->delaytilde_08_del_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void delaytilde_08_del_init() {
                            auto result = this->delaytilde_08_del_calcSizeInSamples();
                            this->delaytilde_08_del__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->delaytilde_08_del_buffer->requestSize(requestedSizeInSamples, 1);
                            this->delaytilde_08_del_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void delaytilde_08_del_clear() {
                            this->delaytilde_08_del_buffer->setZero();
                        }
                        
                        void delaytilde_08_del_reset() {
                            auto result = this->delaytilde_08_del_calcSizeInSamples();
                            this->delaytilde_08_del__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->delaytilde_08_del_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->delaytilde_08_del_buffer);
                            this->delaytilde_08_del_wrap = this->delaytilde_08_del_buffer->getSize() - 1;
                            this->delaytilde_08_del_clear();
                        
                            if (this->delaytilde_08_del_reader >= this->delaytilde_08_del__maxdelay || this->delaytilde_08_del_writer >= this->delaytilde_08_del__maxdelay) {
                                this->delaytilde_08_del_reader = 0;
                                this->delaytilde_08_del_writer = 0;
                            }
                        }
                        
                        void delaytilde_08_del_dspsetup() {
                            this->delaytilde_08_del_reset();
                        }
                        
                        number delaytilde_08_del_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 38400;
                        }
                        
                        number delaytilde_08_del_size() {
                            return this->delaytilde_08_del__maxdelay;
                        }
                        
                        void delaytilde_08_dspsetup(bool force) {
                            if ((bool)(this->delaytilde_08_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->delaytilde_08_rampInSamples = (long)(this->mstosamps(0));
                            this->delaytilde_08_lastDelay = -1;
                            this->delaytilde_08_setupDone = true;
                            this->delaytilde_08_del_dspsetup();
                        }
                        
                        bool stackprotect_check() {
                            this->stackprotect_count++;
                        
                            if (this->stackprotect_count > 128) {
                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                return true;
                            }
                        
                            return false;
                        }
                        
                        void updateTime(MillisecondTime time) {
                            this->_currentTime = time;
                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                        
                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                        
                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                this->sampleOffsetIntoNextAudioBuffer = 0;
                        }
                        
                        void assign_defaults()
                        {
                            allpass_tilde_11_x = 0;
                            allpass_tilde_11_delayTime = 30.51;
                            allpass_tilde_11_gain = -0.7;
                            dspexpr_42_in1 = 0;
                            dspexpr_42_in2 = 30.51;
                            comb_tilde_09_x = 0;
                            comb_tilde_09_delayTime = 149.6;
                            comb_tilde_09_gain = 0;
                            comb_tilde_09_ffGain = 1;
                            comb_tilde_09_fbGain = 0;
                            dspexpr_43_in1 = 0;
                            dspexpr_43_in2 = 0;
                            dspexpr_44_in1 = 0;
                            dspexpr_44_in2 = 141.7;
                            dspexpr_45_in1 = 0;
                            dspexpr_45_in2 = 0.5;
                            allpass_tilde_12_x = 0;
                            allpass_tilde_12_delayTime = 89.24;
                            allpass_tilde_12_gain = 0.5;
                            onepole_tilde_07_x = 0;
                            onepole_tilde_07_freqInHz = 1800;
                            dspexpr_46_in1 = 0;
                            dspexpr_46_in2 = 20;
                            lores_02_cutoff = 0;
                            lores_02_resonance = 0.995;
                            lores_02_resonance_setter(lores_02_resonance);
                            dspexpr_47_in1 = 0;
                            dspexpr_47_in2 = 89.24;
                            delaytilde_08_delay = 0;
                            mstosamps_tilde_02_ms = 0;
                            dspexpr_48_in1 = 0;
                            dspexpr_48_in2 = 106.28;
                            _currentTime = 0;
                            audioProcessSampleCount = 0;
                            sampleOffsetIntoNextAudioBuffer = 0;
                            zeroBuffer = nullptr;
                            dummyBuffer = nullptr;
                            signals[0] = nullptr;
                            signals[1] = nullptr;
                            signals[2] = nullptr;
                            signals[3] = nullptr;
                            signals[4] = nullptr;
                            signals[5] = nullptr;
                            didAllocateSignals = 0;
                            vs = 0;
                            maxvs = 0;
                            sr = 44100;
                            invsr = 0.00002267573696;
                            allpass_tilde_11_feedForward__maxdelay = 0;
                            allpass_tilde_11_feedForward_sizemode = 0;
                            allpass_tilde_11_feedForward_wrap = 0;
                            allpass_tilde_11_feedForward_reader = 0;
                            allpass_tilde_11_feedForward_writer = 0;
                            allpass_tilde_11_feedBack__maxdelay = 0;
                            allpass_tilde_11_feedBack_sizemode = 0;
                            allpass_tilde_11_feedBack_wrap = 0;
                            allpass_tilde_11_feedBack_reader = 0;
                            allpass_tilde_11_feedBack_writer = 0;
                            allpass_tilde_11_setupDone = false;
                            comb_tilde_09_feedForward__maxdelay = 0;
                            comb_tilde_09_feedForward_sizemode = 0;
                            comb_tilde_09_feedForward_wrap = 0;
                            comb_tilde_09_feedForward_reader = 0;
                            comb_tilde_09_feedForward_writer = 0;
                            comb_tilde_09_feedBack__maxdelay = 0;
                            comb_tilde_09_feedBack_sizemode = 0;
                            comb_tilde_09_feedBack_wrap = 0;
                            comb_tilde_09_feedBack_reader = 0;
                            comb_tilde_09_feedBack_writer = 0;
                            comb_tilde_09_setupDone = false;
                            allpass_tilde_12_feedForward__maxdelay = 0;
                            allpass_tilde_12_feedForward_sizemode = 0;
                            allpass_tilde_12_feedForward_wrap = 0;
                            allpass_tilde_12_feedForward_reader = 0;
                            allpass_tilde_12_feedForward_writer = 0;
                            allpass_tilde_12_feedBack__maxdelay = 0;
                            allpass_tilde_12_feedBack_sizemode = 0;
                            allpass_tilde_12_feedBack_wrap = 0;
                            allpass_tilde_12_feedBack_reader = 0;
                            allpass_tilde_12_feedBack_writer = 0;
                            allpass_tilde_12_setupDone = false;
                            onepole_tilde_07_freq = 0;
                            onepole_tilde_07_needsUpdate = false;
                            onepole_tilde_07_lastY = 0;
                            onepole_tilde_07_a0 = 0;
                            onepole_tilde_07_b1 = 0;
                            onepole_tilde_07_setupDone = false;
                            lores_02_setupDone = false;
                            delaytilde_08_lastDelay = -1;
                            delaytilde_08_crossfadeDelay = 0;
                            delaytilde_08_ramp = 0;
                            delaytilde_08_rampInSamples = 0;
                            delaytilde_08_del__maxdelay = 0;
                            delaytilde_08_del_sizemode = 0;
                            delaytilde_08_del_wrap = 0;
                            delaytilde_08_del_reader = 0;
                            delaytilde_08_del_writer = 0;
                            delaytilde_08_setupDone = false;
                            feedbacktilde_04_feedbackbuffer = nullptr;
                            stackprotect_count = 0;
                            _voiceIndex = 0;
                            _noteNumber = 0;
                            isMuted = 1;
                            parameterOffset = 0;
                        }
                        
                        // member variables
                        
                            number allpass_tilde_11_x;
                            number allpass_tilde_11_delayTime;
                            number allpass_tilde_11_gain;
                            number dspexpr_42_in1;
                            number dspexpr_42_in2;
                            number comb_tilde_09_x;
                            number comb_tilde_09_delayTime;
                            number comb_tilde_09_gain;
                            number comb_tilde_09_ffGain;
                            number comb_tilde_09_fbGain;
                            number dspexpr_43_in1;
                            number dspexpr_43_in2;
                            number dspexpr_44_in1;
                            number dspexpr_44_in2;
                            number dspexpr_45_in1;
                            number dspexpr_45_in2;
                            number allpass_tilde_12_x;
                            number allpass_tilde_12_delayTime;
                            number allpass_tilde_12_gain;
                            number onepole_tilde_07_x;
                            number onepole_tilde_07_freqInHz;
                            number dspexpr_46_in1;
                            number dspexpr_46_in2;
                            number lores_02_cutoff;
                            number lores_02_resonance;
                            number dspexpr_47_in1;
                            number dspexpr_47_in2;
                            number delaytilde_08_delay;
                            number mstosamps_tilde_02_ms;
                            number dspexpr_48_in1;
                            number dspexpr_48_in2;
                            MillisecondTime _currentTime;
                            UInt64 audioProcessSampleCount;
                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                            signal zeroBuffer;
                            signal dummyBuffer;
                            SampleValue * signals[6];
                            bool didAllocateSignals;
                            Index vs;
                            Index maxvs;
                            number sr;
                            number invsr;
                            Float64BufferRef allpass_tilde_11_feedForward_buffer;
                            Index allpass_tilde_11_feedForward__maxdelay;
                            Int allpass_tilde_11_feedForward_sizemode;
                            Index allpass_tilde_11_feedForward_wrap;
                            Int allpass_tilde_11_feedForward_reader;
                            Int allpass_tilde_11_feedForward_writer;
                            Float64BufferRef allpass_tilde_11_feedBack_buffer;
                            Index allpass_tilde_11_feedBack__maxdelay;
                            Int allpass_tilde_11_feedBack_sizemode;
                            Index allpass_tilde_11_feedBack_wrap;
                            Int allpass_tilde_11_feedBack_reader;
                            Int allpass_tilde_11_feedBack_writer;
                            bool allpass_tilde_11_setupDone;
                            Float64BufferRef comb_tilde_09_feedForward_buffer;
                            Index comb_tilde_09_feedForward__maxdelay;
                            Int comb_tilde_09_feedForward_sizemode;
                            Index comb_tilde_09_feedForward_wrap;
                            Int comb_tilde_09_feedForward_reader;
                            Int comb_tilde_09_feedForward_writer;
                            Float64BufferRef comb_tilde_09_feedBack_buffer;
                            Index comb_tilde_09_feedBack__maxdelay;
                            Int comb_tilde_09_feedBack_sizemode;
                            Index comb_tilde_09_feedBack_wrap;
                            Int comb_tilde_09_feedBack_reader;
                            Int comb_tilde_09_feedBack_writer;
                            bool comb_tilde_09_setupDone;
                            Float64BufferRef allpass_tilde_12_feedForward_buffer;
                            Index allpass_tilde_12_feedForward__maxdelay;
                            Int allpass_tilde_12_feedForward_sizemode;
                            Index allpass_tilde_12_feedForward_wrap;
                            Int allpass_tilde_12_feedForward_reader;
                            Int allpass_tilde_12_feedForward_writer;
                            Float64BufferRef allpass_tilde_12_feedBack_buffer;
                            Index allpass_tilde_12_feedBack__maxdelay;
                            Int allpass_tilde_12_feedBack_sizemode;
                            Index allpass_tilde_12_feedBack_wrap;
                            Int allpass_tilde_12_feedBack_reader;
                            Int allpass_tilde_12_feedBack_writer;
                            bool allpass_tilde_12_setupDone;
                            number onepole_tilde_07_freq;
                            bool onepole_tilde_07_needsUpdate;
                            number onepole_tilde_07_lastY;
                            number onepole_tilde_07_a0;
                            number onepole_tilde_07_b1;
                            bool onepole_tilde_07_setupDone;
                            number lores_02_b_0;
                            number lores_02_a_1;
                            number lores_02_a_2;
                            number lores_02_x_0;
                            number lores_02_y_1;
                            number lores_02_y_2;
                            number lores_02_last_resonance;
                            number lores_02_last_frequency;
                            number lores_02_last_res_calc;
                            number lores_02_last_freq_calc;
                            bool lores_02_setupDone;
                            UInt noise_tilde_04_state[4] = { };
                            number delaytilde_08_lastDelay;
                            number delaytilde_08_crossfadeDelay;
                            number delaytilde_08_ramp;
                            long delaytilde_08_rampInSamples;
                            Float64BufferRef delaytilde_08_del_buffer;
                            Index delaytilde_08_del__maxdelay;
                            Int delaytilde_08_del_sizemode;
                            Index delaytilde_08_del_wrap;
                            Int delaytilde_08_del_reader;
                            Int delaytilde_08_del_writer;
                            bool delaytilde_08_setupDone;
                            signal feedbacktilde_04_feedbackbuffer;
                            number stackprotect_count;
                            DataRef allpass_tilde_11_feedForward_bufferobj;
                            DataRef allpass_tilde_11_feedBack_bufferobj;
                            DataRef comb_tilde_09_feedForward_bufferobj;
                            DataRef comb_tilde_09_feedBack_bufferobj;
                            DataRef allpass_tilde_12_feedForward_bufferobj;
                            DataRef allpass_tilde_12_feedBack_bufferobj;
                            DataRef delaytilde_08_del_bufferobj;
                            Index _voiceIndex;
                            Int _noteNumber;
                            Index isMuted;
                            ParameterIndex parameterOffset;
                        
            };
            
            class RNBOSubpatcher_797 : public PatcherInterfaceImpl {
                        
                        friend class RNBOSubpatcher_805;
                        friend class rnbomatic;
                        
                        public:
                        
                        RNBOSubpatcher_797()
                        {
                        }
                        
                        ~RNBOSubpatcher_797()
                        {
                        }
                        
                        virtual RNBOSubpatcher_805* getPatcher() const {
                            return static_cast<RNBOSubpatcher_805 *>(_parentPatcher);
                        }
                        
                        rnbomatic* getTopLevelPatcher() {
                            return this->getPatcher()->getTopLevelPatcher();
                        }
                        
                        void cancelClockEvents()
                        {
                            getEngine()->flushClockEvents(this, -62043057, false);
                            getEngine()->flushClockEvents(this, -444440180, false);
                            getEngine()->flushClockEvents(this, -1621164530, false);
                            getEngine()->flushClockEvents(this, -2003561653, false);
                            getEngine()->flushClockEvents(this, 1114681293, false);
                        }
                        
                        SampleIndex currentsampletime() {
                            return this->audioProcessSampleCount + this->sampleOffsetIntoNextAudioBuffer;
                        }
                        
                        number mstosamps(MillisecondTime ms) {
                            return ms * this->sr * 0.001;
                        }
                        
                        inline number safediv(number num, number denom) {
                            return (denom == 0.0 ? 0.0 : num / denom);
                        }
                        
                        number safepow(number base, number exponent) {
                            return fixnan(rnbo_pow(base, exponent));
                        }
                        
                        number scale(
                            number x,
                            number lowin,
                            number hiin,
                            number lowout,
                            number highout,
                            number pow
                        ) {
                            auto inscale = this->safediv(1., hiin - lowin);
                            number outdiff = highout - lowout;
                            number value = (x - lowin) * inscale;
                        
                            if (pow != 1) {
                                if (value > 0)
                                    value = this->safepow(value, pow);
                                else
                                    value = -this->safepow(-value, pow);
                            }
                        
                            value = value * outdiff + lowout;
                            return value;
                        }
                        
                        Index getNumMidiInputPorts() const {
                            return 0;
                        }
                        
                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                        
                        Index getNumMidiOutputPorts() const {
                            return 0;
                        }
                        
                        void process(
                            const SampleValue * const* inputs,
                            Index numInputs,
                            SampleValue * const* outputs,
                            Index numOutputs,
                            Index n
                        ) {
                            RNBO_UNUSED(numInputs);
                            RNBO_UNUSED(inputs);
                            this->vs = n;
                            this->updateTime(this->getEngine()->getCurrentTime());
                            SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                            SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                            SampleValue * out3 = (numOutputs >= 3 && outputs[2] ? outputs[2] : this->dummyBuffer);
                            SampleValue * out4 = (numOutputs >= 4 && outputs[3] ? outputs[3] : this->dummyBuffer);
                            SampleValue * out5 = (numOutputs >= 5 && outputs[4] ? outputs[4] : this->dummyBuffer);
                            this->linetilde_08_perform(out1, n);
                            this->linetilde_09_perform(out2, n);
                            this->linetilde_10_perform(out3, n);
                            this->linetilde_11_perform(out4, n);
                            this->linetilde_12_perform(out5, n);
                            this->stackprotect_perform(n);
                            this->audioProcessSampleCount += this->vs;
                        }
                        
                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                this->didAllocateSignals = true;
                            }
                        
                            const bool sampleRateChanged = sampleRate != this->sr;
                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                        
                            if (sampleRateChanged || maxvsChanged) {
                                this->vs = maxBlockSize;
                                this->maxvs = maxBlockSize;
                                this->sr = sampleRate;
                                this->invsr = 1 / sampleRate;
                            }
                        
                            RNBO_UNUSED(forceDSPSetup);
                        
                            if (sampleRateChanged)
                                this->onSampleRateChanged(sampleRate);
                        }
                        
                        void setProbingTarget(MessageTag id) {
                            switch (id) {
                            default:
                                {
                                this->setProbingIndex(-1);
                                break;
                                }
                            }
                        }
                        
                        void setProbingIndex(ProbingIndex ) {}
                        
                        Index getProbingChannels(MessageTag outletId) const {
                            RNBO_UNUSED(outletId);
                            return 0;
                        }
                        
                        Index getIsMuted()  {
                            return this->isMuted;
                        }
                        
                        void setIsMuted(Index v)  {
                            this->isMuted = v;
                        }
                        
                        void onSampleRateChanged(double ) {}
                        
                        Index getPatcherSerial() const {
                            return 0;
                        }
                        
                        void getState(PatcherStateInterface& ) {}
                        
                        void setState() {}
                        
                        void getPreset(PatcherStateInterface& ) {}
                        
                        void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                        
                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValue(index, value, time);
                        }
                        
                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                            this->setParameterValue(index, this->getParameterValue(index), time);
                        }
                        
                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValueNormalized(index, value, time);
                        }
                        
                        ParameterValue getParameterValue(ParameterIndex index)  {
                            switch (index) {
                            default:
                                {
                                return 0;
                                }
                            }
                        }
                        
                        ParameterIndex getNumSignalInParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumSignalOutParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumParameters() const {
                            return 0;
                        }
                        
                        ConstCharPointer getParameterName(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        ConstCharPointer getParameterId(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                        
                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                        }
                        
                        void setParameterOffset(ParameterIndex offset) {
                            this->parameterOffset = offset;
                        }
                        
                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                            if (steps == 1) {
                                if (normalizedValue > 0) {
                                    normalizedValue = 1.;
                                }
                            } else {
                                ParameterValue oneStep = (number)1. / (steps - 1);
                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                normalizedValue = numberOfSteps * oneStep;
                            }
                        
                            return normalizedValue;
                        }
                        
                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        void scheduleParamInit(ParameterIndex index, Index order) {
                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                        }
                        
                        void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
                            RNBO_UNUSED(value);
                            RNBO_UNUSED(hasValue);
                            this->updateTime(time);
                        
                            switch (index) {
                            case -62043057:
                                {
                                this->linetilde_08_target_bang();
                                break;
                                }
                            case -444440180:
                                {
                                this->linetilde_09_target_bang();
                                break;
                                }
                            case -1621164530:
                                {
                                this->linetilde_10_target_bang();
                                break;
                                }
                            case -2003561653:
                                {
                                this->linetilde_11_target_bang();
                                break;
                                }
                            case 1114681293:
                                {
                                this->linetilde_12_target_bang();
                                break;
                                }
                            }
                        }
                        
                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                        
                        void processOutletEvent(
                            EngineLink* sender,
                            OutletIndex index,
                            ParameterValue value,
                            MillisecondTime time
                        ) {
                            this->updateTime(time);
                            this->processOutletAtCurrentTime(sender, index, value);
                        }
                        
                        void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("valin"):
                                {
                                if (TAG("verb/Reverb~/MapParams/number_obj-4") == objectId)
                                    this->numberobj_23_valin_set(payload);
                        
                                if (TAG("verb/Reverb~/MapParams/number_obj-9") == objectId)
                                    this->numberobj_24_valin_set(payload);
                        
                                if (TAG("verb/Reverb~/MapParams/number_obj-26") == objectId)
                                    this->numberobj_25_valin_set(payload);
                        
                                if (TAG("verb/Reverb~/MapParams/number_obj-2") == objectId)
                                    this->numberobj_26_valin_set(payload);
                        
                                if (TAG("verb/Reverb~/MapParams/number_obj-67") == objectId)
                                    this->numberobj_27_valin_set(payload);
                        
                                if (TAG("verb/Reverb~/MapParams/number_obj-54") == objectId)
                                    this->numberobj_28_valin_set(payload);
                        
                                if (TAG("verb/Reverb~/MapParams/number_obj-21") == objectId)
                                    this->numberobj_29_valin_set(payload);
                        
                                if (TAG("verb/Reverb~/MapParams/number_obj-23") == objectId)
                                    this->numberobj_30_valin_set(payload);
                        
                                if (TAG("verb/Reverb~/MapParams/number_obj-16") == objectId)
                                    this->numberobj_31_valin_set(payload);
                        
                                if (TAG("verb/Reverb~/MapParams/number_obj-18") == objectId)
                                    this->numberobj_32_valin_set(payload);
                        
                                break;
                                }
                            case TAG("format"):
                                {
                                if (TAG("verb/Reverb~/MapParams/number_obj-4") == objectId)
                                    this->numberobj_23_format_set(payload);
                        
                                if (TAG("verb/Reverb~/MapParams/number_obj-9") == objectId)
                                    this->numberobj_24_format_set(payload);
                        
                                if (TAG("verb/Reverb~/MapParams/number_obj-26") == objectId)
                                    this->numberobj_25_format_set(payload);
                        
                                if (TAG("verb/Reverb~/MapParams/number_obj-2") == objectId)
                                    this->numberobj_26_format_set(payload);
                        
                                if (TAG("verb/Reverb~/MapParams/number_obj-67") == objectId)
                                    this->numberobj_27_format_set(payload);
                        
                                if (TAG("verb/Reverb~/MapParams/number_obj-54") == objectId)
                                    this->numberobj_28_format_set(payload);
                        
                                if (TAG("verb/Reverb~/MapParams/number_obj-21") == objectId)
                                    this->numberobj_29_format_set(payload);
                        
                                if (TAG("verb/Reverb~/MapParams/number_obj-23") == objectId)
                                    this->numberobj_30_format_set(payload);
                        
                                if (TAG("verb/Reverb~/MapParams/number_obj-16") == objectId)
                                    this->numberobj_31_format_set(payload);
                        
                                if (TAG("verb/Reverb~/MapParams/number_obj-18") == objectId)
                                    this->numberobj_32_format_set(payload);
                        
                                break;
                                }
                            }
                        }
                        
                        void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
                        
                        void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
                        
                        MessageTagInfo resolveTag(MessageTag tag) const {
                            switch (tag) {
                            case TAG("valout"):
                                {
                                return "valout";
                                }
                            case TAG("verb/Reverb~/MapParams/number_obj-4"):
                                {
                                return "verb/Reverb~/MapParams/number_obj-4";
                                }
                            case TAG("setup"):
                                {
                                return "setup";
                                }
                            case TAG("verb/Reverb~/MapParams/number_obj-9"):
                                {
                                return "verb/Reverb~/MapParams/number_obj-9";
                                }
                            case TAG("verb/Reverb~/MapParams/number_obj-26"):
                                {
                                return "verb/Reverb~/MapParams/number_obj-26";
                                }
                            case TAG("verb/Reverb~/MapParams/number_obj-2"):
                                {
                                return "verb/Reverb~/MapParams/number_obj-2";
                                }
                            case TAG("verb/Reverb~/MapParams/number_obj-67"):
                                {
                                return "verb/Reverb~/MapParams/number_obj-67";
                                }
                            case TAG("verb/Reverb~/MapParams/number_obj-54"):
                                {
                                return "verb/Reverb~/MapParams/number_obj-54";
                                }
                            case TAG("verb/Reverb~/MapParams/number_obj-21"):
                                {
                                return "verb/Reverb~/MapParams/number_obj-21";
                                }
                            case TAG("verb/Reverb~/MapParams/number_obj-23"):
                                {
                                return "verb/Reverb~/MapParams/number_obj-23";
                                }
                            case TAG("verb/Reverb~/MapParams/number_obj-16"):
                                {
                                return "verb/Reverb~/MapParams/number_obj-16";
                                }
                            case TAG("verb/Reverb~/MapParams/number_obj-18"):
                                {
                                return "verb/Reverb~/MapParams/number_obj-18";
                                }
                            case TAG("valin"):
                                {
                                return "valin";
                                }
                            case TAG("format"):
                                {
                                return "format";
                                }
                            }
                        
                            return nullptr;
                        }
                        
                        DataRef* getDataRef(DataRefIndex index)  {
                            switch (index) {
                            default:
                                {
                                return nullptr;
                                }
                            }
                        }
                        
                        DataRefIndex getNumDataRefs() const {
                            return 0;
                        }
                        
                        void fillDataRef(DataRefIndex , DataRef& ) {}
                        
                        void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
                        
                        void initialize() {
                            this->assign_defaults();
                            this->setState();
                        }
                        
                        protected:
                        
                        void numberobj_23_valin_set(number v) {
                            this->numberobj_23_value_set(v);
                        }
                        
                        void numberobj_23_format_set(number v) {
                            this->numberobj_23_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_24_valin_set(number v) {
                            this->numberobj_24_value_set(v);
                        }
                        
                        void numberobj_24_format_set(number v) {
                            this->numberobj_24_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_25_valin_set(number v) {
                            this->numberobj_25_value_set(v);
                        }
                        
                        void numberobj_25_format_set(number v) {
                            this->numberobj_25_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_26_valin_set(number v) {
                            this->numberobj_26_value_set(v);
                        }
                        
                        void numberobj_26_format_set(number v) {
                            this->numberobj_26_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_27_valin_set(number v) {
                            this->numberobj_27_value_set(v);
                        }
                        
                        void numberobj_27_format_set(number v) {
                            this->numberobj_27_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_28_valin_set(number v) {
                            this->numberobj_28_value_set(v);
                        }
                        
                        void numberobj_28_format_set(number v) {
                            this->numberobj_28_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_29_valin_set(number v) {
                            this->numberobj_29_value_set(v);
                        }
                        
                        void numberobj_29_format_set(number v) {
                            this->numberobj_29_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_30_valin_set(number v) {
                            this->numberobj_30_value_set(v);
                        }
                        
                        void numberobj_30_format_set(number v) {
                            this->numberobj_30_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_31_valin_set(number v) {
                            this->numberobj_31_value_set(v);
                        }
                        
                        void numberobj_31_format_set(number v) {
                            this->numberobj_31_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_32_valin_set(number v) {
                            this->numberobj_32_value_set(v);
                        }
                        
                        void numberobj_32_format_set(number v) {
                            this->numberobj_32_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void linetilde_08_target_bang() {}
                        
                        void linetilde_09_target_bang() {}
                        
                        void linetilde_10_target_bang() {}
                        
                        void linetilde_11_target_bang() {}
                        
                        void linetilde_12_target_bang() {}
                        
                        number msToSamps(MillisecondTime ms, number sampleRate) {
                            return ms * sampleRate * 0.001;
                        }
                        
                        MillisecondTime sampsToMs(SampleIndex samps) {
                            return samps * (this->invsr * 1000);
                        }
                        
                        Index getMaxBlockSize() const {
                            return this->maxvs;
                        }
                        
                        number getSampleRate() const {
                            return this->sr;
                        }
                        
                        bool hasFixedVectorSize() const {
                            return false;
                        }
                        
                        Index getNumInputChannels() const {
                            return 0;
                        }
                        
                        Index getNumOutputChannels() const {
                            return 5;
                        }
                        
                        void initializeObjects() {
                            this->numberobj_23_init();
                            this->numberobj_24_init();
                            this->numberobj_25_init();
                            this->numberobj_26_init();
                            this->numberobj_27_init();
                            this->numberobj_28_init();
                            this->numberobj_29_init();
                            this->numberobj_30_init();
                            this->numberobj_31_init();
                            this->numberobj_32_init();
                        }
                        
                        void sendOutlet(OutletIndex index, ParameterValue value) {
                            this->getEngine()->sendOutlet(this, index, value);
                        }
                        
                        void startup() {}
                        
                        void allocateDataRefs() {}
                        
                        void linetilde_08_time_set(number v) {
                            this->linetilde_08_time = v;
                        }
                        
                        void linetilde_08_segments_set(const list& v) {
                            this->linetilde_08_segments = jsCreateListCopy(v);
                        
                            if ((bool)(v->length)) {
                                if (v->length == 1 && this->linetilde_08_time == 0) {
                                    this->linetilde_08_activeRamps->length = 0;
                                    this->linetilde_08_currentValue = v[0];
                                } else {
                                    auto currentTime = this->currentsampletime();
                                    number lastRampValue = this->linetilde_08_currentValue;
                                    number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
                        
                                    for (Index i = 0; i < this->linetilde_08_activeRamps->length; i += 3) {
                                        rampEnd = this->linetilde_08_activeRamps[(Index)(i + 2)];
                        
                                        if (rampEnd > currentTime) {
                                            this->linetilde_08_activeRamps[(Index)(i + 2)] = currentTime;
                                            number diff = rampEnd - currentTime;
                                            number valueDiff = diff * this->linetilde_08_activeRamps[(Index)(i + 1)];
                                            lastRampValue = this->linetilde_08_activeRamps[(Index)i] - valueDiff;
                                            this->linetilde_08_activeRamps[(Index)i] = lastRampValue;
                                            this->linetilde_08_activeRamps->length = i + 3;
                                            rampEnd = currentTime;
                                        } else {
                                            lastRampValue = this->linetilde_08_activeRamps[(Index)i];
                                        }
                                    }
                        
                                    if (rampEnd < currentTime) {
                                        this->linetilde_08_activeRamps->push(lastRampValue);
                                        this->linetilde_08_activeRamps->push(0);
                                        this->linetilde_08_activeRamps->push(currentTime);
                                    }
                        
                                    number lastRampEnd = currentTime;
                        
                                    for (Index i = 0; i < v->length; i += 2) {
                                        number destinationValue = v[(Index)i];
                                        number inc = 0;
                                        number rampTimeInSamples;
                        
                                        if (v->length > i + 1) {
                                            rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
                        
                                            if ((bool)(this->linetilde_08_keepramp)) {
                                                this->linetilde_08_time_set(v[(Index)(i + 1)]);
                                            }
                                        } else {
                                            rampTimeInSamples = this->mstosamps(this->linetilde_08_time);
                                        }
                        
                                        if (rampTimeInSamples <= 0) {
                                            rampTimeInSamples = 1;
                                        }
                        
                                        inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                                        lastRampEnd += rampTimeInSamples;
                                        this->linetilde_08_activeRamps->push(destinationValue);
                                        this->linetilde_08_activeRamps->push(inc);
                                        this->linetilde_08_activeRamps->push(lastRampEnd);
                                        lastRampValue = destinationValue;
                                    }
                                }
                            }
                        }
                        
                        void numberobj_23_output_set(number v) {
                            {
                                list converted = {v};
                                this->linetilde_08_segments_set(converted);
                            }
                        }
                        
                        void numberobj_23_value_set(number v) {
                            this->numberobj_23_value_setter(v);
                            v = this->numberobj_23_value;
                            number localvalue = v;
                        
                            if (this->numberobj_23_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("verb/Reverb~/MapParams/number_obj-4"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_23_output_set(localvalue);
                        }
                        
                        void scale_02_out_set(const list& v) {
                            this->scale_02_out = jsCreateListCopy(v);
                        
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->numberobj_23_value_set(converted);
                            }
                        }
                        
                        void scale_02_input_set(const list& v) {
                            this->scale_02_input = jsCreateListCopy(v);
                            list tmp = {};
                        
                            for (Index i = 0; i < v->length; i++) {
                                tmp->push(this->scale(
                                    v[(Index)i],
                                    this->scale_02_inlow,
                                    this->scale_02_inhigh,
                                    this->scale_02_outlow,
                                    this->scale_02_outhigh,
                                    this->scale_02_power
                                ));
                            }
                        
                            this->scale_02_out_set(tmp);
                        }
                        
                        void numberobj_24_output_set(number v) {
                            {
                                list converted = {v};
                                this->scale_02_input_set(converted);
                            }
                        }
                        
                        void numberobj_24_value_set(number v) {
                            this->numberobj_24_value_setter(v);
                            v = this->numberobj_24_value;
                            number localvalue = v;
                        
                            if (this->numberobj_24_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("verb/Reverb~/MapParams/number_obj-9"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_24_output_set(localvalue);
                        }
                        
                        void eventinlet_11_out1_number_set(number v) {
                            this->numberobj_24_value_set(v);
                        }
                        
                        void linetilde_09_time_set(number v) {
                            this->linetilde_09_time = v;
                        }
                        
                        void linetilde_09_segments_set(const list& v) {
                            this->linetilde_09_segments = jsCreateListCopy(v);
                        
                            if ((bool)(v->length)) {
                                if (v->length == 1 && this->linetilde_09_time == 0) {
                                    this->linetilde_09_activeRamps->length = 0;
                                    this->linetilde_09_currentValue = v[0];
                                } else {
                                    auto currentTime = this->currentsampletime();
                                    number lastRampValue = this->linetilde_09_currentValue;
                                    number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
                        
                                    for (Index i = 0; i < this->linetilde_09_activeRamps->length; i += 3) {
                                        rampEnd = this->linetilde_09_activeRamps[(Index)(i + 2)];
                        
                                        if (rampEnd > currentTime) {
                                            this->linetilde_09_activeRamps[(Index)(i + 2)] = currentTime;
                                            number diff = rampEnd - currentTime;
                                            number valueDiff = diff * this->linetilde_09_activeRamps[(Index)(i + 1)];
                                            lastRampValue = this->linetilde_09_activeRamps[(Index)i] - valueDiff;
                                            this->linetilde_09_activeRamps[(Index)i] = lastRampValue;
                                            this->linetilde_09_activeRamps->length = i + 3;
                                            rampEnd = currentTime;
                                        } else {
                                            lastRampValue = this->linetilde_09_activeRamps[(Index)i];
                                        }
                                    }
                        
                                    if (rampEnd < currentTime) {
                                        this->linetilde_09_activeRamps->push(lastRampValue);
                                        this->linetilde_09_activeRamps->push(0);
                                        this->linetilde_09_activeRamps->push(currentTime);
                                    }
                        
                                    number lastRampEnd = currentTime;
                        
                                    for (Index i = 0; i < v->length; i += 2) {
                                        number destinationValue = v[(Index)i];
                                        number inc = 0;
                                        number rampTimeInSamples;
                        
                                        if (v->length > i + 1) {
                                            rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
                        
                                            if ((bool)(this->linetilde_09_keepramp)) {
                                                this->linetilde_09_time_set(v[(Index)(i + 1)]);
                                            }
                                        } else {
                                            rampTimeInSamples = this->mstosamps(this->linetilde_09_time);
                                        }
                        
                                        if (rampTimeInSamples <= 0) {
                                            rampTimeInSamples = 1;
                                        }
                        
                                        inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                                        lastRampEnd += rampTimeInSamples;
                                        this->linetilde_09_activeRamps->push(destinationValue);
                                        this->linetilde_09_activeRamps->push(inc);
                                        this->linetilde_09_activeRamps->push(lastRampEnd);
                                        lastRampValue = destinationValue;
                                    }
                                }
                            }
                        }
                        
                        void numberobj_25_output_set(number v) {
                            {
                                list converted = {v};
                                this->linetilde_09_segments_set(converted);
                            }
                        }
                        
                        void numberobj_25_value_set(number v) {
                            this->numberobj_25_value_setter(v);
                            v = this->numberobj_25_value;
                            number localvalue = v;
                        
                            if (this->numberobj_25_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("verb/Reverb~/MapParams/number_obj-26"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_25_output_set(localvalue);
                        }
                        
                        void scale_03_out_set(const list& v) {
                            this->scale_03_out = jsCreateListCopy(v);
                        
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->numberobj_25_value_set(converted);
                            }
                        }
                        
                        void scale_03_input_set(const list& v) {
                            this->scale_03_input = jsCreateListCopy(v);
                            list tmp = {};
                        
                            for (Index i = 0; i < v->length; i++) {
                                tmp->push(this->scale(
                                    v[(Index)i],
                                    this->scale_03_inlow,
                                    this->scale_03_inhigh,
                                    this->scale_03_outlow,
                                    this->scale_03_outhigh,
                                    this->scale_03_power
                                ));
                            }
                        
                            this->scale_03_out_set(tmp);
                        }
                        
                        void numberobj_26_output_set(number v) {
                            {
                                list converted = {v};
                                this->scale_03_input_set(converted);
                            }
                        }
                        
                        void numberobj_26_value_set(number v) {
                            this->numberobj_26_value_setter(v);
                            v = this->numberobj_26_value;
                            number localvalue = v;
                        
                            if (this->numberobj_26_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("verb/Reverb~/MapParams/number_obj-2"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_26_output_set(localvalue);
                        }
                        
                        void eventinlet_12_out1_number_set(number v) {
                            this->numberobj_26_value_set(v);
                        }
                        
                        void linetilde_10_time_set(number v) {
                            this->linetilde_10_time = v;
                        }
                        
                        void linetilde_10_segments_set(const list& v) {
                            this->linetilde_10_segments = jsCreateListCopy(v);
                        
                            if ((bool)(v->length)) {
                                if (v->length == 1 && this->linetilde_10_time == 0) {
                                    this->linetilde_10_activeRamps->length = 0;
                                    this->linetilde_10_currentValue = v[0];
                                } else {
                                    auto currentTime = this->currentsampletime();
                                    number lastRampValue = this->linetilde_10_currentValue;
                                    number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
                        
                                    for (Index i = 0; i < this->linetilde_10_activeRamps->length; i += 3) {
                                        rampEnd = this->linetilde_10_activeRamps[(Index)(i + 2)];
                        
                                        if (rampEnd > currentTime) {
                                            this->linetilde_10_activeRamps[(Index)(i + 2)] = currentTime;
                                            number diff = rampEnd - currentTime;
                                            number valueDiff = diff * this->linetilde_10_activeRamps[(Index)(i + 1)];
                                            lastRampValue = this->linetilde_10_activeRamps[(Index)i] - valueDiff;
                                            this->linetilde_10_activeRamps[(Index)i] = lastRampValue;
                                            this->linetilde_10_activeRamps->length = i + 3;
                                            rampEnd = currentTime;
                                        } else {
                                            lastRampValue = this->linetilde_10_activeRamps[(Index)i];
                                        }
                                    }
                        
                                    if (rampEnd < currentTime) {
                                        this->linetilde_10_activeRamps->push(lastRampValue);
                                        this->linetilde_10_activeRamps->push(0);
                                        this->linetilde_10_activeRamps->push(currentTime);
                                    }
                        
                                    number lastRampEnd = currentTime;
                        
                                    for (Index i = 0; i < v->length; i += 2) {
                                        number destinationValue = v[(Index)i];
                                        number inc = 0;
                                        number rampTimeInSamples;
                        
                                        if (v->length > i + 1) {
                                            rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
                        
                                            if ((bool)(this->linetilde_10_keepramp)) {
                                                this->linetilde_10_time_set(v[(Index)(i + 1)]);
                                            }
                                        } else {
                                            rampTimeInSamples = this->mstosamps(this->linetilde_10_time);
                                        }
                        
                                        if (rampTimeInSamples <= 0) {
                                            rampTimeInSamples = 1;
                                        }
                        
                                        inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                                        lastRampEnd += rampTimeInSamples;
                                        this->linetilde_10_activeRamps->push(destinationValue);
                                        this->linetilde_10_activeRamps->push(inc);
                                        this->linetilde_10_activeRamps->push(lastRampEnd);
                                        lastRampValue = destinationValue;
                                    }
                                }
                            }
                        }
                        
                        void numberobj_27_output_set(number v) {
                            {
                                list converted = {v};
                                this->linetilde_10_segments_set(converted);
                            }
                        }
                        
                        void numberobj_27_value_set(number v) {
                            this->numberobj_27_value_setter(v);
                            v = this->numberobj_27_value;
                            number localvalue = v;
                        
                            if (this->numberobj_27_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("verb/Reverb~/MapParams/number_obj-67"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_27_output_set(localvalue);
                        }
                        
                        void scale_04_out_set(const list& v) {
                            this->scale_04_out = jsCreateListCopy(v);
                        
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->numberobj_27_value_set(converted);
                            }
                        }
                        
                        void scale_04_input_set(const list& v) {
                            this->scale_04_input = jsCreateListCopy(v);
                            list tmp = {};
                        
                            for (Index i = 0; i < v->length; i++) {
                                tmp->push(this->scale(
                                    v[(Index)i],
                                    this->scale_04_inlow,
                                    this->scale_04_inhigh,
                                    this->scale_04_outlow,
                                    this->scale_04_outhigh,
                                    this->scale_04_power
                                ));
                            }
                        
                            this->scale_04_out_set(tmp);
                        }
                        
                        void numberobj_28_output_set(number v) {
                            {
                                list converted = {v};
                                this->scale_04_input_set(converted);
                            }
                        }
                        
                        void numberobj_28_value_set(number v) {
                            this->numberobj_28_value_setter(v);
                            v = this->numberobj_28_value;
                            number localvalue = v;
                        
                            if (this->numberobj_28_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("verb/Reverb~/MapParams/number_obj-54"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_28_output_set(localvalue);
                        }
                        
                        void eventinlet_13_out1_number_set(number v) {
                            this->numberobj_28_value_set(v);
                        }
                        
                        void linetilde_11_time_set(number v) {
                            this->linetilde_11_time = v;
                        }
                        
                        void linetilde_11_segments_set(const list& v) {
                            this->linetilde_11_segments = jsCreateListCopy(v);
                        
                            if ((bool)(v->length)) {
                                if (v->length == 1 && this->linetilde_11_time == 0) {
                                    this->linetilde_11_activeRamps->length = 0;
                                    this->linetilde_11_currentValue = v[0];
                                } else {
                                    auto currentTime = this->currentsampletime();
                                    number lastRampValue = this->linetilde_11_currentValue;
                                    number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
                        
                                    for (Index i = 0; i < this->linetilde_11_activeRamps->length; i += 3) {
                                        rampEnd = this->linetilde_11_activeRamps[(Index)(i + 2)];
                        
                                        if (rampEnd > currentTime) {
                                            this->linetilde_11_activeRamps[(Index)(i + 2)] = currentTime;
                                            number diff = rampEnd - currentTime;
                                            number valueDiff = diff * this->linetilde_11_activeRamps[(Index)(i + 1)];
                                            lastRampValue = this->linetilde_11_activeRamps[(Index)i] - valueDiff;
                                            this->linetilde_11_activeRamps[(Index)i] = lastRampValue;
                                            this->linetilde_11_activeRamps->length = i + 3;
                                            rampEnd = currentTime;
                                        } else {
                                            lastRampValue = this->linetilde_11_activeRamps[(Index)i];
                                        }
                                    }
                        
                                    if (rampEnd < currentTime) {
                                        this->linetilde_11_activeRamps->push(lastRampValue);
                                        this->linetilde_11_activeRamps->push(0);
                                        this->linetilde_11_activeRamps->push(currentTime);
                                    }
                        
                                    number lastRampEnd = currentTime;
                        
                                    for (Index i = 0; i < v->length; i += 2) {
                                        number destinationValue = v[(Index)i];
                                        number inc = 0;
                                        number rampTimeInSamples;
                        
                                        if (v->length > i + 1) {
                                            rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
                        
                                            if ((bool)(this->linetilde_11_keepramp)) {
                                                this->linetilde_11_time_set(v[(Index)(i + 1)]);
                                            }
                                        } else {
                                            rampTimeInSamples = this->mstosamps(this->linetilde_11_time);
                                        }
                        
                                        if (rampTimeInSamples <= 0) {
                                            rampTimeInSamples = 1;
                                        }
                        
                                        inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                                        lastRampEnd += rampTimeInSamples;
                                        this->linetilde_11_activeRamps->push(destinationValue);
                                        this->linetilde_11_activeRamps->push(inc);
                                        this->linetilde_11_activeRamps->push(lastRampEnd);
                                        lastRampValue = destinationValue;
                                    }
                                }
                            }
                        }
                        
                        void numberobj_29_output_set(number v) {
                            {
                                list converted = {v};
                                this->linetilde_11_segments_set(converted);
                            }
                        }
                        
                        void numberobj_29_value_set(number v) {
                            this->numberobj_29_value_setter(v);
                            v = this->numberobj_29_value;
                            number localvalue = v;
                        
                            if (this->numberobj_29_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("verb/Reverb~/MapParams/number_obj-21"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_29_output_set(localvalue);
                        }
                        
                        void scale_05_out_set(const list& v) {
                            this->scale_05_out = jsCreateListCopy(v);
                        
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->numberobj_29_value_set(converted);
                            }
                        }
                        
                        void scale_05_input_set(const list& v) {
                            this->scale_05_input = jsCreateListCopy(v);
                            list tmp = {};
                        
                            for (Index i = 0; i < v->length; i++) {
                                tmp->push(this->scale(
                                    v[(Index)i],
                                    this->scale_05_inlow,
                                    this->scale_05_inhigh,
                                    this->scale_05_outlow,
                                    this->scale_05_outhigh,
                                    this->scale_05_power
                                ));
                            }
                        
                            this->scale_05_out_set(tmp);
                        }
                        
                        void numberobj_30_output_set(number v) {
                            {
                                list converted = {v};
                                this->scale_05_input_set(converted);
                            }
                        }
                        
                        void numberobj_30_value_set(number v) {
                            this->numberobj_30_value_setter(v);
                            v = this->numberobj_30_value;
                            number localvalue = v;
                        
                            if (this->numberobj_30_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("verb/Reverb~/MapParams/number_obj-23"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_30_output_set(localvalue);
                        }
                        
                        void eventinlet_14_out1_number_set(number v) {
                            this->numberobj_30_value_set(v);
                        }
                        
                        void linetilde_12_time_set(number v) {
                            this->linetilde_12_time = v;
                        }
                        
                        void linetilde_12_segments_set(const list& v) {
                            this->linetilde_12_segments = jsCreateListCopy(v);
                        
                            if ((bool)(v->length)) {
                                if (v->length == 1 && this->linetilde_12_time == 0) {
                                    this->linetilde_12_activeRamps->length = 0;
                                    this->linetilde_12_currentValue = v[0];
                                } else {
                                    auto currentTime = this->currentsampletime();
                                    number lastRampValue = this->linetilde_12_currentValue;
                                    number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
                        
                                    for (Index i = 0; i < this->linetilde_12_activeRamps->length; i += 3) {
                                        rampEnd = this->linetilde_12_activeRamps[(Index)(i + 2)];
                        
                                        if (rampEnd > currentTime) {
                                            this->linetilde_12_activeRamps[(Index)(i + 2)] = currentTime;
                                            number diff = rampEnd - currentTime;
                                            number valueDiff = diff * this->linetilde_12_activeRamps[(Index)(i + 1)];
                                            lastRampValue = this->linetilde_12_activeRamps[(Index)i] - valueDiff;
                                            this->linetilde_12_activeRamps[(Index)i] = lastRampValue;
                                            this->linetilde_12_activeRamps->length = i + 3;
                                            rampEnd = currentTime;
                                        } else {
                                            lastRampValue = this->linetilde_12_activeRamps[(Index)i];
                                        }
                                    }
                        
                                    if (rampEnd < currentTime) {
                                        this->linetilde_12_activeRamps->push(lastRampValue);
                                        this->linetilde_12_activeRamps->push(0);
                                        this->linetilde_12_activeRamps->push(currentTime);
                                    }
                        
                                    number lastRampEnd = currentTime;
                        
                                    for (Index i = 0; i < v->length; i += 2) {
                                        number destinationValue = v[(Index)i];
                                        number inc = 0;
                                        number rampTimeInSamples;
                        
                                        if (v->length > i + 1) {
                                            rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
                        
                                            if ((bool)(this->linetilde_12_keepramp)) {
                                                this->linetilde_12_time_set(v[(Index)(i + 1)]);
                                            }
                                        } else {
                                            rampTimeInSamples = this->mstosamps(this->linetilde_12_time);
                                        }
                        
                                        if (rampTimeInSamples <= 0) {
                                            rampTimeInSamples = 1;
                                        }
                        
                                        inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                                        lastRampEnd += rampTimeInSamples;
                                        this->linetilde_12_activeRamps->push(destinationValue);
                                        this->linetilde_12_activeRamps->push(inc);
                                        this->linetilde_12_activeRamps->push(lastRampEnd);
                                        lastRampValue = destinationValue;
                                    }
                                }
                            }
                        }
                        
                        void numberobj_31_output_set(number v) {
                            {
                                list converted = {v};
                                this->linetilde_12_segments_set(converted);
                            }
                        }
                        
                        void numberobj_31_value_set(number v) {
                            this->numberobj_31_value_setter(v);
                            v = this->numberobj_31_value;
                            number localvalue = v;
                        
                            if (this->numberobj_31_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("verb/Reverb~/MapParams/number_obj-16"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_31_output_set(localvalue);
                        }
                        
                        void expr_11_out1_set(number v) {
                            this->expr_11_out1 = v;
                            this->numberobj_31_value_set(this->expr_11_out1);
                        }
                        
                        void expr_11_in1_set(number in1) {
                            this->expr_11_in1 = in1;
                        
                            this->expr_11_out1_set(
                                (this->expr_11_in2 == 0 ? 0 : (this->expr_11_in2 == 0. ? 0. : this->expr_11_in1 / this->expr_11_in2))
                            );//#map:verb/Reverb~/MapParams//_obj-17:1
                        }
                        
                        void numberobj_32_output_set(number v) {
                            this->expr_11_in1_set(v);
                        }
                        
                        void numberobj_32_value_set(number v) {
                            this->numberobj_32_value_setter(v);
                            v = this->numberobj_32_value;
                            number localvalue = v;
                        
                            if (this->numberobj_32_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("verb/Reverb~/MapParams/number_obj-18"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_32_output_set(localvalue);
                        }
                        
                        void eventinlet_15_out1_number_set(number v) {
                            this->numberobj_32_value_set(v);
                        }
                        
                        void numberobj_24_value_bang() {
                            number v = this->numberobj_24_value;
                            number localvalue = v;
                        
                            if (this->numberobj_24_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("verb/Reverb~/MapParams/number_obj-9"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_24_output_set(localvalue);
                        }
                        
                        void eventinlet_11_out1_bang_bang() {
                            this->numberobj_24_value_bang();
                        }
                        
                        void eventinlet_11_out1_list_set(const list& v) {
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->numberobj_24_value_set(converted);
                            }
                        }
                        
                        void numberobj_26_value_bang() {
                            number v = this->numberobj_26_value;
                            number localvalue = v;
                        
                            if (this->numberobj_26_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("verb/Reverb~/MapParams/number_obj-2"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_26_output_set(localvalue);
                        }
                        
                        void eventinlet_12_out1_bang_bang() {
                            this->numberobj_26_value_bang();
                        }
                        
                        void eventinlet_12_out1_list_set(const list& v) {
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->numberobj_26_value_set(converted);
                            }
                        }
                        
                        void numberobj_28_value_bang() {
                            number v = this->numberobj_28_value;
                            number localvalue = v;
                        
                            if (this->numberobj_28_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("verb/Reverb~/MapParams/number_obj-54"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_28_output_set(localvalue);
                        }
                        
                        void eventinlet_13_out1_bang_bang() {
                            this->numberobj_28_value_bang();
                        }
                        
                        void eventinlet_13_out1_list_set(const list& v) {
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->numberobj_28_value_set(converted);
                            }
                        }
                        
                        void numberobj_30_value_bang() {
                            number v = this->numberobj_30_value;
                            number localvalue = v;
                        
                            if (this->numberobj_30_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("verb/Reverb~/MapParams/number_obj-23"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_30_output_set(localvalue);
                        }
                        
                        void eventinlet_14_out1_bang_bang() {
                            this->numberobj_30_value_bang();
                        }
                        
                        void eventinlet_14_out1_list_set(const list& v) {
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->numberobj_30_value_set(converted);
                            }
                        }
                        
                        void numberobj_32_value_bang() {
                            number v = this->numberobj_32_value;
                            number localvalue = v;
                        
                            if (this->numberobj_32_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("verb/Reverb~/MapParams/number_obj-18"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_32_output_set(localvalue);
                        }
                        
                        void eventinlet_15_out1_bang_bang() {
                            this->numberobj_32_value_bang();
                        }
                        
                        void eventinlet_15_out1_list_set(const list& v) {
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->numberobj_32_value_set(converted);
                            }
                        }
                        
                        void linetilde_08_perform(SampleValue * out, Index n) {
                            auto __linetilde_08_time = this->linetilde_08_time;
                            auto __linetilde_08_keepramp = this->linetilde_08_keepramp;
                            auto __linetilde_08_currentValue = this->linetilde_08_currentValue;
                            Index i = 0;
                        
                            if ((bool)(this->linetilde_08_activeRamps->length)) {
                                while ((bool)(this->linetilde_08_activeRamps->length) && i < n) {
                                    number destinationValue = this->linetilde_08_activeRamps[0];
                                    number inc = this->linetilde_08_activeRamps[1];
                                    number rampTimeInSamples = this->linetilde_08_activeRamps[2] - this->audioProcessSampleCount - i;
                                    number val = __linetilde_08_currentValue;
                        
                                    while (rampTimeInSamples > 0 && i < n) {
                                        out[(Index)i] = val;
                                        val += inc;
                                        i++;
                                        rampTimeInSamples--;
                                    }
                        
                                    if (rampTimeInSamples <= 0) {
                                        val = destinationValue;
                                        this->linetilde_08_activeRamps->splice(0, 3);
                        
                                        if ((bool)(!(bool)(this->linetilde_08_activeRamps->length))) {
                                            this->getEngine()->scheduleClockEventWithValue(
                                                this,
                                                -62043057,
                                                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                                                0
                                            );;
                        
                                            if ((bool)(!(bool)(__linetilde_08_keepramp))) {
                                                __linetilde_08_time = 0;
                                            }
                                        }
                                    }
                        
                                    __linetilde_08_currentValue = val;
                                }
                            }
                        
                            while (i < n) {
                                out[(Index)i] = __linetilde_08_currentValue;
                                i++;
                            }
                        
                            this->linetilde_08_currentValue = __linetilde_08_currentValue;
                            this->linetilde_08_time = __linetilde_08_time;
                        }
                        
                        void linetilde_09_perform(SampleValue * out, Index n) {
                            auto __linetilde_09_time = this->linetilde_09_time;
                            auto __linetilde_09_keepramp = this->linetilde_09_keepramp;
                            auto __linetilde_09_currentValue = this->linetilde_09_currentValue;
                            Index i = 0;
                        
                            if ((bool)(this->linetilde_09_activeRamps->length)) {
                                while ((bool)(this->linetilde_09_activeRamps->length) && i < n) {
                                    number destinationValue = this->linetilde_09_activeRamps[0];
                                    number inc = this->linetilde_09_activeRamps[1];
                                    number rampTimeInSamples = this->linetilde_09_activeRamps[2] - this->audioProcessSampleCount - i;
                                    number val = __linetilde_09_currentValue;
                        
                                    while (rampTimeInSamples > 0 && i < n) {
                                        out[(Index)i] = val;
                                        val += inc;
                                        i++;
                                        rampTimeInSamples--;
                                    }
                        
                                    if (rampTimeInSamples <= 0) {
                                        val = destinationValue;
                                        this->linetilde_09_activeRamps->splice(0, 3);
                        
                                        if ((bool)(!(bool)(this->linetilde_09_activeRamps->length))) {
                                            this->getEngine()->scheduleClockEventWithValue(
                                                this,
                                                -444440180,
                                                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                                                0
                                            );;
                        
                                            if ((bool)(!(bool)(__linetilde_09_keepramp))) {
                                                __linetilde_09_time = 0;
                                            }
                                        }
                                    }
                        
                                    __linetilde_09_currentValue = val;
                                }
                            }
                        
                            while (i < n) {
                                out[(Index)i] = __linetilde_09_currentValue;
                                i++;
                            }
                        
                            this->linetilde_09_currentValue = __linetilde_09_currentValue;
                            this->linetilde_09_time = __linetilde_09_time;
                        }
                        
                        void linetilde_10_perform(SampleValue * out, Index n) {
                            auto __linetilde_10_time = this->linetilde_10_time;
                            auto __linetilde_10_keepramp = this->linetilde_10_keepramp;
                            auto __linetilde_10_currentValue = this->linetilde_10_currentValue;
                            Index i = 0;
                        
                            if ((bool)(this->linetilde_10_activeRamps->length)) {
                                while ((bool)(this->linetilde_10_activeRamps->length) && i < n) {
                                    number destinationValue = this->linetilde_10_activeRamps[0];
                                    number inc = this->linetilde_10_activeRamps[1];
                                    number rampTimeInSamples = this->linetilde_10_activeRamps[2] - this->audioProcessSampleCount - i;
                                    number val = __linetilde_10_currentValue;
                        
                                    while (rampTimeInSamples > 0 && i < n) {
                                        out[(Index)i] = val;
                                        val += inc;
                                        i++;
                                        rampTimeInSamples--;
                                    }
                        
                                    if (rampTimeInSamples <= 0) {
                                        val = destinationValue;
                                        this->linetilde_10_activeRamps->splice(0, 3);
                        
                                        if ((bool)(!(bool)(this->linetilde_10_activeRamps->length))) {
                                            this->getEngine()->scheduleClockEventWithValue(
                                                this,
                                                -1621164530,
                                                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                                                0
                                            );;
                        
                                            if ((bool)(!(bool)(__linetilde_10_keepramp))) {
                                                __linetilde_10_time = 0;
                                            }
                                        }
                                    }
                        
                                    __linetilde_10_currentValue = val;
                                }
                            }
                        
                            while (i < n) {
                                out[(Index)i] = __linetilde_10_currentValue;
                                i++;
                            }
                        
                            this->linetilde_10_currentValue = __linetilde_10_currentValue;
                            this->linetilde_10_time = __linetilde_10_time;
                        }
                        
                        void linetilde_11_perform(SampleValue * out, Index n) {
                            auto __linetilde_11_time = this->linetilde_11_time;
                            auto __linetilde_11_keepramp = this->linetilde_11_keepramp;
                            auto __linetilde_11_currentValue = this->linetilde_11_currentValue;
                            Index i = 0;
                        
                            if ((bool)(this->linetilde_11_activeRamps->length)) {
                                while ((bool)(this->linetilde_11_activeRamps->length) && i < n) {
                                    number destinationValue = this->linetilde_11_activeRamps[0];
                                    number inc = this->linetilde_11_activeRamps[1];
                                    number rampTimeInSamples = this->linetilde_11_activeRamps[2] - this->audioProcessSampleCount - i;
                                    number val = __linetilde_11_currentValue;
                        
                                    while (rampTimeInSamples > 0 && i < n) {
                                        out[(Index)i] = val;
                                        val += inc;
                                        i++;
                                        rampTimeInSamples--;
                                    }
                        
                                    if (rampTimeInSamples <= 0) {
                                        val = destinationValue;
                                        this->linetilde_11_activeRamps->splice(0, 3);
                        
                                        if ((bool)(!(bool)(this->linetilde_11_activeRamps->length))) {
                                            this->getEngine()->scheduleClockEventWithValue(
                                                this,
                                                -2003561653,
                                                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                                                0
                                            );;
                        
                                            if ((bool)(!(bool)(__linetilde_11_keepramp))) {
                                                __linetilde_11_time = 0;
                                            }
                                        }
                                    }
                        
                                    __linetilde_11_currentValue = val;
                                }
                            }
                        
                            while (i < n) {
                                out[(Index)i] = __linetilde_11_currentValue;
                                i++;
                            }
                        
                            this->linetilde_11_currentValue = __linetilde_11_currentValue;
                            this->linetilde_11_time = __linetilde_11_time;
                        }
                        
                        void linetilde_12_perform(SampleValue * out, Index n) {
                            auto __linetilde_12_time = this->linetilde_12_time;
                            auto __linetilde_12_keepramp = this->linetilde_12_keepramp;
                            auto __linetilde_12_currentValue = this->linetilde_12_currentValue;
                            Index i = 0;
                        
                            if ((bool)(this->linetilde_12_activeRamps->length)) {
                                while ((bool)(this->linetilde_12_activeRamps->length) && i < n) {
                                    number destinationValue = this->linetilde_12_activeRamps[0];
                                    number inc = this->linetilde_12_activeRamps[1];
                                    number rampTimeInSamples = this->linetilde_12_activeRamps[2] - this->audioProcessSampleCount - i;
                                    number val = __linetilde_12_currentValue;
                        
                                    while (rampTimeInSamples > 0 && i < n) {
                                        out[(Index)i] = val;
                                        val += inc;
                                        i++;
                                        rampTimeInSamples--;
                                    }
                        
                                    if (rampTimeInSamples <= 0) {
                                        val = destinationValue;
                                        this->linetilde_12_activeRamps->splice(0, 3);
                        
                                        if ((bool)(!(bool)(this->linetilde_12_activeRamps->length))) {
                                            this->getEngine()->scheduleClockEventWithValue(
                                                this,
                                                1114681293,
                                                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                                                0
                                            );;
                        
                                            if ((bool)(!(bool)(__linetilde_12_keepramp))) {
                                                __linetilde_12_time = 0;
                                            }
                                        }
                                    }
                        
                                    __linetilde_12_currentValue = val;
                                }
                            }
                        
                            while (i < n) {
                                out[(Index)i] = __linetilde_12_currentValue;
                                i++;
                            }
                        
                            this->linetilde_12_currentValue = __linetilde_12_currentValue;
                            this->linetilde_12_time = __linetilde_12_time;
                        }
                        
                        void stackprotect_perform(Index n) {
                            RNBO_UNUSED(n);
                            auto __stackprotect_count = this->stackprotect_count;
                            __stackprotect_count = 0;
                            this->stackprotect_count = __stackprotect_count;
                        }
                        
                        void numberobj_23_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_23_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_23_value = localvalue;
                        }
                        
                        void numberobj_24_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_24_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_24_value = localvalue;
                        }
                        
                        void numberobj_25_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_25_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_25_value = localvalue;
                        }
                        
                        void numberobj_26_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_26_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_26_value = localvalue;
                        }
                        
                        void numberobj_27_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_27_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_27_value = localvalue;
                        }
                        
                        void numberobj_28_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_28_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_28_value = localvalue;
                        }
                        
                        void numberobj_29_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_29_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_29_value = localvalue;
                        }
                        
                        void numberobj_30_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_30_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_30_value = localvalue;
                        }
                        
                        void numberobj_31_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_31_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_31_value = localvalue;
                        }
                        
                        void numberobj_32_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_32_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_32_value = localvalue;
                        }
                        
                        void numberobj_23_init() {
                            this->numberobj_23_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("verb/Reverb~/MapParams/number_obj-4"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_23_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_23_value;
                        }
                        
                        void numberobj_23_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_23_value_set(preset["value"]);
                        }
                        
                        void numberobj_24_init() {
                            this->numberobj_24_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("verb/Reverb~/MapParams/number_obj-9"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_24_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_24_value;
                        }
                        
                        void numberobj_24_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_24_value_set(preset["value"]);
                        }
                        
                        void numberobj_25_init() {
                            this->numberobj_25_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("verb/Reverb~/MapParams/number_obj-26"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_25_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_25_value;
                        }
                        
                        void numberobj_25_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_25_value_set(preset["value"]);
                        }
                        
                        void numberobj_26_init() {
                            this->numberobj_26_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("verb/Reverb~/MapParams/number_obj-2"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_26_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_26_value;
                        }
                        
                        void numberobj_26_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_26_value_set(preset["value"]);
                        }
                        
                        void numberobj_27_init() {
                            this->numberobj_27_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("verb/Reverb~/MapParams/number_obj-67"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_27_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_27_value;
                        }
                        
                        void numberobj_27_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_27_value_set(preset["value"]);
                        }
                        
                        void numberobj_28_init() {
                            this->numberobj_28_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("verb/Reverb~/MapParams/number_obj-54"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_28_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_28_value;
                        }
                        
                        void numberobj_28_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_28_value_set(preset["value"]);
                        }
                        
                        void numberobj_29_init() {
                            this->numberobj_29_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("verb/Reverb~/MapParams/number_obj-21"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_29_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_29_value;
                        }
                        
                        void numberobj_29_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_29_value_set(preset["value"]);
                        }
                        
                        void numberobj_30_init() {
                            this->numberobj_30_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("verb/Reverb~/MapParams/number_obj-23"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_30_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_30_value;
                        }
                        
                        void numberobj_30_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_30_value_set(preset["value"]);
                        }
                        
                        void numberobj_31_init() {
                            this->numberobj_31_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("verb/Reverb~/MapParams/number_obj-16"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_31_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_31_value;
                        }
                        
                        void numberobj_31_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_31_value_set(preset["value"]);
                        }
                        
                        void numberobj_32_init() {
                            this->numberobj_32_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("verb/Reverb~/MapParams/number_obj-18"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_32_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_32_value;
                        }
                        
                        void numberobj_32_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_32_value_set(preset["value"]);
                        }
                        
                        bool stackprotect_check() {
                            this->stackprotect_count++;
                        
                            if (this->stackprotect_count > 128) {
                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                return true;
                            }
                        
                            return false;
                        }
                        
                        void updateTime(MillisecondTime time) {
                            this->_currentTime = time;
                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                        
                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                        
                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                this->sampleOffsetIntoNextAudioBuffer = 0;
                        }
                        
                        void assign_defaults()
                        {
                            linetilde_08_time = 50;
                            linetilde_08_keepramp = 1;
                            numberobj_23_value = 0;
                            numberobj_23_value_setter(numberobj_23_value);
                            scale_02_inlow = 0;
                            scale_02_inhigh = 100;
                            scale_02_outlow = 12000;
                            scale_02_outhigh = 300;
                            scale_02_power = 0.333333;
                            numberobj_24_value = 0;
                            numberobj_24_value_setter(numberobj_24_value);
                            linetilde_09_time = 50;
                            linetilde_09_keepramp = 1;
                            numberobj_25_value = 0;
                            numberobj_25_value_setter(numberobj_25_value);
                            scale_03_inlow = 0;
                            scale_03_inhigh = 100;
                            scale_03_outlow = 0.05;
                            scale_03_outhigh = 0.75;
                            scale_03_power = 1;
                            numberobj_26_value = 0;
                            numberobj_26_value_setter(numberobj_26_value);
                            numberobj_27_value = 0;
                            numberobj_27_value_setter(numberobj_27_value);
                            scale_04_inlow = 0;
                            scale_04_inhigh = 100;
                            scale_04_outlow = 0;
                            scale_04_outhigh = 50;
                            scale_04_power = 1.322;
                            linetilde_10_time = 50;
                            linetilde_10_keepramp = 1;
                            numberobj_28_value = 0;
                            numberobj_28_value_setter(numberobj_28_value);
                            linetilde_11_time = 50;
                            linetilde_11_keepramp = 1;
                            numberobj_29_value = 0;
                            numberobj_29_value_setter(numberobj_29_value);
                            scale_05_inlow = 0;
                            scale_05_inhigh = 100;
                            scale_05_outlow = 0.01;
                            scale_05_outhigh = 1.6;
                            scale_05_power = 1;
                            numberobj_30_value = 0;
                            numberobj_30_value_setter(numberobj_30_value);
                            linetilde_12_time = 50;
                            linetilde_12_keepramp = 1;
                            numberobj_31_value = 0;
                            numberobj_31_value_setter(numberobj_31_value);
                            expr_11_in1 = 0;
                            expr_11_in2 = 100;
                            expr_11_out1 = 0;
                            numberobj_32_value = 0;
                            numberobj_32_value_setter(numberobj_32_value);
                            _currentTime = 0;
                            audioProcessSampleCount = 0;
                            sampleOffsetIntoNextAudioBuffer = 0;
                            zeroBuffer = nullptr;
                            dummyBuffer = nullptr;
                            didAllocateSignals = 0;
                            vs = 0;
                            maxvs = 0;
                            sr = 44100;
                            invsr = 0.00002267573696;
                            linetilde_08_currentValue = 2700;
                            numberobj_23_currentFormat = 6;
                            numberobj_23_lastValue = 0;
                            numberobj_24_currentFormat = 6;
                            numberobj_24_lastValue = 0;
                            linetilde_09_currentValue = 0.5;
                            numberobj_25_currentFormat = 6;
                            numberobj_25_lastValue = 0;
                            numberobj_26_currentFormat = 6;
                            numberobj_26_lastValue = 0;
                            numberobj_27_currentFormat = 6;
                            numberobj_27_lastValue = 0;
                            linetilde_10_currentValue = 20;
                            numberobj_28_currentFormat = 6;
                            numberobj_28_lastValue = 0;
                            linetilde_11_currentValue = 0.8;
                            numberobj_29_currentFormat = 6;
                            numberobj_29_lastValue = 0;
                            numberobj_30_currentFormat = 6;
                            numberobj_30_lastValue = 0;
                            linetilde_12_currentValue = 0.5;
                            numberobj_31_currentFormat = 6;
                            numberobj_31_lastValue = 0;
                            numberobj_32_currentFormat = 6;
                            numberobj_32_lastValue = 0;
                            stackprotect_count = 0;
                            _voiceIndex = 0;
                            _noteNumber = 0;
                            isMuted = 1;
                            parameterOffset = 0;
                        }
                        
                        // member variables
                        
                            list linetilde_08_segments;
                            number linetilde_08_time;
                            number linetilde_08_keepramp;
                            number numberobj_23_value;
                            list scale_02_input;
                            number scale_02_inlow;
                            number scale_02_inhigh;
                            number scale_02_outlow;
                            number scale_02_outhigh;
                            number scale_02_power;
                            list scale_02_out;
                            number numberobj_24_value;
                            list linetilde_09_segments;
                            number linetilde_09_time;
                            number linetilde_09_keepramp;
                            number numberobj_25_value;
                            list scale_03_input;
                            number scale_03_inlow;
                            number scale_03_inhigh;
                            number scale_03_outlow;
                            number scale_03_outhigh;
                            number scale_03_power;
                            list scale_03_out;
                            number numberobj_26_value;
                            number numberobj_27_value;
                            list scale_04_input;
                            number scale_04_inlow;
                            number scale_04_inhigh;
                            number scale_04_outlow;
                            number scale_04_outhigh;
                            number scale_04_power;
                            list scale_04_out;
                            list linetilde_10_segments;
                            number linetilde_10_time;
                            number linetilde_10_keepramp;
                            number numberobj_28_value;
                            list linetilde_11_segments;
                            number linetilde_11_time;
                            number linetilde_11_keepramp;
                            number numberobj_29_value;
                            list scale_05_input;
                            number scale_05_inlow;
                            number scale_05_inhigh;
                            number scale_05_outlow;
                            number scale_05_outhigh;
                            number scale_05_power;
                            list scale_05_out;
                            number numberobj_30_value;
                            list linetilde_12_segments;
                            number linetilde_12_time;
                            number linetilde_12_keepramp;
                            number numberobj_31_value;
                            number expr_11_in1;
                            number expr_11_in2;
                            number expr_11_out1;
                            number numberobj_32_value;
                            MillisecondTime _currentTime;
                            UInt64 audioProcessSampleCount;
                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                            signal zeroBuffer;
                            signal dummyBuffer;
                            bool didAllocateSignals;
                            Index vs;
                            Index maxvs;
                            number sr;
                            number invsr;
                            list linetilde_08_activeRamps;
                            number linetilde_08_currentValue;
                            Int numberobj_23_currentFormat;
                            number numberobj_23_lastValue;
                            Int numberobj_24_currentFormat;
                            number numberobj_24_lastValue;
                            list linetilde_09_activeRamps;
                            number linetilde_09_currentValue;
                            Int numberobj_25_currentFormat;
                            number numberobj_25_lastValue;
                            Int numberobj_26_currentFormat;
                            number numberobj_26_lastValue;
                            Int numberobj_27_currentFormat;
                            number numberobj_27_lastValue;
                            list linetilde_10_activeRamps;
                            number linetilde_10_currentValue;
                            Int numberobj_28_currentFormat;
                            number numberobj_28_lastValue;
                            list linetilde_11_activeRamps;
                            number linetilde_11_currentValue;
                            Int numberobj_29_currentFormat;
                            number numberobj_29_lastValue;
                            Int numberobj_30_currentFormat;
                            number numberobj_30_lastValue;
                            list linetilde_12_activeRamps;
                            number linetilde_12_currentValue;
                            Int numberobj_31_currentFormat;
                            number numberobj_31_lastValue;
                            Int numberobj_32_currentFormat;
                            number numberobj_32_lastValue;
                            number stackprotect_count;
                            Index _voiceIndex;
                            Int _noteNumber;
                            Index isMuted;
                            ParameterIndex parameterOffset;
                        
            };
            
            class RNBOSubpatcher_798 : public PatcherInterfaceImpl {
                        
                        friend class RNBOSubpatcher_805;
                        friend class rnbomatic;
                        
                        public:
                        
                        RNBOSubpatcher_798()
                        {
                        }
                        
                        ~RNBOSubpatcher_798()
                        {
                        }
                        
                        virtual RNBOSubpatcher_805* getPatcher() const {
                            return static_cast<RNBOSubpatcher_805 *>(_parentPatcher);
                        }
                        
                        rnbomatic* getTopLevelPatcher() {
                            return this->getPatcher()->getTopLevelPatcher();
                        }
                        
                        void cancelClockEvents()
                        {
                        }
                        
                        inline number linearinterp(number frac, number x, number y) {
                            return x + (y - x) * frac;
                        }
                        
                        inline number cubicinterp(number a, number w, number x, number y, number z) {
                            number a1 = 1. + a;
                            number aa = a * a1;
                            number b = 1. - a;
                            number b1 = 2. - a;
                            number bb = b * b1;
                            number fw = -.1666667 * bb * a;
                            number fx = .5 * bb * a1;
                            number fy = .5 * aa * b1;
                            number fz = -.1666667 * aa * b;
                            return w * fw + x * fx + y * fy + z * fz;
                        }
                        
                        inline number fastcubicinterp(number a, number w, number x, number y, number z) {
                            number a2 = a * a;
                            number f0 = z - y - w + x;
                            number f1 = w - x - f0;
                            number f2 = y - w;
                            number f3 = x;
                            return f0 * a * a2 + f1 * a2 + f2 * a + f3;
                        }
                        
                        inline number splineinterp(number a, number w, number x, number y, number z) {
                            number a2 = a * a;
                            number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
                            number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
                            number f2 = -0.5 * w + 0.5 * y;
                            return f0 * a * a2 + f1 * a2 + f2 * a + x;
                        }
                        
                        inline number spline6interp(number a, number y0, number y1, number y2, number y3, number y4, number y5) {
                            number ym2py2 = y0 + y4;
                            number ym1py1 = y1 + y3;
                            number y2mym2 = y4 - y0;
                            number y1mym1 = y3 - y1;
                            number sixthym1py1 = (number)1 / (number)6.0 * ym1py1;
                            number c0 = (number)1 / (number)120.0 * ym2py2 + (number)13 / (number)60.0 * ym1py1 + (number)11 / (number)20.0 * y2;
                            number c1 = (number)1 / (number)24.0 * y2mym2 + (number)5 / (number)12.0 * y1mym1;
                            number c2 = (number)1 / (number)12.0 * ym2py2 + sixthym1py1 - (number)1 / (number)2.0 * y2;
                            number c3 = (number)1 / (number)12.0 * y2mym2 - (number)1 / (number)6.0 * y1mym1;
                            number c4 = (number)1 / (number)24.0 * ym2py2 - sixthym1py1 + (number)1 / (number)4.0 * y2;
                            number c5 = (number)1 / (number)120.0 * (y5 - y0) + (number)1 / (number)24.0 * (y1 - y4) + (number)1 / (number)12.0 * (y3 - y2);
                            return ((((c5 * a + c4) * a + c3) * a + c2) * a + c1) * a + c0;
                        }
                        
                        inline number cosT8(number r) {
                            number t84 = 56.0;
                            number t83 = 1680.0;
                            number t82 = 20160.0;
                            number t81 = 2.4801587302e-05;
                            number t73 = 42.0;
                            number t72 = 840.0;
                            number t71 = 1.9841269841e-04;
                        
                            if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
                                number rr = r * r;
                                return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
                            } else if (r > 0.0) {
                                r -= 1.57079632679489661923132169163975144;
                                number rr = r * r;
                                return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                            } else {
                                r += 1.57079632679489661923132169163975144;
                                number rr = r * r;
                                return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                            }
                        }
                        
                        inline number cosineinterp(number frac, number x, number y) {
                            number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
                            return x * (1.0 - a2) + y * a2;
                        }
                        
                        number mstosamps(MillisecondTime ms) {
                            return ms * this->sr * 0.001;
                        }
                        
                        number samplerate() const {
                            return this->sr;
                        }
                        
                        Index vectorsize() const {
                            return this->vs;
                        }
                        
                        number maximum(number x, number y) {
                            return (x < y ? y : x);
                        }
                        
                        Index getNumMidiInputPorts() const {
                            return 0;
                        }
                        
                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                        
                        Index getNumMidiOutputPorts() const {
                            return 0;
                        }
                        
                        void process(
                            const SampleValue * const* inputs,
                            Index numInputs,
                            SampleValue * const* outputs,
                            Index numOutputs,
                            Index n
                        ) {
                            this->vs = n;
                            this->updateTime(this->getEngine()->getCurrentTime());
                            SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                            const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                            const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                            const SampleValue * in3 = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
                            const SampleValue * in4 = (numInputs >= 4 && inputs[3] ? inputs[3] : this->zeroBuffer);
                            const SampleValue * in5 = (numInputs >= 5 && inputs[4] ? inputs[4] : this->zeroBuffer);
                            const SampleValue * in6 = (numInputs >= 6 && inputs[5] ? inputs[5] : this->zeroBuffer);
                            const SampleValue * in7 = (numInputs >= 7 && inputs[6] ? inputs[6] : this->zeroBuffer);
                            const SampleValue * in8 = (numInputs >= 8 && inputs[7] ? inputs[7] : this->zeroBuffer);
                            const SampleValue * in9 = (numInputs >= 9 && inputs[8] ? inputs[8] : this->zeroBuffer);
                            this->dspexpr_58_perform(in8, in9, this->signals[0], n);
                            this->dspexpr_57_perform(this->signals[0], this->dspexpr_57_in2, this->signals[1], n);
                        
                            this->comb_tilde_16_perform(
                                in7,
                                this->signals[1],
                                this->comb_tilde_16_gain,
                                this->comb_tilde_16_ffGain,
                                this->comb_tilde_16_fbGain,
                                this->signals[2],
                                n
                            );
                        
                            this->dspexpr_49_perform(this->signals[0], this->dspexpr_49_in2, this->signals[1], n);
                        
                            this->comb_tilde_10_perform(
                                in1,
                                this->signals[1],
                                this->comb_tilde_10_gain,
                                this->comb_tilde_10_ffGain,
                                this->comb_tilde_10_fbGain,
                                this->signals[3],
                                n
                            );
                        
                            this->dspexpr_50_perform(this->signals[0], this->dspexpr_50_in2, this->signals[1], n);
                        
                            this->comb_tilde_11_perform(
                                in2,
                                this->signals[1],
                                this->comb_tilde_11_gain,
                                this->comb_tilde_11_ffGain,
                                this->comb_tilde_11_fbGain,
                                this->signals[4],
                                n
                            );
                        
                            this->dspexpr_51_perform(this->signals[0], this->dspexpr_51_in2, this->signals[1], n);
                        
                            this->comb_tilde_12_perform(
                                in3,
                                this->signals[1],
                                this->comb_tilde_12_gain,
                                this->comb_tilde_12_ffGain,
                                this->comb_tilde_12_fbGain,
                                this->signals[5],
                                n
                            );
                        
                            this->dspexpr_53_perform(this->signals[0], this->dspexpr_53_in2, this->signals[1], n);
                        
                            this->comb_tilde_13_perform(
                                in4,
                                this->signals[1],
                                this->comb_tilde_13_gain,
                                this->comb_tilde_13_ffGain,
                                this->comb_tilde_13_fbGain,
                                this->signals[6],
                                n
                            );
                        
                            this->dspexpr_55_perform(this->signals[0], this->dspexpr_55_in2, this->signals[1], n);
                        
                            this->comb_tilde_14_perform(
                                in5,
                                this->signals[1],
                                this->comb_tilde_14_gain,
                                this->comb_tilde_14_ffGain,
                                this->comb_tilde_14_fbGain,
                                this->signals[7],
                                n
                            );
                        
                            this->dspexpr_56_perform(this->signals[0], this->dspexpr_56_in2, this->signals[1], n);
                        
                            this->comb_tilde_15_perform(
                                in6,
                                this->signals[1],
                                this->comb_tilde_15_gain,
                                this->comb_tilde_15_ffGain,
                                this->comb_tilde_15_fbGain,
                                this->signals[0],
                                n
                            );
                        
                            this->signaladder_16_perform(
                                this->signals[2],
                                this->signals[0],
                                this->signals[7],
                                this->signals[5],
                                this->signals[5],
                                n
                            );
                        
                            this->dspexpr_54_perform(this->signals[5], this->dspexpr_54_in2, this->signals[1], n);
                        
                            this->signaladder_17_perform(
                                this->signals[6],
                                this->signals[4],
                                this->signals[3],
                                this->signals[1],
                                this->signals[1],
                                n
                            );
                        
                            this->dspexpr_52_perform(this->signals[1], this->dspexpr_52_in2, out1, n);
                            this->stackprotect_perform(n);
                            this->audioProcessSampleCount += this->vs;
                        }
                        
                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                Index i;
                        
                                for (i = 0; i < 8; i++) {
                                    this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                                }
                        
                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                this->didAllocateSignals = true;
                            }
                        
                            const bool sampleRateChanged = sampleRate != this->sr;
                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                        
                            if (sampleRateChanged || maxvsChanged) {
                                this->vs = maxBlockSize;
                                this->maxvs = maxBlockSize;
                                this->sr = sampleRate;
                                this->invsr = 1 / sampleRate;
                            }
                        
                            this->comb_tilde_16_dspsetup(forceDSPSetup);
                            this->comb_tilde_10_dspsetup(forceDSPSetup);
                            this->comb_tilde_11_dspsetup(forceDSPSetup);
                            this->comb_tilde_12_dspsetup(forceDSPSetup);
                            this->comb_tilde_13_dspsetup(forceDSPSetup);
                            this->comb_tilde_14_dspsetup(forceDSPSetup);
                            this->comb_tilde_15_dspsetup(forceDSPSetup);
                        
                            if (sampleRateChanged)
                                this->onSampleRateChanged(sampleRate);
                        }
                        
                        void setProbingTarget(MessageTag id) {
                            switch (id) {
                            default:
                                {
                                this->setProbingIndex(-1);
                                break;
                                }
                            }
                        }
                        
                        void setProbingIndex(ProbingIndex ) {}
                        
                        Index getProbingChannels(MessageTag outletId) const {
                            RNBO_UNUSED(outletId);
                            return 0;
                        }
                        
                        Index getIsMuted()  {
                            return this->isMuted;
                        }
                        
                        void setIsMuted(Index v)  {
                            this->isMuted = v;
                        }
                        
                        void onSampleRateChanged(double ) {}
                        
                        Index getPatcherSerial() const {
                            return 0;
                        }
                        
                        void getState(PatcherStateInterface& ) {}
                        
                        void setState() {}
                        
                        void getPreset(PatcherStateInterface& ) {}
                        
                        void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                        
                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValue(index, value, time);
                        }
                        
                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                            this->setParameterValue(index, this->getParameterValue(index), time);
                        }
                        
                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValueNormalized(index, value, time);
                        }
                        
                        ParameterValue getParameterValue(ParameterIndex index)  {
                            switch (index) {
                            default:
                                {
                                return 0;
                                }
                            }
                        }
                        
                        ParameterIndex getNumSignalInParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumSignalOutParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumParameters() const {
                            return 0;
                        }
                        
                        ConstCharPointer getParameterName(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        ConstCharPointer getParameterId(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                        
                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                        }
                        
                        void setParameterOffset(ParameterIndex offset) {
                            this->parameterOffset = offset;
                        }
                        
                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                            if (steps == 1) {
                                if (normalizedValue > 0) {
                                    normalizedValue = 1.;
                                }
                            } else {
                                ParameterValue oneStep = (number)1. / (steps - 1);
                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                normalizedValue = numberOfSteps * oneStep;
                            }
                        
                            return normalizedValue;
                        }
                        
                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        void scheduleParamInit(ParameterIndex index, Index order) {
                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                        }
                        
                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                        
                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                        
                        void processOutletEvent(
                            EngineLink* sender,
                            OutletIndex index,
                            ParameterValue value,
                            MillisecondTime time
                        ) {
                            this->updateTime(time);
                            this->processOutletAtCurrentTime(sender, index, value);
                        }
                        
                        void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
                        
                        void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
                        
                        void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
                        
                        MessageTagInfo resolveTag(MessageTag tag) const {
                            switch (tag) {
                        
                            }
                        
                            return nullptr;
                        }
                        
                        DataRef* getDataRef(DataRefIndex index)  {
                            switch (index) {
                            case 6:
                                {
                                return addressOf(this->comb_tilde_10_feedForward_bufferobj);
                                break;
                                }
                            case 7:
                                {
                                return addressOf(this->comb_tilde_10_feedBack_bufferobj);
                                break;
                                }
                            case 8:
                                {
                                return addressOf(this->comb_tilde_11_feedForward_bufferobj);
                                break;
                                }
                            case 9:
                                {
                                return addressOf(this->comb_tilde_11_feedBack_bufferobj);
                                break;
                                }
                            case 10:
                                {
                                return addressOf(this->comb_tilde_12_feedForward_bufferobj);
                                break;
                                }
                            case 11:
                                {
                                return addressOf(this->comb_tilde_12_feedBack_bufferobj);
                                break;
                                }
                            case 12:
                                {
                                return addressOf(this->comb_tilde_13_feedForward_bufferobj);
                                break;
                                }
                            case 13:
                                {
                                return addressOf(this->comb_tilde_13_feedBack_bufferobj);
                                break;
                                }
                            case 14:
                                {
                                return addressOf(this->comb_tilde_14_feedForward_bufferobj);
                                break;
                                }
                            case 15:
                                {
                                return addressOf(this->comb_tilde_14_feedBack_bufferobj);
                                break;
                                }
                            case 16:
                                {
                                return addressOf(this->comb_tilde_15_feedForward_bufferobj);
                                break;
                                }
                            case 17:
                                {
                                return addressOf(this->comb_tilde_15_feedBack_bufferobj);
                                break;
                                }
                            case 18:
                                {
                                return addressOf(this->comb_tilde_16_feedForward_bufferobj);
                                break;
                                }
                            case 19:
                                {
                                return addressOf(this->comb_tilde_16_feedBack_bufferobj);
                                break;
                                }
                            default:
                                {
                                return nullptr;
                                }
                            }
                        }
                        
                        DataRefIndex getNumDataRefs() const {
                            return 14;
                        }
                        
                        void fillDataRef(DataRefIndex , DataRef& ) {}
                        
                        void zeroDataRef(DataRef& ref) {
                            ref->setZero();
                        }
                        
                        void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                            this->updateTime(time);
                        
                            if (index == 6) {
                                this->comb_tilde_10_feedForward_buffer = new Float64Buffer(this->comb_tilde_10_feedForward_bufferobj);
                            }
                        
                            if (index == 7) {
                                this->comb_tilde_10_feedBack_buffer = new Float64Buffer(this->comb_tilde_10_feedBack_bufferobj);
                            }
                        
                            if (index == 8) {
                                this->comb_tilde_11_feedForward_buffer = new Float64Buffer(this->comb_tilde_11_feedForward_bufferobj);
                            }
                        
                            if (index == 9) {
                                this->comb_tilde_11_feedBack_buffer = new Float64Buffer(this->comb_tilde_11_feedBack_bufferobj);
                            }
                        
                            if (index == 10) {
                                this->comb_tilde_12_feedForward_buffer = new Float64Buffer(this->comb_tilde_12_feedForward_bufferobj);
                            }
                        
                            if (index == 11) {
                                this->comb_tilde_12_feedBack_buffer = new Float64Buffer(this->comb_tilde_12_feedBack_bufferobj);
                            }
                        
                            if (index == 12) {
                                this->comb_tilde_13_feedForward_buffer = new Float64Buffer(this->comb_tilde_13_feedForward_bufferobj);
                            }
                        
                            if (index == 13) {
                                this->comb_tilde_13_feedBack_buffer = new Float64Buffer(this->comb_tilde_13_feedBack_bufferobj);
                            }
                        
                            if (index == 14) {
                                this->comb_tilde_14_feedForward_buffer = new Float64Buffer(this->comb_tilde_14_feedForward_bufferobj);
                            }
                        
                            if (index == 15) {
                                this->comb_tilde_14_feedBack_buffer = new Float64Buffer(this->comb_tilde_14_feedBack_bufferobj);
                            }
                        
                            if (index == 16) {
                                this->comb_tilde_15_feedForward_buffer = new Float64Buffer(this->comb_tilde_15_feedForward_bufferobj);
                            }
                        
                            if (index == 17) {
                                this->comb_tilde_15_feedBack_buffer = new Float64Buffer(this->comb_tilde_15_feedBack_bufferobj);
                            }
                        
                            if (index == 18) {
                                this->comb_tilde_16_feedForward_buffer = new Float64Buffer(this->comb_tilde_16_feedForward_bufferobj);
                            }
                        
                            if (index == 19) {
                                this->comb_tilde_16_feedBack_buffer = new Float64Buffer(this->comb_tilde_16_feedBack_bufferobj);
                            }
                        }
                        
                        void initialize() {
                            this->comb_tilde_10_feedForward_bufferobj = initDataRef("comb_tilde_10_feedForward_bufferobj", true, nullptr, "buffer~");
                            this->comb_tilde_10_feedBack_bufferobj = initDataRef("comb_tilde_10_feedBack_bufferobj", true, nullptr, "buffer~");
                            this->comb_tilde_11_feedForward_bufferobj = initDataRef("comb_tilde_11_feedForward_bufferobj", true, nullptr, "buffer~");
                            this->comb_tilde_11_feedBack_bufferobj = initDataRef("comb_tilde_11_feedBack_bufferobj", true, nullptr, "buffer~");
                            this->comb_tilde_12_feedForward_bufferobj = initDataRef("comb_tilde_12_feedForward_bufferobj", true, nullptr, "buffer~");
                            this->comb_tilde_12_feedBack_bufferobj = initDataRef("comb_tilde_12_feedBack_bufferobj", true, nullptr, "buffer~");
                            this->comb_tilde_13_feedForward_bufferobj = initDataRef("comb_tilde_13_feedForward_bufferobj", true, nullptr, "buffer~");
                            this->comb_tilde_13_feedBack_bufferobj = initDataRef("comb_tilde_13_feedBack_bufferobj", true, nullptr, "buffer~");
                            this->comb_tilde_14_feedForward_bufferobj = initDataRef("comb_tilde_14_feedForward_bufferobj", true, nullptr, "buffer~");
                            this->comb_tilde_14_feedBack_bufferobj = initDataRef("comb_tilde_14_feedBack_bufferobj", true, nullptr, "buffer~");
                            this->comb_tilde_15_feedForward_bufferobj = initDataRef("comb_tilde_15_feedForward_bufferobj", true, nullptr, "buffer~");
                            this->comb_tilde_15_feedBack_bufferobj = initDataRef("comb_tilde_15_feedBack_bufferobj", true, nullptr, "buffer~");
                            this->comb_tilde_16_feedForward_bufferobj = initDataRef("comb_tilde_16_feedForward_bufferobj", true, nullptr, "buffer~");
                            this->comb_tilde_16_feedBack_bufferobj = initDataRef("comb_tilde_16_feedBack_bufferobj", true, nullptr, "buffer~");
                            this->assign_defaults();
                            this->setState();
                            this->comb_tilde_10_feedForward_bufferobj->setIndex(6);
                            this->comb_tilde_10_feedForward_buffer = new Float64Buffer(this->comb_tilde_10_feedForward_bufferobj);
                            this->comb_tilde_10_feedBack_bufferobj->setIndex(7);
                            this->comb_tilde_10_feedBack_buffer = new Float64Buffer(this->comb_tilde_10_feedBack_bufferobj);
                            this->comb_tilde_11_feedForward_bufferobj->setIndex(8);
                            this->comb_tilde_11_feedForward_buffer = new Float64Buffer(this->comb_tilde_11_feedForward_bufferobj);
                            this->comb_tilde_11_feedBack_bufferobj->setIndex(9);
                            this->comb_tilde_11_feedBack_buffer = new Float64Buffer(this->comb_tilde_11_feedBack_bufferobj);
                            this->comb_tilde_12_feedForward_bufferobj->setIndex(10);
                            this->comb_tilde_12_feedForward_buffer = new Float64Buffer(this->comb_tilde_12_feedForward_bufferobj);
                            this->comb_tilde_12_feedBack_bufferobj->setIndex(11);
                            this->comb_tilde_12_feedBack_buffer = new Float64Buffer(this->comb_tilde_12_feedBack_bufferobj);
                            this->comb_tilde_13_feedForward_bufferobj->setIndex(12);
                            this->comb_tilde_13_feedForward_buffer = new Float64Buffer(this->comb_tilde_13_feedForward_bufferobj);
                            this->comb_tilde_13_feedBack_bufferobj->setIndex(13);
                            this->comb_tilde_13_feedBack_buffer = new Float64Buffer(this->comb_tilde_13_feedBack_bufferobj);
                            this->comb_tilde_14_feedForward_bufferobj->setIndex(14);
                            this->comb_tilde_14_feedForward_buffer = new Float64Buffer(this->comb_tilde_14_feedForward_bufferobj);
                            this->comb_tilde_14_feedBack_bufferobj->setIndex(15);
                            this->comb_tilde_14_feedBack_buffer = new Float64Buffer(this->comb_tilde_14_feedBack_bufferobj);
                            this->comb_tilde_15_feedForward_bufferobj->setIndex(16);
                            this->comb_tilde_15_feedForward_buffer = new Float64Buffer(this->comb_tilde_15_feedForward_bufferobj);
                            this->comb_tilde_15_feedBack_bufferobj->setIndex(17);
                            this->comb_tilde_15_feedBack_buffer = new Float64Buffer(this->comb_tilde_15_feedBack_bufferobj);
                            this->comb_tilde_16_feedForward_bufferobj->setIndex(18);
                            this->comb_tilde_16_feedForward_buffer = new Float64Buffer(this->comb_tilde_16_feedForward_bufferobj);
                            this->comb_tilde_16_feedBack_bufferobj->setIndex(19);
                            this->comb_tilde_16_feedBack_buffer = new Float64Buffer(this->comb_tilde_16_feedBack_bufferobj);
                        }
                        
                        protected:
                        
                        number msToSamps(MillisecondTime ms, number sampleRate) {
                            return ms * sampleRate * 0.001;
                        }
                        
                        MillisecondTime sampsToMs(SampleIndex samps) {
                            return samps * (this->invsr * 1000);
                        }
                        
                        Index getMaxBlockSize() const {
                            return this->maxvs;
                        }
                        
                        number getSampleRate() const {
                            return this->sr;
                        }
                        
                        bool hasFixedVectorSize() const {
                            return false;
                        }
                        
                        Index getNumInputChannels() const {
                            return 9;
                        }
                        
                        Index getNumOutputChannels() const {
                            return 1;
                        }
                        
                        void initializeObjects() {
                            this->comb_tilde_10_feedForward_init();
                            this->comb_tilde_10_feedBack_init();
                            this->comb_tilde_10_init();
                            this->comb_tilde_11_feedForward_init();
                            this->comb_tilde_11_feedBack_init();
                            this->comb_tilde_11_init();
                            this->comb_tilde_12_feedForward_init();
                            this->comb_tilde_12_feedBack_init();
                            this->comb_tilde_12_init();
                            this->comb_tilde_13_feedForward_init();
                            this->comb_tilde_13_feedBack_init();
                            this->comb_tilde_13_init();
                            this->comb_tilde_14_feedForward_init();
                            this->comb_tilde_14_feedBack_init();
                            this->comb_tilde_14_init();
                            this->comb_tilde_15_feedForward_init();
                            this->comb_tilde_15_feedBack_init();
                            this->comb_tilde_15_init();
                            this->comb_tilde_16_feedForward_init();
                            this->comb_tilde_16_feedBack_init();
                            this->comb_tilde_16_init();
                        }
                        
                        void sendOutlet(OutletIndex index, ParameterValue value) {
                            this->getEngine()->sendOutlet(this, index, value);
                        }
                        
                        void startup() {}
                        
                        void allocateDataRefs() {
                            this->comb_tilde_10_feedForward_buffer = this->comb_tilde_10_feedForward_buffer->allocateIfNeeded();
                        
                            if (this->comb_tilde_10_feedForward_bufferobj->hasRequestedSize()) {
                                if (this->comb_tilde_10_feedForward_bufferobj->wantsFill())
                                    this->zeroDataRef(this->comb_tilde_10_feedForward_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(6);
                            }
                        
                            this->comb_tilde_10_feedBack_buffer = this->comb_tilde_10_feedBack_buffer->allocateIfNeeded();
                        
                            if (this->comb_tilde_10_feedBack_bufferobj->hasRequestedSize()) {
                                if (this->comb_tilde_10_feedBack_bufferobj->wantsFill())
                                    this->zeroDataRef(this->comb_tilde_10_feedBack_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(7);
                            }
                        
                            this->comb_tilde_11_feedForward_buffer = this->comb_tilde_11_feedForward_buffer->allocateIfNeeded();
                        
                            if (this->comb_tilde_11_feedForward_bufferobj->hasRequestedSize()) {
                                if (this->comb_tilde_11_feedForward_bufferobj->wantsFill())
                                    this->zeroDataRef(this->comb_tilde_11_feedForward_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(8);
                            }
                        
                            this->comb_tilde_11_feedBack_buffer = this->comb_tilde_11_feedBack_buffer->allocateIfNeeded();
                        
                            if (this->comb_tilde_11_feedBack_bufferobj->hasRequestedSize()) {
                                if (this->comb_tilde_11_feedBack_bufferobj->wantsFill())
                                    this->zeroDataRef(this->comb_tilde_11_feedBack_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(9);
                            }
                        
                            this->comb_tilde_12_feedForward_buffer = this->comb_tilde_12_feedForward_buffer->allocateIfNeeded();
                        
                            if (this->comb_tilde_12_feedForward_bufferobj->hasRequestedSize()) {
                                if (this->comb_tilde_12_feedForward_bufferobj->wantsFill())
                                    this->zeroDataRef(this->comb_tilde_12_feedForward_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(10);
                            }
                        
                            this->comb_tilde_12_feedBack_buffer = this->comb_tilde_12_feedBack_buffer->allocateIfNeeded();
                        
                            if (this->comb_tilde_12_feedBack_bufferobj->hasRequestedSize()) {
                                if (this->comb_tilde_12_feedBack_bufferobj->wantsFill())
                                    this->zeroDataRef(this->comb_tilde_12_feedBack_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(11);
                            }
                        
                            this->comb_tilde_13_feedForward_buffer = this->comb_tilde_13_feedForward_buffer->allocateIfNeeded();
                        
                            if (this->comb_tilde_13_feedForward_bufferobj->hasRequestedSize()) {
                                if (this->comb_tilde_13_feedForward_bufferobj->wantsFill())
                                    this->zeroDataRef(this->comb_tilde_13_feedForward_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(12);
                            }
                        
                            this->comb_tilde_13_feedBack_buffer = this->comb_tilde_13_feedBack_buffer->allocateIfNeeded();
                        
                            if (this->comb_tilde_13_feedBack_bufferobj->hasRequestedSize()) {
                                if (this->comb_tilde_13_feedBack_bufferobj->wantsFill())
                                    this->zeroDataRef(this->comb_tilde_13_feedBack_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(13);
                            }
                        
                            this->comb_tilde_14_feedForward_buffer = this->comb_tilde_14_feedForward_buffer->allocateIfNeeded();
                        
                            if (this->comb_tilde_14_feedForward_bufferobj->hasRequestedSize()) {
                                if (this->comb_tilde_14_feedForward_bufferobj->wantsFill())
                                    this->zeroDataRef(this->comb_tilde_14_feedForward_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(14);
                            }
                        
                            this->comb_tilde_14_feedBack_buffer = this->comb_tilde_14_feedBack_buffer->allocateIfNeeded();
                        
                            if (this->comb_tilde_14_feedBack_bufferobj->hasRequestedSize()) {
                                if (this->comb_tilde_14_feedBack_bufferobj->wantsFill())
                                    this->zeroDataRef(this->comb_tilde_14_feedBack_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(15);
                            }
                        
                            this->comb_tilde_15_feedForward_buffer = this->comb_tilde_15_feedForward_buffer->allocateIfNeeded();
                        
                            if (this->comb_tilde_15_feedForward_bufferobj->hasRequestedSize()) {
                                if (this->comb_tilde_15_feedForward_bufferobj->wantsFill())
                                    this->zeroDataRef(this->comb_tilde_15_feedForward_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(16);
                            }
                        
                            this->comb_tilde_15_feedBack_buffer = this->comb_tilde_15_feedBack_buffer->allocateIfNeeded();
                        
                            if (this->comb_tilde_15_feedBack_bufferobj->hasRequestedSize()) {
                                if (this->comb_tilde_15_feedBack_bufferobj->wantsFill())
                                    this->zeroDataRef(this->comb_tilde_15_feedBack_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(17);
                            }
                        
                            this->comb_tilde_16_feedForward_buffer = this->comb_tilde_16_feedForward_buffer->allocateIfNeeded();
                        
                            if (this->comb_tilde_16_feedForward_bufferobj->hasRequestedSize()) {
                                if (this->comb_tilde_16_feedForward_bufferobj->wantsFill())
                                    this->zeroDataRef(this->comb_tilde_16_feedForward_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(18);
                            }
                        
                            this->comb_tilde_16_feedBack_buffer = this->comb_tilde_16_feedBack_buffer->allocateIfNeeded();
                        
                            if (this->comb_tilde_16_feedBack_bufferobj->hasRequestedSize()) {
                                if (this->comb_tilde_16_feedBack_bufferobj->wantsFill())
                                    this->zeroDataRef(this->comb_tilde_16_feedBack_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(19);
                            }
                        }
                        
                        void dspexpr_58_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                            }
                        }
                        
                        void dspexpr_57_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                            RNBO_UNUSED(in2);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * 52;//#map:_###_obj_###_:1
                            }
                        }
                        
                        void comb_tilde_16_perform(
                            const Sample * x,
                            const Sample * delayTime,
                            number gain,
                            number ffGain,
                            number fbGain,
                            SampleValue * out1,
                            Index n
                        ) {
                            RNBO_UNUSED(fbGain);
                            RNBO_UNUSED(ffGain);
                            RNBO_UNUSED(gain);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                number __fbGain = 0;
                                number __ffGain = 1;
                                number __gain = 0;
                                number __delayTime = delayTime[(Index)i];
                                __delayTime = this->mstosamps(__delayTime);
                                __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                                __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                                __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                                __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                                number tmp = x[(Index)i] * __gain;
                                number ff = this->comb_tilde_16_feedForward_read(__delayTime, 0);
                                number fb = this->comb_tilde_16_feedBack_read(__delayTime, 0);
                                number ov = tmp + ff * __ffGain + fb * __fbGain;
                                fixdenorm(ov);
                                this->comb_tilde_16_feedForward_write(x[(Index)i]);
                                this->comb_tilde_16_feedBack_write(ov);
                                this->comb_tilde_16_feedForward_step();
                                this->comb_tilde_16_feedBack_step();
                                out1[(Index)i] = ov;
                            }
                        }
                        
                        void dspexpr_49_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                            RNBO_UNUSED(in2);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * 110;//#map:_###_obj_###_:1
                            }
                        }
                        
                        void comb_tilde_10_perform(
                            const Sample * x,
                            const Sample * delayTime,
                            number gain,
                            number ffGain,
                            number fbGain,
                            SampleValue * out1,
                            Index n
                        ) {
                            RNBO_UNUSED(fbGain);
                            RNBO_UNUSED(ffGain);
                            RNBO_UNUSED(gain);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                number __fbGain = 0;
                                number __ffGain = 1;
                                number __gain = 0;
                                number __delayTime = delayTime[(Index)i];
                                __delayTime = this->mstosamps(__delayTime);
                                __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                                __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                                __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                                __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                                number tmp = x[(Index)i] * __gain;
                                number ff = this->comb_tilde_10_feedForward_read(__delayTime, 0);
                                number fb = this->comb_tilde_10_feedBack_read(__delayTime, 0);
                                number ov = tmp + ff * __ffGain + fb * __fbGain;
                                fixdenorm(ov);
                                this->comb_tilde_10_feedForward_write(x[(Index)i]);
                                this->comb_tilde_10_feedBack_write(ov);
                                this->comb_tilde_10_feedForward_step();
                                this->comb_tilde_10_feedBack_step();
                                out1[(Index)i] = ov;
                            }
                        }
                        
                        void dspexpr_50_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                            RNBO_UNUSED(in2);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * 135;//#map:_###_obj_###_:1
                            }
                        }
                        
                        void comb_tilde_11_perform(
                            const Sample * x,
                            const Sample * delayTime,
                            number gain,
                            number ffGain,
                            number fbGain,
                            SampleValue * out1,
                            Index n
                        ) {
                            RNBO_UNUSED(fbGain);
                            RNBO_UNUSED(ffGain);
                            RNBO_UNUSED(gain);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                number __fbGain = 0;
                                number __ffGain = 1;
                                number __gain = 0;
                                number __delayTime = delayTime[(Index)i];
                                __delayTime = this->mstosamps(__delayTime);
                                __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                                __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                                __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                                __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                                number tmp = x[(Index)i] * __gain;
                                number ff = this->comb_tilde_11_feedForward_read(__delayTime, 0);
                                number fb = this->comb_tilde_11_feedBack_read(__delayTime, 0);
                                number ov = tmp + ff * __ffGain + fb * __fbGain;
                                fixdenorm(ov);
                                this->comb_tilde_11_feedForward_write(x[(Index)i]);
                                this->comb_tilde_11_feedBack_write(ov);
                                this->comb_tilde_11_feedForward_step();
                                this->comb_tilde_11_feedBack_step();
                                out1[(Index)i] = ov;
                            }
                        }
                        
                        void dspexpr_51_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                            RNBO_UNUSED(in2);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * 55;//#map:_###_obj_###_:1
                            }
                        }
                        
                        void comb_tilde_12_perform(
                            const Sample * x,
                            const Sample * delayTime,
                            number gain,
                            number ffGain,
                            number fbGain,
                            SampleValue * out1,
                            Index n
                        ) {
                            RNBO_UNUSED(fbGain);
                            RNBO_UNUSED(ffGain);
                            RNBO_UNUSED(gain);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                number __fbGain = 0;
                                number __ffGain = 1;
                                number __gain = 0;
                                number __delayTime = delayTime[(Index)i];
                                __delayTime = this->mstosamps(__delayTime);
                                __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                                __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                                __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                                __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                                number tmp = x[(Index)i] * __gain;
                                number ff = this->comb_tilde_12_feedForward_read(__delayTime, 0);
                                number fb = this->comb_tilde_12_feedBack_read(__delayTime, 0);
                                number ov = tmp + ff * __ffGain + fb * __fbGain;
                                fixdenorm(ov);
                                this->comb_tilde_12_feedForward_write(x[(Index)i]);
                                this->comb_tilde_12_feedBack_write(ov);
                                this->comb_tilde_12_feedForward_step();
                                this->comb_tilde_12_feedBack_step();
                                out1[(Index)i] = ov;
                            }
                        }
                        
                        void dspexpr_53_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                            RNBO_UNUSED(in2);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * 3;//#map:_###_obj_###_:1
                            }
                        }
                        
                        void comb_tilde_13_perform(
                            const Sample * x,
                            const Sample * delayTime,
                            number gain,
                            number ffGain,
                            number fbGain,
                            SampleValue * out1,
                            Index n
                        ) {
                            RNBO_UNUSED(fbGain);
                            RNBO_UNUSED(ffGain);
                            RNBO_UNUSED(gain);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                number __fbGain = 0;
                                number __ffGain = 1;
                                number __gain = 0;
                                number __delayTime = delayTime[(Index)i];
                                __delayTime = this->mstosamps(__delayTime);
                                __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                                __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                                __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                                __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                                number tmp = x[(Index)i] * __gain;
                                number ff = this->comb_tilde_13_feedForward_read(__delayTime, 0);
                                number fb = this->comb_tilde_13_feedBack_read(__delayTime, 0);
                                number ov = tmp + ff * __ffGain + fb * __fbGain;
                                fixdenorm(ov);
                                this->comb_tilde_13_feedForward_write(x[(Index)i]);
                                this->comb_tilde_13_feedBack_write(ov);
                                this->comb_tilde_13_feedForward_step();
                                this->comb_tilde_13_feedBack_step();
                                out1[(Index)i] = ov;
                            }
                        }
                        
                        void dspexpr_55_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                            RNBO_UNUSED(in2);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * 35;//#map:_###_obj_###_:1
                            }
                        }
                        
                        void comb_tilde_14_perform(
                            const Sample * x,
                            const Sample * delayTime,
                            number gain,
                            number ffGain,
                            number fbGain,
                            SampleValue * out1,
                            Index n
                        ) {
                            RNBO_UNUSED(fbGain);
                            RNBO_UNUSED(ffGain);
                            RNBO_UNUSED(gain);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                number __fbGain = 0;
                                number __ffGain = 1;
                                number __gain = 0;
                                number __delayTime = delayTime[(Index)i];
                                __delayTime = this->mstosamps(__delayTime);
                                __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                                __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                                __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                                __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                                number tmp = x[(Index)i] * __gain;
                                number ff = this->comb_tilde_14_feedForward_read(__delayTime, 0);
                                number fb = this->comb_tilde_14_feedBack_read(__delayTime, 0);
                                number ov = tmp + ff * __ffGain + fb * __fbGain;
                                fixdenorm(ov);
                                this->comb_tilde_14_feedForward_write(x[(Index)i]);
                                this->comb_tilde_14_feedBack_write(ov);
                                this->comb_tilde_14_feedForward_step();
                                this->comb_tilde_14_feedBack_step();
                                out1[(Index)i] = ov;
                            }
                        }
                        
                        void dspexpr_56_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                            RNBO_UNUSED(in2);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * 27;//#map:_###_obj_###_:1
                            }
                        }
                        
                        void comb_tilde_15_perform(
                            const Sample * x,
                            const Sample * delayTime,
                            number gain,
                            number ffGain,
                            number fbGain,
                            SampleValue * out1,
                            Index n
                        ) {
                            RNBO_UNUSED(fbGain);
                            RNBO_UNUSED(ffGain);
                            RNBO_UNUSED(gain);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                number __fbGain = 0;
                                number __ffGain = 1;
                                number __gain = 0;
                                number __delayTime = delayTime[(Index)i];
                                __delayTime = this->mstosamps(__delayTime);
                                __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                                __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                                __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                                __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                                number tmp = x[(Index)i] * __gain;
                                number ff = this->comb_tilde_15_feedForward_read(__delayTime, 0);
                                number fb = this->comb_tilde_15_feedBack_read(__delayTime, 0);
                                number ov = tmp + ff * __ffGain + fb * __fbGain;
                                fixdenorm(ov);
                                this->comb_tilde_15_feedForward_write(x[(Index)i]);
                                this->comb_tilde_15_feedBack_write(ov);
                                this->comb_tilde_15_feedForward_step();
                                this->comb_tilde_15_feedBack_step();
                                out1[(Index)i] = ov;
                            }
                        }
                        
                        void signaladder_16_perform(
                            const SampleValue * in1,
                            const SampleValue * in2,
                            const SampleValue * in3,
                            const SampleValue * in4,
                            SampleValue * out,
                            Index n
                        ) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out[(Index)i] = in1[(Index)i] + in2[(Index)i] + in3[(Index)i] + in4[(Index)i];
                            }
                        }
                        
                        void dspexpr_54_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                            RNBO_UNUSED(in2);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * -1;//#map:_###_obj_###_:1
                            }
                        }
                        
                        void signaladder_17_perform(
                            const SampleValue * in1,
                            const SampleValue * in2,
                            const SampleValue * in3,
                            const SampleValue * in4,
                            SampleValue * out,
                            Index n
                        ) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out[(Index)i] = in1[(Index)i] + in2[(Index)i] + in3[(Index)i] + in4[(Index)i];
                            }
                        }
                        
                        void dspexpr_52_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                            RNBO_UNUSED(in2);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * 0.355;//#map:_###_obj_###_:1
                            }
                        }
                        
                        void stackprotect_perform(Index n) {
                            RNBO_UNUSED(n);
                            auto __stackprotect_count = this->stackprotect_count;
                            __stackprotect_count = 0;
                            this->stackprotect_count = __stackprotect_count;
                        }
                        
                        void comb_tilde_10_feedForward_step() {
                            this->comb_tilde_10_feedForward_reader++;
                        
                            if (this->comb_tilde_10_feedForward_reader >= (int)(this->comb_tilde_10_feedForward_buffer->getSize()))
                                this->comb_tilde_10_feedForward_reader = 0;
                        }
                        
                        number comb_tilde_10_feedForward_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->comb_tilde_10_feedForward_buffer->getSize()) + this->comb_tilde_10_feedForward_reader - ((size > this->comb_tilde_10_feedForward__maxdelay ? this->comb_tilde_10_feedForward__maxdelay : (size < (this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer) ? this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->comb_tilde_10_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                                ), this->comb_tilde_10_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->comb_tilde_10_feedForward_buffer->getSize()) + this->comb_tilde_10_feedForward_reader - ((size > this->comb_tilde_10_feedForward__maxdelay ? this->comb_tilde_10_feedForward__maxdelay : (size < (1 + this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer) ? 1 + this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->comb_tilde_10_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                                ), this->comb_tilde_10_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                                ), this->comb_tilde_10_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                                ), this->comb_tilde_10_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->comb_tilde_10_feedForward_buffer->getSize()) + this->comb_tilde_10_feedForward_reader - ((size > this->comb_tilde_10_feedForward__maxdelay ? this->comb_tilde_10_feedForward__maxdelay : (size < (1 + this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer) ? 1 + this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->comb_tilde_10_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                                ), this->comb_tilde_10_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                                ), this->comb_tilde_10_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                                ), this->comb_tilde_10_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->comb_tilde_10_feedForward_buffer->getSize()) + this->comb_tilde_10_feedForward_reader - ((size > this->comb_tilde_10_feedForward__maxdelay ? this->comb_tilde_10_feedForward__maxdelay : (size < (1 + this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer) ? 1 + this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->comb_tilde_10_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                                ), this->comb_tilde_10_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                                ), this->comb_tilde_10_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                                ), this->comb_tilde_10_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->comb_tilde_10_feedForward_buffer->getSize()) + this->comb_tilde_10_feedForward_reader - ((size > this->comb_tilde_10_feedForward__maxdelay ? this->comb_tilde_10_feedForward__maxdelay : (size < (1 + this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer) ? 1 + this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->comb_tilde_10_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                                ), this->comb_tilde_10_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                                ), this->comb_tilde_10_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                                ), this->comb_tilde_10_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                                ), this->comb_tilde_10_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                                ), this->comb_tilde_10_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->comb_tilde_10_feedForward_buffer->getSize()) + this->comb_tilde_10_feedForward_reader - ((size > this->comb_tilde_10_feedForward__maxdelay ? this->comb_tilde_10_feedForward__maxdelay : (size < (this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer) ? this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->comb_tilde_10_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                                ), this->comb_tilde_10_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                                ));
                            }
                        
                            number r = (int)(this->comb_tilde_10_feedForward_buffer->getSize()) + this->comb_tilde_10_feedForward_reader - ((size > this->comb_tilde_10_feedForward__maxdelay ? this->comb_tilde_10_feedForward__maxdelay : (size < (this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer) ? this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->comb_tilde_10_feedForward_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                            );
                        }
                        
                        void comb_tilde_10_feedForward_write(number v) {
                            this->comb_tilde_10_feedForward_writer = this->comb_tilde_10_feedForward_reader;
                            this->comb_tilde_10_feedForward_buffer[(Index)this->comb_tilde_10_feedForward_writer] = v;
                        }
                        
                        number comb_tilde_10_feedForward_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->comb_tilde_10_feedForward__maxdelay : size);
                            number val = this->comb_tilde_10_feedForward_read(effectiveSize, 0);
                            this->comb_tilde_10_feedForward_write(v);
                            this->comb_tilde_10_feedForward_step();
                            return val;
                        }
                        
                        array<Index, 2> comb_tilde_10_feedForward_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->comb_tilde_10_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->comb_tilde_10_feedForward_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void comb_tilde_10_feedForward_init() {
                            auto result = this->comb_tilde_10_feedForward_calcSizeInSamples();
                            this->comb_tilde_10_feedForward__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_10_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                            this->comb_tilde_10_feedForward_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void comb_tilde_10_feedForward_clear() {
                            this->comb_tilde_10_feedForward_buffer->setZero();
                        }
                        
                        void comb_tilde_10_feedForward_reset() {
                            auto result = this->comb_tilde_10_feedForward_calcSizeInSamples();
                            this->comb_tilde_10_feedForward__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_10_feedForward_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->comb_tilde_10_feedForward_buffer);
                            this->comb_tilde_10_feedForward_wrap = this->comb_tilde_10_feedForward_buffer->getSize() - 1;
                            this->comb_tilde_10_feedForward_clear();
                        
                            if (this->comb_tilde_10_feedForward_reader >= this->comb_tilde_10_feedForward__maxdelay || this->comb_tilde_10_feedForward_writer >= this->comb_tilde_10_feedForward__maxdelay) {
                                this->comb_tilde_10_feedForward_reader = 0;
                                this->comb_tilde_10_feedForward_writer = 0;
                            }
                        }
                        
                        void comb_tilde_10_feedForward_dspsetup() {
                            this->comb_tilde_10_feedForward_reset();
                        }
                        
                        number comb_tilde_10_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number comb_tilde_10_feedForward_size() {
                            return this->comb_tilde_10_feedForward__maxdelay;
                        }
                        
                        void comb_tilde_10_feedBack_step() {
                            this->comb_tilde_10_feedBack_reader++;
                        
                            if (this->comb_tilde_10_feedBack_reader >= (int)(this->comb_tilde_10_feedBack_buffer->getSize()))
                                this->comb_tilde_10_feedBack_reader = 0;
                        }
                        
                        number comb_tilde_10_feedBack_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->comb_tilde_10_feedBack_buffer->getSize()) + this->comb_tilde_10_feedBack_reader - ((size > this->comb_tilde_10_feedBack__maxdelay ? this->comb_tilde_10_feedBack__maxdelay : (size < (this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer) ? this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->comb_tilde_10_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                                ), this->comb_tilde_10_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->comb_tilde_10_feedBack_buffer->getSize()) + this->comb_tilde_10_feedBack_reader - ((size > this->comb_tilde_10_feedBack__maxdelay ? this->comb_tilde_10_feedBack__maxdelay : (size < (1 + this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer) ? 1 + this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->comb_tilde_10_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                                ), this->comb_tilde_10_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                                ), this->comb_tilde_10_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                                ), this->comb_tilde_10_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->comb_tilde_10_feedBack_buffer->getSize()) + this->comb_tilde_10_feedBack_reader - ((size > this->comb_tilde_10_feedBack__maxdelay ? this->comb_tilde_10_feedBack__maxdelay : (size < (1 + this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer) ? 1 + this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->comb_tilde_10_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                                ), this->comb_tilde_10_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                                ), this->comb_tilde_10_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                                ), this->comb_tilde_10_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->comb_tilde_10_feedBack_buffer->getSize()) + this->comb_tilde_10_feedBack_reader - ((size > this->comb_tilde_10_feedBack__maxdelay ? this->comb_tilde_10_feedBack__maxdelay : (size < (1 + this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer) ? 1 + this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->comb_tilde_10_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                                ), this->comb_tilde_10_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                                ), this->comb_tilde_10_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                                ), this->comb_tilde_10_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->comb_tilde_10_feedBack_buffer->getSize()) + this->comb_tilde_10_feedBack_reader - ((size > this->comb_tilde_10_feedBack__maxdelay ? this->comb_tilde_10_feedBack__maxdelay : (size < (1 + this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer) ? 1 + this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->comb_tilde_10_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                                ), this->comb_tilde_10_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                                ), this->comb_tilde_10_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                                ), this->comb_tilde_10_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                                ), this->comb_tilde_10_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                                ), this->comb_tilde_10_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->comb_tilde_10_feedBack_buffer->getSize()) + this->comb_tilde_10_feedBack_reader - ((size > this->comb_tilde_10_feedBack__maxdelay ? this->comb_tilde_10_feedBack__maxdelay : (size < (this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer) ? this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->comb_tilde_10_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                                ), this->comb_tilde_10_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                                ));
                            }
                        
                            number r = (int)(this->comb_tilde_10_feedBack_buffer->getSize()) + this->comb_tilde_10_feedBack_reader - ((size > this->comb_tilde_10_feedBack__maxdelay ? this->comb_tilde_10_feedBack__maxdelay : (size < (this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer) ? this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->comb_tilde_10_feedBack_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                            );
                        }
                        
                        void comb_tilde_10_feedBack_write(number v) {
                            this->comb_tilde_10_feedBack_writer = this->comb_tilde_10_feedBack_reader;
                            this->comb_tilde_10_feedBack_buffer[(Index)this->comb_tilde_10_feedBack_writer] = v;
                        }
                        
                        number comb_tilde_10_feedBack_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->comb_tilde_10_feedBack__maxdelay : size);
                            number val = this->comb_tilde_10_feedBack_read(effectiveSize, 0);
                            this->comb_tilde_10_feedBack_write(v);
                            this->comb_tilde_10_feedBack_step();
                            return val;
                        }
                        
                        array<Index, 2> comb_tilde_10_feedBack_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->comb_tilde_10_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->comb_tilde_10_feedBack_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void comb_tilde_10_feedBack_init() {
                            auto result = this->comb_tilde_10_feedBack_calcSizeInSamples();
                            this->comb_tilde_10_feedBack__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_10_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                            this->comb_tilde_10_feedBack_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void comb_tilde_10_feedBack_clear() {
                            this->comb_tilde_10_feedBack_buffer->setZero();
                        }
                        
                        void comb_tilde_10_feedBack_reset() {
                            auto result = this->comb_tilde_10_feedBack_calcSizeInSamples();
                            this->comb_tilde_10_feedBack__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_10_feedBack_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->comb_tilde_10_feedBack_buffer);
                            this->comb_tilde_10_feedBack_wrap = this->comb_tilde_10_feedBack_buffer->getSize() - 1;
                            this->comb_tilde_10_feedBack_clear();
                        
                            if (this->comb_tilde_10_feedBack_reader >= this->comb_tilde_10_feedBack__maxdelay || this->comb_tilde_10_feedBack_writer >= this->comb_tilde_10_feedBack__maxdelay) {
                                this->comb_tilde_10_feedBack_reader = 0;
                                this->comb_tilde_10_feedBack_writer = 0;
                            }
                        }
                        
                        void comb_tilde_10_feedBack_dspsetup() {
                            this->comb_tilde_10_feedBack_reset();
                        }
                        
                        number comb_tilde_10_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number comb_tilde_10_feedBack_size() {
                            return this->comb_tilde_10_feedBack__maxdelay;
                        }
                        
                        void comb_tilde_10_init() {
                            this->comb_tilde_10_feedForward_init();
                            this->comb_tilde_10_feedBack_init();
                        }
                        
                        void comb_tilde_10_clear() {
                            this->comb_tilde_10_feedForward_clear();
                            this->comb_tilde_10_feedBack_clear();
                        }
                        
                        void comb_tilde_10_reset() {
                            this->comb_tilde_10_init();
                            this->comb_tilde_10_clear();
                        }
                        
                        void comb_tilde_10_dspsetup(bool force) {
                            if ((bool)(this->comb_tilde_10_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->comb_tilde_10_reset();
                            this->comb_tilde_10_setupDone = true;
                            this->comb_tilde_10_feedForward_dspsetup();
                            this->comb_tilde_10_feedBack_dspsetup();
                        }
                        
                        void comb_tilde_11_feedForward_step() {
                            this->comb_tilde_11_feedForward_reader++;
                        
                            if (this->comb_tilde_11_feedForward_reader >= (int)(this->comb_tilde_11_feedForward_buffer->getSize()))
                                this->comb_tilde_11_feedForward_reader = 0;
                        }
                        
                        number comb_tilde_11_feedForward_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->comb_tilde_11_feedForward_buffer->getSize()) + this->comb_tilde_11_feedForward_reader - ((size > this->comb_tilde_11_feedForward__maxdelay ? this->comb_tilde_11_feedForward__maxdelay : (size < (this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer) ? this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->comb_tilde_11_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                                ), this->comb_tilde_11_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->comb_tilde_11_feedForward_buffer->getSize()) + this->comb_tilde_11_feedForward_reader - ((size > this->comb_tilde_11_feedForward__maxdelay ? this->comb_tilde_11_feedForward__maxdelay : (size < (1 + this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer) ? 1 + this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->comb_tilde_11_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                                ), this->comb_tilde_11_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                                ), this->comb_tilde_11_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                                ), this->comb_tilde_11_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->comb_tilde_11_feedForward_buffer->getSize()) + this->comb_tilde_11_feedForward_reader - ((size > this->comb_tilde_11_feedForward__maxdelay ? this->comb_tilde_11_feedForward__maxdelay : (size < (1 + this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer) ? 1 + this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->comb_tilde_11_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                                ), this->comb_tilde_11_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                                ), this->comb_tilde_11_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                                ), this->comb_tilde_11_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->comb_tilde_11_feedForward_buffer->getSize()) + this->comb_tilde_11_feedForward_reader - ((size > this->comb_tilde_11_feedForward__maxdelay ? this->comb_tilde_11_feedForward__maxdelay : (size < (1 + this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer) ? 1 + this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->comb_tilde_11_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                                ), this->comb_tilde_11_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                                ), this->comb_tilde_11_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                                ), this->comb_tilde_11_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->comb_tilde_11_feedForward_buffer->getSize()) + this->comb_tilde_11_feedForward_reader - ((size > this->comb_tilde_11_feedForward__maxdelay ? this->comb_tilde_11_feedForward__maxdelay : (size < (1 + this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer) ? 1 + this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->comb_tilde_11_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                                ), this->comb_tilde_11_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                                ), this->comb_tilde_11_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                                ), this->comb_tilde_11_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                                ), this->comb_tilde_11_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                                ), this->comb_tilde_11_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->comb_tilde_11_feedForward_buffer->getSize()) + this->comb_tilde_11_feedForward_reader - ((size > this->comb_tilde_11_feedForward__maxdelay ? this->comb_tilde_11_feedForward__maxdelay : (size < (this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer) ? this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->comb_tilde_11_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                                ), this->comb_tilde_11_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                                ));
                            }
                        
                            number r = (int)(this->comb_tilde_11_feedForward_buffer->getSize()) + this->comb_tilde_11_feedForward_reader - ((size > this->comb_tilde_11_feedForward__maxdelay ? this->comb_tilde_11_feedForward__maxdelay : (size < (this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer) ? this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->comb_tilde_11_feedForward_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                            );
                        }
                        
                        void comb_tilde_11_feedForward_write(number v) {
                            this->comb_tilde_11_feedForward_writer = this->comb_tilde_11_feedForward_reader;
                            this->comb_tilde_11_feedForward_buffer[(Index)this->comb_tilde_11_feedForward_writer] = v;
                        }
                        
                        number comb_tilde_11_feedForward_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->comb_tilde_11_feedForward__maxdelay : size);
                            number val = this->comb_tilde_11_feedForward_read(effectiveSize, 0);
                            this->comb_tilde_11_feedForward_write(v);
                            this->comb_tilde_11_feedForward_step();
                            return val;
                        }
                        
                        array<Index, 2> comb_tilde_11_feedForward_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->comb_tilde_11_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->comb_tilde_11_feedForward_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void comb_tilde_11_feedForward_init() {
                            auto result = this->comb_tilde_11_feedForward_calcSizeInSamples();
                            this->comb_tilde_11_feedForward__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_11_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                            this->comb_tilde_11_feedForward_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void comb_tilde_11_feedForward_clear() {
                            this->comb_tilde_11_feedForward_buffer->setZero();
                        }
                        
                        void comb_tilde_11_feedForward_reset() {
                            auto result = this->comb_tilde_11_feedForward_calcSizeInSamples();
                            this->comb_tilde_11_feedForward__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_11_feedForward_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->comb_tilde_11_feedForward_buffer);
                            this->comb_tilde_11_feedForward_wrap = this->comb_tilde_11_feedForward_buffer->getSize() - 1;
                            this->comb_tilde_11_feedForward_clear();
                        
                            if (this->comb_tilde_11_feedForward_reader >= this->comb_tilde_11_feedForward__maxdelay || this->comb_tilde_11_feedForward_writer >= this->comb_tilde_11_feedForward__maxdelay) {
                                this->comb_tilde_11_feedForward_reader = 0;
                                this->comb_tilde_11_feedForward_writer = 0;
                            }
                        }
                        
                        void comb_tilde_11_feedForward_dspsetup() {
                            this->comb_tilde_11_feedForward_reset();
                        }
                        
                        number comb_tilde_11_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number comb_tilde_11_feedForward_size() {
                            return this->comb_tilde_11_feedForward__maxdelay;
                        }
                        
                        void comb_tilde_11_feedBack_step() {
                            this->comb_tilde_11_feedBack_reader++;
                        
                            if (this->comb_tilde_11_feedBack_reader >= (int)(this->comb_tilde_11_feedBack_buffer->getSize()))
                                this->comb_tilde_11_feedBack_reader = 0;
                        }
                        
                        number comb_tilde_11_feedBack_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->comb_tilde_11_feedBack_buffer->getSize()) + this->comb_tilde_11_feedBack_reader - ((size > this->comb_tilde_11_feedBack__maxdelay ? this->comb_tilde_11_feedBack__maxdelay : (size < (this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer) ? this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->comb_tilde_11_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                                ), this->comb_tilde_11_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->comb_tilde_11_feedBack_buffer->getSize()) + this->comb_tilde_11_feedBack_reader - ((size > this->comb_tilde_11_feedBack__maxdelay ? this->comb_tilde_11_feedBack__maxdelay : (size < (1 + this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer) ? 1 + this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->comb_tilde_11_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                                ), this->comb_tilde_11_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                                ), this->comb_tilde_11_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                                ), this->comb_tilde_11_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->comb_tilde_11_feedBack_buffer->getSize()) + this->comb_tilde_11_feedBack_reader - ((size > this->comb_tilde_11_feedBack__maxdelay ? this->comb_tilde_11_feedBack__maxdelay : (size < (1 + this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer) ? 1 + this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->comb_tilde_11_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                                ), this->comb_tilde_11_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                                ), this->comb_tilde_11_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                                ), this->comb_tilde_11_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->comb_tilde_11_feedBack_buffer->getSize()) + this->comb_tilde_11_feedBack_reader - ((size > this->comb_tilde_11_feedBack__maxdelay ? this->comb_tilde_11_feedBack__maxdelay : (size < (1 + this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer) ? 1 + this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->comb_tilde_11_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                                ), this->comb_tilde_11_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                                ), this->comb_tilde_11_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                                ), this->comb_tilde_11_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->comb_tilde_11_feedBack_buffer->getSize()) + this->comb_tilde_11_feedBack_reader - ((size > this->comb_tilde_11_feedBack__maxdelay ? this->comb_tilde_11_feedBack__maxdelay : (size < (1 + this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer) ? 1 + this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->comb_tilde_11_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                                ), this->comb_tilde_11_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                                ), this->comb_tilde_11_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                                ), this->comb_tilde_11_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                                ), this->comb_tilde_11_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                                ), this->comb_tilde_11_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->comb_tilde_11_feedBack_buffer->getSize()) + this->comb_tilde_11_feedBack_reader - ((size > this->comb_tilde_11_feedBack__maxdelay ? this->comb_tilde_11_feedBack__maxdelay : (size < (this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer) ? this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->comb_tilde_11_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                                ), this->comb_tilde_11_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                                ));
                            }
                        
                            number r = (int)(this->comb_tilde_11_feedBack_buffer->getSize()) + this->comb_tilde_11_feedBack_reader - ((size > this->comb_tilde_11_feedBack__maxdelay ? this->comb_tilde_11_feedBack__maxdelay : (size < (this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer) ? this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->comb_tilde_11_feedBack_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                            );
                        }
                        
                        void comb_tilde_11_feedBack_write(number v) {
                            this->comb_tilde_11_feedBack_writer = this->comb_tilde_11_feedBack_reader;
                            this->comb_tilde_11_feedBack_buffer[(Index)this->comb_tilde_11_feedBack_writer] = v;
                        }
                        
                        number comb_tilde_11_feedBack_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->comb_tilde_11_feedBack__maxdelay : size);
                            number val = this->comb_tilde_11_feedBack_read(effectiveSize, 0);
                            this->comb_tilde_11_feedBack_write(v);
                            this->comb_tilde_11_feedBack_step();
                            return val;
                        }
                        
                        array<Index, 2> comb_tilde_11_feedBack_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->comb_tilde_11_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->comb_tilde_11_feedBack_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void comb_tilde_11_feedBack_init() {
                            auto result = this->comb_tilde_11_feedBack_calcSizeInSamples();
                            this->comb_tilde_11_feedBack__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_11_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                            this->comb_tilde_11_feedBack_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void comb_tilde_11_feedBack_clear() {
                            this->comb_tilde_11_feedBack_buffer->setZero();
                        }
                        
                        void comb_tilde_11_feedBack_reset() {
                            auto result = this->comb_tilde_11_feedBack_calcSizeInSamples();
                            this->comb_tilde_11_feedBack__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_11_feedBack_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->comb_tilde_11_feedBack_buffer);
                            this->comb_tilde_11_feedBack_wrap = this->comb_tilde_11_feedBack_buffer->getSize() - 1;
                            this->comb_tilde_11_feedBack_clear();
                        
                            if (this->comb_tilde_11_feedBack_reader >= this->comb_tilde_11_feedBack__maxdelay || this->comb_tilde_11_feedBack_writer >= this->comb_tilde_11_feedBack__maxdelay) {
                                this->comb_tilde_11_feedBack_reader = 0;
                                this->comb_tilde_11_feedBack_writer = 0;
                            }
                        }
                        
                        void comb_tilde_11_feedBack_dspsetup() {
                            this->comb_tilde_11_feedBack_reset();
                        }
                        
                        number comb_tilde_11_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number comb_tilde_11_feedBack_size() {
                            return this->comb_tilde_11_feedBack__maxdelay;
                        }
                        
                        void comb_tilde_11_init() {
                            this->comb_tilde_11_feedForward_init();
                            this->comb_tilde_11_feedBack_init();
                        }
                        
                        void comb_tilde_11_clear() {
                            this->comb_tilde_11_feedForward_clear();
                            this->comb_tilde_11_feedBack_clear();
                        }
                        
                        void comb_tilde_11_reset() {
                            this->comb_tilde_11_init();
                            this->comb_tilde_11_clear();
                        }
                        
                        void comb_tilde_11_dspsetup(bool force) {
                            if ((bool)(this->comb_tilde_11_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->comb_tilde_11_reset();
                            this->comb_tilde_11_setupDone = true;
                            this->comb_tilde_11_feedForward_dspsetup();
                            this->comb_tilde_11_feedBack_dspsetup();
                        }
                        
                        void comb_tilde_12_feedForward_step() {
                            this->comb_tilde_12_feedForward_reader++;
                        
                            if (this->comb_tilde_12_feedForward_reader >= (int)(this->comb_tilde_12_feedForward_buffer->getSize()))
                                this->comb_tilde_12_feedForward_reader = 0;
                        }
                        
                        number comb_tilde_12_feedForward_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->comb_tilde_12_feedForward_buffer->getSize()) + this->comb_tilde_12_feedForward_reader - ((size > this->comb_tilde_12_feedForward__maxdelay ? this->comb_tilde_12_feedForward__maxdelay : (size < (this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer) ? this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->comb_tilde_12_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                                ), this->comb_tilde_12_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->comb_tilde_12_feedForward_buffer->getSize()) + this->comb_tilde_12_feedForward_reader - ((size > this->comb_tilde_12_feedForward__maxdelay ? this->comb_tilde_12_feedForward__maxdelay : (size < (1 + this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer) ? 1 + this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->comb_tilde_12_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                                ), this->comb_tilde_12_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                                ), this->comb_tilde_12_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                                ), this->comb_tilde_12_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->comb_tilde_12_feedForward_buffer->getSize()) + this->comb_tilde_12_feedForward_reader - ((size > this->comb_tilde_12_feedForward__maxdelay ? this->comb_tilde_12_feedForward__maxdelay : (size < (1 + this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer) ? 1 + this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->comb_tilde_12_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                                ), this->comb_tilde_12_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                                ), this->comb_tilde_12_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                                ), this->comb_tilde_12_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->comb_tilde_12_feedForward_buffer->getSize()) + this->comb_tilde_12_feedForward_reader - ((size > this->comb_tilde_12_feedForward__maxdelay ? this->comb_tilde_12_feedForward__maxdelay : (size < (1 + this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer) ? 1 + this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->comb_tilde_12_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                                ), this->comb_tilde_12_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                                ), this->comb_tilde_12_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                                ), this->comb_tilde_12_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->comb_tilde_12_feedForward_buffer->getSize()) + this->comb_tilde_12_feedForward_reader - ((size > this->comb_tilde_12_feedForward__maxdelay ? this->comb_tilde_12_feedForward__maxdelay : (size < (1 + this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer) ? 1 + this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->comb_tilde_12_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                                ), this->comb_tilde_12_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                                ), this->comb_tilde_12_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                                ), this->comb_tilde_12_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                                ), this->comb_tilde_12_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                                ), this->comb_tilde_12_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->comb_tilde_12_feedForward_buffer->getSize()) + this->comb_tilde_12_feedForward_reader - ((size > this->comb_tilde_12_feedForward__maxdelay ? this->comb_tilde_12_feedForward__maxdelay : (size < (this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer) ? this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->comb_tilde_12_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                                ), this->comb_tilde_12_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                                ));
                            }
                        
                            number r = (int)(this->comb_tilde_12_feedForward_buffer->getSize()) + this->comb_tilde_12_feedForward_reader - ((size > this->comb_tilde_12_feedForward__maxdelay ? this->comb_tilde_12_feedForward__maxdelay : (size < (this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer) ? this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->comb_tilde_12_feedForward_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                            );
                        }
                        
                        void comb_tilde_12_feedForward_write(number v) {
                            this->comb_tilde_12_feedForward_writer = this->comb_tilde_12_feedForward_reader;
                            this->comb_tilde_12_feedForward_buffer[(Index)this->comb_tilde_12_feedForward_writer] = v;
                        }
                        
                        number comb_tilde_12_feedForward_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->comb_tilde_12_feedForward__maxdelay : size);
                            number val = this->comb_tilde_12_feedForward_read(effectiveSize, 0);
                            this->comb_tilde_12_feedForward_write(v);
                            this->comb_tilde_12_feedForward_step();
                            return val;
                        }
                        
                        array<Index, 2> comb_tilde_12_feedForward_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->comb_tilde_12_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->comb_tilde_12_feedForward_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void comb_tilde_12_feedForward_init() {
                            auto result = this->comb_tilde_12_feedForward_calcSizeInSamples();
                            this->comb_tilde_12_feedForward__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_12_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                            this->comb_tilde_12_feedForward_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void comb_tilde_12_feedForward_clear() {
                            this->comb_tilde_12_feedForward_buffer->setZero();
                        }
                        
                        void comb_tilde_12_feedForward_reset() {
                            auto result = this->comb_tilde_12_feedForward_calcSizeInSamples();
                            this->comb_tilde_12_feedForward__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_12_feedForward_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->comb_tilde_12_feedForward_buffer);
                            this->comb_tilde_12_feedForward_wrap = this->comb_tilde_12_feedForward_buffer->getSize() - 1;
                            this->comb_tilde_12_feedForward_clear();
                        
                            if (this->comb_tilde_12_feedForward_reader >= this->comb_tilde_12_feedForward__maxdelay || this->comb_tilde_12_feedForward_writer >= this->comb_tilde_12_feedForward__maxdelay) {
                                this->comb_tilde_12_feedForward_reader = 0;
                                this->comb_tilde_12_feedForward_writer = 0;
                            }
                        }
                        
                        void comb_tilde_12_feedForward_dspsetup() {
                            this->comb_tilde_12_feedForward_reset();
                        }
                        
                        number comb_tilde_12_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number comb_tilde_12_feedForward_size() {
                            return this->comb_tilde_12_feedForward__maxdelay;
                        }
                        
                        void comb_tilde_12_feedBack_step() {
                            this->comb_tilde_12_feedBack_reader++;
                        
                            if (this->comb_tilde_12_feedBack_reader >= (int)(this->comb_tilde_12_feedBack_buffer->getSize()))
                                this->comb_tilde_12_feedBack_reader = 0;
                        }
                        
                        number comb_tilde_12_feedBack_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->comb_tilde_12_feedBack_buffer->getSize()) + this->comb_tilde_12_feedBack_reader - ((size > this->comb_tilde_12_feedBack__maxdelay ? this->comb_tilde_12_feedBack__maxdelay : (size < (this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer) ? this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->comb_tilde_12_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                                ), this->comb_tilde_12_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->comb_tilde_12_feedBack_buffer->getSize()) + this->comb_tilde_12_feedBack_reader - ((size > this->comb_tilde_12_feedBack__maxdelay ? this->comb_tilde_12_feedBack__maxdelay : (size < (1 + this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer) ? 1 + this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->comb_tilde_12_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                                ), this->comb_tilde_12_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                                ), this->comb_tilde_12_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                                ), this->comb_tilde_12_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->comb_tilde_12_feedBack_buffer->getSize()) + this->comb_tilde_12_feedBack_reader - ((size > this->comb_tilde_12_feedBack__maxdelay ? this->comb_tilde_12_feedBack__maxdelay : (size < (1 + this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer) ? 1 + this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->comb_tilde_12_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                                ), this->comb_tilde_12_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                                ), this->comb_tilde_12_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                                ), this->comb_tilde_12_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->comb_tilde_12_feedBack_buffer->getSize()) + this->comb_tilde_12_feedBack_reader - ((size > this->comb_tilde_12_feedBack__maxdelay ? this->comb_tilde_12_feedBack__maxdelay : (size < (1 + this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer) ? 1 + this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->comb_tilde_12_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                                ), this->comb_tilde_12_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                                ), this->comb_tilde_12_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                                ), this->comb_tilde_12_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->comb_tilde_12_feedBack_buffer->getSize()) + this->comb_tilde_12_feedBack_reader - ((size > this->comb_tilde_12_feedBack__maxdelay ? this->comb_tilde_12_feedBack__maxdelay : (size < (1 + this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer) ? 1 + this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->comb_tilde_12_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                                ), this->comb_tilde_12_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                                ), this->comb_tilde_12_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                                ), this->comb_tilde_12_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                                ), this->comb_tilde_12_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                                ), this->comb_tilde_12_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->comb_tilde_12_feedBack_buffer->getSize()) + this->comb_tilde_12_feedBack_reader - ((size > this->comb_tilde_12_feedBack__maxdelay ? this->comb_tilde_12_feedBack__maxdelay : (size < (this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer) ? this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->comb_tilde_12_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                                ), this->comb_tilde_12_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                                ));
                            }
                        
                            number r = (int)(this->comb_tilde_12_feedBack_buffer->getSize()) + this->comb_tilde_12_feedBack_reader - ((size > this->comb_tilde_12_feedBack__maxdelay ? this->comb_tilde_12_feedBack__maxdelay : (size < (this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer) ? this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->comb_tilde_12_feedBack_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                            );
                        }
                        
                        void comb_tilde_12_feedBack_write(number v) {
                            this->comb_tilde_12_feedBack_writer = this->comb_tilde_12_feedBack_reader;
                            this->comb_tilde_12_feedBack_buffer[(Index)this->comb_tilde_12_feedBack_writer] = v;
                        }
                        
                        number comb_tilde_12_feedBack_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->comb_tilde_12_feedBack__maxdelay : size);
                            number val = this->comb_tilde_12_feedBack_read(effectiveSize, 0);
                            this->comb_tilde_12_feedBack_write(v);
                            this->comb_tilde_12_feedBack_step();
                            return val;
                        }
                        
                        array<Index, 2> comb_tilde_12_feedBack_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->comb_tilde_12_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->comb_tilde_12_feedBack_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void comb_tilde_12_feedBack_init() {
                            auto result = this->comb_tilde_12_feedBack_calcSizeInSamples();
                            this->comb_tilde_12_feedBack__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_12_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                            this->comb_tilde_12_feedBack_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void comb_tilde_12_feedBack_clear() {
                            this->comb_tilde_12_feedBack_buffer->setZero();
                        }
                        
                        void comb_tilde_12_feedBack_reset() {
                            auto result = this->comb_tilde_12_feedBack_calcSizeInSamples();
                            this->comb_tilde_12_feedBack__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_12_feedBack_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->comb_tilde_12_feedBack_buffer);
                            this->comb_tilde_12_feedBack_wrap = this->comb_tilde_12_feedBack_buffer->getSize() - 1;
                            this->comb_tilde_12_feedBack_clear();
                        
                            if (this->comb_tilde_12_feedBack_reader >= this->comb_tilde_12_feedBack__maxdelay || this->comb_tilde_12_feedBack_writer >= this->comb_tilde_12_feedBack__maxdelay) {
                                this->comb_tilde_12_feedBack_reader = 0;
                                this->comb_tilde_12_feedBack_writer = 0;
                            }
                        }
                        
                        void comb_tilde_12_feedBack_dspsetup() {
                            this->comb_tilde_12_feedBack_reset();
                        }
                        
                        number comb_tilde_12_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number comb_tilde_12_feedBack_size() {
                            return this->comb_tilde_12_feedBack__maxdelay;
                        }
                        
                        void comb_tilde_12_init() {
                            this->comb_tilde_12_feedForward_init();
                            this->comb_tilde_12_feedBack_init();
                        }
                        
                        void comb_tilde_12_clear() {
                            this->comb_tilde_12_feedForward_clear();
                            this->comb_tilde_12_feedBack_clear();
                        }
                        
                        void comb_tilde_12_reset() {
                            this->comb_tilde_12_init();
                            this->comb_tilde_12_clear();
                        }
                        
                        void comb_tilde_12_dspsetup(bool force) {
                            if ((bool)(this->comb_tilde_12_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->comb_tilde_12_reset();
                            this->comb_tilde_12_setupDone = true;
                            this->comb_tilde_12_feedForward_dspsetup();
                            this->comb_tilde_12_feedBack_dspsetup();
                        }
                        
                        void comb_tilde_13_feedForward_step() {
                            this->comb_tilde_13_feedForward_reader++;
                        
                            if (this->comb_tilde_13_feedForward_reader >= (int)(this->comb_tilde_13_feedForward_buffer->getSize()))
                                this->comb_tilde_13_feedForward_reader = 0;
                        }
                        
                        number comb_tilde_13_feedForward_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->comb_tilde_13_feedForward_buffer->getSize()) + this->comb_tilde_13_feedForward_reader - ((size > this->comb_tilde_13_feedForward__maxdelay ? this->comb_tilde_13_feedForward__maxdelay : (size < (this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer) ? this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->comb_tilde_13_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                                ), this->comb_tilde_13_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->comb_tilde_13_feedForward_buffer->getSize()) + this->comb_tilde_13_feedForward_reader - ((size > this->comb_tilde_13_feedForward__maxdelay ? this->comb_tilde_13_feedForward__maxdelay : (size < (1 + this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer) ? 1 + this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->comb_tilde_13_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                                ), this->comb_tilde_13_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                                ), this->comb_tilde_13_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                                ), this->comb_tilde_13_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->comb_tilde_13_feedForward_buffer->getSize()) + this->comb_tilde_13_feedForward_reader - ((size > this->comb_tilde_13_feedForward__maxdelay ? this->comb_tilde_13_feedForward__maxdelay : (size < (1 + this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer) ? 1 + this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->comb_tilde_13_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                                ), this->comb_tilde_13_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                                ), this->comb_tilde_13_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                                ), this->comb_tilde_13_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->comb_tilde_13_feedForward_buffer->getSize()) + this->comb_tilde_13_feedForward_reader - ((size > this->comb_tilde_13_feedForward__maxdelay ? this->comb_tilde_13_feedForward__maxdelay : (size < (1 + this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer) ? 1 + this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->comb_tilde_13_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                                ), this->comb_tilde_13_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                                ), this->comb_tilde_13_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                                ), this->comb_tilde_13_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->comb_tilde_13_feedForward_buffer->getSize()) + this->comb_tilde_13_feedForward_reader - ((size > this->comb_tilde_13_feedForward__maxdelay ? this->comb_tilde_13_feedForward__maxdelay : (size < (1 + this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer) ? 1 + this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->comb_tilde_13_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                                ), this->comb_tilde_13_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                                ), this->comb_tilde_13_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                                ), this->comb_tilde_13_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                                ), this->comb_tilde_13_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                                ), this->comb_tilde_13_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->comb_tilde_13_feedForward_buffer->getSize()) + this->comb_tilde_13_feedForward_reader - ((size > this->comb_tilde_13_feedForward__maxdelay ? this->comb_tilde_13_feedForward__maxdelay : (size < (this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer) ? this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->comb_tilde_13_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                                ), this->comb_tilde_13_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                                ));
                            }
                        
                            number r = (int)(this->comb_tilde_13_feedForward_buffer->getSize()) + this->comb_tilde_13_feedForward_reader - ((size > this->comb_tilde_13_feedForward__maxdelay ? this->comb_tilde_13_feedForward__maxdelay : (size < (this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer) ? this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->comb_tilde_13_feedForward_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                            );
                        }
                        
                        void comb_tilde_13_feedForward_write(number v) {
                            this->comb_tilde_13_feedForward_writer = this->comb_tilde_13_feedForward_reader;
                            this->comb_tilde_13_feedForward_buffer[(Index)this->comb_tilde_13_feedForward_writer] = v;
                        }
                        
                        number comb_tilde_13_feedForward_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->comb_tilde_13_feedForward__maxdelay : size);
                            number val = this->comb_tilde_13_feedForward_read(effectiveSize, 0);
                            this->comb_tilde_13_feedForward_write(v);
                            this->comb_tilde_13_feedForward_step();
                            return val;
                        }
                        
                        array<Index, 2> comb_tilde_13_feedForward_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->comb_tilde_13_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->comb_tilde_13_feedForward_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void comb_tilde_13_feedForward_init() {
                            auto result = this->comb_tilde_13_feedForward_calcSizeInSamples();
                            this->comb_tilde_13_feedForward__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_13_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                            this->comb_tilde_13_feedForward_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void comb_tilde_13_feedForward_clear() {
                            this->comb_tilde_13_feedForward_buffer->setZero();
                        }
                        
                        void comb_tilde_13_feedForward_reset() {
                            auto result = this->comb_tilde_13_feedForward_calcSizeInSamples();
                            this->comb_tilde_13_feedForward__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_13_feedForward_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->comb_tilde_13_feedForward_buffer);
                            this->comb_tilde_13_feedForward_wrap = this->comb_tilde_13_feedForward_buffer->getSize() - 1;
                            this->comb_tilde_13_feedForward_clear();
                        
                            if (this->comb_tilde_13_feedForward_reader >= this->comb_tilde_13_feedForward__maxdelay || this->comb_tilde_13_feedForward_writer >= this->comb_tilde_13_feedForward__maxdelay) {
                                this->comb_tilde_13_feedForward_reader = 0;
                                this->comb_tilde_13_feedForward_writer = 0;
                            }
                        }
                        
                        void comb_tilde_13_feedForward_dspsetup() {
                            this->comb_tilde_13_feedForward_reset();
                        }
                        
                        number comb_tilde_13_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number comb_tilde_13_feedForward_size() {
                            return this->comb_tilde_13_feedForward__maxdelay;
                        }
                        
                        void comb_tilde_13_feedBack_step() {
                            this->comb_tilde_13_feedBack_reader++;
                        
                            if (this->comb_tilde_13_feedBack_reader >= (int)(this->comb_tilde_13_feedBack_buffer->getSize()))
                                this->comb_tilde_13_feedBack_reader = 0;
                        }
                        
                        number comb_tilde_13_feedBack_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->comb_tilde_13_feedBack_buffer->getSize()) + this->comb_tilde_13_feedBack_reader - ((size > this->comb_tilde_13_feedBack__maxdelay ? this->comb_tilde_13_feedBack__maxdelay : (size < (this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer) ? this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->comb_tilde_13_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                                ), this->comb_tilde_13_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->comb_tilde_13_feedBack_buffer->getSize()) + this->comb_tilde_13_feedBack_reader - ((size > this->comb_tilde_13_feedBack__maxdelay ? this->comb_tilde_13_feedBack__maxdelay : (size < (1 + this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer) ? 1 + this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->comb_tilde_13_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                                ), this->comb_tilde_13_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                                ), this->comb_tilde_13_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                                ), this->comb_tilde_13_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->comb_tilde_13_feedBack_buffer->getSize()) + this->comb_tilde_13_feedBack_reader - ((size > this->comb_tilde_13_feedBack__maxdelay ? this->comb_tilde_13_feedBack__maxdelay : (size < (1 + this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer) ? 1 + this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->comb_tilde_13_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                                ), this->comb_tilde_13_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                                ), this->comb_tilde_13_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                                ), this->comb_tilde_13_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->comb_tilde_13_feedBack_buffer->getSize()) + this->comb_tilde_13_feedBack_reader - ((size > this->comb_tilde_13_feedBack__maxdelay ? this->comb_tilde_13_feedBack__maxdelay : (size < (1 + this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer) ? 1 + this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->comb_tilde_13_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                                ), this->comb_tilde_13_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                                ), this->comb_tilde_13_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                                ), this->comb_tilde_13_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->comb_tilde_13_feedBack_buffer->getSize()) + this->comb_tilde_13_feedBack_reader - ((size > this->comb_tilde_13_feedBack__maxdelay ? this->comb_tilde_13_feedBack__maxdelay : (size < (1 + this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer) ? 1 + this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->comb_tilde_13_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                                ), this->comb_tilde_13_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                                ), this->comb_tilde_13_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                                ), this->comb_tilde_13_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                                ), this->comb_tilde_13_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                                ), this->comb_tilde_13_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->comb_tilde_13_feedBack_buffer->getSize()) + this->comb_tilde_13_feedBack_reader - ((size > this->comb_tilde_13_feedBack__maxdelay ? this->comb_tilde_13_feedBack__maxdelay : (size < (this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer) ? this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->comb_tilde_13_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                                ), this->comb_tilde_13_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                                ));
                            }
                        
                            number r = (int)(this->comb_tilde_13_feedBack_buffer->getSize()) + this->comb_tilde_13_feedBack_reader - ((size > this->comb_tilde_13_feedBack__maxdelay ? this->comb_tilde_13_feedBack__maxdelay : (size < (this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer) ? this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->comb_tilde_13_feedBack_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                            );
                        }
                        
                        void comb_tilde_13_feedBack_write(number v) {
                            this->comb_tilde_13_feedBack_writer = this->comb_tilde_13_feedBack_reader;
                            this->comb_tilde_13_feedBack_buffer[(Index)this->comb_tilde_13_feedBack_writer] = v;
                        }
                        
                        number comb_tilde_13_feedBack_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->comb_tilde_13_feedBack__maxdelay : size);
                            number val = this->comb_tilde_13_feedBack_read(effectiveSize, 0);
                            this->comb_tilde_13_feedBack_write(v);
                            this->comb_tilde_13_feedBack_step();
                            return val;
                        }
                        
                        array<Index, 2> comb_tilde_13_feedBack_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->comb_tilde_13_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->comb_tilde_13_feedBack_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void comb_tilde_13_feedBack_init() {
                            auto result = this->comb_tilde_13_feedBack_calcSizeInSamples();
                            this->comb_tilde_13_feedBack__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_13_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                            this->comb_tilde_13_feedBack_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void comb_tilde_13_feedBack_clear() {
                            this->comb_tilde_13_feedBack_buffer->setZero();
                        }
                        
                        void comb_tilde_13_feedBack_reset() {
                            auto result = this->comb_tilde_13_feedBack_calcSizeInSamples();
                            this->comb_tilde_13_feedBack__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_13_feedBack_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->comb_tilde_13_feedBack_buffer);
                            this->comb_tilde_13_feedBack_wrap = this->comb_tilde_13_feedBack_buffer->getSize() - 1;
                            this->comb_tilde_13_feedBack_clear();
                        
                            if (this->comb_tilde_13_feedBack_reader >= this->comb_tilde_13_feedBack__maxdelay || this->comb_tilde_13_feedBack_writer >= this->comb_tilde_13_feedBack__maxdelay) {
                                this->comb_tilde_13_feedBack_reader = 0;
                                this->comb_tilde_13_feedBack_writer = 0;
                            }
                        }
                        
                        void comb_tilde_13_feedBack_dspsetup() {
                            this->comb_tilde_13_feedBack_reset();
                        }
                        
                        number comb_tilde_13_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number comb_tilde_13_feedBack_size() {
                            return this->comb_tilde_13_feedBack__maxdelay;
                        }
                        
                        void comb_tilde_13_init() {
                            this->comb_tilde_13_feedForward_init();
                            this->comb_tilde_13_feedBack_init();
                        }
                        
                        void comb_tilde_13_clear() {
                            this->comb_tilde_13_feedForward_clear();
                            this->comb_tilde_13_feedBack_clear();
                        }
                        
                        void comb_tilde_13_reset() {
                            this->comb_tilde_13_init();
                            this->comb_tilde_13_clear();
                        }
                        
                        void comb_tilde_13_dspsetup(bool force) {
                            if ((bool)(this->comb_tilde_13_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->comb_tilde_13_reset();
                            this->comb_tilde_13_setupDone = true;
                            this->comb_tilde_13_feedForward_dspsetup();
                            this->comb_tilde_13_feedBack_dspsetup();
                        }
                        
                        void comb_tilde_14_feedForward_step() {
                            this->comb_tilde_14_feedForward_reader++;
                        
                            if (this->comb_tilde_14_feedForward_reader >= (int)(this->comb_tilde_14_feedForward_buffer->getSize()))
                                this->comb_tilde_14_feedForward_reader = 0;
                        }
                        
                        number comb_tilde_14_feedForward_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->comb_tilde_14_feedForward_buffer->getSize()) + this->comb_tilde_14_feedForward_reader - ((size > this->comb_tilde_14_feedForward__maxdelay ? this->comb_tilde_14_feedForward__maxdelay : (size < (this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer) ? this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->comb_tilde_14_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                                ), this->comb_tilde_14_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->comb_tilde_14_feedForward_buffer->getSize()) + this->comb_tilde_14_feedForward_reader - ((size > this->comb_tilde_14_feedForward__maxdelay ? this->comb_tilde_14_feedForward__maxdelay : (size < (1 + this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer) ? 1 + this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->comb_tilde_14_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                                ), this->comb_tilde_14_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                                ), this->comb_tilde_14_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                                ), this->comb_tilde_14_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->comb_tilde_14_feedForward_buffer->getSize()) + this->comb_tilde_14_feedForward_reader - ((size > this->comb_tilde_14_feedForward__maxdelay ? this->comb_tilde_14_feedForward__maxdelay : (size < (1 + this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer) ? 1 + this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->comb_tilde_14_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                                ), this->comb_tilde_14_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                                ), this->comb_tilde_14_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                                ), this->comb_tilde_14_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->comb_tilde_14_feedForward_buffer->getSize()) + this->comb_tilde_14_feedForward_reader - ((size > this->comb_tilde_14_feedForward__maxdelay ? this->comb_tilde_14_feedForward__maxdelay : (size < (1 + this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer) ? 1 + this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->comb_tilde_14_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                                ), this->comb_tilde_14_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                                ), this->comb_tilde_14_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                                ), this->comb_tilde_14_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->comb_tilde_14_feedForward_buffer->getSize()) + this->comb_tilde_14_feedForward_reader - ((size > this->comb_tilde_14_feedForward__maxdelay ? this->comb_tilde_14_feedForward__maxdelay : (size < (1 + this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer) ? 1 + this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->comb_tilde_14_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                                ), this->comb_tilde_14_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                                ), this->comb_tilde_14_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                                ), this->comb_tilde_14_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                                ), this->comb_tilde_14_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                                ), this->comb_tilde_14_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->comb_tilde_14_feedForward_buffer->getSize()) + this->comb_tilde_14_feedForward_reader - ((size > this->comb_tilde_14_feedForward__maxdelay ? this->comb_tilde_14_feedForward__maxdelay : (size < (this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer) ? this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->comb_tilde_14_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                                ), this->comb_tilde_14_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                                ));
                            }
                        
                            number r = (int)(this->comb_tilde_14_feedForward_buffer->getSize()) + this->comb_tilde_14_feedForward_reader - ((size > this->comb_tilde_14_feedForward__maxdelay ? this->comb_tilde_14_feedForward__maxdelay : (size < (this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer) ? this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->comb_tilde_14_feedForward_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                            );
                        }
                        
                        void comb_tilde_14_feedForward_write(number v) {
                            this->comb_tilde_14_feedForward_writer = this->comb_tilde_14_feedForward_reader;
                            this->comb_tilde_14_feedForward_buffer[(Index)this->comb_tilde_14_feedForward_writer] = v;
                        }
                        
                        number comb_tilde_14_feedForward_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->comb_tilde_14_feedForward__maxdelay : size);
                            number val = this->comb_tilde_14_feedForward_read(effectiveSize, 0);
                            this->comb_tilde_14_feedForward_write(v);
                            this->comb_tilde_14_feedForward_step();
                            return val;
                        }
                        
                        array<Index, 2> comb_tilde_14_feedForward_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->comb_tilde_14_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->comb_tilde_14_feedForward_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void comb_tilde_14_feedForward_init() {
                            auto result = this->comb_tilde_14_feedForward_calcSizeInSamples();
                            this->comb_tilde_14_feedForward__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_14_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                            this->comb_tilde_14_feedForward_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void comb_tilde_14_feedForward_clear() {
                            this->comb_tilde_14_feedForward_buffer->setZero();
                        }
                        
                        void comb_tilde_14_feedForward_reset() {
                            auto result = this->comb_tilde_14_feedForward_calcSizeInSamples();
                            this->comb_tilde_14_feedForward__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_14_feedForward_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->comb_tilde_14_feedForward_buffer);
                            this->comb_tilde_14_feedForward_wrap = this->comb_tilde_14_feedForward_buffer->getSize() - 1;
                            this->comb_tilde_14_feedForward_clear();
                        
                            if (this->comb_tilde_14_feedForward_reader >= this->comb_tilde_14_feedForward__maxdelay || this->comb_tilde_14_feedForward_writer >= this->comb_tilde_14_feedForward__maxdelay) {
                                this->comb_tilde_14_feedForward_reader = 0;
                                this->comb_tilde_14_feedForward_writer = 0;
                            }
                        }
                        
                        void comb_tilde_14_feedForward_dspsetup() {
                            this->comb_tilde_14_feedForward_reset();
                        }
                        
                        number comb_tilde_14_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number comb_tilde_14_feedForward_size() {
                            return this->comb_tilde_14_feedForward__maxdelay;
                        }
                        
                        void comb_tilde_14_feedBack_step() {
                            this->comb_tilde_14_feedBack_reader++;
                        
                            if (this->comb_tilde_14_feedBack_reader >= (int)(this->comb_tilde_14_feedBack_buffer->getSize()))
                                this->comb_tilde_14_feedBack_reader = 0;
                        }
                        
                        number comb_tilde_14_feedBack_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->comb_tilde_14_feedBack_buffer->getSize()) + this->comb_tilde_14_feedBack_reader - ((size > this->comb_tilde_14_feedBack__maxdelay ? this->comb_tilde_14_feedBack__maxdelay : (size < (this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer) ? this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->comb_tilde_14_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                                ), this->comb_tilde_14_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->comb_tilde_14_feedBack_buffer->getSize()) + this->comb_tilde_14_feedBack_reader - ((size > this->comb_tilde_14_feedBack__maxdelay ? this->comb_tilde_14_feedBack__maxdelay : (size < (1 + this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer) ? 1 + this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->comb_tilde_14_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                                ), this->comb_tilde_14_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                                ), this->comb_tilde_14_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                                ), this->comb_tilde_14_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->comb_tilde_14_feedBack_buffer->getSize()) + this->comb_tilde_14_feedBack_reader - ((size > this->comb_tilde_14_feedBack__maxdelay ? this->comb_tilde_14_feedBack__maxdelay : (size < (1 + this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer) ? 1 + this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->comb_tilde_14_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                                ), this->comb_tilde_14_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                                ), this->comb_tilde_14_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                                ), this->comb_tilde_14_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->comb_tilde_14_feedBack_buffer->getSize()) + this->comb_tilde_14_feedBack_reader - ((size > this->comb_tilde_14_feedBack__maxdelay ? this->comb_tilde_14_feedBack__maxdelay : (size < (1 + this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer) ? 1 + this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->comb_tilde_14_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                                ), this->comb_tilde_14_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                                ), this->comb_tilde_14_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                                ), this->comb_tilde_14_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->comb_tilde_14_feedBack_buffer->getSize()) + this->comb_tilde_14_feedBack_reader - ((size > this->comb_tilde_14_feedBack__maxdelay ? this->comb_tilde_14_feedBack__maxdelay : (size < (1 + this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer) ? 1 + this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->comb_tilde_14_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                                ), this->comb_tilde_14_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                                ), this->comb_tilde_14_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                                ), this->comb_tilde_14_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                                ), this->comb_tilde_14_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                                ), this->comb_tilde_14_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->comb_tilde_14_feedBack_buffer->getSize()) + this->comb_tilde_14_feedBack_reader - ((size > this->comb_tilde_14_feedBack__maxdelay ? this->comb_tilde_14_feedBack__maxdelay : (size < (this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer) ? this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->comb_tilde_14_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                                ), this->comb_tilde_14_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                                ));
                            }
                        
                            number r = (int)(this->comb_tilde_14_feedBack_buffer->getSize()) + this->comb_tilde_14_feedBack_reader - ((size > this->comb_tilde_14_feedBack__maxdelay ? this->comb_tilde_14_feedBack__maxdelay : (size < (this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer) ? this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->comb_tilde_14_feedBack_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                            );
                        }
                        
                        void comb_tilde_14_feedBack_write(number v) {
                            this->comb_tilde_14_feedBack_writer = this->comb_tilde_14_feedBack_reader;
                            this->comb_tilde_14_feedBack_buffer[(Index)this->comb_tilde_14_feedBack_writer] = v;
                        }
                        
                        number comb_tilde_14_feedBack_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->comb_tilde_14_feedBack__maxdelay : size);
                            number val = this->comb_tilde_14_feedBack_read(effectiveSize, 0);
                            this->comb_tilde_14_feedBack_write(v);
                            this->comb_tilde_14_feedBack_step();
                            return val;
                        }
                        
                        array<Index, 2> comb_tilde_14_feedBack_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->comb_tilde_14_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->comb_tilde_14_feedBack_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void comb_tilde_14_feedBack_init() {
                            auto result = this->comb_tilde_14_feedBack_calcSizeInSamples();
                            this->comb_tilde_14_feedBack__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_14_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                            this->comb_tilde_14_feedBack_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void comb_tilde_14_feedBack_clear() {
                            this->comb_tilde_14_feedBack_buffer->setZero();
                        }
                        
                        void comb_tilde_14_feedBack_reset() {
                            auto result = this->comb_tilde_14_feedBack_calcSizeInSamples();
                            this->comb_tilde_14_feedBack__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_14_feedBack_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->comb_tilde_14_feedBack_buffer);
                            this->comb_tilde_14_feedBack_wrap = this->comb_tilde_14_feedBack_buffer->getSize() - 1;
                            this->comb_tilde_14_feedBack_clear();
                        
                            if (this->comb_tilde_14_feedBack_reader >= this->comb_tilde_14_feedBack__maxdelay || this->comb_tilde_14_feedBack_writer >= this->comb_tilde_14_feedBack__maxdelay) {
                                this->comb_tilde_14_feedBack_reader = 0;
                                this->comb_tilde_14_feedBack_writer = 0;
                            }
                        }
                        
                        void comb_tilde_14_feedBack_dspsetup() {
                            this->comb_tilde_14_feedBack_reset();
                        }
                        
                        number comb_tilde_14_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number comb_tilde_14_feedBack_size() {
                            return this->comb_tilde_14_feedBack__maxdelay;
                        }
                        
                        void comb_tilde_14_init() {
                            this->comb_tilde_14_feedForward_init();
                            this->comb_tilde_14_feedBack_init();
                        }
                        
                        void comb_tilde_14_clear() {
                            this->comb_tilde_14_feedForward_clear();
                            this->comb_tilde_14_feedBack_clear();
                        }
                        
                        void comb_tilde_14_reset() {
                            this->comb_tilde_14_init();
                            this->comb_tilde_14_clear();
                        }
                        
                        void comb_tilde_14_dspsetup(bool force) {
                            if ((bool)(this->comb_tilde_14_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->comb_tilde_14_reset();
                            this->comb_tilde_14_setupDone = true;
                            this->comb_tilde_14_feedForward_dspsetup();
                            this->comb_tilde_14_feedBack_dspsetup();
                        }
                        
                        void comb_tilde_15_feedForward_step() {
                            this->comb_tilde_15_feedForward_reader++;
                        
                            if (this->comb_tilde_15_feedForward_reader >= (int)(this->comb_tilde_15_feedForward_buffer->getSize()))
                                this->comb_tilde_15_feedForward_reader = 0;
                        }
                        
                        number comb_tilde_15_feedForward_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->comb_tilde_15_feedForward_buffer->getSize()) + this->comb_tilde_15_feedForward_reader - ((size > this->comb_tilde_15_feedForward__maxdelay ? this->comb_tilde_15_feedForward__maxdelay : (size < (this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer) ? this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->comb_tilde_15_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                                ), this->comb_tilde_15_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->comb_tilde_15_feedForward_buffer->getSize()) + this->comb_tilde_15_feedForward_reader - ((size > this->comb_tilde_15_feedForward__maxdelay ? this->comb_tilde_15_feedForward__maxdelay : (size < (1 + this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer) ? 1 + this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->comb_tilde_15_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                                ), this->comb_tilde_15_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                                ), this->comb_tilde_15_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                                ), this->comb_tilde_15_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->comb_tilde_15_feedForward_buffer->getSize()) + this->comb_tilde_15_feedForward_reader - ((size > this->comb_tilde_15_feedForward__maxdelay ? this->comb_tilde_15_feedForward__maxdelay : (size < (1 + this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer) ? 1 + this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->comb_tilde_15_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                                ), this->comb_tilde_15_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                                ), this->comb_tilde_15_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                                ), this->comb_tilde_15_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->comb_tilde_15_feedForward_buffer->getSize()) + this->comb_tilde_15_feedForward_reader - ((size > this->comb_tilde_15_feedForward__maxdelay ? this->comb_tilde_15_feedForward__maxdelay : (size < (1 + this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer) ? 1 + this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->comb_tilde_15_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                                ), this->comb_tilde_15_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                                ), this->comb_tilde_15_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                                ), this->comb_tilde_15_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->comb_tilde_15_feedForward_buffer->getSize()) + this->comb_tilde_15_feedForward_reader - ((size > this->comb_tilde_15_feedForward__maxdelay ? this->comb_tilde_15_feedForward__maxdelay : (size < (1 + this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer) ? 1 + this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->comb_tilde_15_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                                ), this->comb_tilde_15_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                                ), this->comb_tilde_15_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                                ), this->comb_tilde_15_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                                ), this->comb_tilde_15_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                                ), this->comb_tilde_15_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->comb_tilde_15_feedForward_buffer->getSize()) + this->comb_tilde_15_feedForward_reader - ((size > this->comb_tilde_15_feedForward__maxdelay ? this->comb_tilde_15_feedForward__maxdelay : (size < (this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer) ? this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->comb_tilde_15_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                                ), this->comb_tilde_15_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                                ));
                            }
                        
                            number r = (int)(this->comb_tilde_15_feedForward_buffer->getSize()) + this->comb_tilde_15_feedForward_reader - ((size > this->comb_tilde_15_feedForward__maxdelay ? this->comb_tilde_15_feedForward__maxdelay : (size < (this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer) ? this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->comb_tilde_15_feedForward_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                            );
                        }
                        
                        void comb_tilde_15_feedForward_write(number v) {
                            this->comb_tilde_15_feedForward_writer = this->comb_tilde_15_feedForward_reader;
                            this->comb_tilde_15_feedForward_buffer[(Index)this->comb_tilde_15_feedForward_writer] = v;
                        }
                        
                        number comb_tilde_15_feedForward_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->comb_tilde_15_feedForward__maxdelay : size);
                            number val = this->comb_tilde_15_feedForward_read(effectiveSize, 0);
                            this->comb_tilde_15_feedForward_write(v);
                            this->comb_tilde_15_feedForward_step();
                            return val;
                        }
                        
                        array<Index, 2> comb_tilde_15_feedForward_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->comb_tilde_15_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->comb_tilde_15_feedForward_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void comb_tilde_15_feedForward_init() {
                            auto result = this->comb_tilde_15_feedForward_calcSizeInSamples();
                            this->comb_tilde_15_feedForward__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_15_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                            this->comb_tilde_15_feedForward_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void comb_tilde_15_feedForward_clear() {
                            this->comb_tilde_15_feedForward_buffer->setZero();
                        }
                        
                        void comb_tilde_15_feedForward_reset() {
                            auto result = this->comb_tilde_15_feedForward_calcSizeInSamples();
                            this->comb_tilde_15_feedForward__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_15_feedForward_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->comb_tilde_15_feedForward_buffer);
                            this->comb_tilde_15_feedForward_wrap = this->comb_tilde_15_feedForward_buffer->getSize() - 1;
                            this->comb_tilde_15_feedForward_clear();
                        
                            if (this->comb_tilde_15_feedForward_reader >= this->comb_tilde_15_feedForward__maxdelay || this->comb_tilde_15_feedForward_writer >= this->comb_tilde_15_feedForward__maxdelay) {
                                this->comb_tilde_15_feedForward_reader = 0;
                                this->comb_tilde_15_feedForward_writer = 0;
                            }
                        }
                        
                        void comb_tilde_15_feedForward_dspsetup() {
                            this->comb_tilde_15_feedForward_reset();
                        }
                        
                        number comb_tilde_15_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number comb_tilde_15_feedForward_size() {
                            return this->comb_tilde_15_feedForward__maxdelay;
                        }
                        
                        void comb_tilde_15_feedBack_step() {
                            this->comb_tilde_15_feedBack_reader++;
                        
                            if (this->comb_tilde_15_feedBack_reader >= (int)(this->comb_tilde_15_feedBack_buffer->getSize()))
                                this->comb_tilde_15_feedBack_reader = 0;
                        }
                        
                        number comb_tilde_15_feedBack_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->comb_tilde_15_feedBack_buffer->getSize()) + this->comb_tilde_15_feedBack_reader - ((size > this->comb_tilde_15_feedBack__maxdelay ? this->comb_tilde_15_feedBack__maxdelay : (size < (this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer) ? this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->comb_tilde_15_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                                ), this->comb_tilde_15_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->comb_tilde_15_feedBack_buffer->getSize()) + this->comb_tilde_15_feedBack_reader - ((size > this->comb_tilde_15_feedBack__maxdelay ? this->comb_tilde_15_feedBack__maxdelay : (size < (1 + this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer) ? 1 + this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->comb_tilde_15_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                                ), this->comb_tilde_15_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                                ), this->comb_tilde_15_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                                ), this->comb_tilde_15_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->comb_tilde_15_feedBack_buffer->getSize()) + this->comb_tilde_15_feedBack_reader - ((size > this->comb_tilde_15_feedBack__maxdelay ? this->comb_tilde_15_feedBack__maxdelay : (size < (1 + this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer) ? 1 + this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->comb_tilde_15_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                                ), this->comb_tilde_15_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                                ), this->comb_tilde_15_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                                ), this->comb_tilde_15_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->comb_tilde_15_feedBack_buffer->getSize()) + this->comb_tilde_15_feedBack_reader - ((size > this->comb_tilde_15_feedBack__maxdelay ? this->comb_tilde_15_feedBack__maxdelay : (size < (1 + this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer) ? 1 + this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->comb_tilde_15_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                                ), this->comb_tilde_15_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                                ), this->comb_tilde_15_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                                ), this->comb_tilde_15_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->comb_tilde_15_feedBack_buffer->getSize()) + this->comb_tilde_15_feedBack_reader - ((size > this->comb_tilde_15_feedBack__maxdelay ? this->comb_tilde_15_feedBack__maxdelay : (size < (1 + this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer) ? 1 + this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->comb_tilde_15_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                                ), this->comb_tilde_15_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                                ), this->comb_tilde_15_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                                ), this->comb_tilde_15_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                                ), this->comb_tilde_15_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                                ), this->comb_tilde_15_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->comb_tilde_15_feedBack_buffer->getSize()) + this->comb_tilde_15_feedBack_reader - ((size > this->comb_tilde_15_feedBack__maxdelay ? this->comb_tilde_15_feedBack__maxdelay : (size < (this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer) ? this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->comb_tilde_15_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                                ), this->comb_tilde_15_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                                ));
                            }
                        
                            number r = (int)(this->comb_tilde_15_feedBack_buffer->getSize()) + this->comb_tilde_15_feedBack_reader - ((size > this->comb_tilde_15_feedBack__maxdelay ? this->comb_tilde_15_feedBack__maxdelay : (size < (this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer) ? this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->comb_tilde_15_feedBack_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                            );
                        }
                        
                        void comb_tilde_15_feedBack_write(number v) {
                            this->comb_tilde_15_feedBack_writer = this->comb_tilde_15_feedBack_reader;
                            this->comb_tilde_15_feedBack_buffer[(Index)this->comb_tilde_15_feedBack_writer] = v;
                        }
                        
                        number comb_tilde_15_feedBack_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->comb_tilde_15_feedBack__maxdelay : size);
                            number val = this->comb_tilde_15_feedBack_read(effectiveSize, 0);
                            this->comb_tilde_15_feedBack_write(v);
                            this->comb_tilde_15_feedBack_step();
                            return val;
                        }
                        
                        array<Index, 2> comb_tilde_15_feedBack_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->comb_tilde_15_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->comb_tilde_15_feedBack_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void comb_tilde_15_feedBack_init() {
                            auto result = this->comb_tilde_15_feedBack_calcSizeInSamples();
                            this->comb_tilde_15_feedBack__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_15_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                            this->comb_tilde_15_feedBack_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void comb_tilde_15_feedBack_clear() {
                            this->comb_tilde_15_feedBack_buffer->setZero();
                        }
                        
                        void comb_tilde_15_feedBack_reset() {
                            auto result = this->comb_tilde_15_feedBack_calcSizeInSamples();
                            this->comb_tilde_15_feedBack__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_15_feedBack_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->comb_tilde_15_feedBack_buffer);
                            this->comb_tilde_15_feedBack_wrap = this->comb_tilde_15_feedBack_buffer->getSize() - 1;
                            this->comb_tilde_15_feedBack_clear();
                        
                            if (this->comb_tilde_15_feedBack_reader >= this->comb_tilde_15_feedBack__maxdelay || this->comb_tilde_15_feedBack_writer >= this->comb_tilde_15_feedBack__maxdelay) {
                                this->comb_tilde_15_feedBack_reader = 0;
                                this->comb_tilde_15_feedBack_writer = 0;
                            }
                        }
                        
                        void comb_tilde_15_feedBack_dspsetup() {
                            this->comb_tilde_15_feedBack_reset();
                        }
                        
                        number comb_tilde_15_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number comb_tilde_15_feedBack_size() {
                            return this->comb_tilde_15_feedBack__maxdelay;
                        }
                        
                        void comb_tilde_15_init() {
                            this->comb_tilde_15_feedForward_init();
                            this->comb_tilde_15_feedBack_init();
                        }
                        
                        void comb_tilde_15_clear() {
                            this->comb_tilde_15_feedForward_clear();
                            this->comb_tilde_15_feedBack_clear();
                        }
                        
                        void comb_tilde_15_reset() {
                            this->comb_tilde_15_init();
                            this->comb_tilde_15_clear();
                        }
                        
                        void comb_tilde_15_dspsetup(bool force) {
                            if ((bool)(this->comb_tilde_15_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->comb_tilde_15_reset();
                            this->comb_tilde_15_setupDone = true;
                            this->comb_tilde_15_feedForward_dspsetup();
                            this->comb_tilde_15_feedBack_dspsetup();
                        }
                        
                        void comb_tilde_16_feedForward_step() {
                            this->comb_tilde_16_feedForward_reader++;
                        
                            if (this->comb_tilde_16_feedForward_reader >= (int)(this->comb_tilde_16_feedForward_buffer->getSize()))
                                this->comb_tilde_16_feedForward_reader = 0;
                        }
                        
                        number comb_tilde_16_feedForward_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->comb_tilde_16_feedForward_buffer->getSize()) + this->comb_tilde_16_feedForward_reader - ((size > this->comb_tilde_16_feedForward__maxdelay ? this->comb_tilde_16_feedForward__maxdelay : (size < (this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer) ? this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->comb_tilde_16_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                                ), this->comb_tilde_16_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->comb_tilde_16_feedForward_buffer->getSize()) + this->comb_tilde_16_feedForward_reader - ((size > this->comb_tilde_16_feedForward__maxdelay ? this->comb_tilde_16_feedForward__maxdelay : (size < (1 + this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer) ? 1 + this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->comb_tilde_16_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                                ), this->comb_tilde_16_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                                ), this->comb_tilde_16_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                                ), this->comb_tilde_16_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->comb_tilde_16_feedForward_buffer->getSize()) + this->comb_tilde_16_feedForward_reader - ((size > this->comb_tilde_16_feedForward__maxdelay ? this->comb_tilde_16_feedForward__maxdelay : (size < (1 + this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer) ? 1 + this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->comb_tilde_16_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                                ), this->comb_tilde_16_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                                ), this->comb_tilde_16_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                                ), this->comb_tilde_16_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->comb_tilde_16_feedForward_buffer->getSize()) + this->comb_tilde_16_feedForward_reader - ((size > this->comb_tilde_16_feedForward__maxdelay ? this->comb_tilde_16_feedForward__maxdelay : (size < (1 + this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer) ? 1 + this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->comb_tilde_16_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                                ), this->comb_tilde_16_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                                ), this->comb_tilde_16_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                                ), this->comb_tilde_16_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->comb_tilde_16_feedForward_buffer->getSize()) + this->comb_tilde_16_feedForward_reader - ((size > this->comb_tilde_16_feedForward__maxdelay ? this->comb_tilde_16_feedForward__maxdelay : (size < (1 + this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer) ? 1 + this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->comb_tilde_16_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                                ), this->comb_tilde_16_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                                ), this->comb_tilde_16_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                                ), this->comb_tilde_16_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                                ), this->comb_tilde_16_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                                ), this->comb_tilde_16_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->comb_tilde_16_feedForward_buffer->getSize()) + this->comb_tilde_16_feedForward_reader - ((size > this->comb_tilde_16_feedForward__maxdelay ? this->comb_tilde_16_feedForward__maxdelay : (size < (this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer) ? this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->comb_tilde_16_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                                ), this->comb_tilde_16_feedForward_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                                ));
                            }
                        
                            number r = (int)(this->comb_tilde_16_feedForward_buffer->getSize()) + this->comb_tilde_16_feedForward_reader - ((size > this->comb_tilde_16_feedForward__maxdelay ? this->comb_tilde_16_feedForward__maxdelay : (size < (this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer) ? this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->comb_tilde_16_feedForward_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                            );
                        }
                        
                        void comb_tilde_16_feedForward_write(number v) {
                            this->comb_tilde_16_feedForward_writer = this->comb_tilde_16_feedForward_reader;
                            this->comb_tilde_16_feedForward_buffer[(Index)this->comb_tilde_16_feedForward_writer] = v;
                        }
                        
                        number comb_tilde_16_feedForward_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->comb_tilde_16_feedForward__maxdelay : size);
                            number val = this->comb_tilde_16_feedForward_read(effectiveSize, 0);
                            this->comb_tilde_16_feedForward_write(v);
                            this->comb_tilde_16_feedForward_step();
                            return val;
                        }
                        
                        array<Index, 2> comb_tilde_16_feedForward_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->comb_tilde_16_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->comb_tilde_16_feedForward_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void comb_tilde_16_feedForward_init() {
                            auto result = this->comb_tilde_16_feedForward_calcSizeInSamples();
                            this->comb_tilde_16_feedForward__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_16_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                            this->comb_tilde_16_feedForward_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void comb_tilde_16_feedForward_clear() {
                            this->comb_tilde_16_feedForward_buffer->setZero();
                        }
                        
                        void comb_tilde_16_feedForward_reset() {
                            auto result = this->comb_tilde_16_feedForward_calcSizeInSamples();
                            this->comb_tilde_16_feedForward__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_16_feedForward_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->comb_tilde_16_feedForward_buffer);
                            this->comb_tilde_16_feedForward_wrap = this->comb_tilde_16_feedForward_buffer->getSize() - 1;
                            this->comb_tilde_16_feedForward_clear();
                        
                            if (this->comb_tilde_16_feedForward_reader >= this->comb_tilde_16_feedForward__maxdelay || this->comb_tilde_16_feedForward_writer >= this->comb_tilde_16_feedForward__maxdelay) {
                                this->comb_tilde_16_feedForward_reader = 0;
                                this->comb_tilde_16_feedForward_writer = 0;
                            }
                        }
                        
                        void comb_tilde_16_feedForward_dspsetup() {
                            this->comb_tilde_16_feedForward_reset();
                        }
                        
                        number comb_tilde_16_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number comb_tilde_16_feedForward_size() {
                            return this->comb_tilde_16_feedForward__maxdelay;
                        }
                        
                        void comb_tilde_16_feedBack_step() {
                            this->comb_tilde_16_feedBack_reader++;
                        
                            if (this->comb_tilde_16_feedBack_reader >= (int)(this->comb_tilde_16_feedBack_buffer->getSize()))
                                this->comb_tilde_16_feedBack_reader = 0;
                        }
                        
                        number comb_tilde_16_feedBack_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->comb_tilde_16_feedBack_buffer->getSize()) + this->comb_tilde_16_feedBack_reader - ((size > this->comb_tilde_16_feedBack__maxdelay ? this->comb_tilde_16_feedBack__maxdelay : (size < (this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer) ? this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->comb_tilde_16_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                                ), this->comb_tilde_16_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->comb_tilde_16_feedBack_buffer->getSize()) + this->comb_tilde_16_feedBack_reader - ((size > this->comb_tilde_16_feedBack__maxdelay ? this->comb_tilde_16_feedBack__maxdelay : (size < (1 + this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer) ? 1 + this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->comb_tilde_16_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                                ), this->comb_tilde_16_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                                ), this->comb_tilde_16_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                                ), this->comb_tilde_16_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->comb_tilde_16_feedBack_buffer->getSize()) + this->comb_tilde_16_feedBack_reader - ((size > this->comb_tilde_16_feedBack__maxdelay ? this->comb_tilde_16_feedBack__maxdelay : (size < (1 + this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer) ? 1 + this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->comb_tilde_16_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                                ), this->comb_tilde_16_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                                ), this->comb_tilde_16_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                                ), this->comb_tilde_16_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->comb_tilde_16_feedBack_buffer->getSize()) + this->comb_tilde_16_feedBack_reader - ((size > this->comb_tilde_16_feedBack__maxdelay ? this->comb_tilde_16_feedBack__maxdelay : (size < (1 + this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer) ? 1 + this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->comb_tilde_16_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                                ), this->comb_tilde_16_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                                ), this->comb_tilde_16_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                                ), this->comb_tilde_16_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->comb_tilde_16_feedBack_buffer->getSize()) + this->comb_tilde_16_feedBack_reader - ((size > this->comb_tilde_16_feedBack__maxdelay ? this->comb_tilde_16_feedBack__maxdelay : (size < (1 + this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer) ? 1 + this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->comb_tilde_16_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                                ), this->comb_tilde_16_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                                ), this->comb_tilde_16_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                                ), this->comb_tilde_16_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                                ), this->comb_tilde_16_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                                ), this->comb_tilde_16_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->comb_tilde_16_feedBack_buffer->getSize()) + this->comb_tilde_16_feedBack_reader - ((size > this->comb_tilde_16_feedBack__maxdelay ? this->comb_tilde_16_feedBack__maxdelay : (size < (this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer) ? this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->comb_tilde_16_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                                ), this->comb_tilde_16_feedBack_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                                ));
                            }
                        
                            number r = (int)(this->comb_tilde_16_feedBack_buffer->getSize()) + this->comb_tilde_16_feedBack_reader - ((size > this->comb_tilde_16_feedBack__maxdelay ? this->comb_tilde_16_feedBack__maxdelay : (size < (this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer) ? this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->comb_tilde_16_feedBack_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                            );
                        }
                        
                        void comb_tilde_16_feedBack_write(number v) {
                            this->comb_tilde_16_feedBack_writer = this->comb_tilde_16_feedBack_reader;
                            this->comb_tilde_16_feedBack_buffer[(Index)this->comb_tilde_16_feedBack_writer] = v;
                        }
                        
                        number comb_tilde_16_feedBack_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->comb_tilde_16_feedBack__maxdelay : size);
                            number val = this->comb_tilde_16_feedBack_read(effectiveSize, 0);
                            this->comb_tilde_16_feedBack_write(v);
                            this->comb_tilde_16_feedBack_step();
                            return val;
                        }
                        
                        array<Index, 2> comb_tilde_16_feedBack_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->comb_tilde_16_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->comb_tilde_16_feedBack_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void comb_tilde_16_feedBack_init() {
                            auto result = this->comb_tilde_16_feedBack_calcSizeInSamples();
                            this->comb_tilde_16_feedBack__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_16_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                            this->comb_tilde_16_feedBack_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void comb_tilde_16_feedBack_clear() {
                            this->comb_tilde_16_feedBack_buffer->setZero();
                        }
                        
                        void comb_tilde_16_feedBack_reset() {
                            auto result = this->comb_tilde_16_feedBack_calcSizeInSamples();
                            this->comb_tilde_16_feedBack__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->comb_tilde_16_feedBack_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->comb_tilde_16_feedBack_buffer);
                            this->comb_tilde_16_feedBack_wrap = this->comb_tilde_16_feedBack_buffer->getSize() - 1;
                            this->comb_tilde_16_feedBack_clear();
                        
                            if (this->comb_tilde_16_feedBack_reader >= this->comb_tilde_16_feedBack__maxdelay || this->comb_tilde_16_feedBack_writer >= this->comb_tilde_16_feedBack__maxdelay) {
                                this->comb_tilde_16_feedBack_reader = 0;
                                this->comb_tilde_16_feedBack_writer = 0;
                            }
                        }
                        
                        void comb_tilde_16_feedBack_dspsetup() {
                            this->comb_tilde_16_feedBack_reset();
                        }
                        
                        number comb_tilde_16_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            RNBO_UNUSED(samplerate);
                            return 44100;
                        }
                        
                        number comb_tilde_16_feedBack_size() {
                            return this->comb_tilde_16_feedBack__maxdelay;
                        }
                        
                        void comb_tilde_16_init() {
                            this->comb_tilde_16_feedForward_init();
                            this->comb_tilde_16_feedBack_init();
                        }
                        
                        void comb_tilde_16_clear() {
                            this->comb_tilde_16_feedForward_clear();
                            this->comb_tilde_16_feedBack_clear();
                        }
                        
                        void comb_tilde_16_reset() {
                            this->comb_tilde_16_init();
                            this->comb_tilde_16_clear();
                        }
                        
                        void comb_tilde_16_dspsetup(bool force) {
                            if ((bool)(this->comb_tilde_16_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->comb_tilde_16_reset();
                            this->comb_tilde_16_setupDone = true;
                            this->comb_tilde_16_feedForward_dspsetup();
                            this->comb_tilde_16_feedBack_dspsetup();
                        }
                        
                        bool stackprotect_check() {
                            this->stackprotect_count++;
                        
                            if (this->stackprotect_count > 128) {
                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                return true;
                            }
                        
                            return false;
                        }
                        
                        void updateTime(MillisecondTime time) {
                            this->_currentTime = time;
                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                        
                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                        
                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                this->sampleOffsetIntoNextAudioBuffer = 0;
                        }
                        
                        void assign_defaults()
                        {
                            comb_tilde_10_x = 0;
                            comb_tilde_10_delayTime = 110;
                            comb_tilde_10_gain = 0;
                            comb_tilde_10_ffGain = 1;
                            comb_tilde_10_fbGain = 0;
                            dspexpr_49_in1 = 0;
                            dspexpr_49_in2 = 110;
                            comb_tilde_11_x = 0;
                            comb_tilde_11_delayTime = 135;
                            comb_tilde_11_gain = 0;
                            comb_tilde_11_ffGain = 1;
                            comb_tilde_11_fbGain = 0;
                            dspexpr_50_in1 = 0;
                            dspexpr_50_in2 = 135;
                            comb_tilde_12_x = 0;
                            comb_tilde_12_delayTime = 55;
                            comb_tilde_12_gain = 0;
                            comb_tilde_12_ffGain = 1;
                            comb_tilde_12_fbGain = 0;
                            dspexpr_51_in1 = 0;
                            dspexpr_51_in2 = 55;
                            dspexpr_52_in1 = 0;
                            dspexpr_52_in2 = 0.355;
                            comb_tilde_13_x = 0;
                            comb_tilde_13_delayTime = 3;
                            comb_tilde_13_gain = 0;
                            comb_tilde_13_ffGain = 1;
                            comb_tilde_13_fbGain = 0;
                            dspexpr_53_in1 = 0;
                            dspexpr_53_in2 = 3;
                            dspexpr_54_in1 = 0;
                            dspexpr_54_in2 = -1;
                            comb_tilde_14_x = 0;
                            comb_tilde_14_delayTime = 35;
                            comb_tilde_14_gain = 0;
                            comb_tilde_14_ffGain = 1;
                            comb_tilde_14_fbGain = 0;
                            dspexpr_55_in1 = 0;
                            dspexpr_55_in2 = 35;
                            comb_tilde_15_x = 0;
                            comb_tilde_15_delayTime = 27;
                            comb_tilde_15_gain = 0;
                            comb_tilde_15_ffGain = 1;
                            comb_tilde_15_fbGain = 0;
                            dspexpr_56_in1 = 0;
                            dspexpr_56_in2 = 27;
                            comb_tilde_16_x = 0;
                            comb_tilde_16_delayTime = 75;
                            comb_tilde_16_gain = 0;
                            comb_tilde_16_ffGain = 1;
                            comb_tilde_16_fbGain = 0;
                            dspexpr_57_in1 = 0;
                            dspexpr_57_in2 = 52;
                            dspexpr_58_in1 = 0;
                            dspexpr_58_in2 = 0;
                            _currentTime = 0;
                            audioProcessSampleCount = 0;
                            sampleOffsetIntoNextAudioBuffer = 0;
                            zeroBuffer = nullptr;
                            dummyBuffer = nullptr;
                            signals[0] = nullptr;
                            signals[1] = nullptr;
                            signals[2] = nullptr;
                            signals[3] = nullptr;
                            signals[4] = nullptr;
                            signals[5] = nullptr;
                            signals[6] = nullptr;
                            signals[7] = nullptr;
                            didAllocateSignals = 0;
                            vs = 0;
                            maxvs = 0;
                            sr = 44100;
                            invsr = 0.00002267573696;
                            comb_tilde_10_feedForward__maxdelay = 0;
                            comb_tilde_10_feedForward_sizemode = 0;
                            comb_tilde_10_feedForward_wrap = 0;
                            comb_tilde_10_feedForward_reader = 0;
                            comb_tilde_10_feedForward_writer = 0;
                            comb_tilde_10_feedBack__maxdelay = 0;
                            comb_tilde_10_feedBack_sizemode = 0;
                            comb_tilde_10_feedBack_wrap = 0;
                            comb_tilde_10_feedBack_reader = 0;
                            comb_tilde_10_feedBack_writer = 0;
                            comb_tilde_10_setupDone = false;
                            comb_tilde_11_feedForward__maxdelay = 0;
                            comb_tilde_11_feedForward_sizemode = 0;
                            comb_tilde_11_feedForward_wrap = 0;
                            comb_tilde_11_feedForward_reader = 0;
                            comb_tilde_11_feedForward_writer = 0;
                            comb_tilde_11_feedBack__maxdelay = 0;
                            comb_tilde_11_feedBack_sizemode = 0;
                            comb_tilde_11_feedBack_wrap = 0;
                            comb_tilde_11_feedBack_reader = 0;
                            comb_tilde_11_feedBack_writer = 0;
                            comb_tilde_11_setupDone = false;
                            comb_tilde_12_feedForward__maxdelay = 0;
                            comb_tilde_12_feedForward_sizemode = 0;
                            comb_tilde_12_feedForward_wrap = 0;
                            comb_tilde_12_feedForward_reader = 0;
                            comb_tilde_12_feedForward_writer = 0;
                            comb_tilde_12_feedBack__maxdelay = 0;
                            comb_tilde_12_feedBack_sizemode = 0;
                            comb_tilde_12_feedBack_wrap = 0;
                            comb_tilde_12_feedBack_reader = 0;
                            comb_tilde_12_feedBack_writer = 0;
                            comb_tilde_12_setupDone = false;
                            comb_tilde_13_feedForward__maxdelay = 0;
                            comb_tilde_13_feedForward_sizemode = 0;
                            comb_tilde_13_feedForward_wrap = 0;
                            comb_tilde_13_feedForward_reader = 0;
                            comb_tilde_13_feedForward_writer = 0;
                            comb_tilde_13_feedBack__maxdelay = 0;
                            comb_tilde_13_feedBack_sizemode = 0;
                            comb_tilde_13_feedBack_wrap = 0;
                            comb_tilde_13_feedBack_reader = 0;
                            comb_tilde_13_feedBack_writer = 0;
                            comb_tilde_13_setupDone = false;
                            comb_tilde_14_feedForward__maxdelay = 0;
                            comb_tilde_14_feedForward_sizemode = 0;
                            comb_tilde_14_feedForward_wrap = 0;
                            comb_tilde_14_feedForward_reader = 0;
                            comb_tilde_14_feedForward_writer = 0;
                            comb_tilde_14_feedBack__maxdelay = 0;
                            comb_tilde_14_feedBack_sizemode = 0;
                            comb_tilde_14_feedBack_wrap = 0;
                            comb_tilde_14_feedBack_reader = 0;
                            comb_tilde_14_feedBack_writer = 0;
                            comb_tilde_14_setupDone = false;
                            comb_tilde_15_feedForward__maxdelay = 0;
                            comb_tilde_15_feedForward_sizemode = 0;
                            comb_tilde_15_feedForward_wrap = 0;
                            comb_tilde_15_feedForward_reader = 0;
                            comb_tilde_15_feedForward_writer = 0;
                            comb_tilde_15_feedBack__maxdelay = 0;
                            comb_tilde_15_feedBack_sizemode = 0;
                            comb_tilde_15_feedBack_wrap = 0;
                            comb_tilde_15_feedBack_reader = 0;
                            comb_tilde_15_feedBack_writer = 0;
                            comb_tilde_15_setupDone = false;
                            comb_tilde_16_feedForward__maxdelay = 0;
                            comb_tilde_16_feedForward_sizemode = 0;
                            comb_tilde_16_feedForward_wrap = 0;
                            comb_tilde_16_feedForward_reader = 0;
                            comb_tilde_16_feedForward_writer = 0;
                            comb_tilde_16_feedBack__maxdelay = 0;
                            comb_tilde_16_feedBack_sizemode = 0;
                            comb_tilde_16_feedBack_wrap = 0;
                            comb_tilde_16_feedBack_reader = 0;
                            comb_tilde_16_feedBack_writer = 0;
                            comb_tilde_16_setupDone = false;
                            stackprotect_count = 0;
                            _voiceIndex = 0;
                            _noteNumber = 0;
                            isMuted = 1;
                            parameterOffset = 0;
                        }
                        
                        // member variables
                        
                            number comb_tilde_10_x;
                            number comb_tilde_10_delayTime;
                            number comb_tilde_10_gain;
                            number comb_tilde_10_ffGain;
                            number comb_tilde_10_fbGain;
                            number dspexpr_49_in1;
                            number dspexpr_49_in2;
                            number comb_tilde_11_x;
                            number comb_tilde_11_delayTime;
                            number comb_tilde_11_gain;
                            number comb_tilde_11_ffGain;
                            number comb_tilde_11_fbGain;
                            number dspexpr_50_in1;
                            number dspexpr_50_in2;
                            number comb_tilde_12_x;
                            number comb_tilde_12_delayTime;
                            number comb_tilde_12_gain;
                            number comb_tilde_12_ffGain;
                            number comb_tilde_12_fbGain;
                            number dspexpr_51_in1;
                            number dspexpr_51_in2;
                            number dspexpr_52_in1;
                            number dspexpr_52_in2;
                            number comb_tilde_13_x;
                            number comb_tilde_13_delayTime;
                            number comb_tilde_13_gain;
                            number comb_tilde_13_ffGain;
                            number comb_tilde_13_fbGain;
                            number dspexpr_53_in1;
                            number dspexpr_53_in2;
                            number dspexpr_54_in1;
                            number dspexpr_54_in2;
                            number comb_tilde_14_x;
                            number comb_tilde_14_delayTime;
                            number comb_tilde_14_gain;
                            number comb_tilde_14_ffGain;
                            number comb_tilde_14_fbGain;
                            number dspexpr_55_in1;
                            number dspexpr_55_in2;
                            number comb_tilde_15_x;
                            number comb_tilde_15_delayTime;
                            number comb_tilde_15_gain;
                            number comb_tilde_15_ffGain;
                            number comb_tilde_15_fbGain;
                            number dspexpr_56_in1;
                            number dspexpr_56_in2;
                            number comb_tilde_16_x;
                            number comb_tilde_16_delayTime;
                            number comb_tilde_16_gain;
                            number comb_tilde_16_ffGain;
                            number comb_tilde_16_fbGain;
                            number dspexpr_57_in1;
                            number dspexpr_57_in2;
                            number dspexpr_58_in1;
                            number dspexpr_58_in2;
                            MillisecondTime _currentTime;
                            UInt64 audioProcessSampleCount;
                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                            signal zeroBuffer;
                            signal dummyBuffer;
                            SampleValue * signals[8];
                            bool didAllocateSignals;
                            Index vs;
                            Index maxvs;
                            number sr;
                            number invsr;
                            Float64BufferRef comb_tilde_10_feedForward_buffer;
                            Index comb_tilde_10_feedForward__maxdelay;
                            Int comb_tilde_10_feedForward_sizemode;
                            Index comb_tilde_10_feedForward_wrap;
                            Int comb_tilde_10_feedForward_reader;
                            Int comb_tilde_10_feedForward_writer;
                            Float64BufferRef comb_tilde_10_feedBack_buffer;
                            Index comb_tilde_10_feedBack__maxdelay;
                            Int comb_tilde_10_feedBack_sizemode;
                            Index comb_tilde_10_feedBack_wrap;
                            Int comb_tilde_10_feedBack_reader;
                            Int comb_tilde_10_feedBack_writer;
                            bool comb_tilde_10_setupDone;
                            Float64BufferRef comb_tilde_11_feedForward_buffer;
                            Index comb_tilde_11_feedForward__maxdelay;
                            Int comb_tilde_11_feedForward_sizemode;
                            Index comb_tilde_11_feedForward_wrap;
                            Int comb_tilde_11_feedForward_reader;
                            Int comb_tilde_11_feedForward_writer;
                            Float64BufferRef comb_tilde_11_feedBack_buffer;
                            Index comb_tilde_11_feedBack__maxdelay;
                            Int comb_tilde_11_feedBack_sizemode;
                            Index comb_tilde_11_feedBack_wrap;
                            Int comb_tilde_11_feedBack_reader;
                            Int comb_tilde_11_feedBack_writer;
                            bool comb_tilde_11_setupDone;
                            Float64BufferRef comb_tilde_12_feedForward_buffer;
                            Index comb_tilde_12_feedForward__maxdelay;
                            Int comb_tilde_12_feedForward_sizemode;
                            Index comb_tilde_12_feedForward_wrap;
                            Int comb_tilde_12_feedForward_reader;
                            Int comb_tilde_12_feedForward_writer;
                            Float64BufferRef comb_tilde_12_feedBack_buffer;
                            Index comb_tilde_12_feedBack__maxdelay;
                            Int comb_tilde_12_feedBack_sizemode;
                            Index comb_tilde_12_feedBack_wrap;
                            Int comb_tilde_12_feedBack_reader;
                            Int comb_tilde_12_feedBack_writer;
                            bool comb_tilde_12_setupDone;
                            Float64BufferRef comb_tilde_13_feedForward_buffer;
                            Index comb_tilde_13_feedForward__maxdelay;
                            Int comb_tilde_13_feedForward_sizemode;
                            Index comb_tilde_13_feedForward_wrap;
                            Int comb_tilde_13_feedForward_reader;
                            Int comb_tilde_13_feedForward_writer;
                            Float64BufferRef comb_tilde_13_feedBack_buffer;
                            Index comb_tilde_13_feedBack__maxdelay;
                            Int comb_tilde_13_feedBack_sizemode;
                            Index comb_tilde_13_feedBack_wrap;
                            Int comb_tilde_13_feedBack_reader;
                            Int comb_tilde_13_feedBack_writer;
                            bool comb_tilde_13_setupDone;
                            Float64BufferRef comb_tilde_14_feedForward_buffer;
                            Index comb_tilde_14_feedForward__maxdelay;
                            Int comb_tilde_14_feedForward_sizemode;
                            Index comb_tilde_14_feedForward_wrap;
                            Int comb_tilde_14_feedForward_reader;
                            Int comb_tilde_14_feedForward_writer;
                            Float64BufferRef comb_tilde_14_feedBack_buffer;
                            Index comb_tilde_14_feedBack__maxdelay;
                            Int comb_tilde_14_feedBack_sizemode;
                            Index comb_tilde_14_feedBack_wrap;
                            Int comb_tilde_14_feedBack_reader;
                            Int comb_tilde_14_feedBack_writer;
                            bool comb_tilde_14_setupDone;
                            Float64BufferRef comb_tilde_15_feedForward_buffer;
                            Index comb_tilde_15_feedForward__maxdelay;
                            Int comb_tilde_15_feedForward_sizemode;
                            Index comb_tilde_15_feedForward_wrap;
                            Int comb_tilde_15_feedForward_reader;
                            Int comb_tilde_15_feedForward_writer;
                            Float64BufferRef comb_tilde_15_feedBack_buffer;
                            Index comb_tilde_15_feedBack__maxdelay;
                            Int comb_tilde_15_feedBack_sizemode;
                            Index comb_tilde_15_feedBack_wrap;
                            Int comb_tilde_15_feedBack_reader;
                            Int comb_tilde_15_feedBack_writer;
                            bool comb_tilde_15_setupDone;
                            Float64BufferRef comb_tilde_16_feedForward_buffer;
                            Index comb_tilde_16_feedForward__maxdelay;
                            Int comb_tilde_16_feedForward_sizemode;
                            Index comb_tilde_16_feedForward_wrap;
                            Int comb_tilde_16_feedForward_reader;
                            Int comb_tilde_16_feedForward_writer;
                            Float64BufferRef comb_tilde_16_feedBack_buffer;
                            Index comb_tilde_16_feedBack__maxdelay;
                            Int comb_tilde_16_feedBack_sizemode;
                            Index comb_tilde_16_feedBack_wrap;
                            Int comb_tilde_16_feedBack_reader;
                            Int comb_tilde_16_feedBack_writer;
                            bool comb_tilde_16_setupDone;
                            number stackprotect_count;
                            DataRef comb_tilde_10_feedForward_bufferobj;
                            DataRef comb_tilde_10_feedBack_bufferobj;
                            DataRef comb_tilde_11_feedForward_bufferobj;
                            DataRef comb_tilde_11_feedBack_bufferobj;
                            DataRef comb_tilde_12_feedForward_bufferobj;
                            DataRef comb_tilde_12_feedBack_bufferobj;
                            DataRef comb_tilde_13_feedForward_bufferobj;
                            DataRef comb_tilde_13_feedBack_bufferobj;
                            DataRef comb_tilde_14_feedForward_bufferobj;
                            DataRef comb_tilde_14_feedBack_bufferobj;
                            DataRef comb_tilde_15_feedForward_bufferobj;
                            DataRef comb_tilde_15_feedBack_bufferobj;
                            DataRef comb_tilde_16_feedForward_bufferobj;
                            DataRef comb_tilde_16_feedBack_bufferobj;
                            Index _voiceIndex;
                            Int _noteNumber;
                            Index isMuted;
                            ParameterIndex parameterOffset;
                        
            };
            
            RNBOSubpatcher_805()
            {
            }
            
            ~RNBOSubpatcher_805()
            {
                delete this->p_04;
                delete this->p_05;
                delete this->p_06;
                delete this->p_07;
                delete this->p_08;
                delete this->p_09;
                delete this->p_10;
                delete this->p_11;
            }
            
            virtual RNBOSubpatcher_812* getPatcher() const {
                return static_cast<RNBOSubpatcher_812 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
            
                this->p_10_perform(
                    this->signals[0],
                    this->signals[1],
                    this->signals[2],
                    this->signals[3],
                    this->signals[4],
                    n
                );
            
                this->p_06_perform(in1, in2, this->signals[0], this->signals[5], this->signals[6], n);
                this->p_04_perform(this->signals[5], this->signals[6], this->signals[7], this->signals[8], n);
                this->dspexpr_59_perform(this->signals[3], this->signals[6], n);
            
                this->p_05_perform(
                    this->signals[7],
                    this->signals[0],
                    this->signals[1],
                    this->signals[2],
                    this->signals[6],
                    this->signals[3],
                    this->signals[5],
                    this->signals[9],
                    this->signals[10],
                    n
                );
            
                this->p_09_perform(
                    this->signals[8],
                    this->signals[0],
                    this->signals[1],
                    this->signals[2],
                    this->signals[6],
                    this->signals[7],
                    this->signals[11],
                    this->signals[12],
                    this->signals[13],
                    n
                );
            
                this->p_07_perform(
                    this->signals[3],
                    this->signals[5],
                    this->signals[9],
                    this->signals[10],
                    this->signals[7],
                    this->signals[11],
                    this->signals[12],
                    this->signals[13],
                    this->signals[2],
                    this->signals[1],
                    this->signals[0],
                    this->signals[8],
                    this->signals[14],
                    this->signals[15],
                    this->signals[16],
                    this->signals[17],
                    this->signals[18],
                    this->signals[19],
                    this->signals[20],
                    this->signals[21],
                    this->signals[22],
                    this->signals[23],
                    n
                );
            
                this->dspexpr_60_perform(this->signals[4], this->signals[13], n);
            
                this->p_08_perform(
                    this->signals[2],
                    this->signals[1],
                    this->signals[0],
                    this->signals[8],
                    this->signals[14],
                    this->signals[15],
                    this->signals[16],
                    this->signals[6],
                    this->signals[13],
                    out1,
                    n
                );
            
                this->p_11_perform(
                    this->signals[17],
                    this->signals[18],
                    this->signals[19],
                    this->signals[20],
                    this->signals[21],
                    this->signals[22],
                    this->signals[23],
                    this->signals[6],
                    this->signals[13],
                    out2,
                    n
                );
            
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 24; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
                this->p_04->prepareToProcess(sampleRate, maxBlockSize, force);
                this->p_05->prepareToProcess(sampleRate, maxBlockSize, force);
                this->p_06->prepareToProcess(sampleRate, maxBlockSize, force);
                this->p_07->prepareToProcess(sampleRate, maxBlockSize, force);
                this->p_08->prepareToProcess(sampleRate, maxBlockSize, force);
                this->p_09->prepareToProcess(sampleRate, maxBlockSize, force);
                this->p_10->prepareToProcess(sampleRate, maxBlockSize, force);
                this->p_11->prepareToProcess(sampleRate, maxBlockSize, force);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {
                this->p_04 = new RNBOSubpatcher_791();
                this->p_04->setEngineAndPatcher(this->getEngine(), this);
                this->p_04->initialize();
                this->p_04->setParameterOffset(this->getParameterOffset(this->p_04));
                this->p_05 = new RNBOSubpatcher_792();
                this->p_05->setEngineAndPatcher(this->getEngine(), this);
                this->p_05->initialize();
                this->p_05->setParameterOffset(this->getParameterOffset(this->p_05));
                this->p_06 = new RNBOSubpatcher_793();
                this->p_06->setEngineAndPatcher(this->getEngine(), this);
                this->p_06->initialize();
                this->p_06->setParameterOffset(this->getParameterOffset(this->p_06));
                this->p_07 = new RNBOSubpatcher_794();
                this->p_07->setEngineAndPatcher(this->getEngine(), this);
                this->p_07->initialize();
                this->p_07->setParameterOffset(this->getParameterOffset(this->p_07));
                this->p_08 = new RNBOSubpatcher_795();
                this->p_08->setEngineAndPatcher(this->getEngine(), this);
                this->p_08->initialize();
                this->p_08->setParameterOffset(this->getParameterOffset(this->p_08));
                this->p_09 = new RNBOSubpatcher_796();
                this->p_09->setEngineAndPatcher(this->getEngine(), this);
                this->p_09->initialize();
                this->p_09->setParameterOffset(this->getParameterOffset(this->p_09));
                this->p_10 = new RNBOSubpatcher_797();
                this->p_10->setEngineAndPatcher(this->getEngine(), this);
                this->p_10->initialize();
                this->p_10->setParameterOffset(this->getParameterOffset(this->p_10));
                this->p_11 = new RNBOSubpatcher_798();
                this->p_11->setEngineAndPatcher(this->getEngine(), this);
                this->p_11->initialize();
                this->p_11->setParameterOffset(this->getParameterOffset(this->p_11));
            }
            
            void getPreset(PatcherStateInterface& preset) {
                this->p_04->getPreset(getSubState(getSubState(preset, "__sps"), "Blur~"));
                this->p_05->getPreset(getSubState(getSubState(preset, "__sps"), "RoomA~"));
                this->p_06->getPreset(getSubState(getSubState(preset, "__sps"), "Damp~"));
                this->p_07->getPreset(getSubState(getSubState(preset, "__sps"), "Shuffle~"));
                this->p_08->getPreset(getSubState(getSubState(preset, "__sps"), "CombL~"));
                this->p_09->getPreset(getSubState(getSubState(preset, "__sps"), "RoomB~"));
                this->p_10->getPreset(getSubState(getSubState(preset, "__sps"), "MapParams"));
                this->p_11->getPreset(getSubState(getSubState(preset, "__sps"), "CombR~"));
            }
            
            void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                RNBO_UNUSED(v);
                this->updateTime(time);
            
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_04->getNumParameters())
                        this->p_04->setParameterValue(index, v, time);
            
                    index -= this->p_04->getNumParameters();
            
                    if (index < this->p_05->getNumParameters())
                        this->p_05->setParameterValue(index, v, time);
            
                    index -= this->p_05->getNumParameters();
            
                    if (index < this->p_06->getNumParameters())
                        this->p_06->setParameterValue(index, v, time);
            
                    index -= this->p_06->getNumParameters();
            
                    if (index < this->p_07->getNumParameters())
                        this->p_07->setParameterValue(index, v, time);
            
                    index -= this->p_07->getNumParameters();
            
                    if (index < this->p_08->getNumParameters())
                        this->p_08->setParameterValue(index, v, time);
            
                    index -= this->p_08->getNumParameters();
            
                    if (index < this->p_09->getNumParameters())
                        this->p_09->setParameterValue(index, v, time);
            
                    index -= this->p_09->getNumParameters();
            
                    if (index < this->p_10->getNumParameters())
                        this->p_10->setParameterValue(index, v, time);
            
                    index -= this->p_10->getNumParameters();
            
                    if (index < this->p_11->getNumParameters())
                        this->p_11->setParameterValue(index, v, time);
            
                    break;
                    }
                }
            }
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_04->getNumParameters())
                        return this->p_04->getParameterValue(index);
            
                    index -= this->p_04->getNumParameters();
            
                    if (index < this->p_05->getNumParameters())
                        return this->p_05->getParameterValue(index);
            
                    index -= this->p_05->getNumParameters();
            
                    if (index < this->p_06->getNumParameters())
                        return this->p_06->getParameterValue(index);
            
                    index -= this->p_06->getNumParameters();
            
                    if (index < this->p_07->getNumParameters())
                        return this->p_07->getParameterValue(index);
            
                    index -= this->p_07->getNumParameters();
            
                    if (index < this->p_08->getNumParameters())
                        return this->p_08->getParameterValue(index);
            
                    index -= this->p_08->getNumParameters();
            
                    if (index < this->p_09->getNumParameters())
                        return this->p_09->getParameterValue(index);
            
                    index -= this->p_09->getNumParameters();
            
                    if (index < this->p_10->getNumParameters())
                        return this->p_10->getParameterValue(index);
            
                    index -= this->p_10->getNumParameters();
            
                    if (index < this->p_11->getNumParameters())
                        return this->p_11->getParameterValue(index);
            
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0 + this->p_04->getNumParameters() + this->p_05->getNumParameters() + this->p_06->getNumParameters() + this->p_07->getNumParameters() + this->p_08->getNumParameters() + this->p_09->getNumParameters() + this->p_10->getNumParameters() + this->p_11->getNumParameters();
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_04->getNumParameters())
                        return this->p_04->getParameterName(index);
            
                    index -= this->p_04->getNumParameters();
            
                    if (index < this->p_05->getNumParameters())
                        return this->p_05->getParameterName(index);
            
                    index -= this->p_05->getNumParameters();
            
                    if (index < this->p_06->getNumParameters())
                        return this->p_06->getParameterName(index);
            
                    index -= this->p_06->getNumParameters();
            
                    if (index < this->p_07->getNumParameters())
                        return this->p_07->getParameterName(index);
            
                    index -= this->p_07->getNumParameters();
            
                    if (index < this->p_08->getNumParameters())
                        return this->p_08->getParameterName(index);
            
                    index -= this->p_08->getNumParameters();
            
                    if (index < this->p_09->getNumParameters())
                        return this->p_09->getParameterName(index);
            
                    index -= this->p_09->getNumParameters();
            
                    if (index < this->p_10->getNumParameters())
                        return this->p_10->getParameterName(index);
            
                    index -= this->p_10->getNumParameters();
            
                    if (index < this->p_11->getNumParameters())
                        return this->p_11->getParameterName(index);
            
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_04->getNumParameters())
                        return this->p_04->getParameterId(index);
            
                    index -= this->p_04->getNumParameters();
            
                    if (index < this->p_05->getNumParameters())
                        return this->p_05->getParameterId(index);
            
                    index -= this->p_05->getNumParameters();
            
                    if (index < this->p_06->getNumParameters())
                        return this->p_06->getParameterId(index);
            
                    index -= this->p_06->getNumParameters();
            
                    if (index < this->p_07->getNumParameters())
                        return this->p_07->getParameterId(index);
            
                    index -= this->p_07->getNumParameters();
            
                    if (index < this->p_08->getNumParameters())
                        return this->p_08->getParameterId(index);
            
                    index -= this->p_08->getNumParameters();
            
                    if (index < this->p_09->getNumParameters())
                        return this->p_09->getParameterId(index);
            
                    index -= this->p_09->getNumParameters();
            
                    if (index < this->p_10->getNumParameters())
                        return this->p_10->getParameterId(index);
            
                    index -= this->p_10->getNumParameters();
            
                    if (index < this->p_11->getNumParameters())
                        return this->p_11->getParameterId(index);
            
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                {
                    switch (index) {
                    default:
                        {
                        index -= 0;
            
                        if (index < this->p_04->getNumParameters())
                            this->p_04->getParameterInfo(index, info);
            
                        index -= this->p_04->getNumParameters();
            
                        if (index < this->p_05->getNumParameters())
                            this->p_05->getParameterInfo(index, info);
            
                        index -= this->p_05->getNumParameters();
            
                        if (index < this->p_06->getNumParameters())
                            this->p_06->getParameterInfo(index, info);
            
                        index -= this->p_06->getNumParameters();
            
                        if (index < this->p_07->getNumParameters())
                            this->p_07->getParameterInfo(index, info);
            
                        index -= this->p_07->getNumParameters();
            
                        if (index < this->p_08->getNumParameters())
                            this->p_08->getParameterInfo(index, info);
            
                        index -= this->p_08->getNumParameters();
            
                        if (index < this->p_09->getNumParameters())
                            this->p_09->getParameterInfo(index, info);
            
                        index -= this->p_09->getNumParameters();
            
                        if (index < this->p_10->getNumParameters())
                            this->p_10->getParameterInfo(index, info);
            
                        index -= this->p_10->getNumParameters();
            
                        if (index < this->p_11->getNumParameters())
                            this->p_11->getParameterInfo(index, info);
            
                        break;
                        }
                    }
                }
            }
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                if (subpatcher == this->p_04)
                    return 0;
            
                if (subpatcher == this->p_05)
                    return 0 + this->p_04->getNumParameters();
            
                if (subpatcher == this->p_06)
                    return 0 + this->p_04->getNumParameters() + this->p_05->getNumParameters();
            
                if (subpatcher == this->p_07)
                    return 0 + this->p_04->getNumParameters() + this->p_05->getNumParameters() + this->p_06->getNumParameters();
            
                if (subpatcher == this->p_08)
                    return 0 + this->p_04->getNumParameters() + this->p_05->getNumParameters() + this->p_06->getNumParameters() + this->p_07->getNumParameters();
            
                if (subpatcher == this->p_09)
                    return 0 + this->p_04->getNumParameters() + this->p_05->getNumParameters() + this->p_06->getNumParameters() + this->p_07->getNumParameters() + this->p_08->getNumParameters();
            
                if (subpatcher == this->p_10)
                    return 0 + this->p_04->getNumParameters() + this->p_05->getNumParameters() + this->p_06->getNumParameters() + this->p_07->getNumParameters() + this->p_08->getNumParameters() + this->p_09->getNumParameters();
            
                if (subpatcher == this->p_11)
                    return 0 + this->p_04->getNumParameters() + this->p_05->getNumParameters() + this->p_06->getNumParameters() + this->p_07->getNumParameters() + this->p_08->getNumParameters() + this->p_09->getNumParameters() + this->p_10->getNumParameters();
            
                return 0;
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_04->getNumParameters())
                        return this->p_04->convertToNormalizedParameterValue(index, value);
            
                    index -= this->p_04->getNumParameters();
            
                    if (index < this->p_05->getNumParameters())
                        return this->p_05->convertToNormalizedParameterValue(index, value);
            
                    index -= this->p_05->getNumParameters();
            
                    if (index < this->p_06->getNumParameters())
                        return this->p_06->convertToNormalizedParameterValue(index, value);
            
                    index -= this->p_06->getNumParameters();
            
                    if (index < this->p_07->getNumParameters())
                        return this->p_07->convertToNormalizedParameterValue(index, value);
            
                    index -= this->p_07->getNumParameters();
            
                    if (index < this->p_08->getNumParameters())
                        return this->p_08->convertToNormalizedParameterValue(index, value);
            
                    index -= this->p_08->getNumParameters();
            
                    if (index < this->p_09->getNumParameters())
                        return this->p_09->convertToNormalizedParameterValue(index, value);
            
                    index -= this->p_09->getNumParameters();
            
                    if (index < this->p_10->getNumParameters())
                        return this->p_10->convertToNormalizedParameterValue(index, value);
            
                    index -= this->p_10->getNumParameters();
            
                    if (index < this->p_11->getNumParameters())
                        return this->p_11->convertToNormalizedParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_04->getNumParameters())
                        return this->p_04->convertFromNormalizedParameterValue(index, value);
            
                    index -= this->p_04->getNumParameters();
            
                    if (index < this->p_05->getNumParameters())
                        return this->p_05->convertFromNormalizedParameterValue(index, value);
            
                    index -= this->p_05->getNumParameters();
            
                    if (index < this->p_06->getNumParameters())
                        return this->p_06->convertFromNormalizedParameterValue(index, value);
            
                    index -= this->p_06->getNumParameters();
            
                    if (index < this->p_07->getNumParameters())
                        return this->p_07->convertFromNormalizedParameterValue(index, value);
            
                    index -= this->p_07->getNumParameters();
            
                    if (index < this->p_08->getNumParameters())
                        return this->p_08->convertFromNormalizedParameterValue(index, value);
            
                    index -= this->p_08->getNumParameters();
            
                    if (index < this->p_09->getNumParameters())
                        return this->p_09->convertFromNormalizedParameterValue(index, value);
            
                    index -= this->p_09->getNumParameters();
            
                    if (index < this->p_10->getNumParameters())
                        return this->p_10->convertFromNormalizedParameterValue(index, value);
            
                    index -= this->p_10->getNumParameters();
            
                    if (index < this->p_11->getNumParameters())
                        return this->p_11->convertFromNormalizedParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_04->getNumParameters())
                        return this->p_04->constrainParameterValue(index, value);
            
                    index -= this->p_04->getNumParameters();
            
                    if (index < this->p_05->getNumParameters())
                        return this->p_05->constrainParameterValue(index, value);
            
                    index -= this->p_05->getNumParameters();
            
                    if (index < this->p_06->getNumParameters())
                        return this->p_06->constrainParameterValue(index, value);
            
                    index -= this->p_06->getNumParameters();
            
                    if (index < this->p_07->getNumParameters())
                        return this->p_07->constrainParameterValue(index, value);
            
                    index -= this->p_07->getNumParameters();
            
                    if (index < this->p_08->getNumParameters())
                        return this->p_08->constrainParameterValue(index, value);
            
                    index -= this->p_08->getNumParameters();
            
                    if (index < this->p_09->getNumParameters())
                        return this->p_09->constrainParameterValue(index, value);
            
                    index -= this->p_09->getNumParameters();
            
                    if (index < this->p_10->getNumParameters())
                        return this->p_10->constrainParameterValue(index, value);
            
                    index -= this->p_10->getNumParameters();
            
                    if (index < this->p_11->getNumParameters())
                        return this->p_11->constrainParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                RNBO_UNUSED(objectId);
                this->updateTime(time);
                this->p_04->processNumMessage(tag, objectId, time, payload);
                this->p_05->processNumMessage(tag, objectId, time, payload);
                this->p_06->processNumMessage(tag, objectId, time, payload);
                this->p_07->processNumMessage(tag, objectId, time, payload);
                this->p_08->processNumMessage(tag, objectId, time, payload);
                this->p_09->processNumMessage(tag, objectId, time, payload);
                this->p_10->processNumMessage(tag, objectId, time, payload);
                this->p_11->processNumMessage(tag, objectId, time, payload);
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                RNBO_UNUSED(objectId);
                this->updateTime(time);
                this->p_04->processListMessage(tag, objectId, time, payload);
                this->p_05->processListMessage(tag, objectId, time, payload);
                this->p_06->processListMessage(tag, objectId, time, payload);
                this->p_07->processListMessage(tag, objectId, time, payload);
                this->p_08->processListMessage(tag, objectId, time, payload);
                this->p_09->processListMessage(tag, objectId, time, payload);
                this->p_10->processListMessage(tag, objectId, time, payload);
                this->p_11->processListMessage(tag, objectId, time, payload);
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                RNBO_UNUSED(objectId);
                this->updateTime(time);
                this->p_04->processBangMessage(tag, objectId, time);
                this->p_05->processBangMessage(tag, objectId, time);
                this->p_06->processBangMessage(tag, objectId, time);
                this->p_07->processBangMessage(tag, objectId, time);
                this->p_08->processBangMessage(tag, objectId, time);
                this->p_09->processBangMessage(tag, objectId, time);
                this->p_10->processBangMessage(tag, objectId, time);
                this->p_11->processBangMessage(tag, objectId, time);
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                auto subpatchResult_0 = this->p_04->resolveTag(tag);
            
                if (subpatchResult_0)
                    return subpatchResult_0;
            
                auto subpatchResult_1 = this->p_05->resolveTag(tag);
            
                if (subpatchResult_1)
                    return subpatchResult_1;
            
                auto subpatchResult_2 = this->p_06->resolveTag(tag);
            
                if (subpatchResult_2)
                    return subpatchResult_2;
            
                auto subpatchResult_3 = this->p_07->resolveTag(tag);
            
                if (subpatchResult_3)
                    return subpatchResult_3;
            
                auto subpatchResult_4 = this->p_08->resolveTag(tag);
            
                if (subpatchResult_4)
                    return subpatchResult_4;
            
                auto subpatchResult_5 = this->p_09->resolveTag(tag);
            
                if (subpatchResult_5)
                    return subpatchResult_5;
            
                auto subpatchResult_6 = this->p_10->resolveTag(tag);
            
                if (subpatchResult_6)
                    return subpatchResult_6;
            
                auto subpatchResult_7 = this->p_11->resolveTag(tag);
            
                if (subpatchResult_7)
                    return subpatchResult_7;
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->p_04->processDataViewUpdate(index, time);
                this->p_05->processDataViewUpdate(index, time);
                this->p_06->processDataViewUpdate(index, time);
                this->p_07->processDataViewUpdate(index, time);
                this->p_08->processDataViewUpdate(index, time);
                this->p_09->processDataViewUpdate(index, time);
                this->p_10->processDataViewUpdate(index, time);
                this->p_11->processDataViewUpdate(index, time);
            }
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void eventinlet_16_out1_bang_bang() {
                this->p_10_in1_bang_bang();
            }
            
            void eventinlet_16_out1_list_set(const list& v) {
                this->p_10_in1_list_set(v);
            }
            
            void eventinlet_17_out1_bang_bang() {
                this->p_10_in2_bang_bang();
            }
            
            void eventinlet_17_out1_list_set(const list& v) {
                this->p_10_in2_list_set(v);
            }
            
            void eventinlet_18_out1_bang_bang() {
                this->p_10_in3_bang_bang();
            }
            
            void eventinlet_18_out1_list_set(const list& v) {
                this->p_10_in3_list_set(v);
            }
            
            void eventinlet_19_out1_bang_bang() {
                this->p_10_in4_bang_bang();
            }
            
            void eventinlet_19_out1_list_set(const list& v) {
                this->p_10_in4_list_set(v);
            }
            
            void eventinlet_20_out1_bang_bang() {
                this->p_10_in5_bang_bang();
            }
            
            void eventinlet_20_out1_list_set(const list& v) {
                this->p_10_in5_list_set(v);
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 2;
            }
            
            Index getNumOutputChannels() const {
                return 2;
            }
            
            void initializeObjects() {
                this->p_04->initializeObjects();
                this->p_05->initializeObjects();
                this->p_06->initializeObjects();
                this->p_07->initializeObjects();
                this->p_08->initializeObjects();
                this->p_09->initializeObjects();
                this->p_10->initializeObjects();
                this->p_11->initializeObjects();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {
                this->updateTime(this->getEngine()->getCurrentTime());
                this->p_04->startup();
                this->p_05->startup();
                this->p_06->startup();
                this->p_07->startup();
                this->p_08->startup();
                this->p_09->startup();
                this->p_10->startup();
                this->p_11->startup();
            }
            
            void allocateDataRefs() {
                this->p_04->allocateDataRefs();
                this->p_05->allocateDataRefs();
                this->p_06->allocateDataRefs();
                this->p_07->allocateDataRefs();
                this->p_08->allocateDataRefs();
                this->p_09->allocateDataRefs();
                this->p_10->allocateDataRefs();
                this->p_11->allocateDataRefs();
            }
            
            void p_10_in1_number_set(number v) {
                this->p_10->updateTime(this->_currentTime);
                this->p_10->eventinlet_11_out1_number_set(v);
            }
            
            void eventinlet_16_out1_number_set(number v) {
                this->p_10_in1_number_set(v);
            }
            
            void p_10_in2_number_set(number v) {
                this->p_10->updateTime(this->_currentTime);
                this->p_10->eventinlet_12_out1_number_set(v);
            }
            
            void eventinlet_17_out1_number_set(number v) {
                this->p_10_in2_number_set(v);
            }
            
            void p_10_in3_number_set(number v) {
                this->p_10->updateTime(this->_currentTime);
                this->p_10->eventinlet_13_out1_number_set(v);
            }
            
            void eventinlet_18_out1_number_set(number v) {
                this->p_10_in3_number_set(v);
            }
            
            void p_10_in4_number_set(number v) {
                this->p_10->updateTime(this->_currentTime);
                this->p_10->eventinlet_14_out1_number_set(v);
            }
            
            void eventinlet_19_out1_number_set(number v) {
                this->p_10_in4_number_set(v);
            }
            
            void p_10_in5_number_set(number v) {
                this->p_10->updateTime(this->_currentTime);
                this->p_10->eventinlet_15_out1_number_set(v);
            }
            
            void eventinlet_20_out1_number_set(number v) {
                this->p_10_in5_number_set(v);
            }
            
            void p_10_in1_bang_bang() {
                this->p_10->updateTime(this->_currentTime);
                this->p_10->eventinlet_11_out1_bang_bang();
            }
            
            void p_10_in1_list_set(const list& v) {
                this->p_10->updateTime(this->_currentTime);
                this->p_10->eventinlet_11_out1_list_set(v);
            }
            
            void p_10_in2_bang_bang() {
                this->p_10->updateTime(this->_currentTime);
                this->p_10->eventinlet_12_out1_bang_bang();
            }
            
            void p_10_in2_list_set(const list& v) {
                this->p_10->updateTime(this->_currentTime);
                this->p_10->eventinlet_12_out1_list_set(v);
            }
            
            void p_10_in3_bang_bang() {
                this->p_10->updateTime(this->_currentTime);
                this->p_10->eventinlet_13_out1_bang_bang();
            }
            
            void p_10_in3_list_set(const list& v) {
                this->p_10->updateTime(this->_currentTime);
                this->p_10->eventinlet_13_out1_list_set(v);
            }
            
            void p_10_in4_bang_bang() {
                this->p_10->updateTime(this->_currentTime);
                this->p_10->eventinlet_14_out1_bang_bang();
            }
            
            void p_10_in4_list_set(const list& v) {
                this->p_10->updateTime(this->_currentTime);
                this->p_10->eventinlet_14_out1_list_set(v);
            }
            
            void p_10_in5_bang_bang() {
                this->p_10->updateTime(this->_currentTime);
                this->p_10->eventinlet_15_out1_bang_bang();
            }
            
            void p_10_in5_list_set(const list& v) {
                this->p_10->updateTime(this->_currentTime);
                this->p_10->eventinlet_15_out1_list_set(v);
            }
            
            void p_10_perform(
                SampleValue * out1,
                SampleValue * out2,
                SampleValue * out3,
                SampleValue * out4,
                SampleValue * out5,
                Index n
            ) {
                // subpatcher: MapParams
                SampleArray<5> outs = {out1, out2, out3, out4, out5};
            
                this->p_10->process(nullptr, 0, outs, 5, n);
            }
            
            void p_06_perform(
                const SampleValue * in1,
                const SampleValue * in2,
                const SampleValue * in3,
                SampleValue * out1,
                SampleValue * out2,
                Index n
            ) {
                // subpatcher: Damp~
                ConstSampleArray<3> ins = {in1, in2, in3};
            
                SampleArray<2> outs = {out1, out2};
                this->p_06->process(ins, 3, outs, 2, n);
            }
            
            void p_04_perform(
                const SampleValue * in1,
                const SampleValue * in2,
                SampleValue * out1,
                SampleValue * out2,
                Index n
            ) {
                // subpatcher: Blur~
                ConstSampleArray<2> ins = {in1, in2};
            
                SampleArray<2> outs = {out1, out2};
                this->p_04->process(ins, 2, outs, 2, n);
            }
            
            void dspexpr_59_perform(const Sample * in1, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void p_05_perform(
                const SampleValue * in1,
                const SampleValue * in3,
                const SampleValue * in4,
                const SampleValue * in5,
                const SampleValue * in6,
                SampleValue * out1,
                SampleValue * out2,
                SampleValue * out3,
                SampleValue * out4,
                Index n
            ) {
                // subpatcher: RoomA~
                ConstSampleArray<5> ins = {in1, in3, in4, in5, in6};
            
                SampleArray<4> outs = {out1, out2, out3, out4};
                this->p_05->process(ins, 5, outs, 4, n);
            }
            
            void p_09_perform(
                const SampleValue * in1,
                const SampleValue * in3,
                const SampleValue * in4,
                const SampleValue * in5,
                const SampleValue * in6,
                SampleValue * out1,
                SampleValue * out2,
                SampleValue * out3,
                SampleValue * out4,
                Index n
            ) {
                // subpatcher: RoomB~
                ConstSampleArray<5> ins = {in1, in3, in4, in5, in6};
            
                SampleArray<4> outs = {out1, out2, out3, out4};
                this->p_09->process(ins, 5, outs, 4, n);
            }
            
            void p_07_perform(
                const SampleValue * in1,
                const SampleValue * in2,
                const SampleValue * in3,
                const SampleValue * in4,
                const SampleValue * in5,
                const SampleValue * in6,
                const SampleValue * in7,
                const SampleValue * in8,
                SampleValue * out1,
                SampleValue * out2,
                SampleValue * out3,
                SampleValue * out4,
                SampleValue * out5,
                SampleValue * out6,
                SampleValue * out7,
                SampleValue * out8,
                SampleValue * out9,
                SampleValue * out10,
                SampleValue * out11,
                SampleValue * out12,
                SampleValue * out13,
                SampleValue * out14,
                Index n
            ) {
                // subpatcher: Shuffle~
                ConstSampleArray<8> ins = {in1, in2, in3, in4, in5, in6, in7, in8};
            
                SampleArray<14> outs = {
                    out1,
                    out2,
                    out3,
                    out4,
                    out5,
                    out6,
                    out7,
                    out8,
                    out9,
                    out10,
                    out11,
                    out12,
                    out13,
                    out14
                };
            
                this->p_07->process(ins, 8, outs, 14, n);
            }
            
            void dspexpr_60_perform(const Sample * in1, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void p_08_perform(
                const SampleValue * in1,
                const SampleValue * in2,
                const SampleValue * in3,
                const SampleValue * in4,
                const SampleValue * in5,
                const SampleValue * in6,
                const SampleValue * in7,
                const SampleValue * in8,
                const SampleValue * in9,
                SampleValue * out1,
                Index n
            ) {
                // subpatcher: CombL~
                ConstSampleArray<9> ins = {in1, in2, in3, in4, in5, in6, in7, in8, in9};
            
                SampleArray<1> outs = {out1};
                this->p_08->process(ins, 9, outs, 1, n);
            }
            
            void p_11_perform(
                const SampleValue * in1,
                const SampleValue * in2,
                const SampleValue * in3,
                const SampleValue * in4,
                const SampleValue * in5,
                const SampleValue * in6,
                const SampleValue * in7,
                const SampleValue * in8,
                const SampleValue * in9,
                SampleValue * out1,
                Index n
            ) {
                // subpatcher: CombR~
                ConstSampleArray<9> ins = {in1, in2, in3, in4, in5, in6, in7, in8, in9};
            
                SampleArray<1> outs = {out1};
                this->p_11->process(ins, 9, outs, 1, n);
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                p_04_target = 0;
                p_05_target = 0;
                p_06_target = 0;
                p_07_target = 0;
                p_08_target = 0;
                p_09_target = 0;
                p_10_target = 0;
                p_11_target = 0;
                dspexpr_59_in1 = 0;
                dspexpr_60_in1 = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                signals[1] = nullptr;
                signals[2] = nullptr;
                signals[3] = nullptr;
                signals[4] = nullptr;
                signals[5] = nullptr;
                signals[6] = nullptr;
                signals[7] = nullptr;
                signals[8] = nullptr;
                signals[9] = nullptr;
                signals[10] = nullptr;
                signals[11] = nullptr;
                signals[12] = nullptr;
                signals[13] = nullptr;
                signals[14] = nullptr;
                signals[15] = nullptr;
                signals[16] = nullptr;
                signals[17] = nullptr;
                signals[18] = nullptr;
                signals[19] = nullptr;
                signals[20] = nullptr;
                signals[21] = nullptr;
                signals[22] = nullptr;
                signals[23] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number p_04_target;
                number p_05_target;
                number p_06_target;
                number p_07_target;
                number p_08_target;
                number p_09_target;
                number p_10_target;
                number p_11_target;
                number dspexpr_59_in1;
                number dspexpr_60_in1;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[24];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
                RNBOSubpatcher_791* p_04;
                RNBOSubpatcher_792* p_05;
                RNBOSubpatcher_793* p_06;
                RNBOSubpatcher_794* p_07;
                RNBOSubpatcher_795* p_08;
                RNBOSubpatcher_796* p_09;
                RNBOSubpatcher_797* p_10;
                RNBOSubpatcher_798* p_11;
            
    };
    
    class RNBOSubpatcher_806 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_812;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_806()
            {
            }
            
            ~RNBOSubpatcher_806()
            {
            }
            
            virtual RNBOSubpatcher_812* getPatcher() const {
                return static_cast<RNBOSubpatcher_812 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
                getEngine()->flushClockEvents(this, -62043057, false);
            }
            
            inline number linearinterp(number frac, number x, number y) {
                return x + (y - x) * frac;
            }
            
            inline number cubicinterp(number a, number w, number x, number y, number z) {
                number a1 = 1. + a;
                number aa = a * a1;
                number b = 1. - a;
                number b1 = 2. - a;
                number bb = b * b1;
                number fw = -.1666667 * bb * a;
                number fx = .5 * bb * a1;
                number fy = .5 * aa * b1;
                number fz = -.1666667 * aa * b;
                return w * fw + x * fx + y * fy + z * fz;
            }
            
            inline number fastcubicinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = z - y - w + x;
                number f1 = w - x - f0;
                number f2 = y - w;
                number f3 = x;
                return f0 * a * a2 + f1 * a2 + f2 * a + f3;
            }
            
            inline number splineinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
                number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
                number f2 = -0.5 * w + 0.5 * y;
                return f0 * a * a2 + f1 * a2 + f2 * a + x;
            }
            
            inline number spline6interp(number a, number y0, number y1, number y2, number y3, number y4, number y5) {
                number ym2py2 = y0 + y4;
                number ym1py1 = y1 + y3;
                number y2mym2 = y4 - y0;
                number y1mym1 = y3 - y1;
                number sixthym1py1 = (number)1 / (number)6.0 * ym1py1;
                number c0 = (number)1 / (number)120.0 * ym2py2 + (number)13 / (number)60.0 * ym1py1 + (number)11 / (number)20.0 * y2;
                number c1 = (number)1 / (number)24.0 * y2mym2 + (number)5 / (number)12.0 * y1mym1;
                number c2 = (number)1 / (number)12.0 * ym2py2 + sixthym1py1 - (number)1 / (number)2.0 * y2;
                number c3 = (number)1 / (number)12.0 * y2mym2 - (number)1 / (number)6.0 * y1mym1;
                number c4 = (number)1 / (number)24.0 * ym2py2 - sixthym1py1 + (number)1 / (number)4.0 * y2;
                number c5 = (number)1 / (number)120.0 * (y5 - y0) + (number)1 / (number)24.0 * (y1 - y4) + (number)1 / (number)12.0 * (y3 - y2);
                return ((((c5 * a + c4) * a + c3) * a + c2) * a + c1) * a + c0;
            }
            
            inline number cosT8(number r) {
                number t84 = 56.0;
                number t83 = 1680.0;
                number t82 = 20160.0;
                number t81 = 2.4801587302e-05;
                number t73 = 42.0;
                number t72 = 840.0;
                number t71 = 1.9841269841e-04;
            
                if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
                    number rr = r * r;
                    return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
                } else if (r > 0.0) {
                    r -= 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                } else {
                    r += 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                }
            }
            
            inline number cosineinterp(number frac, number x, number y) {
                number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
                return x * (1.0 - a2) + y * a2;
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            number samplerate() const {
                return this->sr;
            }
            
            Index vectorsize() const {
                return this->vs;
            }
            
            number maximum(number x, number y) {
                return (x < y ? y : x);
            }
            
            inline number safediv(number num, number denom) {
                return (denom == 0.0 ? 0.0 : num / denom);
            }
            
            number wrap(number x, number low, number high) {
                number lo;
                number hi;
            
                if (low == high)
                    return low;
            
                if (low > high) {
                    hi = low;
                    lo = high;
                } else {
                    lo = low;
                    hi = high;
                }
            
                number range = hi - lo;
            
                if (x >= lo && x < hi)
                    return x;
            
                if (range <= 0.000000001)
                    return lo;
            
                long numWraps = (long)(trunc((x - lo) / range));
                numWraps = numWraps - ((x < lo ? 1 : 0));
                number result = x - range * numWraps;
            
                if (result >= hi)
                    return result - range;
                else
                    return result;
            }
            
            SampleIndex currentsampletime() {
                return this->audioProcessSampleCount + this->sampleOffsetIntoNextAudioBuffer;
            }
            
            number safepow(number base, number exponent) {
                return fixnan(rnbo_pow(base, exponent));
            }
            
            number scale(
                number x,
                number lowin,
                number hiin,
                number lowout,
                number highout,
                number pow
            ) {
                auto inscale = this->safediv(1., hiin - lowin);
                number outdiff = highout - lowout;
                number value = (x - lowin) * inscale;
            
                if (pow != 1) {
                    if (value > 0)
                        value = this->safepow(value, pow);
                    else
                        value = -this->safepow(-value, pow);
                }
            
                value = value * outdiff + lowout;
                return value;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                this->phasor_02_perform(this->phasor_02_freq, this->signals[0], n);
                this->triangle_tilde_01_perform(this->signals[0], this->triangle_tilde_01_duty, this->signals[1], n);
                this->dspexpr_64_perform(this->signals[1], this->dspexpr_64_in2, this->signals[2], n);
            
                this->slide_tilde_01_perform(
                    this->signals[2],
                    this->slide_tilde_01_up,
                    this->slide_tilde_01_down,
                    this->signals[1],
                    n
                );
            
                this->delaytilde_09_perform(this->signals[1], in1, this->signals[2], n);
                this->dspexpr_66_perform(this->signals[0], this->dspexpr_66_in2, this->signals[1], n);
                this->triangle_tilde_02_perform(this->signals[1], this->triangle_tilde_02_duty, this->signals[0], n);
                this->dspexpr_67_perform(this->signals[0], this->dspexpr_67_in2, this->signals[1], n);
            
                this->slide_tilde_02_perform(
                    this->signals[1],
                    this->slide_tilde_02_up,
                    this->slide_tilde_02_down,
                    this->signals[0],
                    n
                );
            
                this->delaytilde_10_perform(this->signals[0], in2, this->signals[1], n);
                this->linetilde_13_perform(this->signals[0], n);
                this->dspexpr_65_perform(this->signals[1], this->signals[0], this->signals[3], n);
                this->dspexpr_62_perform(in2, this->signals[3], out2, n);
                this->dspexpr_63_perform(this->signals[2], this->signals[0], this->signals[3], n);
                this->dspexpr_61_perform(in1, this->signals[3], out1, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 4; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->phasor_02_sigbuf = resizeSignal(this->phasor_02_sigbuf, this->maxvs, maxBlockSize);
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->phasor_02_dspsetup(forceDSPSetup);
                this->delaytilde_09_dspsetup(forceDSPSetup);
                this->delaytilde_10_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
                RNBO_UNUSED(value);
                RNBO_UNUSED(hasValue);
                this->updateTime(time);
            
                switch (index) {
                case -62043057:
                    {
                    this->linetilde_13_target_bang();
                    break;
                    }
                }
            }
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("valin"):
                    {
                    if (TAG("verb/Chorus~/number_obj-22") == objectId)
                        this->numberobj_33_valin_set(payload);
            
                    if (TAG("verb/Chorus~/number_obj-18") == objectId)
                        this->numberobj_34_valin_set(payload);
            
                    if (TAG("verb/Chorus~/number_obj-6") == objectId)
                        this->numberobj_35_valin_set(payload);
            
                    break;
                    }
                case TAG("format"):
                    {
                    if (TAG("verb/Chorus~/number_obj-22") == objectId)
                        this->numberobj_33_format_set(payload);
            
                    if (TAG("verb/Chorus~/number_obj-18") == objectId)
                        this->numberobj_34_format_set(payload);
            
                    if (TAG("verb/Chorus~/number_obj-6") == objectId)
                        this->numberobj_35_format_set(payload);
            
                    break;
                    }
                }
            }
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("valout"):
                    {
                    return "valout";
                    }
                case TAG("verb/Chorus~/number_obj-22"):
                    {
                    return "verb/Chorus~/number_obj-22";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("verb/Chorus~/number_obj-18"):
                    {
                    return "verb/Chorus~/number_obj-18";
                    }
                case TAG("verb/Chorus~/number_obj-6"):
                    {
                    return "verb/Chorus~/number_obj-6";
                    }
                case TAG("valin"):
                    {
                    return "valin";
                    }
                case TAG("format"):
                    {
                    return "format";
                    }
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                case 6:
                    {
                    return addressOf(this->delaytilde_09_del_bufferobj);
                    break;
                    }
                case 7:
                    {
                    return addressOf(this->delaytilde_10_del_bufferobj);
                    break;
                    }
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 2;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void zeroDataRef(DataRef& ref) {
                ref->setZero();
            }
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 6) {
                    this->delaytilde_09_del_buffer = new Float64Buffer(this->delaytilde_09_del_bufferobj);
                }
            
                if (index == 7) {
                    this->delaytilde_10_del_buffer = new Float64Buffer(this->delaytilde_10_del_bufferobj);
                }
            }
            
            void initialize() {
                this->delaytilde_09_del_bufferobj = initDataRef("delaytilde_09_del_bufferobj", true, nullptr, "buffer~");
                this->delaytilde_10_del_bufferobj = initDataRef("delaytilde_10_del_bufferobj", true, nullptr, "buffer~");
                this->assign_defaults();
                this->setState();
                this->delaytilde_09_del_bufferobj->setIndex(6);
                this->delaytilde_09_del_buffer = new Float64Buffer(this->delaytilde_09_del_bufferobj);
                this->delaytilde_10_del_bufferobj->setIndex(7);
                this->delaytilde_10_del_buffer = new Float64Buffer(this->delaytilde_10_del_bufferobj);
            }
            
            protected:
            
            void numberobj_33_valin_set(number v) {
                this->numberobj_33_value_set(v);
            }
            
            void numberobj_33_format_set(number v) {
                this->numberobj_33_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void eventinlet_21_out1_bang_bang() {
                this->numberobj_34_value_bang();
            }
            
            void eventinlet_21_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_34_value_set(converted);
                }
            }
            
            void numberobj_34_valin_set(number v) {
                this->numberobj_34_value_set(v);
            }
            
            void numberobj_34_format_set(number v) {
                this->numberobj_34_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_35_valin_set(number v) {
                this->numberobj_35_value_set(v);
            }
            
            void numberobj_35_format_set(number v) {
                this->numberobj_35_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void linetilde_13_target_bang() {}
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 2;
            }
            
            Index getNumOutputChannels() const {
                return 2;
            }
            
            void initializeObjects() {
                this->delaytilde_09_del_init();
                this->delaytilde_10_del_init();
                this->numberobj_33_init();
                this->numberobj_34_init();
                this->numberobj_35_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {
                this->delaytilde_09_del_buffer = this->delaytilde_09_del_buffer->allocateIfNeeded();
            
                if (this->delaytilde_09_del_bufferobj->hasRequestedSize()) {
                    if (this->delaytilde_09_del_bufferobj->wantsFill())
                        this->zeroDataRef(this->delaytilde_09_del_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(6);
                }
            
                this->delaytilde_10_del_buffer = this->delaytilde_10_del_buffer->allocateIfNeeded();
            
                if (this->delaytilde_10_del_bufferobj->hasRequestedSize()) {
                    if (this->delaytilde_10_del_bufferobj->wantsFill())
                        this->zeroDataRef(this->delaytilde_10_del_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(7);
                }
            }
            
            void phasor_02_freq_set(number v) {
                this->phasor_02_freq = v;
            }
            
            void numberobj_35_output_set(number v) {
                this->phasor_02_freq_set(v);
            }
            
            void numberobj_35_value_set(number v) {
                this->numberobj_35_value_setter(v);
                v = this->numberobj_35_value;
                number localvalue = v;
            
                if (this->numberobj_35_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("verb/Chorus~/number_obj-6"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_35_output_set(localvalue);
            }
            
            void scale_06_out_set(const list& v) {
                this->scale_06_out = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_35_value_set(converted);
                }
            }
            
            void scale_06_input_set(const list& v) {
                this->scale_06_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_06_inlow,
                        this->scale_06_inhigh,
                        this->scale_06_outlow,
                        this->scale_06_outhigh,
                        this->scale_06_power
                    ));
                }
            
                this->scale_06_out_set(tmp);
            }
            
            void linetilde_13_time_set(number v) {
                this->linetilde_13_time = v;
            }
            
            void linetilde_13_segments_set(const list& v) {
                this->linetilde_13_segments = jsCreateListCopy(v);
            
                if ((bool)(v->length)) {
                    if (v->length == 1 && this->linetilde_13_time == 0) {
                        this->linetilde_13_activeRamps->length = 0;
                        this->linetilde_13_currentValue = v[0];
                    } else {
                        auto currentTime = this->currentsampletime();
                        number lastRampValue = this->linetilde_13_currentValue;
                        number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
            
                        for (Index i = 0; i < this->linetilde_13_activeRamps->length; i += 3) {
                            rampEnd = this->linetilde_13_activeRamps[(Index)(i + 2)];
            
                            if (rampEnd > currentTime) {
                                this->linetilde_13_activeRamps[(Index)(i + 2)] = currentTime;
                                number diff = rampEnd - currentTime;
                                number valueDiff = diff * this->linetilde_13_activeRamps[(Index)(i + 1)];
                                lastRampValue = this->linetilde_13_activeRamps[(Index)i] - valueDiff;
                                this->linetilde_13_activeRamps[(Index)i] = lastRampValue;
                                this->linetilde_13_activeRamps->length = i + 3;
                                rampEnd = currentTime;
                            } else {
                                lastRampValue = this->linetilde_13_activeRamps[(Index)i];
                            }
                        }
            
                        if (rampEnd < currentTime) {
                            this->linetilde_13_activeRamps->push(lastRampValue);
                            this->linetilde_13_activeRamps->push(0);
                            this->linetilde_13_activeRamps->push(currentTime);
                        }
            
                        number lastRampEnd = currentTime;
            
                        for (Index i = 0; i < v->length; i += 2) {
                            number destinationValue = v[(Index)i];
                            number inc = 0;
                            number rampTimeInSamples;
            
                            if (v->length > i + 1) {
                                rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
            
                                if ((bool)(this->linetilde_13_keepramp)) {
                                    this->linetilde_13_time_set(v[(Index)(i + 1)]);
                                }
                            } else {
                                rampTimeInSamples = this->mstosamps(this->linetilde_13_time);
                            }
            
                            if (rampTimeInSamples <= 0) {
                                rampTimeInSamples = 1;
                            }
            
                            inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                            lastRampEnd += rampTimeInSamples;
                            this->linetilde_13_activeRamps->push(destinationValue);
                            this->linetilde_13_activeRamps->push(inc);
                            this->linetilde_13_activeRamps->push(lastRampEnd);
                            lastRampValue = destinationValue;
                        }
                    }
                }
            }
            
            void numberobj_33_output_set(number v) {
                {
                    list converted = {v};
                    this->linetilde_13_segments_set(converted);
                }
            }
            
            void numberobj_33_value_set(number v) {
                this->numberobj_33_value_setter(v);
                v = this->numberobj_33_value;
                number localvalue = v;
            
                if (this->numberobj_33_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("verb/Chorus~/number_obj-22"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_33_output_set(localvalue);
            }
            
            void expr_12_out1_set(number v) {
                this->expr_12_out1 = v;
                this->numberobj_33_value_set(this->expr_12_out1);
            }
            
            void expr_12_in1_set(number in1) {
                this->expr_12_in1 = in1;
            
                this->expr_12_out1_set(
                    (this->expr_12_in2 == 0 ? 0 : (this->expr_12_in2 == 0. ? 0. : this->expr_12_in1 / this->expr_12_in2))
                );//#map:verb/Chorus~//_obj-3:1
            }
            
            void numberobj_34_output_set(number v) {
                {
                    list converted = {v};
                    this->scale_06_input_set(converted);
                }
            
                this->expr_12_in1_set(v);
            }
            
            void numberobj_34_value_set(number v) {
                this->numberobj_34_value_setter(v);
                v = this->numberobj_34_value;
                number localvalue = v;
            
                if (this->numberobj_34_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("verb/Chorus~/number_obj-18"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_34_output_set(localvalue);
            }
            
            void eventinlet_21_out1_number_set(number v) {
                this->numberobj_34_value_set(v);
            }
            
            void numberobj_34_value_bang() {
                number v = this->numberobj_34_value;
                number localvalue = v;
            
                if (this->numberobj_34_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("verb/Chorus~/number_obj-18"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_34_output_set(localvalue);
            }
            
            void phasor_02_perform(number freq, SampleValue * out, Index n) {
                for (Index i = 0; i < n; i++) {
                    out[(Index)i] = this->phasor_02_ph_next(freq, -1);
                    this->phasor_02_sigbuf[(Index)i] = -1;
                }
            }
            
            void triangle_tilde_01_perform(const Sample * phase, number duty, SampleValue * out1, Index n) {
                RNBO_UNUSED(duty);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number p1 = 0.5;
                    auto wrappedPhase = this->wrap(phase[(Index)i], 0., 1.);
                    p1 = (p1 > 1. ? 1. : (p1 < 0. ? 0. : p1));
            
                    if (wrappedPhase < p1) {
                        out1[(Index)i] = wrappedPhase / p1;
                        continue;
                    } else {
                        out1[(Index)i] = (p1 == 1. ? wrappedPhase : 1. - (wrappedPhase - p1) / (1. - p1));
                        continue;
                    }
                }
            }
            
            void dspexpr_64_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 100;//#map:_###_obj_###_:1
                }
            }
            
            void slide_tilde_01_perform(const Sample * x, number up, number down, SampleValue * out1, Index n) {
                RNBO_UNUSED(down);
                RNBO_UNUSED(up);
                auto __slide_tilde_01_prev = this->slide_tilde_01_prev;
                auto iup = this->safediv(1., this->maximum(1., rnbo_abs(1000)));
                auto idown = this->safediv(1., this->maximum(1., rnbo_abs(1000)));
                Index i;
            
                for (i = 0; i < n; i++) {
                    number temp = x[(Index)i] - __slide_tilde_01_prev;
                    __slide_tilde_01_prev = __slide_tilde_01_prev + ((x[(Index)i] > __slide_tilde_01_prev ? iup : idown)) * temp;
                    out1[(Index)i] = __slide_tilde_01_prev;
                }
            
                this->slide_tilde_01_prev = __slide_tilde_01_prev;
            }
            
            void delaytilde_09_perform(
                const Sample * delay,
                const SampleValue * input,
                SampleValue * output,
                Index n
            ) {
                auto __delaytilde_09_crossfadeDelay = this->delaytilde_09_crossfadeDelay;
                auto __delaytilde_09_rampInSamples = this->delaytilde_09_rampInSamples;
                auto __delaytilde_09_ramp = this->delaytilde_09_ramp;
                auto __delaytilde_09_lastDelay = this->delaytilde_09_lastDelay;
            
                for (Index i = 0; i < n; i++) {
                    if (__delaytilde_09_lastDelay == -1) {
                        __delaytilde_09_lastDelay = delay[(Index)i];
                    }
            
                    if (__delaytilde_09_ramp > 0) {
                        number factor = __delaytilde_09_ramp / __delaytilde_09_rampInSamples;
                        output[(Index)i] = this->delaytilde_09_del_read(__delaytilde_09_crossfadeDelay, 0) * factor + this->delaytilde_09_del_read(__delaytilde_09_lastDelay, 0) * (1. - factor);
                        __delaytilde_09_ramp--;
                    } else {
                        number effectiveDelay = delay[(Index)i];
            
                        if (effectiveDelay != __delaytilde_09_lastDelay) {
                            __delaytilde_09_ramp = __delaytilde_09_rampInSamples;
                            __delaytilde_09_crossfadeDelay = __delaytilde_09_lastDelay;
                            __delaytilde_09_lastDelay = effectiveDelay;
                            output[(Index)i] = this->delaytilde_09_del_read(__delaytilde_09_crossfadeDelay, 0);
                            __delaytilde_09_ramp--;
                        } else {
                            output[(Index)i] = this->delaytilde_09_del_read(effectiveDelay, 0);
                        }
                    }
            
                    this->delaytilde_09_del_write(input[(Index)i]);
                    this->delaytilde_09_del_step();
                }
            
                this->delaytilde_09_lastDelay = __delaytilde_09_lastDelay;
                this->delaytilde_09_ramp = __delaytilde_09_ramp;
                this->delaytilde_09_crossfadeDelay = __delaytilde_09_crossfadeDelay;
            }
            
            void dspexpr_66_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] + 0.5;//#map:_###_obj_###_:1
                }
            }
            
            void triangle_tilde_02_perform(const Sample * phase, number duty, SampleValue * out1, Index n) {
                RNBO_UNUSED(duty);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number p1 = 0.5;
                    auto wrappedPhase = this->wrap(phase[(Index)i], 0., 1.);
                    p1 = (p1 > 1. ? 1. : (p1 < 0. ? 0. : p1));
            
                    if (wrappedPhase < p1) {
                        out1[(Index)i] = wrappedPhase / p1;
                        continue;
                    } else {
                        out1[(Index)i] = (p1 == 1. ? wrappedPhase : 1. - (wrappedPhase - p1) / (1. - p1));
                        continue;
                    }
                }
            }
            
            void dspexpr_67_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 100;//#map:_###_obj_###_:1
                }
            }
            
            void slide_tilde_02_perform(const Sample * x, number up, number down, SampleValue * out1, Index n) {
                RNBO_UNUSED(down);
                RNBO_UNUSED(up);
                auto __slide_tilde_02_prev = this->slide_tilde_02_prev;
                auto iup = this->safediv(1., this->maximum(1., rnbo_abs(1000)));
                auto idown = this->safediv(1., this->maximum(1., rnbo_abs(1000)));
                Index i;
            
                for (i = 0; i < n; i++) {
                    number temp = x[(Index)i] - __slide_tilde_02_prev;
                    __slide_tilde_02_prev = __slide_tilde_02_prev + ((x[(Index)i] > __slide_tilde_02_prev ? iup : idown)) * temp;
                    out1[(Index)i] = __slide_tilde_02_prev;
                }
            
                this->slide_tilde_02_prev = __slide_tilde_02_prev;
            }
            
            void delaytilde_10_perform(
                const Sample * delay,
                const SampleValue * input,
                SampleValue * output,
                Index n
            ) {
                auto __delaytilde_10_crossfadeDelay = this->delaytilde_10_crossfadeDelay;
                auto __delaytilde_10_rampInSamples = this->delaytilde_10_rampInSamples;
                auto __delaytilde_10_ramp = this->delaytilde_10_ramp;
                auto __delaytilde_10_lastDelay = this->delaytilde_10_lastDelay;
            
                for (Index i = 0; i < n; i++) {
                    if (__delaytilde_10_lastDelay == -1) {
                        __delaytilde_10_lastDelay = delay[(Index)i];
                    }
            
                    if (__delaytilde_10_ramp > 0) {
                        number factor = __delaytilde_10_ramp / __delaytilde_10_rampInSamples;
                        output[(Index)i] = this->delaytilde_10_del_read(__delaytilde_10_crossfadeDelay, 0) * factor + this->delaytilde_10_del_read(__delaytilde_10_lastDelay, 0) * (1. - factor);
                        __delaytilde_10_ramp--;
                    } else {
                        number effectiveDelay = delay[(Index)i];
            
                        if (effectiveDelay != __delaytilde_10_lastDelay) {
                            __delaytilde_10_ramp = __delaytilde_10_rampInSamples;
                            __delaytilde_10_crossfadeDelay = __delaytilde_10_lastDelay;
                            __delaytilde_10_lastDelay = effectiveDelay;
                            output[(Index)i] = this->delaytilde_10_del_read(__delaytilde_10_crossfadeDelay, 0);
                            __delaytilde_10_ramp--;
                        } else {
                            output[(Index)i] = this->delaytilde_10_del_read(effectiveDelay, 0);
                        }
                    }
            
                    this->delaytilde_10_del_write(input[(Index)i]);
                    this->delaytilde_10_del_step();
                }
            
                this->delaytilde_10_lastDelay = __delaytilde_10_lastDelay;
                this->delaytilde_10_ramp = __delaytilde_10_ramp;
                this->delaytilde_10_crossfadeDelay = __delaytilde_10_crossfadeDelay;
            }
            
            void linetilde_13_perform(SampleValue * out, Index n) {
                auto __linetilde_13_time = this->linetilde_13_time;
                auto __linetilde_13_keepramp = this->linetilde_13_keepramp;
                auto __linetilde_13_currentValue = this->linetilde_13_currentValue;
                Index i = 0;
            
                if ((bool)(this->linetilde_13_activeRamps->length)) {
                    while ((bool)(this->linetilde_13_activeRamps->length) && i < n) {
                        number destinationValue = this->linetilde_13_activeRamps[0];
                        number inc = this->linetilde_13_activeRamps[1];
                        number rampTimeInSamples = this->linetilde_13_activeRamps[2] - this->audioProcessSampleCount - i;
                        number val = __linetilde_13_currentValue;
            
                        while (rampTimeInSamples > 0 && i < n) {
                            out[(Index)i] = val;
                            val += inc;
                            i++;
                            rampTimeInSamples--;
                        }
            
                        if (rampTimeInSamples <= 0) {
                            val = destinationValue;
                            this->linetilde_13_activeRamps->splice(0, 3);
            
                            if ((bool)(!(bool)(this->linetilde_13_activeRamps->length))) {
                                this->getEngine()->scheduleClockEventWithValue(
                                    this,
                                    -62043057,
                                    this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                                    0
                                );;
            
                                if ((bool)(!(bool)(__linetilde_13_keepramp))) {
                                    __linetilde_13_time = 0;
                                }
                            }
                        }
            
                        __linetilde_13_currentValue = val;
                    }
                }
            
                while (i < n) {
                    out[(Index)i] = __linetilde_13_currentValue;
                    i++;
                }
            
                this->linetilde_13_currentValue = __linetilde_13_currentValue;
                this->linetilde_13_time = __linetilde_13_time;
            }
            
            void dspexpr_65_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_62_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] + in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_63_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_61_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] + in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void numberobj_33_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_33_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_33_value = localvalue;
            }
            
            void numberobj_34_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_34_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_34_value = localvalue;
            }
            
            void numberobj_35_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_35_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_35_value = localvalue;
            }
            
            void delaytilde_09_del_step() {
                this->delaytilde_09_del_reader++;
            
                if (this->delaytilde_09_del_reader >= (int)(this->delaytilde_09_del_buffer->getSize()))
                    this->delaytilde_09_del_reader = 0;
            }
            
            number delaytilde_09_del_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->delaytilde_09_del_buffer->getSize()) + this->delaytilde_09_del_reader - ((size > this->delaytilde_09_del__maxdelay ? this->delaytilde_09_del__maxdelay : (size < (this->delaytilde_09_del_reader != this->delaytilde_09_del_writer) ? this->delaytilde_09_del_reader != this->delaytilde_09_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->delaytilde_09_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_09_del_wrap))
                    ), this->delaytilde_09_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_09_del_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->delaytilde_09_del_buffer->getSize()) + this->delaytilde_09_del_reader - ((size > this->delaytilde_09_del__maxdelay ? this->delaytilde_09_del__maxdelay : (size < (1 + this->delaytilde_09_del_reader != this->delaytilde_09_del_writer) ? 1 + this->delaytilde_09_del_reader != this->delaytilde_09_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->delaytilde_09_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_09_del_wrap))
                    ), this->delaytilde_09_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_09_del_wrap))
                    ), this->delaytilde_09_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_09_del_wrap))
                    ), this->delaytilde_09_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_09_del_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->delaytilde_09_del_buffer->getSize()) + this->delaytilde_09_del_reader - ((size > this->delaytilde_09_del__maxdelay ? this->delaytilde_09_del__maxdelay : (size < (1 + this->delaytilde_09_del_reader != this->delaytilde_09_del_writer) ? 1 + this->delaytilde_09_del_reader != this->delaytilde_09_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->delaytilde_09_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_09_del_wrap))
                    ), this->delaytilde_09_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_09_del_wrap))
                    ), this->delaytilde_09_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_09_del_wrap))
                    ), this->delaytilde_09_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_09_del_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->delaytilde_09_del_buffer->getSize()) + this->delaytilde_09_del_reader - ((size > this->delaytilde_09_del__maxdelay ? this->delaytilde_09_del__maxdelay : (size < (1 + this->delaytilde_09_del_reader != this->delaytilde_09_del_writer) ? 1 + this->delaytilde_09_del_reader != this->delaytilde_09_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->delaytilde_09_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_09_del_wrap))
                    ), this->delaytilde_09_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_09_del_wrap))
                    ), this->delaytilde_09_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_09_del_wrap))
                    ), this->delaytilde_09_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_09_del_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->delaytilde_09_del_buffer->getSize()) + this->delaytilde_09_del_reader - ((size > this->delaytilde_09_del__maxdelay ? this->delaytilde_09_del__maxdelay : (size < (1 + this->delaytilde_09_del_reader != this->delaytilde_09_del_writer) ? 1 + this->delaytilde_09_del_reader != this->delaytilde_09_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->delaytilde_09_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_09_del_wrap))
                    ), this->delaytilde_09_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_09_del_wrap))
                    ), this->delaytilde_09_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_09_del_wrap))
                    ), this->delaytilde_09_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_09_del_wrap))
                    ), this->delaytilde_09_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->delaytilde_09_del_wrap))
                    ), this->delaytilde_09_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->delaytilde_09_del_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->delaytilde_09_del_buffer->getSize()) + this->delaytilde_09_del_reader - ((size > this->delaytilde_09_del__maxdelay ? this->delaytilde_09_del__maxdelay : (size < (this->delaytilde_09_del_reader != this->delaytilde_09_del_writer) ? this->delaytilde_09_del_reader != this->delaytilde_09_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->delaytilde_09_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_09_del_wrap))
                    ), this->delaytilde_09_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_09_del_wrap))
                    ));
                }
            
                number r = (int)(this->delaytilde_09_del_buffer->getSize()) + this->delaytilde_09_del_reader - ((size > this->delaytilde_09_del__maxdelay ? this->delaytilde_09_del__maxdelay : (size < (this->delaytilde_09_del_reader != this->delaytilde_09_del_writer) ? this->delaytilde_09_del_reader != this->delaytilde_09_del_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->delaytilde_09_del_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_09_del_wrap))
                );
            }
            
            void delaytilde_09_del_write(number v) {
                this->delaytilde_09_del_writer = this->delaytilde_09_del_reader;
                this->delaytilde_09_del_buffer[(Index)this->delaytilde_09_del_writer] = v;
            }
            
            number delaytilde_09_del_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->delaytilde_09_del__maxdelay : size);
                number val = this->delaytilde_09_del_read(effectiveSize, 0);
                this->delaytilde_09_del_write(v);
                this->delaytilde_09_del_step();
                return val;
            }
            
            array<Index, 2> delaytilde_09_del_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->delaytilde_09_del_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->delaytilde_09_del_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void delaytilde_09_del_init() {
                auto result = this->delaytilde_09_del_calcSizeInSamples();
                this->delaytilde_09_del__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->delaytilde_09_del_buffer->requestSize(requestedSizeInSamples, 1);
                this->delaytilde_09_del_wrap = requestedSizeInSamples - 1;
            }
            
            void delaytilde_09_del_clear() {
                this->delaytilde_09_del_buffer->setZero();
            }
            
            void delaytilde_09_del_reset() {
                auto result = this->delaytilde_09_del_calcSizeInSamples();
                this->delaytilde_09_del__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->delaytilde_09_del_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->delaytilde_09_del_buffer);
                this->delaytilde_09_del_wrap = this->delaytilde_09_del_buffer->getSize() - 1;
                this->delaytilde_09_del_clear();
            
                if (this->delaytilde_09_del_reader >= this->delaytilde_09_del__maxdelay || this->delaytilde_09_del_writer >= this->delaytilde_09_del__maxdelay) {
                    this->delaytilde_09_del_reader = 0;
                    this->delaytilde_09_del_writer = 0;
                }
            }
            
            void delaytilde_09_del_dspsetup() {
                this->delaytilde_09_del_reset();
            }
            
            number delaytilde_09_del_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 100;
            }
            
            number delaytilde_09_del_size() {
                return this->delaytilde_09_del__maxdelay;
            }
            
            void delaytilde_09_dspsetup(bool force) {
                if ((bool)(this->delaytilde_09_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->delaytilde_09_rampInSamples = (long)(this->mstosamps(0));
                this->delaytilde_09_lastDelay = -1;
                this->delaytilde_09_setupDone = true;
                this->delaytilde_09_del_dspsetup();
            }
            
            number phasor_02_ph_next(number freq, number reset) {
                RNBO_UNUSED(reset);
                number pincr = freq * this->phasor_02_ph_conv;
            
                if (this->phasor_02_ph_currentPhase < 0.)
                    this->phasor_02_ph_currentPhase = 1. + this->phasor_02_ph_currentPhase;
            
                if (this->phasor_02_ph_currentPhase > 1.)
                    this->phasor_02_ph_currentPhase = this->phasor_02_ph_currentPhase - 1.;
            
                number tmp = this->phasor_02_ph_currentPhase;
                this->phasor_02_ph_currentPhase += pincr;
                return tmp;
            }
            
            void phasor_02_ph_reset() {
                this->phasor_02_ph_currentPhase = 0;
            }
            
            void phasor_02_ph_dspsetup() {
                this->phasor_02_ph_conv = (number)1 / this->sr;
            }
            
            void phasor_02_dspsetup(bool force) {
                if ((bool)(this->phasor_02_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->phasor_02_conv = (number)1 / this->samplerate();
                this->phasor_02_setupDone = true;
                this->phasor_02_ph_dspsetup();
            }
            
            void delaytilde_10_del_step() {
                this->delaytilde_10_del_reader++;
            
                if (this->delaytilde_10_del_reader >= (int)(this->delaytilde_10_del_buffer->getSize()))
                    this->delaytilde_10_del_reader = 0;
            }
            
            number delaytilde_10_del_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->delaytilde_10_del_buffer->getSize()) + this->delaytilde_10_del_reader - ((size > this->delaytilde_10_del__maxdelay ? this->delaytilde_10_del__maxdelay : (size < (this->delaytilde_10_del_reader != this->delaytilde_10_del_writer) ? this->delaytilde_10_del_reader != this->delaytilde_10_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->delaytilde_10_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_10_del_wrap))
                    ), this->delaytilde_10_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_10_del_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->delaytilde_10_del_buffer->getSize()) + this->delaytilde_10_del_reader - ((size > this->delaytilde_10_del__maxdelay ? this->delaytilde_10_del__maxdelay : (size < (1 + this->delaytilde_10_del_reader != this->delaytilde_10_del_writer) ? 1 + this->delaytilde_10_del_reader != this->delaytilde_10_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->delaytilde_10_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_10_del_wrap))
                    ), this->delaytilde_10_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_10_del_wrap))
                    ), this->delaytilde_10_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_10_del_wrap))
                    ), this->delaytilde_10_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_10_del_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->delaytilde_10_del_buffer->getSize()) + this->delaytilde_10_del_reader - ((size > this->delaytilde_10_del__maxdelay ? this->delaytilde_10_del__maxdelay : (size < (1 + this->delaytilde_10_del_reader != this->delaytilde_10_del_writer) ? 1 + this->delaytilde_10_del_reader != this->delaytilde_10_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->delaytilde_10_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_10_del_wrap))
                    ), this->delaytilde_10_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_10_del_wrap))
                    ), this->delaytilde_10_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_10_del_wrap))
                    ), this->delaytilde_10_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_10_del_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->delaytilde_10_del_buffer->getSize()) + this->delaytilde_10_del_reader - ((size > this->delaytilde_10_del__maxdelay ? this->delaytilde_10_del__maxdelay : (size < (1 + this->delaytilde_10_del_reader != this->delaytilde_10_del_writer) ? 1 + this->delaytilde_10_del_reader != this->delaytilde_10_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->delaytilde_10_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_10_del_wrap))
                    ), this->delaytilde_10_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_10_del_wrap))
                    ), this->delaytilde_10_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_10_del_wrap))
                    ), this->delaytilde_10_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_10_del_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->delaytilde_10_del_buffer->getSize()) + this->delaytilde_10_del_reader - ((size > this->delaytilde_10_del__maxdelay ? this->delaytilde_10_del__maxdelay : (size < (1 + this->delaytilde_10_del_reader != this->delaytilde_10_del_writer) ? 1 + this->delaytilde_10_del_reader != this->delaytilde_10_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->delaytilde_10_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_10_del_wrap))
                    ), this->delaytilde_10_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_10_del_wrap))
                    ), this->delaytilde_10_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_10_del_wrap))
                    ), this->delaytilde_10_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_10_del_wrap))
                    ), this->delaytilde_10_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->delaytilde_10_del_wrap))
                    ), this->delaytilde_10_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->delaytilde_10_del_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->delaytilde_10_del_buffer->getSize()) + this->delaytilde_10_del_reader - ((size > this->delaytilde_10_del__maxdelay ? this->delaytilde_10_del__maxdelay : (size < (this->delaytilde_10_del_reader != this->delaytilde_10_del_writer) ? this->delaytilde_10_del_reader != this->delaytilde_10_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->delaytilde_10_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_10_del_wrap))
                    ), this->delaytilde_10_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_10_del_wrap))
                    ));
                }
            
                number r = (int)(this->delaytilde_10_del_buffer->getSize()) + this->delaytilde_10_del_reader - ((size > this->delaytilde_10_del__maxdelay ? this->delaytilde_10_del__maxdelay : (size < (this->delaytilde_10_del_reader != this->delaytilde_10_del_writer) ? this->delaytilde_10_del_reader != this->delaytilde_10_del_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->delaytilde_10_del_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_10_del_wrap))
                );
            }
            
            void delaytilde_10_del_write(number v) {
                this->delaytilde_10_del_writer = this->delaytilde_10_del_reader;
                this->delaytilde_10_del_buffer[(Index)this->delaytilde_10_del_writer] = v;
            }
            
            number delaytilde_10_del_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->delaytilde_10_del__maxdelay : size);
                number val = this->delaytilde_10_del_read(effectiveSize, 0);
                this->delaytilde_10_del_write(v);
                this->delaytilde_10_del_step();
                return val;
            }
            
            array<Index, 2> delaytilde_10_del_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->delaytilde_10_del_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->delaytilde_10_del_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void delaytilde_10_del_init() {
                auto result = this->delaytilde_10_del_calcSizeInSamples();
                this->delaytilde_10_del__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->delaytilde_10_del_buffer->requestSize(requestedSizeInSamples, 1);
                this->delaytilde_10_del_wrap = requestedSizeInSamples - 1;
            }
            
            void delaytilde_10_del_clear() {
                this->delaytilde_10_del_buffer->setZero();
            }
            
            void delaytilde_10_del_reset() {
                auto result = this->delaytilde_10_del_calcSizeInSamples();
                this->delaytilde_10_del__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->delaytilde_10_del_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->delaytilde_10_del_buffer);
                this->delaytilde_10_del_wrap = this->delaytilde_10_del_buffer->getSize() - 1;
                this->delaytilde_10_del_clear();
            
                if (this->delaytilde_10_del_reader >= this->delaytilde_10_del__maxdelay || this->delaytilde_10_del_writer >= this->delaytilde_10_del__maxdelay) {
                    this->delaytilde_10_del_reader = 0;
                    this->delaytilde_10_del_writer = 0;
                }
            }
            
            void delaytilde_10_del_dspsetup() {
                this->delaytilde_10_del_reset();
            }
            
            number delaytilde_10_del_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 100;
            }
            
            number delaytilde_10_del_size() {
                return this->delaytilde_10_del__maxdelay;
            }
            
            void delaytilde_10_dspsetup(bool force) {
                if ((bool)(this->delaytilde_10_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->delaytilde_10_rampInSamples = (long)(this->mstosamps(0));
                this->delaytilde_10_lastDelay = -1;
                this->delaytilde_10_setupDone = true;
                this->delaytilde_10_del_dspsetup();
            }
            
            void numberobj_33_init() {
                this->numberobj_33_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/Chorus~/number_obj-22"), 1, this->_currentTime);
            }
            
            void numberobj_33_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_33_value;
            }
            
            void numberobj_33_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_33_value_set(preset["value"]);
            }
            
            void numberobj_34_init() {
                this->numberobj_34_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/Chorus~/number_obj-18"), 1, this->_currentTime);
            }
            
            void numberobj_34_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_34_value;
            }
            
            void numberobj_34_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_34_value_set(preset["value"]);
            }
            
            void numberobj_35_init() {
                this->numberobj_35_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/Chorus~/number_obj-6"), 1, this->_currentTime);
            }
            
            void numberobj_35_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_35_value;
            }
            
            void numberobj_35_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_35_value_set(preset["value"]);
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                dspexpr_61_in1 = 0;
                dspexpr_61_in2 = 0;
                dspexpr_62_in1 = 0;
                dspexpr_62_in2 = 0;
                dspexpr_63_in1 = 0;
                dspexpr_63_in2 = 0;
                delaytilde_09_delay = 0;
                phasor_02_freq = 2;
                slide_tilde_01_x = 0;
                slide_tilde_01_up = 1000;
                slide_tilde_01_down = 1000;
                dspexpr_64_in1 = 0;
                dspexpr_64_in2 = 100;
                triangle_tilde_01_phase = 0;
                triangle_tilde_01_duty = 0.5;
                dspexpr_65_in1 = 0;
                dspexpr_65_in2 = 0;
                delaytilde_10_delay = 0;
                dspexpr_66_in1 = 0;
                dspexpr_66_in2 = 0.5;
                slide_tilde_02_x = 0;
                slide_tilde_02_up = 1000;
                slide_tilde_02_down = 1000;
                dspexpr_67_in1 = 0;
                dspexpr_67_in2 = 100;
                triangle_tilde_02_phase = 0;
                triangle_tilde_02_duty = 0.5;
                linetilde_13_time = 50;
                linetilde_13_keepramp = 1;
                numberobj_33_value = 0;
                numberobj_33_value_setter(numberobj_33_value);
                expr_12_in1 = 0;
                expr_12_in2 = 100;
                expr_12_out1 = 0;
                numberobj_34_value = 0;
                numberobj_34_value_setter(numberobj_34_value);
                numberobj_35_value = 0;
                numberobj_35_value_setter(numberobj_35_value);
                scale_06_inlow = 0;
                scale_06_inhigh = 100;
                scale_06_outlow = 0.5;
                scale_06_outhigh = 2;
                scale_06_power = 1;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                signals[1] = nullptr;
                signals[2] = nullptr;
                signals[3] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                delaytilde_09_lastDelay = -1;
                delaytilde_09_crossfadeDelay = 0;
                delaytilde_09_ramp = 0;
                delaytilde_09_rampInSamples = 0;
                delaytilde_09_del__maxdelay = 0;
                delaytilde_09_del_sizemode = 0;
                delaytilde_09_del_wrap = 0;
                delaytilde_09_del_reader = 0;
                delaytilde_09_del_writer = 0;
                delaytilde_09_setupDone = false;
                phasor_02_sigbuf = nullptr;
                phasor_02_lastLockedPhase = 0;
                phasor_02_conv = 0;
                phasor_02_ph_currentPhase = 0;
                phasor_02_ph_conv = 0;
                phasor_02_setupDone = false;
                slide_tilde_01_prev = 0;
                delaytilde_10_lastDelay = -1;
                delaytilde_10_crossfadeDelay = 0;
                delaytilde_10_ramp = 0;
                delaytilde_10_rampInSamples = 0;
                delaytilde_10_del__maxdelay = 0;
                delaytilde_10_del_sizemode = 0;
                delaytilde_10_del_wrap = 0;
                delaytilde_10_del_reader = 0;
                delaytilde_10_del_writer = 0;
                delaytilde_10_setupDone = false;
                slide_tilde_02_prev = 0;
                linetilde_13_currentValue = 0;
                numberobj_33_currentFormat = 6;
                numberobj_33_lastValue = 0;
                numberobj_34_currentFormat = 6;
                numberobj_34_lastValue = 0;
                numberobj_35_currentFormat = 6;
                numberobj_35_lastValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number dspexpr_61_in1;
                number dspexpr_61_in2;
                number dspexpr_62_in1;
                number dspexpr_62_in2;
                number dspexpr_63_in1;
                number dspexpr_63_in2;
                number delaytilde_09_delay;
                number phasor_02_freq;
                number slide_tilde_01_x;
                number slide_tilde_01_up;
                number slide_tilde_01_down;
                number dspexpr_64_in1;
                number dspexpr_64_in2;
                number triangle_tilde_01_phase;
                number triangle_tilde_01_duty;
                number dspexpr_65_in1;
                number dspexpr_65_in2;
                number delaytilde_10_delay;
                number dspexpr_66_in1;
                number dspexpr_66_in2;
                number slide_tilde_02_x;
                number slide_tilde_02_up;
                number slide_tilde_02_down;
                number dspexpr_67_in1;
                number dspexpr_67_in2;
                number triangle_tilde_02_phase;
                number triangle_tilde_02_duty;
                list linetilde_13_segments;
                number linetilde_13_time;
                number linetilde_13_keepramp;
                number numberobj_33_value;
                number expr_12_in1;
                number expr_12_in2;
                number expr_12_out1;
                number numberobj_34_value;
                number numberobj_35_value;
                list scale_06_input;
                number scale_06_inlow;
                number scale_06_inhigh;
                number scale_06_outlow;
                number scale_06_outhigh;
                number scale_06_power;
                list scale_06_out;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[4];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number delaytilde_09_lastDelay;
                number delaytilde_09_crossfadeDelay;
                number delaytilde_09_ramp;
                long delaytilde_09_rampInSamples;
                Float64BufferRef delaytilde_09_del_buffer;
                Index delaytilde_09_del__maxdelay;
                Int delaytilde_09_del_sizemode;
                Index delaytilde_09_del_wrap;
                Int delaytilde_09_del_reader;
                Int delaytilde_09_del_writer;
                bool delaytilde_09_setupDone;
                signal phasor_02_sigbuf;
                number phasor_02_lastLockedPhase;
                number phasor_02_conv;
                number phasor_02_ph_currentPhase;
                number phasor_02_ph_conv;
                bool phasor_02_setupDone;
                number slide_tilde_01_prev;
                number delaytilde_10_lastDelay;
                number delaytilde_10_crossfadeDelay;
                number delaytilde_10_ramp;
                long delaytilde_10_rampInSamples;
                Float64BufferRef delaytilde_10_del_buffer;
                Index delaytilde_10_del__maxdelay;
                Int delaytilde_10_del_sizemode;
                Index delaytilde_10_del_wrap;
                Int delaytilde_10_del_reader;
                Int delaytilde_10_del_writer;
                bool delaytilde_10_setupDone;
                number slide_tilde_02_prev;
                list linetilde_13_activeRamps;
                number linetilde_13_currentValue;
                Int numberobj_33_currentFormat;
                number numberobj_33_lastValue;
                Int numberobj_34_currentFormat;
                number numberobj_34_lastValue;
                Int numberobj_35_currentFormat;
                number numberobj_35_lastValue;
                number stackprotect_count;
                DataRef delaytilde_09_del_bufferobj;
                DataRef delaytilde_10_del_bufferobj;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_807 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_812;
            friend class rnbomatic;
            
            public:
            
            class RNBOSubpatcher_799 : public PatcherInterfaceImpl {
                        
                        friend class RNBOSubpatcher_807;
                        friend class rnbomatic;
                        
                        public:
                        
                        RNBOSubpatcher_799()
                        {
                        }
                        
                        ~RNBOSubpatcher_799()
                        {
                        }
                        
                        virtual RNBOSubpatcher_807* getPatcher() const {
                            return static_cast<RNBOSubpatcher_807 *>(_parentPatcher);
                        }
                        
                        rnbomatic* getTopLevelPatcher() {
                            return this->getPatcher()->getTopLevelPatcher();
                        }
                        
                        void cancelClockEvents()
                        {
                            getEngine()->flushClockEvents(this, 29237386, false);
                            getEngine()->flushClockEvents(this, -1697752436, false);
                            getEngine()->flushClockEvents(this, 892732297, false);
                            getEngine()->flushClockEvents(this, -834257525, false);
                            getEngine()->flushClockEvents(this, -1494586265, false);
                        }
                        
                        number mstosamps(MillisecondTime ms) {
                            return ms * this->sr * 0.001;
                        }
                        
                        Index getNumMidiInputPorts() const {
                            return 0;
                        }
                        
                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                        
                        Index getNumMidiOutputPorts() const {
                            return 0;
                        }
                        
                        void process(
                            const SampleValue * const* inputs,
                            Index numInputs,
                            SampleValue * const* outputs,
                            Index numOutputs,
                            Index n
                        ) {
                            this->vs = n;
                            this->updateTime(this->getEngine()->getCurrentTime());
                            SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                            SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                            const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                            const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                            this->dspexpr_74_perform(in1, this->signals[0], n);
                            this->dspexpr_75_perform(in2, this->signals[1], n);
                            this->maximum_tilde_01_perform(this->signals[0], this->signals[1], this->signals[2], n);
                        
                            this->rampsmooth_tilde_01_perform(
                                this->signals[2],
                                this->rampsmooth_tilde_01_up,
                                this->rampsmooth_tilde_01_down,
                                this->signals[1],
                                n
                            );
                        
                            this->ip_03_perform(this->signals[2], n);
                            this->dspexpr_77_perform(this->signals[2], this->dspexpr_77_in2, this->signals[0], n);
                            this->dspexpr_76_perform(this->signals[2], this->signals[0], this->signals[3], n);
                            this->dspexpr_73_perform(this->signals[1], this->signals[0], this->signals[2], n);
                            this->dspexpr_72_perform(this->signals[2], this->signals[3], this->signals[0], n);
                        
                            this->dspexpr_71_perform(
                                this->signals[0],
                                this->dspexpr_71_in2,
                                this->dspexpr_71_in3,
                                this->signals[3],
                                n
                            );
                        
                            this->dspexpr_70_perform(this->signals[3], this->dspexpr_70_in2, this->signals[0], n);
                            this->hann_tilde_01_perform(this->signals[0], this->signals[3], n);
                            this->dspexpr_69_perform(in2, this->signals[3], out2, n);
                            this->dspexpr_68_perform(in1, this->signals[3], out1, n);
                            this->numbertilde_04_perform(this->signals[3], this->dummyBuffer, n);
                            this->stackprotect_perform(n);
                            this->audioProcessSampleCount += this->vs;
                        }
                        
                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                Index i;
                        
                                for (i = 0; i < 4; i++) {
                                    this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                                }
                        
                                this->ip_03_sigbuf = resizeSignal(this->ip_03_sigbuf, this->maxvs, maxBlockSize);
                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                this->didAllocateSignals = true;
                            }
                        
                            const bool sampleRateChanged = sampleRate != this->sr;
                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                        
                            if (sampleRateChanged || maxvsChanged) {
                                this->vs = maxBlockSize;
                                this->maxvs = maxBlockSize;
                                this->sr = sampleRate;
                                this->invsr = 1 / sampleRate;
                            }
                        
                            this->rampsmooth_tilde_01_dspsetup(forceDSPSetup);
                            this->ip_03_dspsetup(forceDSPSetup);
                            this->numbertilde_04_dspsetup(forceDSPSetup);
                        
                            if (sampleRateChanged)
                                this->onSampleRateChanged(sampleRate);
                        }
                        
                        void setProbingTarget(MessageTag id) {
                            switch (id) {
                            default:
                                {
                                this->setProbingIndex(-1);
                                break;
                                }
                            }
                        }
                        
                        void setProbingIndex(ProbingIndex ) {}
                        
                        Index getProbingChannels(MessageTag outletId) const {
                            RNBO_UNUSED(outletId);
                            return 0;
                        }
                        
                        Index getIsMuted()  {
                            return this->isMuted;
                        }
                        
                        void setIsMuted(Index v)  {
                            this->isMuted = v;
                        }
                        
                        void onSampleRateChanged(double ) {}
                        
                        Index getPatcherSerial() const {
                            return 0;
                        }
                        
                        void getState(PatcherStateInterface& ) {}
                        
                        void setState() {}
                        
                        void getPreset(PatcherStateInterface& ) {}
                        
                        void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                        
                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValue(index, value, time);
                        }
                        
                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                            this->setParameterValue(index, this->getParameterValue(index), time);
                        }
                        
                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValueNormalized(index, value, time);
                        }
                        
                        ParameterValue getParameterValue(ParameterIndex index)  {
                            switch (index) {
                            default:
                                {
                                return 0;
                                }
                            }
                        }
                        
                        ParameterIndex getNumSignalInParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumSignalOutParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumParameters() const {
                            return 0;
                        }
                        
                        ConstCharPointer getParameterName(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        ConstCharPointer getParameterId(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                        
                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                        }
                        
                        void setParameterOffset(ParameterIndex offset) {
                            this->parameterOffset = offset;
                        }
                        
                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                            if (steps == 1) {
                                if (normalizedValue > 0) {
                                    normalizedValue = 1.;
                                }
                            } else {
                                ParameterValue oneStep = (number)1. / (steps - 1);
                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                normalizedValue = numberOfSteps * oneStep;
                            }
                        
                            return normalizedValue;
                        }
                        
                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        void scheduleParamInit(ParameterIndex index, Index order) {
                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                        }
                        
                        void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
                            RNBO_UNUSED(hasValue);
                            this->updateTime(time);
                        
                            switch (index) {
                            case 29237386:
                                {
                                this->loadmess_03_startupbang_bang();
                                break;
                                }
                            case -1697752436:
                                {
                                this->loadmess_04_startupbang_bang();
                                break;
                                }
                            case 892732297:
                                {
                                this->loadmess_05_startupbang_bang();
                                break;
                                }
                            case -834257525:
                                {
                                this->loadmess_06_startupbang_bang();
                                break;
                                }
                            case -1494586265:
                                {
                                this->numbertilde_04_value_set(value);
                                break;
                                }
                            }
                        }
                        
                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                        
                        void processOutletEvent(
                            EngineLink* sender,
                            OutletIndex index,
                            ParameterValue value,
                            MillisecondTime time
                        ) {
                            this->updateTime(time);
                            this->processOutletAtCurrentTime(sender, index, value);
                        }
                        
                        void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("valin"):
                                {
                                if (TAG("verb/Feedback~/Gate~/number_obj-58") == objectId)
                                    this->numberobj_36_valin_set(payload);
                        
                                if (TAG("verb/Feedback~/Gate~/number_obj-50") == objectId)
                                    this->numberobj_37_valin_set(payload);
                        
                                if (TAG("verb/Feedback~/Gate~/number_obj-20") == objectId)
                                    this->numberobj_38_valin_set(payload);
                        
                                if (TAG("verb/Feedback~/Gate~/number_obj-31") == objectId)
                                    this->numberobj_39_valin_set(payload);
                        
                                if (TAG("verb/Feedback~/Gate~/number_obj-43") == objectId)
                                    this->numberobj_40_valin_set(payload);
                        
                                if (TAG("verb/Feedback~/Gate~/number_obj-44") == objectId)
                                    this->numberobj_41_valin_set(payload);
                        
                                if (TAG("verb/Feedback~/Gate~/number_obj-22") == objectId)
                                    this->numberobj_42_valin_set(payload);
                        
                                if (TAG("verb/Feedback~/Gate~/number_obj-25") == objectId)
                                    this->numberobj_43_valin_set(payload);
                        
                                break;
                                }
                            case TAG("format"):
                                {
                                if (TAG("verb/Feedback~/Gate~/number_obj-58") == objectId)
                                    this->numberobj_36_format_set(payload);
                        
                                if (TAG("verb/Feedback~/Gate~/number_obj-50") == objectId)
                                    this->numberobj_37_format_set(payload);
                        
                                if (TAG("verb/Feedback~/Gate~/number_obj-20") == objectId)
                                    this->numberobj_38_format_set(payload);
                        
                                if (TAG("verb/Feedback~/Gate~/number_obj-31") == objectId)
                                    this->numberobj_39_format_set(payload);
                        
                                if (TAG("verb/Feedback~/Gate~/number_obj-43") == objectId)
                                    this->numberobj_40_format_set(payload);
                        
                                if (TAG("verb/Feedback~/Gate~/number_obj-44") == objectId)
                                    this->numberobj_41_format_set(payload);
                        
                                if (TAG("verb/Feedback~/Gate~/number_obj-22") == objectId)
                                    this->numberobj_42_format_set(payload);
                        
                                if (TAG("verb/Feedback~/Gate~/number_obj-25") == objectId)
                                    this->numberobj_43_format_set(payload);
                        
                                break;
                                }
                            case TAG("sig"):
                                {
                                if (TAG("verb/Feedback~/Gate~/number~_obj-12") == objectId)
                                    this->numbertilde_04_sig_number_set(payload);
                        
                                break;
                                }
                            case TAG("mode"):
                                {
                                if (TAG("verb/Feedback~/Gate~/number~_obj-12") == objectId)
                                    this->numbertilde_04_mode_set(payload);
                        
                                break;
                                }
                            }
                        }
                        
                        void processListMessage(
                            MessageTag tag,
                            MessageTag objectId,
                            MillisecondTime time,
                            const list& payload
                        ) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("sig"):
                                {
                                if (TAG("verb/Feedback~/Gate~/number~_obj-12") == objectId)
                                    this->numbertilde_04_sig_list_set(payload);
                        
                                break;
                                }
                            }
                        }
                        
                        void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("startupbang"):
                                {
                                if (TAG("verb/Feedback~/Gate~/loadmess_obj-5") == objectId)
                                    this->loadmess_03_startupbang_bang();
                        
                                if (TAG("verb/Feedback~/Gate~/loadmess_obj-11") == objectId)
                                    this->loadmess_04_startupbang_bang();
                        
                                if (TAG("verb/Feedback~/Gate~/loadmess_obj-40") == objectId)
                                    this->loadmess_05_startupbang_bang();
                        
                                if (TAG("verb/Feedback~/Gate~/loadmess_obj-30") == objectId)
                                    this->loadmess_06_startupbang_bang();
                        
                                break;
                                }
                            }
                        }
                        
                        MessageTagInfo resolveTag(MessageTag tag) const {
                            switch (tag) {
                            case TAG("valout"):
                                {
                                return "valout";
                                }
                            case TAG("verb/Feedback~/Gate~/number_obj-58"):
                                {
                                return "verb/Feedback~/Gate~/number_obj-58";
                                }
                            case TAG("setup"):
                                {
                                return "setup";
                                }
                            case TAG("verb/Feedback~/Gate~/number_obj-50"):
                                {
                                return "verb/Feedback~/Gate~/number_obj-50";
                                }
                            case TAG("monitor"):
                                {
                                return "monitor";
                                }
                            case TAG("verb/Feedback~/Gate~/number~_obj-12"):
                                {
                                return "verb/Feedback~/Gate~/number~_obj-12";
                                }
                            case TAG("assign"):
                                {
                                return "assign";
                                }
                            case TAG("verb/Feedback~/Gate~/number_obj-20"):
                                {
                                return "verb/Feedback~/Gate~/number_obj-20";
                                }
                            case TAG("verb/Feedback~/Gate~/number_obj-31"):
                                {
                                return "verb/Feedback~/Gate~/number_obj-31";
                                }
                            case TAG("verb/Feedback~/Gate~/number_obj-43"):
                                {
                                return "verb/Feedback~/Gate~/number_obj-43";
                                }
                            case TAG("verb/Feedback~/Gate~/number_obj-44"):
                                {
                                return "verb/Feedback~/Gate~/number_obj-44";
                                }
                            case TAG("verb/Feedback~/Gate~/number_obj-22"):
                                {
                                return "verb/Feedback~/Gate~/number_obj-22";
                                }
                            case TAG("verb/Feedback~/Gate~/number_obj-25"):
                                {
                                return "verb/Feedback~/Gate~/number_obj-25";
                                }
                            case TAG("startupbang"):
                                {
                                return "startupbang";
                                }
                            case TAG("verb/Feedback~/Gate~/loadmess_obj-5"):
                                {
                                return "verb/Feedback~/Gate~/loadmess_obj-5";
                                }
                            case TAG("valin"):
                                {
                                return "valin";
                                }
                            case TAG("format"):
                                {
                                return "format";
                                }
                            case TAG("sig"):
                                {
                                return "sig";
                                }
                            case TAG("mode"):
                                {
                                return "mode";
                                }
                            case TAG("verb/Feedback~/Gate~/loadmess_obj-11"):
                                {
                                return "verb/Feedback~/Gate~/loadmess_obj-11";
                                }
                            case TAG("verb/Feedback~/Gate~/loadmess_obj-40"):
                                {
                                return "verb/Feedback~/Gate~/loadmess_obj-40";
                                }
                            case TAG("verb/Feedback~/Gate~/loadmess_obj-30"):
                                {
                                return "verb/Feedback~/Gate~/loadmess_obj-30";
                                }
                            }
                        
                            return nullptr;
                        }
                        
                        DataRef* getDataRef(DataRefIndex index)  {
                            switch (index) {
                            default:
                                {
                                return nullptr;
                                }
                            }
                        }
                        
                        DataRefIndex getNumDataRefs() const {
                            return 0;
                        }
                        
                        void fillDataRef(DataRefIndex , DataRef& ) {}
                        
                        void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
                        
                        void initialize() {
                            this->assign_defaults();
                            this->setState();
                        }
                        
                        protected:
                        
                        void loadmess_03_startupbang_bang() {
                            this->loadmess_03_message_bang();
                        }
                        
                        void numberobj_36_valin_set(number v) {
                            this->numberobj_36_value_set(v);
                        }
                        
                        void numberobj_36_format_set(number v) {
                            this->numberobj_36_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_37_valin_set(number v) {
                            this->numberobj_37_value_set(v);
                        }
                        
                        void numberobj_37_format_set(number v) {
                            this->numberobj_37_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numbertilde_04_sig_number_set(number v) {
                            this->numbertilde_04_outValue = v;
                        }
                        
                        void numbertilde_04_sig_list_set(const list& v) {
                            this->numbertilde_04_outValue = v[0];
                        }
                        
                        void numbertilde_04_mode_set(number v) {
                            if (v == 1) {
                                this->numbertilde_04_currentMode = 0;
                            } else if (v == 2) {
                                this->numbertilde_04_currentMode = 1;
                            }
                        }
                        
                        void numberobj_38_valin_set(number v) {
                            this->numberobj_38_value_set(v);
                        }
                        
                        void numberobj_38_format_set(number v) {
                            this->numberobj_38_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void loadmess_04_startupbang_bang() {
                            this->loadmess_04_message_bang();
                        }
                        
                        void numberobj_39_valin_set(number v) {
                            this->numberobj_39_value_set(v);
                        }
                        
                        void numberobj_39_format_set(number v) {
                            this->numberobj_39_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void loadmess_05_startupbang_bang() {
                            this->loadmess_05_message_bang();
                        }
                        
                        void numberobj_40_valin_set(number v) {
                            this->numberobj_40_value_set(v);
                        }
                        
                        void numberobj_40_format_set(number v) {
                            this->numberobj_40_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_41_valin_set(number v) {
                            this->numberobj_41_value_set(v);
                        }
                        
                        void numberobj_41_format_set(number v) {
                            this->numberobj_41_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void loadmess_06_startupbang_bang() {
                            this->loadmess_06_message_bang();
                        }
                        
                        void numberobj_42_valin_set(number v) {
                            this->numberobj_42_value_set(v);
                        }
                        
                        void numberobj_42_format_set(number v) {
                            this->numberobj_42_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_43_valin_set(number v) {
                            this->numberobj_43_value_set(v);
                        }
                        
                        void numberobj_43_format_set(number v) {
                            this->numberobj_43_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numbertilde_04_value_set(number ) {}
                        
                        number msToSamps(MillisecondTime ms, number sampleRate) {
                            return ms * sampleRate * 0.001;
                        }
                        
                        MillisecondTime sampsToMs(SampleIndex samps) {
                            return samps * (this->invsr * 1000);
                        }
                        
                        Index getMaxBlockSize() const {
                            return this->maxvs;
                        }
                        
                        number getSampleRate() const {
                            return this->sr;
                        }
                        
                        bool hasFixedVectorSize() const {
                            return false;
                        }
                        
                        Index getNumInputChannels() const {
                            return 2;
                        }
                        
                        Index getNumOutputChannels() const {
                            return 2;
                        }
                        
                        void initializeObjects() {
                            this->numberobj_36_init();
                            this->numberobj_37_init();
                            this->numbertilde_04_init();
                            this->ip_03_init();
                            this->numberobj_38_init();
                            this->numberobj_39_init();
                            this->numberobj_40_init();
                            this->numberobj_41_init();
                            this->numberobj_42_init();
                            this->numberobj_43_init();
                        }
                        
                        void sendOutlet(OutletIndex index, ParameterValue value) {
                            this->getEngine()->sendOutlet(this, index, value);
                        }
                        
                        void startup() {
                            this->updateTime(this->getEngine()->getCurrentTime());
                            this->getEngine()->scheduleClockEvent(this, 29237386, 0 + this->_currentTime);;
                            this->getEngine()->scheduleClockEvent(this, -1697752436, 0 + this->_currentTime);;
                            this->getEngine()->scheduleClockEvent(this, 892732297, 0 + this->_currentTime);;
                            this->getEngine()->scheduleClockEvent(this, -834257525, 0 + this->_currentTime);;
                        }
                        
                        void allocateDataRefs() {}
                        
                        void ip_03_value_set(number v) {
                            this->ip_03_value = v;
                            this->ip_03_fillSigBuf();
                            this->ip_03_lastValue = v;
                        }
                        
                        void numberobj_36_output_set(number v) {
                            this->ip_03_value_set(v);
                        }
                        
                        void numberobj_36_value_set(number v) {
                            this->numberobj_36_value_setter(v);
                            v = this->numberobj_36_value;
                            number localvalue = v;
                        
                            if (this->numberobj_36_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("verb/Feedback~/Gate~/number_obj-58"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_36_output_set(localvalue);
                        }
                        
                        void expr_13_out1_set(number v) {
                            this->expr_13_out1 = v;
                            this->numberobj_36_value_set(this->expr_13_out1);
                        }
                        
                        void expr_13_in1_set(number in1) {
                            this->expr_13_in1 = in1;
                            this->expr_13_out1_set(rnbo_pow(10, this->expr_13_in1 * 0.05));//#map:verb/Feedback~/Gate~/dbtoa_obj-49:1
                        }
                        
                        void numberobj_37_output_set(number v) {
                            this->expr_13_in1_set(v);
                        }
                        
                        void numberobj_37_value_set(number v) {
                            this->numberobj_37_value_setter(v);
                            v = this->numberobj_37_value;
                            number localvalue = v;
                        
                            if (this->numberobj_37_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("verb/Feedback~/Gate~/number_obj-50"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_37_output_set(localvalue);
                        }
                        
                        void loadmess_03_message_bang() {
                            list v = this->loadmess_03_message;
                        
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->numberobj_37_value_set(converted);
                            }
                        }
                        
                        void rampsmooth_tilde_01_up_set(number v) {
                            this->rampsmooth_tilde_01_up = v;
                        }
                        
                        void numberobj_39_output_set(number v) {
                            this->rampsmooth_tilde_01_up_set(v);
                        }
                        
                        void numberobj_39_value_set(number v) {
                            this->numberobj_39_value_setter(v);
                            v = this->numberobj_39_value;
                            number localvalue = v;
                        
                            if (this->numberobj_39_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("verb/Feedback~/Gate~/number_obj-31"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_39_output_set(localvalue);
                        }
                        
                        void mstosamps_02_out1_set(number v) {
                            this->numberobj_39_value_set(v);
                        }
                        
                        void mstosamps_02_ms_set(number ms) {
                            this->mstosamps_02_ms = ms;
                        
                            {
                                this->mstosamps_02_out1_set(ms * this->sr * 0.001);
                                return;
                            }
                        }
                        
                        void numberobj_38_output_set(number v) {
                            this->mstosamps_02_ms_set(v);
                        }
                        
                        void numberobj_38_value_set(number v) {
                            this->numberobj_38_value_setter(v);
                            v = this->numberobj_38_value;
                            number localvalue = v;
                        
                            if (this->numberobj_38_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("verb/Feedback~/Gate~/number_obj-20"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_38_output_set(localvalue);
                        }
                        
                        void loadmess_04_message_bang() {
                            list v = this->loadmess_04_message;
                        
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->numberobj_38_value_set(converted);
                            }
                        }
                        
                        void dspexpr_77_in2_set(number v) {
                            this->dspexpr_77_in2 = v;
                        }
                        
                        void numberobj_40_output_set(number v) {
                            this->dspexpr_77_in2_set(v);
                        }
                        
                        void numberobj_40_value_set(number v) {
                            this->numberobj_40_value_setter(v);
                            v = this->numberobj_40_value;
                            number localvalue = v;
                        
                            if (this->numberobj_40_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("verb/Feedback~/Gate~/number_obj-43"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_40_output_set(localvalue);
                        }
                        
                        void expr_14_out1_set(number v) {
                            this->expr_14_out1 = v;
                            this->numberobj_40_value_set(this->expr_14_out1);
                        }
                        
                        void expr_14_in1_set(number in1) {
                            this->expr_14_in1 = in1;
                            this->expr_14_out1_set(rnbo_pow(10, this->expr_14_in1 * 0.05));//#map:verb/Feedback~/Gate~/dbtoa_obj-51:1
                        }
                        
                        void numberobj_41_output_set(number v) {
                            this->expr_14_in1_set(v);
                        }
                        
                        void numberobj_41_value_set(number v) {
                            this->numberobj_41_value_setter(v);
                            v = this->numberobj_41_value;
                            number localvalue = v;
                        
                            if (this->numberobj_41_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("verb/Feedback~/Gate~/number_obj-44"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_41_output_set(localvalue);
                        }
                        
                        void loadmess_05_message_bang() {
                            list v = this->loadmess_05_message;
                        
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->numberobj_41_value_set(converted);
                            }
                        }
                        
                        void rampsmooth_tilde_01_down_set(number v) {
                            this->rampsmooth_tilde_01_down = v;
                        }
                        
                        void numberobj_43_output_set(number v) {
                            this->rampsmooth_tilde_01_down_set(v);
                        }
                        
                        void numberobj_43_value_set(number v) {
                            this->numberobj_43_value_setter(v);
                            v = this->numberobj_43_value;
                            number localvalue = v;
                        
                            if (this->numberobj_43_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("verb/Feedback~/Gate~/number_obj-25"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_43_output_set(localvalue);
                        }
                        
                        void mstosamps_03_out1_set(number v) {
                            this->numberobj_43_value_set(v);
                        }
                        
                        void mstosamps_03_ms_set(number ms) {
                            this->mstosamps_03_ms = ms;
                        
                            {
                                this->mstosamps_03_out1_set(ms * this->sr * 0.001);
                                return;
                            }
                        }
                        
                        void numberobj_42_output_set(number v) {
                            this->mstosamps_03_ms_set(v);
                        }
                        
                        void numberobj_42_value_set(number v) {
                            this->numberobj_42_value_setter(v);
                            v = this->numberobj_42_value;
                            number localvalue = v;
                        
                            if (this->numberobj_42_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("verb/Feedback~/Gate~/number_obj-22"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_42_output_set(localvalue);
                        }
                        
                        void loadmess_06_message_bang() {
                            list v = this->loadmess_06_message;
                        
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->numberobj_42_value_set(converted);
                            }
                        }
                        
                        void dspexpr_74_perform(const Sample * in1, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = rnbo_abs(in1[(Index)i]);//#map:_###_obj_###_:1
                            }
                        }
                        
                        void dspexpr_75_perform(const Sample * in1, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = rnbo_abs(in1[(Index)i]);//#map:_###_obj_###_:1
                            }
                        }
                        
                        void maximum_tilde_01_perform(const Sample * x, const Sample * y, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = (x[(Index)i] < y[(Index)i] ? y[(Index)i] : x[(Index)i]);
                            }
                        }
                        
                        void rampsmooth_tilde_01_perform(const Sample * x, number up, number down, SampleValue * out1, Index n) {
                            auto __rampsmooth_tilde_01_increment = this->rampsmooth_tilde_01_increment;
                            auto __rampsmooth_tilde_01_index = this->rampsmooth_tilde_01_index;
                            auto __rampsmooth_tilde_01_prev = this->rampsmooth_tilde_01_prev;
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                if (this->rampsmooth_tilde_01_d_next(x[(Index)i]) != 0.) {
                                    if (x[(Index)i] > __rampsmooth_tilde_01_prev) {
                                        number _up = up;
                        
                                        if (_up < 1)
                                            _up = 1;
                        
                                        __rampsmooth_tilde_01_index = _up;
                                        __rampsmooth_tilde_01_increment = (x[(Index)i] - __rampsmooth_tilde_01_prev) / _up;
                                    } else if (x[(Index)i] < __rampsmooth_tilde_01_prev) {
                                        number _down = down;
                        
                                        if (_down < 1)
                                            _down = 1;
                        
                                        __rampsmooth_tilde_01_index = _down;
                                        __rampsmooth_tilde_01_increment = (x[(Index)i] - __rampsmooth_tilde_01_prev) / _down;
                                    }
                                }
                        
                                if (__rampsmooth_tilde_01_index > 0) {
                                    __rampsmooth_tilde_01_prev += __rampsmooth_tilde_01_increment;
                                    __rampsmooth_tilde_01_index -= 1;
                                } else {
                                    __rampsmooth_tilde_01_prev = x[(Index)i];
                                }
                        
                                out1[(Index)i] = __rampsmooth_tilde_01_prev;
                            }
                        
                            this->rampsmooth_tilde_01_prev = __rampsmooth_tilde_01_prev;
                            this->rampsmooth_tilde_01_index = __rampsmooth_tilde_01_index;
                            this->rampsmooth_tilde_01_increment = __rampsmooth_tilde_01_increment;
                        }
                        
                        void ip_03_perform(SampleValue * out, Index n) {
                            auto __ip_03_lastValue = this->ip_03_lastValue;
                            auto __ip_03_lastIndex = this->ip_03_lastIndex;
                        
                            for (Index i = 0; i < n; i++) {
                                out[(Index)i] = ((SampleIndex)(i) >= __ip_03_lastIndex ? __ip_03_lastValue : this->ip_03_sigbuf[(Index)i]);
                            }
                        
                            __ip_03_lastIndex = 0;
                            this->ip_03_lastIndex = __ip_03_lastIndex;
                        }
                        
                        void dspexpr_77_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
                            }
                        }
                        
                        void dspexpr_76_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] - in2[(Index)i];//#map:_###_obj_###_:1
                            }
                        }
                        
                        void dspexpr_73_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] - in2[(Index)i];//#map:_###_obj_###_:1
                            }
                        }
                        
                        void dspexpr_72_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = (in2[(Index)i] == 0 ? 0 : (in2[(Index)i] == 0. ? 0. : in1[(Index)i] / in2[(Index)i]));//#map:_###_obj_###_:1
                            }
                        }
                        
                        void dspexpr_71_perform(const Sample * in1, number in2, number in3, SampleValue * out1, Index n) {
                            RNBO_UNUSED(in3);
                            RNBO_UNUSED(in2);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = (in1[(Index)i] > 1 ? 1 : (in1[(Index)i] < 0 ? 0 : in1[(Index)i]));//#map:_###_obj_###_:1
                            }
                        }
                        
                        void dspexpr_70_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                            RNBO_UNUSED(in2);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * 0.5;//#map:_###_obj_###_:1
                            }
                        }
                        
                        void hann_tilde_01_perform(const Sample * x, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                number __x = x[(Index)i];
                                __x = (__x > 1 ? 1 : (__x < 0 ? 0 : __x));
                                out1[(Index)i] = 0.5 * (1 - rnbo_cos(6.28318530717958647692 * __x));
                            }
                        }
                        
                        void dspexpr_69_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                            }
                        }
                        
                        void dspexpr_68_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                            }
                        }
                        
                        void numbertilde_04_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
                            auto __numbertilde_04_currentIntervalInSamples = this->numbertilde_04_currentIntervalInSamples;
                            auto __numbertilde_04_lastValue = this->numbertilde_04_lastValue;
                            auto __numbertilde_04_currentInterval = this->numbertilde_04_currentInterval;
                            auto __numbertilde_04_rampInSamples = this->numbertilde_04_rampInSamples;
                            auto __numbertilde_04_outValue = this->numbertilde_04_outValue;
                            auto __numbertilde_04_currentMode = this->numbertilde_04_currentMode;
                            number monitorvalue = input_signal[0];
                        
                            for (Index i = 0; i < n; i++) {
                                if (__numbertilde_04_currentMode == 0) {
                                    output[(Index)i] = this->numbertilde_04_smooth_next(
                                        __numbertilde_04_outValue,
                                        __numbertilde_04_rampInSamples,
                                        __numbertilde_04_rampInSamples
                                    );
                                } else {
                                    output[(Index)i] = input_signal[(Index)i];
                                }
                            }
                        
                            __numbertilde_04_currentInterval -= n;
                        
                            if (monitorvalue != __numbertilde_04_lastValue && __numbertilde_04_currentInterval <= 0) {
                                __numbertilde_04_currentInterval = __numbertilde_04_currentIntervalInSamples;
                        
                                this->getEngine()->scheduleClockEventWithValue(
                                    this,
                                    -1494586265,
                                    this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                                    monitorvalue
                                );;
                        
                                __numbertilde_04_lastValue = monitorvalue;
                        
                                this->getEngine()->sendListMessage(
                                    TAG("monitor"),
                                    TAG("verb/Feedback~/Gate~/number~_obj-12"),
                                    {monitorvalue},
                                    this->_currentTime
                                );;
                            }
                        
                            this->numbertilde_04_currentInterval = __numbertilde_04_currentInterval;
                            this->numbertilde_04_lastValue = __numbertilde_04_lastValue;
                        }
                        
                        void stackprotect_perform(Index n) {
                            RNBO_UNUSED(n);
                            auto __stackprotect_count = this->stackprotect_count;
                            __stackprotect_count = 0;
                            this->stackprotect_count = __stackprotect_count;
                        }
                        
                        void numberobj_36_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_36_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_36_value = localvalue;
                        }
                        
                        void numberobj_37_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_37_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_37_value = localvalue;
                        }
                        
                        void numberobj_38_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_38_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_38_value = localvalue;
                        }
                        
                        void numberobj_39_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_39_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_39_value = localvalue;
                        }
                        
                        void numberobj_40_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_40_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_40_value = localvalue;
                        }
                        
                        void numberobj_41_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_41_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_41_value = localvalue;
                        }
                        
                        void numberobj_42_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_42_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_42_value = localvalue;
                        }
                        
                        void numberobj_43_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_43_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_43_value = localvalue;
                        }
                        
                        void numberobj_36_init() {
                            this->numberobj_36_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("verb/Feedback~/Gate~/number_obj-58"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_36_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_36_value;
                        }
                        
                        void numberobj_36_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_36_value_set(preset["value"]);
                        }
                        
                        void numberobj_37_init() {
                            this->numberobj_37_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("verb/Feedback~/Gate~/number_obj-50"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_37_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_37_value;
                        }
                        
                        void numberobj_37_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_37_value_set(preset["value"]);
                        }
                        
                        number numbertilde_04_smooth_d_next(number x) {
                            number temp = (number)(x - this->numbertilde_04_smooth_d_prev);
                            this->numbertilde_04_smooth_d_prev = x;
                            return temp;
                        }
                        
                        void numbertilde_04_smooth_d_dspsetup() {
                            this->numbertilde_04_smooth_d_reset();
                        }
                        
                        void numbertilde_04_smooth_d_reset() {
                            this->numbertilde_04_smooth_d_prev = 0;
                        }
                        
                        number numbertilde_04_smooth_next(number x, number up, number down) {
                            if (this->numbertilde_04_smooth_d_next(x) != 0.) {
                                if (x > this->numbertilde_04_smooth_prev) {
                                    number _up = up;
                        
                                    if (_up < 1)
                                        _up = 1;
                        
                                    this->numbertilde_04_smooth_index = _up;
                                    this->numbertilde_04_smooth_increment = (x - this->numbertilde_04_smooth_prev) / _up;
                                } else if (x < this->numbertilde_04_smooth_prev) {
                                    number _down = down;
                        
                                    if (_down < 1)
                                        _down = 1;
                        
                                    this->numbertilde_04_smooth_index = _down;
                                    this->numbertilde_04_smooth_increment = (x - this->numbertilde_04_smooth_prev) / _down;
                                }
                            }
                        
                            if (this->numbertilde_04_smooth_index > 0) {
                                this->numbertilde_04_smooth_prev += this->numbertilde_04_smooth_increment;
                                this->numbertilde_04_smooth_index -= 1;
                            } else {
                                this->numbertilde_04_smooth_prev = x;
                            }
                        
                            return this->numbertilde_04_smooth_prev;
                        }
                        
                        void numbertilde_04_smooth_reset() {
                            this->numbertilde_04_smooth_prev = 0;
                            this->numbertilde_04_smooth_index = 0;
                            this->numbertilde_04_smooth_increment = 0;
                            this->numbertilde_04_smooth_d_reset();
                        }
                        
                        void numbertilde_04_init() {
                            this->numbertilde_04_currentMode = 1;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("verb/Feedback~/Gate~/number~_obj-12"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numbertilde_04_dspsetup(bool force) {
                            if ((bool)(this->numbertilde_04_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->numbertilde_04_currentIntervalInSamples = this->mstosamps(100);
                            this->numbertilde_04_currentInterval = this->numbertilde_04_currentIntervalInSamples;
                            this->numbertilde_04_rampInSamples = this->mstosamps(this->numbertilde_04_ramp);
                            this->numbertilde_04_setupDone = true;
                            this->numbertilde_04_smooth_d_dspsetup();
                        }
                        
                        number rampsmooth_tilde_01_d_next(number x) {
                            number temp = (number)(x - this->rampsmooth_tilde_01_d_prev);
                            this->rampsmooth_tilde_01_d_prev = x;
                            return temp;
                        }
                        
                        void rampsmooth_tilde_01_d_dspsetup() {
                            this->rampsmooth_tilde_01_d_reset();
                        }
                        
                        void rampsmooth_tilde_01_d_reset() {
                            this->rampsmooth_tilde_01_d_prev = 0;
                        }
                        
                        void rampsmooth_tilde_01_dspsetup(bool force) {
                            if ((bool)(this->rampsmooth_tilde_01_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->rampsmooth_tilde_01_setupDone = true;
                            this->rampsmooth_tilde_01_d_dspsetup();
                        }
                        
                        void ip_03_init() {
                            this->ip_03_lastValue = this->ip_03_value;
                        }
                        
                        void ip_03_fillSigBuf() {
                            if ((bool)(this->ip_03_sigbuf)) {
                                SampleIndex k = (SampleIndex)(this->sampleOffsetIntoNextAudioBuffer);
                        
                                if (k >= (SampleIndex)(this->vs))
                                    k = (SampleIndex)(this->vs) - 1;
                        
                                for (SampleIndex i = (SampleIndex)(this->ip_03_lastIndex); i < k; i++) {
                                    if (this->ip_03_resetCount > 0) {
                                        this->ip_03_sigbuf[(Index)i] = 1;
                                        this->ip_03_resetCount--;
                                    } else {
                                        this->ip_03_sigbuf[(Index)i] = this->ip_03_lastValue;
                                    }
                                }
                        
                                this->ip_03_lastIndex = k;
                            }
                        }
                        
                        void ip_03_dspsetup(bool force) {
                            if ((bool)(this->ip_03_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->ip_03_lastIndex = 0;
                            this->ip_03_setupDone = true;
                        }
                        
                        void numberobj_38_init() {
                            this->numberobj_38_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("verb/Feedback~/Gate~/number_obj-20"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_38_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_38_value;
                        }
                        
                        void numberobj_38_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_38_value_set(preset["value"]);
                        }
                        
                        void numberobj_39_init() {
                            this->numberobj_39_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("verb/Feedback~/Gate~/number_obj-31"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_39_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_39_value;
                        }
                        
                        void numberobj_39_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_39_value_set(preset["value"]);
                        }
                        
                        void numberobj_40_init() {
                            this->numberobj_40_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("verb/Feedback~/Gate~/number_obj-43"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_40_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_40_value;
                        }
                        
                        void numberobj_40_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_40_value_set(preset["value"]);
                        }
                        
                        void numberobj_41_init() {
                            this->numberobj_41_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("verb/Feedback~/Gate~/number_obj-44"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_41_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_41_value;
                        }
                        
                        void numberobj_41_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_41_value_set(preset["value"]);
                        }
                        
                        void numberobj_42_init() {
                            this->numberobj_42_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("verb/Feedback~/Gate~/number_obj-22"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_42_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_42_value;
                        }
                        
                        void numberobj_42_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_42_value_set(preset["value"]);
                        }
                        
                        void numberobj_43_init() {
                            this->numberobj_43_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("verb/Feedback~/Gate~/number_obj-25"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_43_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_43_value;
                        }
                        
                        void numberobj_43_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_43_value_set(preset["value"]);
                        }
                        
                        bool stackprotect_check() {
                            this->stackprotect_count++;
                        
                            if (this->stackprotect_count > 128) {
                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                return true;
                            }
                        
                            return false;
                        }
                        
                        void updateTime(MillisecondTime time) {
                            this->_currentTime = time;
                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                        
                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                        
                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                this->sampleOffsetIntoNextAudioBuffer = 0;
                        }
                        
                        void assign_defaults()
                        {
                            loadmess_03_message = { -24 };
                            numberobj_36_value = 0;
                            numberobj_36_value_setter(numberobj_36_value);
                            numberobj_37_value = 0;
                            numberobj_37_value_setter(numberobj_37_value);
                            expr_13_in1 = 0;
                            expr_13_out1 = 0;
                            dspexpr_68_in1 = 0;
                            dspexpr_68_in2 = 0;
                            dspexpr_69_in1 = 0;
                            dspexpr_69_in2 = 0;
                            numbertilde_04_input_number = 0;
                            numbertilde_04_ramp = 0;
                            dspexpr_70_in1 = 0;
                            dspexpr_70_in2 = 0.5;
                            hann_tilde_01_x = 0;
                            dspexpr_71_in1 = 0;
                            dspexpr_71_in2 = 0;
                            dspexpr_71_in3 = 1;
                            dspexpr_72_in1 = 0;
                            dspexpr_72_in2 = 0;
                            dspexpr_73_in1 = 0;
                            dspexpr_73_in2 = 0;
                            rampsmooth_tilde_01_x = 0;
                            rampsmooth_tilde_01_up = 0;
                            rampsmooth_tilde_01_down = 0;
                            maximum_tilde_01_x = 0;
                            maximum_tilde_01_y = 0;
                            dspexpr_74_in1 = 0;
                            dspexpr_75_in1 = 0;
                            dspexpr_76_in1 = 0;
                            dspexpr_76_in2 = 0;
                            ip_03_value = 0;
                            ip_03_impulse = 0;
                            dspexpr_77_in1 = 0;
                            dspexpr_77_in2 = 0.25;
                            numberobj_38_value = 0;
                            numberobj_38_value_setter(numberobj_38_value);
                            loadmess_04_message = { 250 };
                            numberobj_39_value = 0;
                            numberobj_39_value_setter(numberobj_39_value);
                            mstosamps_02_ms = 0;
                            loadmess_05_message = { -12 };
                            numberobj_40_value = 0;
                            numberobj_40_value_setter(numberobj_40_value);
                            numberobj_41_value = 0;
                            numberobj_41_value_setter(numberobj_41_value);
                            expr_14_in1 = 0;
                            expr_14_out1 = 0;
                            loadmess_06_message = { 5000 };
                            numberobj_42_value = 0;
                            numberobj_42_value_setter(numberobj_42_value);
                            numberobj_43_value = 0;
                            numberobj_43_value_setter(numberobj_43_value);
                            mstosamps_03_ms = 0;
                            _currentTime = 0;
                            audioProcessSampleCount = 0;
                            sampleOffsetIntoNextAudioBuffer = 0;
                            zeroBuffer = nullptr;
                            dummyBuffer = nullptr;
                            signals[0] = nullptr;
                            signals[1] = nullptr;
                            signals[2] = nullptr;
                            signals[3] = nullptr;
                            didAllocateSignals = 0;
                            vs = 0;
                            maxvs = 0;
                            sr = 44100;
                            invsr = 0.00002267573696;
                            numberobj_36_currentFormat = 6;
                            numberobj_36_lastValue = 0;
                            numberobj_37_currentFormat = 6;
                            numberobj_37_lastValue = 0;
                            numbertilde_04_currentInterval = 0;
                            numbertilde_04_currentIntervalInSamples = 0;
                            numbertilde_04_lastValue = 0;
                            numbertilde_04_outValue = 0;
                            numbertilde_04_rampInSamples = 0;
                            numbertilde_04_currentMode = 0;
                            numbertilde_04_smooth_d_prev = 0;
                            numbertilde_04_smooth_prev = 0;
                            numbertilde_04_smooth_index = 0;
                            numbertilde_04_smooth_increment = 0;
                            numbertilde_04_setupDone = false;
                            rampsmooth_tilde_01_prev = 0;
                            rampsmooth_tilde_01_index = 0;
                            rampsmooth_tilde_01_increment = 0;
                            rampsmooth_tilde_01_d_prev = 0;
                            rampsmooth_tilde_01_setupDone = false;
                            ip_03_lastIndex = 0;
                            ip_03_lastValue = 0;
                            ip_03_resetCount = 0;
                            ip_03_sigbuf = nullptr;
                            ip_03_setupDone = false;
                            numberobj_38_currentFormat = 6;
                            numberobj_38_lastValue = 0;
                            numberobj_39_currentFormat = 6;
                            numberobj_39_lastValue = 0;
                            numberobj_40_currentFormat = 6;
                            numberobj_40_lastValue = 0;
                            numberobj_41_currentFormat = 6;
                            numberobj_41_lastValue = 0;
                            numberobj_42_currentFormat = 6;
                            numberobj_42_lastValue = 0;
                            numberobj_43_currentFormat = 6;
                            numberobj_43_lastValue = 0;
                            stackprotect_count = 0;
                            _voiceIndex = 0;
                            _noteNumber = 0;
                            isMuted = 1;
                            parameterOffset = 0;
                        }
                        
                        // member variables
                        
                            list loadmess_03_message;
                            number numberobj_36_value;
                            number numberobj_37_value;
                            number expr_13_in1;
                            number expr_13_out1;
                            number dspexpr_68_in1;
                            number dspexpr_68_in2;
                            number dspexpr_69_in1;
                            number dspexpr_69_in2;
                            number numbertilde_04_input_number;
                            number numbertilde_04_ramp;
                            number dspexpr_70_in1;
                            number dspexpr_70_in2;
                            number hann_tilde_01_x;
                            number dspexpr_71_in1;
                            number dspexpr_71_in2;
                            number dspexpr_71_in3;
                            number dspexpr_72_in1;
                            number dspexpr_72_in2;
                            number dspexpr_73_in1;
                            number dspexpr_73_in2;
                            number rampsmooth_tilde_01_x;
                            number rampsmooth_tilde_01_up;
                            number rampsmooth_tilde_01_down;
                            number maximum_tilde_01_x;
                            number maximum_tilde_01_y;
                            number dspexpr_74_in1;
                            number dspexpr_75_in1;
                            number dspexpr_76_in1;
                            number dspexpr_76_in2;
                            number ip_03_value;
                            number ip_03_impulse;
                            number dspexpr_77_in1;
                            number dspexpr_77_in2;
                            number numberobj_38_value;
                            list loadmess_04_message;
                            number numberobj_39_value;
                            number mstosamps_02_ms;
                            list loadmess_05_message;
                            number numberobj_40_value;
                            number numberobj_41_value;
                            number expr_14_in1;
                            number expr_14_out1;
                            list loadmess_06_message;
                            number numberobj_42_value;
                            number numberobj_43_value;
                            number mstosamps_03_ms;
                            MillisecondTime _currentTime;
                            UInt64 audioProcessSampleCount;
                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                            signal zeroBuffer;
                            signal dummyBuffer;
                            SampleValue * signals[4];
                            bool didAllocateSignals;
                            Index vs;
                            Index maxvs;
                            number sr;
                            number invsr;
                            Int numberobj_36_currentFormat;
                            number numberobj_36_lastValue;
                            Int numberobj_37_currentFormat;
                            number numberobj_37_lastValue;
                            SampleIndex numbertilde_04_currentInterval;
                            SampleIndex numbertilde_04_currentIntervalInSamples;
                            number numbertilde_04_lastValue;
                            number numbertilde_04_outValue;
                            number numbertilde_04_rampInSamples;
                            Int numbertilde_04_currentMode;
                            number numbertilde_04_smooth_d_prev;
                            number numbertilde_04_smooth_prev;
                            number numbertilde_04_smooth_index;
                            number numbertilde_04_smooth_increment;
                            bool numbertilde_04_setupDone;
                            number rampsmooth_tilde_01_prev;
                            number rampsmooth_tilde_01_index;
                            number rampsmooth_tilde_01_increment;
                            number rampsmooth_tilde_01_d_prev;
                            bool rampsmooth_tilde_01_setupDone;
                            SampleIndex ip_03_lastIndex;
                            number ip_03_lastValue;
                            SampleIndex ip_03_resetCount;
                            signal ip_03_sigbuf;
                            bool ip_03_setupDone;
                            Int numberobj_38_currentFormat;
                            number numberobj_38_lastValue;
                            Int numberobj_39_currentFormat;
                            number numberobj_39_lastValue;
                            Int numberobj_40_currentFormat;
                            number numberobj_40_lastValue;
                            Int numberobj_41_currentFormat;
                            number numberobj_41_lastValue;
                            Int numberobj_42_currentFormat;
                            number numberobj_42_lastValue;
                            Int numberobj_43_currentFormat;
                            number numberobj_43_lastValue;
                            number stackprotect_count;
                            Index _voiceIndex;
                            Int _noteNumber;
                            Index isMuted;
                            ParameterIndex parameterOffset;
                        
            };
            
            RNBOSubpatcher_807()
            {
            }
            
            ~RNBOSubpatcher_807()
            {
                delete this->p_12;
            }
            
            virtual RNBOSubpatcher_812* getPatcher() const {
                return static_cast<RNBOSubpatcher_812 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
                getEngine()->flushClockEvents(this, -62043057, false);
            }
            
            Index voice() {
                return this->_voiceIndex;
            }
            
            number random(number low, number high) {
                number range = high - low;
                return globalrandom() * range + low;
            }
            
            SampleIndex currentsampletime() {
                return this->audioProcessSampleCount + this->sampleOffsetIntoNextAudioBuffer;
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            inline number safediv(number num, number denom) {
                return (denom == 0.0 ? 0.0 : num / denom);
            }
            
            number safepow(number base, number exponent) {
                return fixnan(rnbo_pow(base, exponent));
            }
            
            number scale(
                number x,
                number lowin,
                number hiin,
                number lowout,
                number highout,
                number pow
            ) {
                auto inscale = this->safediv(1., hiin - lowin);
                number outdiff = highout - lowout;
                number value = (x - lowin) * inscale;
            
                if (pow != 1) {
                    if (value > 0)
                        value = this->safepow(value, pow);
                    else
                        value = -this->safepow(-value, pow);
                }
            
                value = value * outdiff + lowout;
                return value;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                this->rand_tilde_01_perform(this->rand_tilde_01_frequency, this->signals[0], n);
                this->dspexpr_80_perform(this->signals[0], this->dspexpr_80_in2, this->signals[1], n);
                this->rand_tilde_02_perform(this->rand_tilde_02_frequency, this->signals[0], n);
                this->dspexpr_83_perform(this->signals[0], this->dspexpr_83_in2, this->signals[2], n);
                this->linetilde_14_perform(this->signals[0], n);
                this->dspexpr_82_perform(in2, this->signals[0], this->signals[3], n);
                this->onepole_tilde_10_perform(this->signals[3], this->onepole_tilde_10_freqInHz, this->signals[4], n);
                this->onepole_tilde_11_perform(this->signals[4], this->onepole_tilde_11_freqInHz, this->signals[3], n);
                this->dspexpr_81_perform(this->signals[4], this->signals[3], this->signals[5], n);
                this->freqshift_tilde_02_perform(this->signals[5], this->signals[2], this->signals[3], this->dummyBuffer, n);
                this->dspexpr_79_perform(in1, this->signals[0], this->signals[2], n);
                this->onepole_tilde_08_perform(this->signals[2], this->onepole_tilde_08_freqInHz, this->signals[0], n);
                this->onepole_tilde_09_perform(this->signals[0], this->onepole_tilde_09_freqInHz, this->signals[2], n);
                this->dspexpr_78_perform(this->signals[0], this->signals[2], this->signals[5], n);
                this->freqshift_tilde_01_perform(this->signals[5], this->signals[1], this->signals[2], this->dummyBuffer, n);
                this->p_12_perform(this->signals[2], this->signals[3], out1, out2, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 6; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->rand_tilde_01_dspsetup(forceDSPSetup);
                this->rand_tilde_02_dspsetup(forceDSPSetup);
                this->onepole_tilde_10_dspsetup(forceDSPSetup);
                this->onepole_tilde_11_dspsetup(forceDSPSetup);
                this->freqshift_tilde_02_dspsetup(forceDSPSetup);
                this->onepole_tilde_08_dspsetup(forceDSPSetup);
                this->onepole_tilde_09_dspsetup(forceDSPSetup);
                this->freqshift_tilde_01_dspsetup(forceDSPSetup);
                this->p_12->prepareToProcess(sampleRate, maxBlockSize, force);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {
                this->p_12 = new RNBOSubpatcher_799();
                this->p_12->setEngineAndPatcher(this->getEngine(), this);
                this->p_12->initialize();
                this->p_12->setParameterOffset(this->getParameterOffset(this->p_12));
            }
            
            void getPreset(PatcherStateInterface& preset) {
                this->p_12->getPreset(getSubState(getSubState(preset, "__sps"), "Gate~"));
            }
            
            void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                RNBO_UNUSED(v);
                this->updateTime(time);
            
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_12->getNumParameters())
                        this->p_12->setParameterValue(index, v, time);
            
                    break;
                    }
                }
            }
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_12->getNumParameters())
                        return this->p_12->getParameterValue(index);
            
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0 + this->p_12->getNumParameters();
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_12->getNumParameters())
                        return this->p_12->getParameterName(index);
            
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_12->getNumParameters())
                        return this->p_12->getParameterId(index);
            
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                {
                    switch (index) {
                    default:
                        {
                        index -= 0;
            
                        if (index < this->p_12->getNumParameters())
                            this->p_12->getParameterInfo(index, info);
            
                        break;
                        }
                    }
                }
            }
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                if (subpatcher == this->p_12)
                    return 0;
            
                return 0;
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_12->getNumParameters())
                        return this->p_12->convertToNormalizedParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_12->getNumParameters())
                        return this->p_12->convertFromNormalizedParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_12->getNumParameters())
                        return this->p_12->constrainParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
                RNBO_UNUSED(value);
                RNBO_UNUSED(hasValue);
                this->updateTime(time);
            
                switch (index) {
                case -62043057:
                    {
                    this->linetilde_14_target_bang();
                    break;
                    }
                }
            }
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("valin"):
                    {
                    if (TAG("verb/Feedback~/number_obj-42") == objectId)
                        this->numberobj_44_valin_set(payload);
            
                    if (TAG("verb/Feedback~/number_obj-16") == objectId)
                        this->numberobj_45_valin_set(payload);
            
                    if (TAG("verb/Feedback~/number_obj-47") == objectId)
                        this->numberobj_46_valin_set(payload);
            
                    if (TAG("verb/Feedback~/number_obj-40") == objectId)
                        this->numberobj_47_valin_set(payload);
            
                    if (TAG("verb/Feedback~/number_obj-34") == objectId)
                        this->numberobj_48_valin_set(payload);
            
                    break;
                    }
                case TAG("format"):
                    {
                    if (TAG("verb/Feedback~/number_obj-42") == objectId)
                        this->numberobj_44_format_set(payload);
            
                    if (TAG("verb/Feedback~/number_obj-16") == objectId)
                        this->numberobj_45_format_set(payload);
            
                    if (TAG("verb/Feedback~/number_obj-47") == objectId)
                        this->numberobj_46_format_set(payload);
            
                    if (TAG("verb/Feedback~/number_obj-40") == objectId)
                        this->numberobj_47_format_set(payload);
            
                    if (TAG("verb/Feedback~/number_obj-34") == objectId)
                        this->numberobj_48_format_set(payload);
            
                    break;
                    }
                }
            
                this->p_12->processNumMessage(tag, objectId, time, payload);
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                RNBO_UNUSED(objectId);
                this->updateTime(time);
                this->p_12->processListMessage(tag, objectId, time, payload);
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                RNBO_UNUSED(objectId);
                this->updateTime(time);
                this->p_12->processBangMessage(tag, objectId, time);
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("valout"):
                    {
                    return "valout";
                    }
                case TAG("verb/Feedback~/number_obj-42"):
                    {
                    return "verb/Feedback~/number_obj-42";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("verb/Feedback~/number_obj-16"):
                    {
                    return "verb/Feedback~/number_obj-16";
                    }
                case TAG("verb/Feedback~/number_obj-47"):
                    {
                    return "verb/Feedback~/number_obj-47";
                    }
                case TAG("verb/Feedback~/number_obj-40"):
                    {
                    return "verb/Feedback~/number_obj-40";
                    }
                case TAG("verb/Feedback~/number_obj-34"):
                    {
                    return "verb/Feedback~/number_obj-34";
                    }
                case TAG("valin"):
                    {
                    return "valin";
                    }
                case TAG("format"):
                    {
                    return "format";
                    }
                }
            
                auto subpatchResult_0 = this->p_12->resolveTag(tag);
            
                if (subpatchResult_0)
                    return subpatchResult_0;
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->p_12->processDataViewUpdate(index, time);
            }
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void numberobj_44_valin_set(number v) {
                this->numberobj_44_value_set(v);
            }
            
            void numberobj_44_format_set(number v) {
                this->numberobj_44_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void eventinlet_22_out1_bang_bang() {
                this->numberobj_45_value_bang();
            }
            
            void eventinlet_22_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_45_value_set(converted);
                }
            }
            
            void numberobj_45_valin_set(number v) {
                this->numberobj_45_value_set(v);
            }
            
            void numberobj_45_format_set(number v) {
                this->numberobj_45_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_46_valin_set(number v) {
                this->numberobj_46_value_set(v);
            }
            
            void numberobj_46_format_set(number v) {
                this->numberobj_46_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_47_valin_set(number v) {
                this->numberobj_47_value_set(v);
            }
            
            void numberobj_47_format_set(number v) {
                this->numberobj_47_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_48_valin_set(number v) {
                this->numberobj_48_value_set(v);
            }
            
            void numberobj_48_format_set(number v) {
                this->numberobj_48_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void linetilde_14_target_bang() {}
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 2;
            }
            
            Index getNumOutputChannels() const {
                return 2;
            }
            
            void initializeObjects() {
                this->rand_tilde_01_n_init();
                this->rand_tilde_01_init();
                this->rand_tilde_02_n_init();
                this->rand_tilde_02_init();
                this->numberobj_44_init();
                this->numberobj_45_init();
                this->numberobj_46_init();
                this->numberobj_47_init();
                this->numberobj_48_init();
                this->p_12->initializeObjects();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {
                this->updateTime(this->getEngine()->getCurrentTime());
                this->p_12->startup();
            }
            
            void allocateDataRefs() {
                this->p_12->allocateDataRefs();
            }
            
            void linetilde_14_time_set(number v) {
                this->linetilde_14_time = v;
            }
            
            void linetilde_14_segments_set(const list& v) {
                this->linetilde_14_segments = jsCreateListCopy(v);
            
                if ((bool)(v->length)) {
                    if (v->length == 1 && this->linetilde_14_time == 0) {
                        this->linetilde_14_activeRamps->length = 0;
                        this->linetilde_14_currentValue = v[0];
                    } else {
                        auto currentTime = this->currentsampletime();
                        number lastRampValue = this->linetilde_14_currentValue;
                        number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
            
                        for (Index i = 0; i < this->linetilde_14_activeRamps->length; i += 3) {
                            rampEnd = this->linetilde_14_activeRamps[(Index)(i + 2)];
            
                            if (rampEnd > currentTime) {
                                this->linetilde_14_activeRamps[(Index)(i + 2)] = currentTime;
                                number diff = rampEnd - currentTime;
                                number valueDiff = diff * this->linetilde_14_activeRamps[(Index)(i + 1)];
                                lastRampValue = this->linetilde_14_activeRamps[(Index)i] - valueDiff;
                                this->linetilde_14_activeRamps[(Index)i] = lastRampValue;
                                this->linetilde_14_activeRamps->length = i + 3;
                                rampEnd = currentTime;
                            } else {
                                lastRampValue = this->linetilde_14_activeRamps[(Index)i];
                            }
                        }
            
                        if (rampEnd < currentTime) {
                            this->linetilde_14_activeRamps->push(lastRampValue);
                            this->linetilde_14_activeRamps->push(0);
                            this->linetilde_14_activeRamps->push(currentTime);
                        }
            
                        number lastRampEnd = currentTime;
            
                        for (Index i = 0; i < v->length; i += 2) {
                            number destinationValue = v[(Index)i];
                            number inc = 0;
                            number rampTimeInSamples;
            
                            if (v->length > i + 1) {
                                rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
            
                                if ((bool)(this->linetilde_14_keepramp)) {
                                    this->linetilde_14_time_set(v[(Index)(i + 1)]);
                                }
                            } else {
                                rampTimeInSamples = this->mstosamps(this->linetilde_14_time);
                            }
            
                            if (rampTimeInSamples <= 0) {
                                rampTimeInSamples = 1;
                            }
            
                            inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                            lastRampEnd += rampTimeInSamples;
                            this->linetilde_14_activeRamps->push(destinationValue);
                            this->linetilde_14_activeRamps->push(inc);
                            this->linetilde_14_activeRamps->push(lastRampEnd);
                            lastRampValue = destinationValue;
                        }
                    }
                }
            }
            
            void numberobj_44_output_set(number v) {
                {
                    list converted = {v};
                    this->linetilde_14_segments_set(converted);
                }
            }
            
            void numberobj_44_value_set(number v) {
                this->numberobj_44_value_setter(v);
                v = this->numberobj_44_value;
                number localvalue = v;
            
                if (this->numberobj_44_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("verb/Feedback~/number_obj-42"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_44_output_set(localvalue);
            }
            
            void expr_15_out1_set(number v) {
                this->expr_15_out1 = v;
                this->numberobj_44_value_set(this->expr_15_out1);
            }
            
            void expr_15_in1_set(number in1) {
                this->expr_15_in1 = in1;
                this->expr_15_out1_set(this->expr_15_in1 * this->expr_15_in2);//#map:verb/Feedback~/*_obj-39:1
            }
            
            void expr_15_in2_set(number v) {
                this->expr_15_in2 = v;
                this->expr_15_in1_set(this->expr_15_in1);
            }
            
            void numberobj_47_output_set(number v) {
                this->expr_15_in2_set(v);
            }
            
            void numberobj_47_value_set(number v) {
                this->numberobj_47_value_setter(v);
                v = this->numberobj_47_value;
                number localvalue = v;
            
                if (this->numberobj_47_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("verb/Feedback~/number_obj-40"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_47_output_set(localvalue);
            }
            
            void scale_08_out_set(const list& v) {
                this->scale_08_out = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_47_value_set(converted);
                }
            }
            
            void scale_08_input_set(const list& v) {
                this->scale_08_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_08_inlow,
                        this->scale_08_inhigh,
                        this->scale_08_outlow,
                        this->scale_08_outhigh,
                        this->scale_08_power
                    ));
                }
            
                this->scale_08_out_set(tmp);
            }
            
            void numberobj_46_output_set(number v) {
                {
                    list converted = {v};
                    this->scale_08_input_set(converted);
                }
            }
            
            void numberobj_46_value_set(number v) {
                this->numberobj_46_value_setter(v);
                v = this->numberobj_46_value;
                number localvalue = v;
            
                if (this->numberobj_46_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("verb/Feedback~/number_obj-47"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_46_output_set(localvalue);
            }
            
            void split_01_out1_set(number v) {
                this->numberobj_46_value_set(v);
            }
            
            void trigger_01_out1_set(number v) {
                this->numberobj_47_value_set(v);
            }
            
            void trigger_01_input_number_set(number v) {
                RNBO_UNUSED(v);
                this->trigger_01_out1_set(1);
            }
            
            void split_01_out2_set(number v) {
                this->trigger_01_input_number_set(v);
            }
            
            void split_01_input_set(number v) {
                this->split_01_input = v;
            
                if (v >= this->split_01_min && v <= this->split_01_max)
                    this->split_01_out1_set(v);
                else
                    this->split_01_out2_set(v);
            }
            
            void expr_16_out1_set(number v) {
                this->expr_16_out1 = v;
                this->split_01_input_set(this->expr_16_out1);
            }
            
            void expr_16_in1_set(number in1) {
                this->expr_16_in1 = in1;
                this->expr_16_out1_set(rnbo_abs(this->expr_16_in1));//#map:verb/Feedback~/abs_obj-45:1
            }
            
            void numberobj_48_output_set(number v) {
                this->expr_16_in1_set(v);
            }
            
            void numberobj_48_value_set(number v) {
                this->numberobj_48_value_setter(v);
                v = this->numberobj_48_value;
                number localvalue = v;
            
                if (this->numberobj_48_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("verb/Feedback~/number_obj-34"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_48_output_set(localvalue);
            }
            
            void receive_01_output_number_set(number v) {
                this->receive_01_output_number = v;
                this->numberobj_48_value_set(v);
            }
            
            void scale_07_out_set(const list& v) {
                this->scale_07_out = jsCreateListCopy(v);
            
                {
                    if (v->length > 1)
                        this->expr_15_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_15_in1_set(converted);
                }
            }
            
            void scale_07_input_set(const list& v) {
                this->scale_07_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_07_inlow,
                        this->scale_07_inhigh,
                        this->scale_07_outlow,
                        this->scale_07_outhigh,
                        this->scale_07_power
                    ));
                }
            
                this->scale_07_out_set(tmp);
            }
            
            void numberobj_45_output_set(number v) {
                {
                    list converted = {v};
                    this->scale_07_input_set(converted);
                }
            }
            
            void numberobj_45_value_set(number v) {
                this->numberobj_45_value_setter(v);
                v = this->numberobj_45_value;
                number localvalue = v;
            
                if (this->numberobj_45_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("verb/Feedback~/number_obj-16"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_45_output_set(localvalue);
            }
            
            void eventinlet_22_out1_number_set(number v) {
                this->numberobj_45_value_set(v);
            }
            
            void numberobj_45_value_bang() {
                number v = this->numberobj_45_value;
                number localvalue = v;
            
                if (this->numberobj_45_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("verb/Feedback~/number_obj-16"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_45_output_set(localvalue);
            }
            
            void rand_tilde_01_perform(number frequency, SampleValue * out1, Index n) {
                RNBO_UNUSED(frequency);
                auto __rand_tilde_01_lastValue = this->rand_tilde_01_lastValue;
                auto __rand_tilde_01_oldTargetValue = this->rand_tilde_01_oldTargetValue;
                auto __rand_tilde_01_targetValue = this->rand_tilde_01_targetValue;
                number f = 1;
                Index i;
            
                for (i = 0; i < n; i++) {
                    number phasorValue = this->rand_tilde_01_p_next(f, -1);
            
                    if (this->rand_tilde_01_d_next(phasorValue) < 0) {
                        __rand_tilde_01_targetValue = this->rand_tilde_01_n_next();
                        __rand_tilde_01_oldTargetValue = __rand_tilde_01_lastValue;
                    }
            
                    __rand_tilde_01_lastValue = __rand_tilde_01_oldTargetValue + phasorValue * (__rand_tilde_01_targetValue - __rand_tilde_01_oldTargetValue);
                    out1[(Index)i] = __rand_tilde_01_lastValue;
                }
            
                this->rand_tilde_01_targetValue = __rand_tilde_01_targetValue;
                this->rand_tilde_01_oldTargetValue = __rand_tilde_01_oldTargetValue;
                this->rand_tilde_01_lastValue = __rand_tilde_01_lastValue;
            }
            
            void dspexpr_80_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 2;//#map:_###_obj_###_:1
                }
            }
            
            void rand_tilde_02_perform(number frequency, SampleValue * out1, Index n) {
                RNBO_UNUSED(frequency);
                auto __rand_tilde_02_lastValue = this->rand_tilde_02_lastValue;
                auto __rand_tilde_02_oldTargetValue = this->rand_tilde_02_oldTargetValue;
                auto __rand_tilde_02_targetValue = this->rand_tilde_02_targetValue;
                number f = 1;
                Index i;
            
                for (i = 0; i < n; i++) {
                    number phasorValue = this->rand_tilde_02_p_next(f, -1);
            
                    if (this->rand_tilde_02_d_next(phasorValue) < 0) {
                        __rand_tilde_02_targetValue = this->rand_tilde_02_n_next();
                        __rand_tilde_02_oldTargetValue = __rand_tilde_02_lastValue;
                    }
            
                    __rand_tilde_02_lastValue = __rand_tilde_02_oldTargetValue + phasorValue * (__rand_tilde_02_targetValue - __rand_tilde_02_oldTargetValue);
                    out1[(Index)i] = __rand_tilde_02_lastValue;
                }
            
                this->rand_tilde_02_targetValue = __rand_tilde_02_targetValue;
                this->rand_tilde_02_oldTargetValue = __rand_tilde_02_oldTargetValue;
                this->rand_tilde_02_lastValue = __rand_tilde_02_lastValue;
            }
            
            void dspexpr_83_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 2;//#map:_###_obj_###_:1
                }
            }
            
            void linetilde_14_perform(SampleValue * out, Index n) {
                auto __linetilde_14_time = this->linetilde_14_time;
                auto __linetilde_14_keepramp = this->linetilde_14_keepramp;
                auto __linetilde_14_currentValue = this->linetilde_14_currentValue;
                Index i = 0;
            
                if ((bool)(this->linetilde_14_activeRamps->length)) {
                    while ((bool)(this->linetilde_14_activeRamps->length) && i < n) {
                        number destinationValue = this->linetilde_14_activeRamps[0];
                        number inc = this->linetilde_14_activeRamps[1];
                        number rampTimeInSamples = this->linetilde_14_activeRamps[2] - this->audioProcessSampleCount - i;
                        number val = __linetilde_14_currentValue;
            
                        while (rampTimeInSamples > 0 && i < n) {
                            out[(Index)i] = val;
                            val += inc;
                            i++;
                            rampTimeInSamples--;
                        }
            
                        if (rampTimeInSamples <= 0) {
                            val = destinationValue;
                            this->linetilde_14_activeRamps->splice(0, 3);
            
                            if ((bool)(!(bool)(this->linetilde_14_activeRamps->length))) {
                                this->getEngine()->scheduleClockEventWithValue(
                                    this,
                                    -62043057,
                                    this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                                    0
                                );;
            
                                if ((bool)(!(bool)(__linetilde_14_keepramp))) {
                                    __linetilde_14_time = 0;
                                }
                            }
                        }
            
                        __linetilde_14_currentValue = val;
                    }
                }
            
                while (i < n) {
                    out[(Index)i] = __linetilde_14_currentValue;
                    i++;
                }
            
                this->linetilde_14_currentValue = __linetilde_14_currentValue;
                this->linetilde_14_time = __linetilde_14_time;
            }
            
            void dspexpr_82_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void onepole_tilde_10_perform(const Sample * x, number freqInHz, SampleValue * out1, Index n) {
                RNBO_UNUSED(freqInHz);
                auto __onepole_tilde_10_lastY = this->onepole_tilde_10_lastY;
                auto __onepole_tilde_10_b1 = this->onepole_tilde_10_b1;
                auto __onepole_tilde_10_a0 = this->onepole_tilde_10_a0;
                auto __onepole_tilde_10_needsUpdate = this->onepole_tilde_10_needsUpdate;
                auto __onepole_tilde_10_freq = this->onepole_tilde_10_freq;
                Index i;
            
                for (i = 0; i < n; i++) {
                    if (__onepole_tilde_10_freq != 5000 || (bool)(__onepole_tilde_10_needsUpdate)) {
                        __onepole_tilde_10_freq = 5000;
                        __onepole_tilde_10_a0 = 1 - rnbo_exp(-31415.926535897932 / this->sr);
                        __onepole_tilde_10_a0 = (__onepole_tilde_10_a0 > 0.99999 ? 0.99999 : (__onepole_tilde_10_a0 < 0.00001 ? 0.00001 : __onepole_tilde_10_a0));
                        __onepole_tilde_10_b1 = 1 - __onepole_tilde_10_a0;
                        __onepole_tilde_10_needsUpdate = false;
                    }
            
                    __onepole_tilde_10_lastY = __onepole_tilde_10_a0 * x[(Index)i] + __onepole_tilde_10_b1 * __onepole_tilde_10_lastY;
                    out1[(Index)i] = __onepole_tilde_10_lastY;
                }
            
                this->onepole_tilde_10_freq = __onepole_tilde_10_freq;
                this->onepole_tilde_10_needsUpdate = __onepole_tilde_10_needsUpdate;
                this->onepole_tilde_10_a0 = __onepole_tilde_10_a0;
                this->onepole_tilde_10_b1 = __onepole_tilde_10_b1;
                this->onepole_tilde_10_lastY = __onepole_tilde_10_lastY;
            }
            
            void onepole_tilde_11_perform(const Sample * x, number freqInHz, SampleValue * out1, Index n) {
                RNBO_UNUSED(freqInHz);
                auto __onepole_tilde_11_lastY = this->onepole_tilde_11_lastY;
                auto __onepole_tilde_11_b1 = this->onepole_tilde_11_b1;
                auto __onepole_tilde_11_a0 = this->onepole_tilde_11_a0;
                auto __onepole_tilde_11_needsUpdate = this->onepole_tilde_11_needsUpdate;
                auto __onepole_tilde_11_freq = this->onepole_tilde_11_freq;
                Index i;
            
                for (i = 0; i < n; i++) {
                    if (__onepole_tilde_11_freq != 100 || (bool)(__onepole_tilde_11_needsUpdate)) {
                        __onepole_tilde_11_freq = 100;
                        __onepole_tilde_11_a0 = 1 - rnbo_exp(-628.3185307179587 / this->sr);
                        __onepole_tilde_11_a0 = (__onepole_tilde_11_a0 > 0.99999 ? 0.99999 : (__onepole_tilde_11_a0 < 0.00001 ? 0.00001 : __onepole_tilde_11_a0));
                        __onepole_tilde_11_b1 = 1 - __onepole_tilde_11_a0;
                        __onepole_tilde_11_needsUpdate = false;
                    }
            
                    __onepole_tilde_11_lastY = __onepole_tilde_11_a0 * x[(Index)i] + __onepole_tilde_11_b1 * __onepole_tilde_11_lastY;
                    out1[(Index)i] = __onepole_tilde_11_lastY;
                }
            
                this->onepole_tilde_11_freq = __onepole_tilde_11_freq;
                this->onepole_tilde_11_needsUpdate = __onepole_tilde_11_needsUpdate;
                this->onepole_tilde_11_a0 = __onepole_tilde_11_a0;
                this->onepole_tilde_11_b1 = __onepole_tilde_11_b1;
                this->onepole_tilde_11_lastY = __onepole_tilde_11_lastY;
            }
            
            void dspexpr_81_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] - in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void freqshift_tilde_02_perform(
                const Sample * x,
                const Sample * frequency,
                SampleValue * out1,
                SampleValue * out2,
                Index n
            ) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    array<number, 2> realImag = this->freqshift_tilde_02_h_next(x[(Index)i]);
                    number phasorValue = this->freqshift_tilde_02_p_next(frequency[(Index)i], -1);
                    number complex1 = rnbo_cos((phasorValue + 0.25) * 6.28318530717958647692) * realImag[0];
                    number complex2 = rnbo_cos(phasorValue * 6.28318530717958647692) * realImag[1];
                    out1[(Index)i] = complex1 + complex2;
                    out2[(Index)i] = complex1 - complex2;
                }
            }
            
            void dspexpr_79_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void onepole_tilde_08_perform(const Sample * x, number freqInHz, SampleValue * out1, Index n) {
                RNBO_UNUSED(freqInHz);
                auto __onepole_tilde_08_lastY = this->onepole_tilde_08_lastY;
                auto __onepole_tilde_08_b1 = this->onepole_tilde_08_b1;
                auto __onepole_tilde_08_a0 = this->onepole_tilde_08_a0;
                auto __onepole_tilde_08_needsUpdate = this->onepole_tilde_08_needsUpdate;
                auto __onepole_tilde_08_freq = this->onepole_tilde_08_freq;
                Index i;
            
                for (i = 0; i < n; i++) {
                    if (__onepole_tilde_08_freq != 5000 || (bool)(__onepole_tilde_08_needsUpdate)) {
                        __onepole_tilde_08_freq = 5000;
                        __onepole_tilde_08_a0 = 1 - rnbo_exp(-31415.926535897932 / this->sr);
                        __onepole_tilde_08_a0 = (__onepole_tilde_08_a0 > 0.99999 ? 0.99999 : (__onepole_tilde_08_a0 < 0.00001 ? 0.00001 : __onepole_tilde_08_a0));
                        __onepole_tilde_08_b1 = 1 - __onepole_tilde_08_a0;
                        __onepole_tilde_08_needsUpdate = false;
                    }
            
                    __onepole_tilde_08_lastY = __onepole_tilde_08_a0 * x[(Index)i] + __onepole_tilde_08_b1 * __onepole_tilde_08_lastY;
                    out1[(Index)i] = __onepole_tilde_08_lastY;
                }
            
                this->onepole_tilde_08_freq = __onepole_tilde_08_freq;
                this->onepole_tilde_08_needsUpdate = __onepole_tilde_08_needsUpdate;
                this->onepole_tilde_08_a0 = __onepole_tilde_08_a0;
                this->onepole_tilde_08_b1 = __onepole_tilde_08_b1;
                this->onepole_tilde_08_lastY = __onepole_tilde_08_lastY;
            }
            
            void onepole_tilde_09_perform(const Sample * x, number freqInHz, SampleValue * out1, Index n) {
                RNBO_UNUSED(freqInHz);
                auto __onepole_tilde_09_lastY = this->onepole_tilde_09_lastY;
                auto __onepole_tilde_09_b1 = this->onepole_tilde_09_b1;
                auto __onepole_tilde_09_a0 = this->onepole_tilde_09_a0;
                auto __onepole_tilde_09_needsUpdate = this->onepole_tilde_09_needsUpdate;
                auto __onepole_tilde_09_freq = this->onepole_tilde_09_freq;
                Index i;
            
                for (i = 0; i < n; i++) {
                    if (__onepole_tilde_09_freq != 100 || (bool)(__onepole_tilde_09_needsUpdate)) {
                        __onepole_tilde_09_freq = 100;
                        __onepole_tilde_09_a0 = 1 - rnbo_exp(-628.3185307179587 / this->sr);
                        __onepole_tilde_09_a0 = (__onepole_tilde_09_a0 > 0.99999 ? 0.99999 : (__onepole_tilde_09_a0 < 0.00001 ? 0.00001 : __onepole_tilde_09_a0));
                        __onepole_tilde_09_b1 = 1 - __onepole_tilde_09_a0;
                        __onepole_tilde_09_needsUpdate = false;
                    }
            
                    __onepole_tilde_09_lastY = __onepole_tilde_09_a0 * x[(Index)i] + __onepole_tilde_09_b1 * __onepole_tilde_09_lastY;
                    out1[(Index)i] = __onepole_tilde_09_lastY;
                }
            
                this->onepole_tilde_09_freq = __onepole_tilde_09_freq;
                this->onepole_tilde_09_needsUpdate = __onepole_tilde_09_needsUpdate;
                this->onepole_tilde_09_a0 = __onepole_tilde_09_a0;
                this->onepole_tilde_09_b1 = __onepole_tilde_09_b1;
                this->onepole_tilde_09_lastY = __onepole_tilde_09_lastY;
            }
            
            void dspexpr_78_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] - in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void freqshift_tilde_01_perform(
                const Sample * x,
                const Sample * frequency,
                SampleValue * out1,
                SampleValue * out2,
                Index n
            ) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    array<number, 2> realImag = this->freqshift_tilde_01_h_next(x[(Index)i]);
                    number phasorValue = this->freqshift_tilde_01_p_next(frequency[(Index)i], -1);
                    number complex1 = rnbo_cos((phasorValue + 0.25) * 6.28318530717958647692) * realImag[0];
                    number complex2 = rnbo_cos(phasorValue * 6.28318530717958647692) * realImag[1];
                    out1[(Index)i] = complex1 + complex2;
                    out2[(Index)i] = complex1 - complex2;
                }
            }
            
            void p_12_perform(
                const SampleValue * in1,
                const SampleValue * in2,
                SampleValue * out1,
                SampleValue * out2,
                Index n
            ) {
                // subpatcher: Gate~
                ConstSampleArray<2> ins = {in1, in2};
            
                SampleArray<2> outs = {out1, out2};
                this->p_12->process(ins, 2, outs, 2, n);
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void numberobj_44_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_44_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_44_value = localvalue;
            }
            
            void numberobj_45_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_45_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_45_value = localvalue;
            }
            
            void numberobj_46_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_46_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_46_value = localvalue;
            }
            
            void numberobj_47_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_47_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_47_value = localvalue;
            }
            
            void numberobj_48_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_48_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_48_value = localvalue;
            }
            
            number freqshift_tilde_01_h_biquad1_next(number x, number a0, number a1, number a2, number b1, number b2) {
                RNBO_UNUSED(a2);
                number tmp = x * a0 + this->freqshift_tilde_01_h_biquad1_x1 * a1 + this->freqshift_tilde_01_h_biquad1_x2 * 1 - (this->freqshift_tilde_01_h_biquad1_y1 * b1 + this->freqshift_tilde_01_h_biquad1_y2 * b2);
                this->freqshift_tilde_01_h_biquad1_x2 = this->freqshift_tilde_01_h_biquad1_x1;
                this->freqshift_tilde_01_h_biquad1_x1 = x;
                this->freqshift_tilde_01_h_biquad1_y2 = this->freqshift_tilde_01_h_biquad1_y1;
                this->freqshift_tilde_01_h_biquad1_y1 = tmp;
                return tmp;
            }
            
            void freqshift_tilde_01_h_biquad1_clear() {
                this->freqshift_tilde_01_h_biquad1_reset();
            }
            
            void freqshift_tilde_01_h_biquad1_reset() {
                this->freqshift_tilde_01_h_biquad1_x1 = 0;
                this->freqshift_tilde_01_h_biquad1_x2 = 0;
                this->freqshift_tilde_01_h_biquad1_y1 = 0;
                this->freqshift_tilde_01_h_biquad1_y2 = 0;
            }
            
            void freqshift_tilde_01_h_biquad1_dspsetup() {
                this->freqshift_tilde_01_h_biquad1_reset();
            }
            
            number freqshift_tilde_01_h_biquad2_next(number x, number a0, number a1, number a2, number b1, number b2) {
                RNBO_UNUSED(a2);
                number tmp = x * a0 + this->freqshift_tilde_01_h_biquad2_x1 * a1 + this->freqshift_tilde_01_h_biquad2_x2 * 1 - (this->freqshift_tilde_01_h_biquad2_y1 * b1 + this->freqshift_tilde_01_h_biquad2_y2 * b2);
                this->freqshift_tilde_01_h_biquad2_x2 = this->freqshift_tilde_01_h_biquad2_x1;
                this->freqshift_tilde_01_h_biquad2_x1 = x;
                this->freqshift_tilde_01_h_biquad2_y2 = this->freqshift_tilde_01_h_biquad2_y1;
                this->freqshift_tilde_01_h_biquad2_y1 = tmp;
                return tmp;
            }
            
            void freqshift_tilde_01_h_biquad2_clear() {
                this->freqshift_tilde_01_h_biquad2_reset();
            }
            
            void freqshift_tilde_01_h_biquad2_reset() {
                this->freqshift_tilde_01_h_biquad2_x1 = 0;
                this->freqshift_tilde_01_h_biquad2_x2 = 0;
                this->freqshift_tilde_01_h_biquad2_y1 = 0;
                this->freqshift_tilde_01_h_biquad2_y2 = 0;
            }
            
            void freqshift_tilde_01_h_biquad2_dspsetup() {
                this->freqshift_tilde_01_h_biquad2_reset();
            }
            
            number freqshift_tilde_01_h_biquad3_next(number x, number a0, number a1, number a2, number b1, number b2) {
                RNBO_UNUSED(a2);
                number tmp = x * a0 + this->freqshift_tilde_01_h_biquad3_x1 * a1 + this->freqshift_tilde_01_h_biquad3_x2 * 1 - (this->freqshift_tilde_01_h_biquad3_y1 * b1 + this->freqshift_tilde_01_h_biquad3_y2 * b2);
                this->freqshift_tilde_01_h_biquad3_x2 = this->freqshift_tilde_01_h_biquad3_x1;
                this->freqshift_tilde_01_h_biquad3_x1 = x;
                this->freqshift_tilde_01_h_biquad3_y2 = this->freqshift_tilde_01_h_biquad3_y1;
                this->freqshift_tilde_01_h_biquad3_y1 = tmp;
                return tmp;
            }
            
            void freqshift_tilde_01_h_biquad3_clear() {
                this->freqshift_tilde_01_h_biquad3_reset();
            }
            
            void freqshift_tilde_01_h_biquad3_reset() {
                this->freqshift_tilde_01_h_biquad3_x1 = 0;
                this->freqshift_tilde_01_h_biquad3_x2 = 0;
                this->freqshift_tilde_01_h_biquad3_y1 = 0;
                this->freqshift_tilde_01_h_biquad3_y2 = 0;
            }
            
            void freqshift_tilde_01_h_biquad3_dspsetup() {
                this->freqshift_tilde_01_h_biquad3_reset();
            }
            
            number freqshift_tilde_01_h_biquad4_next(number x, number a0, number a1, number a2, number b1, number b2) {
                RNBO_UNUSED(a2);
                number tmp = x * a0 + this->freqshift_tilde_01_h_biquad4_x1 * a1 + this->freqshift_tilde_01_h_biquad4_x2 * 1 - (this->freqshift_tilde_01_h_biquad4_y1 * b1 + this->freqshift_tilde_01_h_biquad4_y2 * b2);
                this->freqshift_tilde_01_h_biquad4_x2 = this->freqshift_tilde_01_h_biquad4_x1;
                this->freqshift_tilde_01_h_biquad4_x1 = x;
                this->freqshift_tilde_01_h_biquad4_y2 = this->freqshift_tilde_01_h_biquad4_y1;
                this->freqshift_tilde_01_h_biquad4_y1 = tmp;
                return tmp;
            }
            
            void freqshift_tilde_01_h_biquad4_clear() {
                this->freqshift_tilde_01_h_biquad4_reset();
            }
            
            void freqshift_tilde_01_h_biquad4_reset() {
                this->freqshift_tilde_01_h_biquad4_x1 = 0;
                this->freqshift_tilde_01_h_biquad4_x2 = 0;
                this->freqshift_tilde_01_h_biquad4_y1 = 0;
                this->freqshift_tilde_01_h_biquad4_y2 = 0;
            }
            
            void freqshift_tilde_01_h_biquad4_dspsetup() {
                this->freqshift_tilde_01_h_biquad4_reset();
            }
            
            number freqshift_tilde_01_h_biquad5_next(number x, number a0, number a1, number a2, number b1, number b2) {
                RNBO_UNUSED(a2);
                number tmp = x * a0 + this->freqshift_tilde_01_h_biquad5_x1 * a1 + this->freqshift_tilde_01_h_biquad5_x2 * 1 - (this->freqshift_tilde_01_h_biquad5_y1 * b1 + this->freqshift_tilde_01_h_biquad5_y2 * b2);
                this->freqshift_tilde_01_h_biquad5_x2 = this->freqshift_tilde_01_h_biquad5_x1;
                this->freqshift_tilde_01_h_biquad5_x1 = x;
                this->freqshift_tilde_01_h_biquad5_y2 = this->freqshift_tilde_01_h_biquad5_y1;
                this->freqshift_tilde_01_h_biquad5_y1 = tmp;
                return tmp;
            }
            
            void freqshift_tilde_01_h_biquad5_clear() {
                this->freqshift_tilde_01_h_biquad5_reset();
            }
            
            void freqshift_tilde_01_h_biquad5_reset() {
                this->freqshift_tilde_01_h_biquad5_x1 = 0;
                this->freqshift_tilde_01_h_biquad5_x2 = 0;
                this->freqshift_tilde_01_h_biquad5_y1 = 0;
                this->freqshift_tilde_01_h_biquad5_y2 = 0;
            }
            
            void freqshift_tilde_01_h_biquad5_dspsetup() {
                this->freqshift_tilde_01_h_biquad5_reset();
            }
            
            number freqshift_tilde_01_h_biquad6_next(number x, number a0, number a1, number a2, number b1, number b2) {
                RNBO_UNUSED(a2);
                number tmp = x * a0 + this->freqshift_tilde_01_h_biquad6_x1 * a1 + this->freqshift_tilde_01_h_biquad6_x2 * 1 - (this->freqshift_tilde_01_h_biquad6_y1 * b1 + this->freqshift_tilde_01_h_biquad6_y2 * b2);
                this->freqshift_tilde_01_h_biquad6_x2 = this->freqshift_tilde_01_h_biquad6_x1;
                this->freqshift_tilde_01_h_biquad6_x1 = x;
                this->freqshift_tilde_01_h_biquad6_y2 = this->freqshift_tilde_01_h_biquad6_y1;
                this->freqshift_tilde_01_h_biquad6_y1 = tmp;
                return tmp;
            }
            
            void freqshift_tilde_01_h_biquad6_clear() {
                this->freqshift_tilde_01_h_biquad6_reset();
            }
            
            void freqshift_tilde_01_h_biquad6_reset() {
                this->freqshift_tilde_01_h_biquad6_x1 = 0;
                this->freqshift_tilde_01_h_biquad6_x2 = 0;
                this->freqshift_tilde_01_h_biquad6_y1 = 0;
                this->freqshift_tilde_01_h_biquad6_y2 = 0;
            }
            
            void freqshift_tilde_01_h_biquad6_dspsetup() {
                this->freqshift_tilde_01_h_biquad6_reset();
            }
            
            array<number, 2> freqshift_tilde_01_h_next(number x) {
                number C0 = 0.993392295379985;
                number C1 = -1.99338779183018;
                number C2 = 0.887299159297928;
                number C3 = -1.88514806717204;
                number C4 = 0.0536993765792374;
                number C5 = -0.75714576848209;
                number S0 = 0.9855313382235;
                number S1 = -1.98549972415061;
                number S2 = 0.786712815028413;
                number S3 = -1.77856079622493;
                number S4 = -0.217311176123061;
                number S5 = 0.055905451294768;
                number tmp1Real = this->freqshift_tilde_01_h_biquad1_next(x, C0, C1, 1.0, C1, C0);
                number tmp1Imag = this->freqshift_tilde_01_h_biquad2_next(x, S0, S1, 1.0, S1, S0);
                number tmp2Real = this->freqshift_tilde_01_h_biquad3_next(tmp1Real, C2, C3, 1.0, C3, C2);
                number tmp2Imag = this->freqshift_tilde_01_h_biquad4_next(tmp1Imag, S2, S3, 1.0, S3, S2);
            
                return {
                    this->freqshift_tilde_01_h_biquad5_next(tmp2Real, C4, C5, 1.0, C5, C4),
                    this->freqshift_tilde_01_h_biquad6_next(tmp2Imag, S4, S5, 1.0, S5, S4)
                };
            }
            
            void freqshift_tilde_01_h_clear() {
                this->freqshift_tilde_01_h_reset();
            }
            
            void freqshift_tilde_01_h_reset() {
                this->freqshift_tilde_01_h_biquad1_reset();
                this->freqshift_tilde_01_h_biquad2_reset();
                this->freqshift_tilde_01_h_biquad3_reset();
                this->freqshift_tilde_01_h_biquad4_reset();
                this->freqshift_tilde_01_h_biquad5_reset();
                this->freqshift_tilde_01_h_biquad6_reset();
            }
            
            void freqshift_tilde_01_h_dspsetup() {
                this->freqshift_tilde_01_h_reset();
            }
            
            number freqshift_tilde_01_p_next(number freq, number reset) {
                {
                    {
                        if (reset >= 0.)
                            this->freqshift_tilde_01_p_currentPhase = reset;
                    }
                }
            
                number pincr = freq * this->freqshift_tilde_01_p_conv;
            
                if (this->freqshift_tilde_01_p_currentPhase < 0.)
                    this->freqshift_tilde_01_p_currentPhase = 1. + this->freqshift_tilde_01_p_currentPhase;
            
                if (this->freqshift_tilde_01_p_currentPhase > 1.)
                    this->freqshift_tilde_01_p_currentPhase = this->freqshift_tilde_01_p_currentPhase - 1.;
            
                number tmp = this->freqshift_tilde_01_p_currentPhase;
                this->freqshift_tilde_01_p_currentPhase += pincr;
                return tmp;
            }
            
            void freqshift_tilde_01_p_reset() {
                this->freqshift_tilde_01_p_currentPhase = 0;
            }
            
            void freqshift_tilde_01_p_dspsetup() {
                this->freqshift_tilde_01_p_conv = (number)1 / this->sr;
            }
            
            void freqshift_tilde_01_dspsetup(bool force) {
                if ((bool)(this->freqshift_tilde_01_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->freqshift_tilde_01_setupDone = true;
                this->freqshift_tilde_01_h_biquad1_dspsetup();
                this->freqshift_tilde_01_h_biquad2_dspsetup();
                this->freqshift_tilde_01_h_biquad3_dspsetup();
                this->freqshift_tilde_01_h_biquad4_dspsetup();
                this->freqshift_tilde_01_h_biquad5_dspsetup();
                this->freqshift_tilde_01_h_biquad6_dspsetup();
                this->freqshift_tilde_01_h_dspsetup();
                this->freqshift_tilde_01_p_dspsetup();
            }
            
            void onepole_tilde_08_reset() {
                this->onepole_tilde_08_lastY = 0;
                this->onepole_tilde_08_a0 = 0;
                this->onepole_tilde_08_b1 = 0;
            }
            
            void onepole_tilde_08_dspsetup(bool force) {
                if ((bool)(this->onepole_tilde_08_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->onepole_tilde_08_needsUpdate = true;
                this->onepole_tilde_08_reset();
                this->onepole_tilde_08_setupDone = true;
            }
            
            void onepole_tilde_09_reset() {
                this->onepole_tilde_09_lastY = 0;
                this->onepole_tilde_09_a0 = 0;
                this->onepole_tilde_09_b1 = 0;
            }
            
            void onepole_tilde_09_dspsetup(bool force) {
                if ((bool)(this->onepole_tilde_09_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->onepole_tilde_09_needsUpdate = true;
                this->onepole_tilde_09_reset();
                this->onepole_tilde_09_setupDone = true;
            }
            
            number rand_tilde_01_p_next(number freq, number reset) {
                {
                    {
                        if (reset >= 0.)
                            this->rand_tilde_01_p_currentPhase = reset;
                    }
                }
            
                number pincr = freq * this->rand_tilde_01_p_conv;
            
                if (this->rand_tilde_01_p_currentPhase < 0.)
                    this->rand_tilde_01_p_currentPhase = 1. + this->rand_tilde_01_p_currentPhase;
            
                if (this->rand_tilde_01_p_currentPhase > 1.)
                    this->rand_tilde_01_p_currentPhase = this->rand_tilde_01_p_currentPhase - 1.;
            
                number tmp = this->rand_tilde_01_p_currentPhase;
                this->rand_tilde_01_p_currentPhase += pincr;
                return tmp;
            }
            
            void rand_tilde_01_p_reset() {
                this->rand_tilde_01_p_currentPhase = 0;
            }
            
            void rand_tilde_01_p_dspsetup() {
                this->rand_tilde_01_p_conv = (number)1 / this->sr;
            }
            
            void rand_tilde_01_n_reset() {
                xoshiro_reset(
                    systemticks() + this->voice() + this->random(0, 10000),
                    this->rand_tilde_01_n_state
                );
            }
            
            void rand_tilde_01_n_init() {
                this->rand_tilde_01_n_reset();
            }
            
            void rand_tilde_01_n_seed(number v) {
                xoshiro_reset(v, this->rand_tilde_01_n_state);
            }
            
            number rand_tilde_01_n_next() {
                return xoshiro_next(this->rand_tilde_01_n_state);
            }
            
            number rand_tilde_01_d_next(number x) {
                number temp = (number)(x - this->rand_tilde_01_d_prev);
                this->rand_tilde_01_d_prev = x;
                return temp;
            }
            
            void rand_tilde_01_d_dspsetup() {
                this->rand_tilde_01_d_reset();
            }
            
            void rand_tilde_01_d_reset() {
                this->rand_tilde_01_d_prev = 0;
            }
            
            void rand_tilde_01_init() {
                this->rand_tilde_01_targetValue = this->rand_tilde_01_n_next();
            }
            
            void rand_tilde_01_dspsetup(bool force) {
                if ((bool)(this->rand_tilde_01_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->rand_tilde_01_setupDone = true;
                this->rand_tilde_01_p_dspsetup();
                this->rand_tilde_01_d_dspsetup();
            }
            
            number freqshift_tilde_02_h_biquad1_next(number x, number a0, number a1, number a2, number b1, number b2) {
                RNBO_UNUSED(a2);
                number tmp = x * a0 + this->freqshift_tilde_02_h_biquad1_x1 * a1 + this->freqshift_tilde_02_h_biquad1_x2 * 1 - (this->freqshift_tilde_02_h_biquad1_y1 * b1 + this->freqshift_tilde_02_h_biquad1_y2 * b2);
                this->freqshift_tilde_02_h_biquad1_x2 = this->freqshift_tilde_02_h_biquad1_x1;
                this->freqshift_tilde_02_h_biquad1_x1 = x;
                this->freqshift_tilde_02_h_biquad1_y2 = this->freqshift_tilde_02_h_biquad1_y1;
                this->freqshift_tilde_02_h_biquad1_y1 = tmp;
                return tmp;
            }
            
            void freqshift_tilde_02_h_biquad1_clear() {
                this->freqshift_tilde_02_h_biquad1_reset();
            }
            
            void freqshift_tilde_02_h_biquad1_reset() {
                this->freqshift_tilde_02_h_biquad1_x1 = 0;
                this->freqshift_tilde_02_h_biquad1_x2 = 0;
                this->freqshift_tilde_02_h_biquad1_y1 = 0;
                this->freqshift_tilde_02_h_biquad1_y2 = 0;
            }
            
            void freqshift_tilde_02_h_biquad1_dspsetup() {
                this->freqshift_tilde_02_h_biquad1_reset();
            }
            
            number freqshift_tilde_02_h_biquad2_next(number x, number a0, number a1, number a2, number b1, number b2) {
                RNBO_UNUSED(a2);
                number tmp = x * a0 + this->freqshift_tilde_02_h_biquad2_x1 * a1 + this->freqshift_tilde_02_h_biquad2_x2 * 1 - (this->freqshift_tilde_02_h_biquad2_y1 * b1 + this->freqshift_tilde_02_h_biquad2_y2 * b2);
                this->freqshift_tilde_02_h_biquad2_x2 = this->freqshift_tilde_02_h_biquad2_x1;
                this->freqshift_tilde_02_h_biquad2_x1 = x;
                this->freqshift_tilde_02_h_biquad2_y2 = this->freqshift_tilde_02_h_biquad2_y1;
                this->freqshift_tilde_02_h_biquad2_y1 = tmp;
                return tmp;
            }
            
            void freqshift_tilde_02_h_biquad2_clear() {
                this->freqshift_tilde_02_h_biquad2_reset();
            }
            
            void freqshift_tilde_02_h_biquad2_reset() {
                this->freqshift_tilde_02_h_biquad2_x1 = 0;
                this->freqshift_tilde_02_h_biquad2_x2 = 0;
                this->freqshift_tilde_02_h_biquad2_y1 = 0;
                this->freqshift_tilde_02_h_biquad2_y2 = 0;
            }
            
            void freqshift_tilde_02_h_biquad2_dspsetup() {
                this->freqshift_tilde_02_h_biquad2_reset();
            }
            
            number freqshift_tilde_02_h_biquad3_next(number x, number a0, number a1, number a2, number b1, number b2) {
                RNBO_UNUSED(a2);
                number tmp = x * a0 + this->freqshift_tilde_02_h_biquad3_x1 * a1 + this->freqshift_tilde_02_h_biquad3_x2 * 1 - (this->freqshift_tilde_02_h_biquad3_y1 * b1 + this->freqshift_tilde_02_h_biquad3_y2 * b2);
                this->freqshift_tilde_02_h_biquad3_x2 = this->freqshift_tilde_02_h_biquad3_x1;
                this->freqshift_tilde_02_h_biquad3_x1 = x;
                this->freqshift_tilde_02_h_biquad3_y2 = this->freqshift_tilde_02_h_biquad3_y1;
                this->freqshift_tilde_02_h_biquad3_y1 = tmp;
                return tmp;
            }
            
            void freqshift_tilde_02_h_biquad3_clear() {
                this->freqshift_tilde_02_h_biquad3_reset();
            }
            
            void freqshift_tilde_02_h_biquad3_reset() {
                this->freqshift_tilde_02_h_biquad3_x1 = 0;
                this->freqshift_tilde_02_h_biquad3_x2 = 0;
                this->freqshift_tilde_02_h_biquad3_y1 = 0;
                this->freqshift_tilde_02_h_biquad3_y2 = 0;
            }
            
            void freqshift_tilde_02_h_biquad3_dspsetup() {
                this->freqshift_tilde_02_h_biquad3_reset();
            }
            
            number freqshift_tilde_02_h_biquad4_next(number x, number a0, number a1, number a2, number b1, number b2) {
                RNBO_UNUSED(a2);
                number tmp = x * a0 + this->freqshift_tilde_02_h_biquad4_x1 * a1 + this->freqshift_tilde_02_h_biquad4_x2 * 1 - (this->freqshift_tilde_02_h_biquad4_y1 * b1 + this->freqshift_tilde_02_h_biquad4_y2 * b2);
                this->freqshift_tilde_02_h_biquad4_x2 = this->freqshift_tilde_02_h_biquad4_x1;
                this->freqshift_tilde_02_h_biquad4_x1 = x;
                this->freqshift_tilde_02_h_biquad4_y2 = this->freqshift_tilde_02_h_biquad4_y1;
                this->freqshift_tilde_02_h_biquad4_y1 = tmp;
                return tmp;
            }
            
            void freqshift_tilde_02_h_biquad4_clear() {
                this->freqshift_tilde_02_h_biquad4_reset();
            }
            
            void freqshift_tilde_02_h_biquad4_reset() {
                this->freqshift_tilde_02_h_biquad4_x1 = 0;
                this->freqshift_tilde_02_h_biquad4_x2 = 0;
                this->freqshift_tilde_02_h_biquad4_y1 = 0;
                this->freqshift_tilde_02_h_biquad4_y2 = 0;
            }
            
            void freqshift_tilde_02_h_biquad4_dspsetup() {
                this->freqshift_tilde_02_h_biquad4_reset();
            }
            
            number freqshift_tilde_02_h_biquad5_next(number x, number a0, number a1, number a2, number b1, number b2) {
                RNBO_UNUSED(a2);
                number tmp = x * a0 + this->freqshift_tilde_02_h_biquad5_x1 * a1 + this->freqshift_tilde_02_h_biquad5_x2 * 1 - (this->freqshift_tilde_02_h_biquad5_y1 * b1 + this->freqshift_tilde_02_h_biquad5_y2 * b2);
                this->freqshift_tilde_02_h_biquad5_x2 = this->freqshift_tilde_02_h_biquad5_x1;
                this->freqshift_tilde_02_h_biquad5_x1 = x;
                this->freqshift_tilde_02_h_biquad5_y2 = this->freqshift_tilde_02_h_biquad5_y1;
                this->freqshift_tilde_02_h_biquad5_y1 = tmp;
                return tmp;
            }
            
            void freqshift_tilde_02_h_biquad5_clear() {
                this->freqshift_tilde_02_h_biquad5_reset();
            }
            
            void freqshift_tilde_02_h_biquad5_reset() {
                this->freqshift_tilde_02_h_biquad5_x1 = 0;
                this->freqshift_tilde_02_h_biquad5_x2 = 0;
                this->freqshift_tilde_02_h_biquad5_y1 = 0;
                this->freqshift_tilde_02_h_biquad5_y2 = 0;
            }
            
            void freqshift_tilde_02_h_biquad5_dspsetup() {
                this->freqshift_tilde_02_h_biquad5_reset();
            }
            
            number freqshift_tilde_02_h_biquad6_next(number x, number a0, number a1, number a2, number b1, number b2) {
                RNBO_UNUSED(a2);
                number tmp = x * a0 + this->freqshift_tilde_02_h_biquad6_x1 * a1 + this->freqshift_tilde_02_h_biquad6_x2 * 1 - (this->freqshift_tilde_02_h_biquad6_y1 * b1 + this->freqshift_tilde_02_h_biquad6_y2 * b2);
                this->freqshift_tilde_02_h_biquad6_x2 = this->freqshift_tilde_02_h_biquad6_x1;
                this->freqshift_tilde_02_h_biquad6_x1 = x;
                this->freqshift_tilde_02_h_biquad6_y2 = this->freqshift_tilde_02_h_biquad6_y1;
                this->freqshift_tilde_02_h_biquad6_y1 = tmp;
                return tmp;
            }
            
            void freqshift_tilde_02_h_biquad6_clear() {
                this->freqshift_tilde_02_h_biquad6_reset();
            }
            
            void freqshift_tilde_02_h_biquad6_reset() {
                this->freqshift_tilde_02_h_biquad6_x1 = 0;
                this->freqshift_tilde_02_h_biquad6_x2 = 0;
                this->freqshift_tilde_02_h_biquad6_y1 = 0;
                this->freqshift_tilde_02_h_biquad6_y2 = 0;
            }
            
            void freqshift_tilde_02_h_biquad6_dspsetup() {
                this->freqshift_tilde_02_h_biquad6_reset();
            }
            
            array<number, 2> freqshift_tilde_02_h_next(number x) {
                number C0 = 0.993392295379985;
                number C1 = -1.99338779183018;
                number C2 = 0.887299159297928;
                number C3 = -1.88514806717204;
                number C4 = 0.0536993765792374;
                number C5 = -0.75714576848209;
                number S0 = 0.9855313382235;
                number S1 = -1.98549972415061;
                number S2 = 0.786712815028413;
                number S3 = -1.77856079622493;
                number S4 = -0.217311176123061;
                number S5 = 0.055905451294768;
                number tmp1Real = this->freqshift_tilde_02_h_biquad1_next(x, C0, C1, 1.0, C1, C0);
                number tmp1Imag = this->freqshift_tilde_02_h_biquad2_next(x, S0, S1, 1.0, S1, S0);
                number tmp2Real = this->freqshift_tilde_02_h_biquad3_next(tmp1Real, C2, C3, 1.0, C3, C2);
                number tmp2Imag = this->freqshift_tilde_02_h_biquad4_next(tmp1Imag, S2, S3, 1.0, S3, S2);
            
                return {
                    this->freqshift_tilde_02_h_biquad5_next(tmp2Real, C4, C5, 1.0, C5, C4),
                    this->freqshift_tilde_02_h_biquad6_next(tmp2Imag, S4, S5, 1.0, S5, S4)
                };
            }
            
            void freqshift_tilde_02_h_clear() {
                this->freqshift_tilde_02_h_reset();
            }
            
            void freqshift_tilde_02_h_reset() {
                this->freqshift_tilde_02_h_biquad1_reset();
                this->freqshift_tilde_02_h_biquad2_reset();
                this->freqshift_tilde_02_h_biquad3_reset();
                this->freqshift_tilde_02_h_biquad4_reset();
                this->freqshift_tilde_02_h_biquad5_reset();
                this->freqshift_tilde_02_h_biquad6_reset();
            }
            
            void freqshift_tilde_02_h_dspsetup() {
                this->freqshift_tilde_02_h_reset();
            }
            
            number freqshift_tilde_02_p_next(number freq, number reset) {
                {
                    {
                        if (reset >= 0.)
                            this->freqshift_tilde_02_p_currentPhase = reset;
                    }
                }
            
                number pincr = freq * this->freqshift_tilde_02_p_conv;
            
                if (this->freqshift_tilde_02_p_currentPhase < 0.)
                    this->freqshift_tilde_02_p_currentPhase = 1. + this->freqshift_tilde_02_p_currentPhase;
            
                if (this->freqshift_tilde_02_p_currentPhase > 1.)
                    this->freqshift_tilde_02_p_currentPhase = this->freqshift_tilde_02_p_currentPhase - 1.;
            
                number tmp = this->freqshift_tilde_02_p_currentPhase;
                this->freqshift_tilde_02_p_currentPhase += pincr;
                return tmp;
            }
            
            void freqshift_tilde_02_p_reset() {
                this->freqshift_tilde_02_p_currentPhase = 0;
            }
            
            void freqshift_tilde_02_p_dspsetup() {
                this->freqshift_tilde_02_p_conv = (number)1 / this->sr;
            }
            
            void freqshift_tilde_02_dspsetup(bool force) {
                if ((bool)(this->freqshift_tilde_02_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->freqshift_tilde_02_setupDone = true;
                this->freqshift_tilde_02_h_biquad1_dspsetup();
                this->freqshift_tilde_02_h_biquad2_dspsetup();
                this->freqshift_tilde_02_h_biquad3_dspsetup();
                this->freqshift_tilde_02_h_biquad4_dspsetup();
                this->freqshift_tilde_02_h_biquad5_dspsetup();
                this->freqshift_tilde_02_h_biquad6_dspsetup();
                this->freqshift_tilde_02_h_dspsetup();
                this->freqshift_tilde_02_p_dspsetup();
            }
            
            void onepole_tilde_10_reset() {
                this->onepole_tilde_10_lastY = 0;
                this->onepole_tilde_10_a0 = 0;
                this->onepole_tilde_10_b1 = 0;
            }
            
            void onepole_tilde_10_dspsetup(bool force) {
                if ((bool)(this->onepole_tilde_10_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->onepole_tilde_10_needsUpdate = true;
                this->onepole_tilde_10_reset();
                this->onepole_tilde_10_setupDone = true;
            }
            
            void onepole_tilde_11_reset() {
                this->onepole_tilde_11_lastY = 0;
                this->onepole_tilde_11_a0 = 0;
                this->onepole_tilde_11_b1 = 0;
            }
            
            void onepole_tilde_11_dspsetup(bool force) {
                if ((bool)(this->onepole_tilde_11_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->onepole_tilde_11_needsUpdate = true;
                this->onepole_tilde_11_reset();
                this->onepole_tilde_11_setupDone = true;
            }
            
            number rand_tilde_02_p_next(number freq, number reset) {
                {
                    {
                        if (reset >= 0.)
                            this->rand_tilde_02_p_currentPhase = reset;
                    }
                }
            
                number pincr = freq * this->rand_tilde_02_p_conv;
            
                if (this->rand_tilde_02_p_currentPhase < 0.)
                    this->rand_tilde_02_p_currentPhase = 1. + this->rand_tilde_02_p_currentPhase;
            
                if (this->rand_tilde_02_p_currentPhase > 1.)
                    this->rand_tilde_02_p_currentPhase = this->rand_tilde_02_p_currentPhase - 1.;
            
                number tmp = this->rand_tilde_02_p_currentPhase;
                this->rand_tilde_02_p_currentPhase += pincr;
                return tmp;
            }
            
            void rand_tilde_02_p_reset() {
                this->rand_tilde_02_p_currentPhase = 0;
            }
            
            void rand_tilde_02_p_dspsetup() {
                this->rand_tilde_02_p_conv = (number)1 / this->sr;
            }
            
            void rand_tilde_02_n_reset() {
                xoshiro_reset(
                    systemticks() + this->voice() + this->random(0, 10000),
                    this->rand_tilde_02_n_state
                );
            }
            
            void rand_tilde_02_n_init() {
                this->rand_tilde_02_n_reset();
            }
            
            void rand_tilde_02_n_seed(number v) {
                xoshiro_reset(v, this->rand_tilde_02_n_state);
            }
            
            number rand_tilde_02_n_next() {
                return xoshiro_next(this->rand_tilde_02_n_state);
            }
            
            number rand_tilde_02_d_next(number x) {
                number temp = (number)(x - this->rand_tilde_02_d_prev);
                this->rand_tilde_02_d_prev = x;
                return temp;
            }
            
            void rand_tilde_02_d_dspsetup() {
                this->rand_tilde_02_d_reset();
            }
            
            void rand_tilde_02_d_reset() {
                this->rand_tilde_02_d_prev = 0;
            }
            
            void rand_tilde_02_init() {
                this->rand_tilde_02_targetValue = this->rand_tilde_02_n_next();
            }
            
            void rand_tilde_02_dspsetup(bool force) {
                if ((bool)(this->rand_tilde_02_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->rand_tilde_02_setupDone = true;
                this->rand_tilde_02_p_dspsetup();
                this->rand_tilde_02_d_dspsetup();
            }
            
            void numberobj_44_init() {
                this->numberobj_44_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/Feedback~/number_obj-42"), 1, this->_currentTime);
            }
            
            void numberobj_44_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_44_value;
            }
            
            void numberobj_44_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_44_value_set(preset["value"]);
            }
            
            void numberobj_45_init() {
                this->numberobj_45_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/Feedback~/number_obj-16"), 1, this->_currentTime);
            }
            
            void numberobj_45_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_45_value;
            }
            
            void numberobj_45_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_45_value_set(preset["value"]);
            }
            
            void numberobj_46_init() {
                this->numberobj_46_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/Feedback~/number_obj-47"), 1, this->_currentTime);
            }
            
            void numberobj_46_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_46_value;
            }
            
            void numberobj_46_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_46_value_set(preset["value"]);
            }
            
            void numberobj_47_init() {
                this->numberobj_47_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/Feedback~/number_obj-40"), 1, this->_currentTime);
            }
            
            void numberobj_47_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_47_value;
            }
            
            void numberobj_47_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_47_value_set(preset["value"]);
            }
            
            void numberobj_48_init() {
                this->numberobj_48_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/Feedback~/number_obj-34"), 1, this->_currentTime);
            }
            
            void numberobj_48_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_48_value;
            }
            
            void numberobj_48_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_48_value_set(preset["value"]);
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                p_12_target = 0;
                freqshift_tilde_01_x = 0;
                freqshift_tilde_01_frequency = 0;
                dspexpr_78_in1 = 0;
                dspexpr_78_in2 = 0;
                onepole_tilde_08_x = 0;
                onepole_tilde_08_freqInHz = 5000;
                dspexpr_79_in1 = 0;
                dspexpr_79_in2 = 0;
                onepole_tilde_09_x = 0;
                onepole_tilde_09_freqInHz = 100;
                rand_tilde_01_frequency = 1;
                dspexpr_80_in1 = 0;
                dspexpr_80_in2 = 2;
                freqshift_tilde_02_x = 0;
                freqshift_tilde_02_frequency = 0;
                dspexpr_81_in1 = 0;
                dspexpr_81_in2 = 0;
                onepole_tilde_10_x = 0;
                onepole_tilde_10_freqInHz = 5000;
                dspexpr_82_in1 = 0;
                dspexpr_82_in2 = 0;
                onepole_tilde_11_x = 0;
                onepole_tilde_11_freqInHz = 100;
                rand_tilde_02_frequency = 1;
                dspexpr_83_in1 = 0;
                dspexpr_83_in2 = 2;
                numberobj_44_value = 0;
                numberobj_44_value_setter(numberobj_44_value);
                expr_15_in1 = 0;
                expr_15_in2 = 1;
                expr_15_out1 = 0;
                numberobj_45_value = 0;
                numberobj_45_value_setter(numberobj_45_value);
                linetilde_14_time = 10;
                linetilde_14_keepramp = 1;
                scale_07_inlow = 0;
                scale_07_inhigh = 100;
                scale_07_outlow = 0;
                scale_07_outhigh = 0.7;
                scale_07_power = 1;
                numberobj_46_value = 0;
                numberobj_46_value_setter(numberobj_46_value);
                numberobj_47_value = 0;
                numberobj_47_value_setter(numberobj_47_value);
                scale_08_inlow = 0;
                scale_08_inhigh = 1;
                scale_08_outlow = 0.8;
                scale_08_outhigh = 1;
                scale_08_power = 1;
                expr_16_in1 = 0;
                expr_16_out1 = 0;
                split_01_input = 0;
                split_01_min = 0;
                split_01_max = 1;
                receive_01_output_number = 0;
                numberobj_48_value = 0;
                numberobj_48_value_setter(numberobj_48_value);
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                signals[1] = nullptr;
                signals[2] = nullptr;
                signals[3] = nullptr;
                signals[4] = nullptr;
                signals[5] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                freqshift_tilde_01_h_biquad1_x1 = 0;
                freqshift_tilde_01_h_biquad1_x2 = 0;
                freqshift_tilde_01_h_biquad1_y1 = 0;
                freqshift_tilde_01_h_biquad1_y2 = 0;
                freqshift_tilde_01_h_biquad2_x1 = 0;
                freqshift_tilde_01_h_biquad2_x2 = 0;
                freqshift_tilde_01_h_biquad2_y1 = 0;
                freqshift_tilde_01_h_biquad2_y2 = 0;
                freqshift_tilde_01_h_biquad3_x1 = 0;
                freqshift_tilde_01_h_biquad3_x2 = 0;
                freqshift_tilde_01_h_biquad3_y1 = 0;
                freqshift_tilde_01_h_biquad3_y2 = 0;
                freqshift_tilde_01_h_biquad4_x1 = 0;
                freqshift_tilde_01_h_biquad4_x2 = 0;
                freqshift_tilde_01_h_biquad4_y1 = 0;
                freqshift_tilde_01_h_biquad4_y2 = 0;
                freqshift_tilde_01_h_biquad5_x1 = 0;
                freqshift_tilde_01_h_biquad5_x2 = 0;
                freqshift_tilde_01_h_biquad5_y1 = 0;
                freqshift_tilde_01_h_biquad5_y2 = 0;
                freqshift_tilde_01_h_biquad6_x1 = 0;
                freqshift_tilde_01_h_biquad6_x2 = 0;
                freqshift_tilde_01_h_biquad6_y1 = 0;
                freqshift_tilde_01_h_biquad6_y2 = 0;
                freqshift_tilde_01_p_currentPhase = 0;
                freqshift_tilde_01_p_conv = 0;
                freqshift_tilde_01_setupDone = false;
                onepole_tilde_08_freq = 0;
                onepole_tilde_08_needsUpdate = false;
                onepole_tilde_08_lastY = 0;
                onepole_tilde_08_a0 = 0;
                onepole_tilde_08_b1 = 0;
                onepole_tilde_08_setupDone = false;
                onepole_tilde_09_freq = 0;
                onepole_tilde_09_needsUpdate = false;
                onepole_tilde_09_lastY = 0;
                onepole_tilde_09_a0 = 0;
                onepole_tilde_09_b1 = 0;
                onepole_tilde_09_setupDone = false;
                rand_tilde_01_lastValue = 0;
                rand_tilde_01_targetValue = 0;
                rand_tilde_01_oldTargetValue = 0;
                rand_tilde_01_p_currentPhase = 0;
                rand_tilde_01_p_conv = 0;
                rand_tilde_01_d_prev = 0;
                rand_tilde_01_setupDone = false;
                freqshift_tilde_02_h_biquad1_x1 = 0;
                freqshift_tilde_02_h_biquad1_x2 = 0;
                freqshift_tilde_02_h_biquad1_y1 = 0;
                freqshift_tilde_02_h_biquad1_y2 = 0;
                freqshift_tilde_02_h_biquad2_x1 = 0;
                freqshift_tilde_02_h_biquad2_x2 = 0;
                freqshift_tilde_02_h_biquad2_y1 = 0;
                freqshift_tilde_02_h_biquad2_y2 = 0;
                freqshift_tilde_02_h_biquad3_x1 = 0;
                freqshift_tilde_02_h_biquad3_x2 = 0;
                freqshift_tilde_02_h_biquad3_y1 = 0;
                freqshift_tilde_02_h_biquad3_y2 = 0;
                freqshift_tilde_02_h_biquad4_x1 = 0;
                freqshift_tilde_02_h_biquad4_x2 = 0;
                freqshift_tilde_02_h_biquad4_y1 = 0;
                freqshift_tilde_02_h_biquad4_y2 = 0;
                freqshift_tilde_02_h_biquad5_x1 = 0;
                freqshift_tilde_02_h_biquad5_x2 = 0;
                freqshift_tilde_02_h_biquad5_y1 = 0;
                freqshift_tilde_02_h_biquad5_y2 = 0;
                freqshift_tilde_02_h_biquad6_x1 = 0;
                freqshift_tilde_02_h_biquad6_x2 = 0;
                freqshift_tilde_02_h_biquad6_y1 = 0;
                freqshift_tilde_02_h_biquad6_y2 = 0;
                freqshift_tilde_02_p_currentPhase = 0;
                freqshift_tilde_02_p_conv = 0;
                freqshift_tilde_02_setupDone = false;
                onepole_tilde_10_freq = 0;
                onepole_tilde_10_needsUpdate = false;
                onepole_tilde_10_lastY = 0;
                onepole_tilde_10_a0 = 0;
                onepole_tilde_10_b1 = 0;
                onepole_tilde_10_setupDone = false;
                onepole_tilde_11_freq = 0;
                onepole_tilde_11_needsUpdate = false;
                onepole_tilde_11_lastY = 0;
                onepole_tilde_11_a0 = 0;
                onepole_tilde_11_b1 = 0;
                onepole_tilde_11_setupDone = false;
                rand_tilde_02_lastValue = 0;
                rand_tilde_02_targetValue = 0;
                rand_tilde_02_oldTargetValue = 0;
                rand_tilde_02_p_currentPhase = 0;
                rand_tilde_02_p_conv = 0;
                rand_tilde_02_d_prev = 0;
                rand_tilde_02_setupDone = false;
                numberobj_44_currentFormat = 6;
                numberobj_44_lastValue = 0;
                numberobj_45_currentFormat = 6;
                numberobj_45_lastValue = 0;
                linetilde_14_currentValue = 0;
                numberobj_46_currentFormat = 6;
                numberobj_46_lastValue = 0;
                numberobj_47_currentFormat = 6;
                numberobj_47_lastValue = 0;
                numberobj_48_currentFormat = 6;
                numberobj_48_lastValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number p_12_target;
                number freqshift_tilde_01_x;
                number freqshift_tilde_01_frequency;
                number dspexpr_78_in1;
                number dspexpr_78_in2;
                number onepole_tilde_08_x;
                number onepole_tilde_08_freqInHz;
                number dspexpr_79_in1;
                number dspexpr_79_in2;
                number onepole_tilde_09_x;
                number onepole_tilde_09_freqInHz;
                number rand_tilde_01_frequency;
                number dspexpr_80_in1;
                number dspexpr_80_in2;
                number freqshift_tilde_02_x;
                number freqshift_tilde_02_frequency;
                number dspexpr_81_in1;
                number dspexpr_81_in2;
                number onepole_tilde_10_x;
                number onepole_tilde_10_freqInHz;
                number dspexpr_82_in1;
                number dspexpr_82_in2;
                number onepole_tilde_11_x;
                number onepole_tilde_11_freqInHz;
                number rand_tilde_02_frequency;
                number dspexpr_83_in1;
                number dspexpr_83_in2;
                number numberobj_44_value;
                number expr_15_in1;
                number expr_15_in2;
                number expr_15_out1;
                number numberobj_45_value;
                list linetilde_14_segments;
                number linetilde_14_time;
                number linetilde_14_keepramp;
                list scale_07_input;
                number scale_07_inlow;
                number scale_07_inhigh;
                number scale_07_outlow;
                number scale_07_outhigh;
                number scale_07_power;
                list scale_07_out;
                number numberobj_46_value;
                number numberobj_47_value;
                list scale_08_input;
                number scale_08_inlow;
                number scale_08_inhigh;
                number scale_08_outlow;
                number scale_08_outhigh;
                number scale_08_power;
                list scale_08_out;
                number expr_16_in1;
                number expr_16_out1;
                number split_01_input;
                number split_01_min;
                number split_01_max;
                number receive_01_output_number;
                list receive_01_output_list;
                number numberobj_48_value;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[6];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number freqshift_tilde_01_h_biquad1_x1;
                number freqshift_tilde_01_h_biquad1_x2;
                number freqshift_tilde_01_h_biquad1_y1;
                number freqshift_tilde_01_h_biquad1_y2;
                number freqshift_tilde_01_h_biquad2_x1;
                number freqshift_tilde_01_h_biquad2_x2;
                number freqshift_tilde_01_h_biquad2_y1;
                number freqshift_tilde_01_h_biquad2_y2;
                number freqshift_tilde_01_h_biquad3_x1;
                number freqshift_tilde_01_h_biquad3_x2;
                number freqshift_tilde_01_h_biquad3_y1;
                number freqshift_tilde_01_h_biquad3_y2;
                number freqshift_tilde_01_h_biquad4_x1;
                number freqshift_tilde_01_h_biquad4_x2;
                number freqshift_tilde_01_h_biquad4_y1;
                number freqshift_tilde_01_h_biquad4_y2;
                number freqshift_tilde_01_h_biquad5_x1;
                number freqshift_tilde_01_h_biquad5_x2;
                number freqshift_tilde_01_h_biquad5_y1;
                number freqshift_tilde_01_h_biquad5_y2;
                number freqshift_tilde_01_h_biquad6_x1;
                number freqshift_tilde_01_h_biquad6_x2;
                number freqshift_tilde_01_h_biquad6_y1;
                number freqshift_tilde_01_h_biquad6_y2;
                number freqshift_tilde_01_p_currentPhase;
                number freqshift_tilde_01_p_conv;
                bool freqshift_tilde_01_setupDone;
                number onepole_tilde_08_freq;
                bool onepole_tilde_08_needsUpdate;
                number onepole_tilde_08_lastY;
                number onepole_tilde_08_a0;
                number onepole_tilde_08_b1;
                bool onepole_tilde_08_setupDone;
                number onepole_tilde_09_freq;
                bool onepole_tilde_09_needsUpdate;
                number onepole_tilde_09_lastY;
                number onepole_tilde_09_a0;
                number onepole_tilde_09_b1;
                bool onepole_tilde_09_setupDone;
                number rand_tilde_01_lastValue;
                number rand_tilde_01_targetValue;
                number rand_tilde_01_oldTargetValue;
                number rand_tilde_01_p_currentPhase;
                number rand_tilde_01_p_conv;
                UInt rand_tilde_01_n_state[4] = { };
                number rand_tilde_01_d_prev;
                bool rand_tilde_01_setupDone;
                number freqshift_tilde_02_h_biquad1_x1;
                number freqshift_tilde_02_h_biquad1_x2;
                number freqshift_tilde_02_h_biquad1_y1;
                number freqshift_tilde_02_h_biquad1_y2;
                number freqshift_tilde_02_h_biquad2_x1;
                number freqshift_tilde_02_h_biquad2_x2;
                number freqshift_tilde_02_h_biquad2_y1;
                number freqshift_tilde_02_h_biquad2_y2;
                number freqshift_tilde_02_h_biquad3_x1;
                number freqshift_tilde_02_h_biquad3_x2;
                number freqshift_tilde_02_h_biquad3_y1;
                number freqshift_tilde_02_h_biquad3_y2;
                number freqshift_tilde_02_h_biquad4_x1;
                number freqshift_tilde_02_h_biquad4_x2;
                number freqshift_tilde_02_h_biquad4_y1;
                number freqshift_tilde_02_h_biquad4_y2;
                number freqshift_tilde_02_h_biquad5_x1;
                number freqshift_tilde_02_h_biquad5_x2;
                number freqshift_tilde_02_h_biquad5_y1;
                number freqshift_tilde_02_h_biquad5_y2;
                number freqshift_tilde_02_h_biquad6_x1;
                number freqshift_tilde_02_h_biquad6_x2;
                number freqshift_tilde_02_h_biquad6_y1;
                number freqshift_tilde_02_h_biquad6_y2;
                number freqshift_tilde_02_p_currentPhase;
                number freqshift_tilde_02_p_conv;
                bool freqshift_tilde_02_setupDone;
                number onepole_tilde_10_freq;
                bool onepole_tilde_10_needsUpdate;
                number onepole_tilde_10_lastY;
                number onepole_tilde_10_a0;
                number onepole_tilde_10_b1;
                bool onepole_tilde_10_setupDone;
                number onepole_tilde_11_freq;
                bool onepole_tilde_11_needsUpdate;
                number onepole_tilde_11_lastY;
                number onepole_tilde_11_a0;
                number onepole_tilde_11_b1;
                bool onepole_tilde_11_setupDone;
                number rand_tilde_02_lastValue;
                number rand_tilde_02_targetValue;
                number rand_tilde_02_oldTargetValue;
                number rand_tilde_02_p_currentPhase;
                number rand_tilde_02_p_conv;
                UInt rand_tilde_02_n_state[4] = { };
                number rand_tilde_02_d_prev;
                bool rand_tilde_02_setupDone;
                Int numberobj_44_currentFormat;
                number numberobj_44_lastValue;
                Int numberobj_45_currentFormat;
                number numberobj_45_lastValue;
                list linetilde_14_activeRamps;
                number linetilde_14_currentValue;
                Int numberobj_46_currentFormat;
                number numberobj_46_lastValue;
                Int numberobj_47_currentFormat;
                number numberobj_47_lastValue;
                Int numberobj_48_currentFormat;
                number numberobj_48_lastValue;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
                RNBOSubpatcher_799* p_12;
            
    };
    
    class RNBOSubpatcher_808 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_812;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_808()
            {
            }
            
            ~RNBOSubpatcher_808()
            {
            }
            
            virtual RNBOSubpatcher_812* getPatcher() const {
                return static_cast<RNBOSubpatcher_812 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number linearinterp(number frac, number x, number y) {
                return x + (y - x) * frac;
            }
            
            inline number cubicinterp(number a, number w, number x, number y, number z) {
                number a1 = 1. + a;
                number aa = a * a1;
                number b = 1. - a;
                number b1 = 2. - a;
                number bb = b * b1;
                number fw = -.1666667 * bb * a;
                number fx = .5 * bb * a1;
                number fy = .5 * aa * b1;
                number fz = -.1666667 * aa * b;
                return w * fw + x * fx + y * fy + z * fz;
            }
            
            inline number fastcubicinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = z - y - w + x;
                number f1 = w - x - f0;
                number f2 = y - w;
                number f3 = x;
                return f0 * a * a2 + f1 * a2 + f2 * a + f3;
            }
            
            inline number splineinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
                number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
                number f2 = -0.5 * w + 0.5 * y;
                return f0 * a * a2 + f1 * a2 + f2 * a + x;
            }
            
            inline number spline6interp(number a, number y0, number y1, number y2, number y3, number y4, number y5) {
                number ym2py2 = y0 + y4;
                number ym1py1 = y1 + y3;
                number y2mym2 = y4 - y0;
                number y1mym1 = y3 - y1;
                number sixthym1py1 = (number)1 / (number)6.0 * ym1py1;
                number c0 = (number)1 / (number)120.0 * ym2py2 + (number)13 / (number)60.0 * ym1py1 + (number)11 / (number)20.0 * y2;
                number c1 = (number)1 / (number)24.0 * y2mym2 + (number)5 / (number)12.0 * y1mym1;
                number c2 = (number)1 / (number)12.0 * ym2py2 + sixthym1py1 - (number)1 / (number)2.0 * y2;
                number c3 = (number)1 / (number)12.0 * y2mym2 - (number)1 / (number)6.0 * y1mym1;
                number c4 = (number)1 / (number)24.0 * ym2py2 - sixthym1py1 + (number)1 / (number)4.0 * y2;
                number c5 = (number)1 / (number)120.0 * (y5 - y0) + (number)1 / (number)24.0 * (y1 - y4) + (number)1 / (number)12.0 * (y3 - y2);
                return ((((c5 * a + c4) * a + c3) * a + c2) * a + c1) * a + c0;
            }
            
            inline number cosT8(number r) {
                number t84 = 56.0;
                number t83 = 1680.0;
                number t82 = 20160.0;
                number t81 = 2.4801587302e-05;
                number t73 = 42.0;
                number t72 = 840.0;
                number t71 = 1.9841269841e-04;
            
                if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
                    number rr = r * r;
                    return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
                } else if (r > 0.0) {
                    r -= 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                } else {
                    r += 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                }
            }
            
            inline number cosineinterp(number frac, number x, number y) {
                number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
                return x * (1.0 - a2) + y * a2;
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            number samplerate() const {
                return this->sr;
            }
            
            Index vectorsize() const {
                return this->vs;
            }
            
            number maximum(number x, number y) {
                return (x < y ? y : x);
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                this->delaytilde_11_perform(this->delaytilde_11_delay, in1, out1, n);
                this->delaytilde_12_perform(this->delaytilde_12_delay, in2, out2, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->delaytilde_11_dspsetup(forceDSPSetup);
                this->delaytilde_12_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("valin"):
                    {
                    if (TAG("verb/Delay~/number_obj-112") == objectId)
                        this->numberobj_49_valin_set(payload);
            
                    if (TAG("verb/Delay~/number_obj-151") == objectId)
                        this->numberobj_50_valin_set(payload);
            
                    break;
                    }
                case TAG("format"):
                    {
                    if (TAG("verb/Delay~/number_obj-112") == objectId)
                        this->numberobj_49_format_set(payload);
            
                    if (TAG("verb/Delay~/number_obj-151") == objectId)
                        this->numberobj_50_format_set(payload);
            
                    break;
                    }
                }
            }
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("valout"):
                    {
                    return "valout";
                    }
                case TAG("verb/Delay~/number_obj-112"):
                    {
                    return "verb/Delay~/number_obj-112";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("verb/Delay~/number_obj-151"):
                    {
                    return "verb/Delay~/number_obj-151";
                    }
                case TAG("valin"):
                    {
                    return "valin";
                    }
                case TAG("format"):
                    {
                    return "format";
                    }
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                case 6:
                    {
                    return addressOf(this->delaytilde_11_del_bufferobj);
                    break;
                    }
                case 7:
                    {
                    return addressOf(this->delaytilde_12_del_bufferobj);
                    break;
                    }
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 2;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void zeroDataRef(DataRef& ref) {
                ref->setZero();
            }
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 6) {
                    this->delaytilde_11_del_buffer = new Float64Buffer(this->delaytilde_11_del_bufferobj);
                }
            
                if (index == 7) {
                    this->delaytilde_12_del_buffer = new Float64Buffer(this->delaytilde_12_del_bufferobj);
                }
            }
            
            void initialize() {
                this->delaytilde_11_del_bufferobj = initDataRef("delaytilde_11_del_bufferobj", true, nullptr, "buffer~");
                this->delaytilde_12_del_bufferobj = initDataRef("delaytilde_12_del_bufferobj", true, nullptr, "buffer~");
                this->assign_defaults();
                this->setState();
                this->delaytilde_11_del_bufferobj->setIndex(6);
                this->delaytilde_11_del_buffer = new Float64Buffer(this->delaytilde_11_del_bufferobj);
                this->delaytilde_12_del_bufferobj->setIndex(7);
                this->delaytilde_12_del_buffer = new Float64Buffer(this->delaytilde_12_del_bufferobj);
            }
            
            protected:
            
            void numberobj_49_valin_set(number v) {
                this->numberobj_49_value_set(v);
            }
            
            void numberobj_49_format_set(number v) {
                this->numberobj_49_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void eventinlet_23_out1_bang_bang() {
                this->numberobj_49_value_bang();
            }
            
            void eventinlet_23_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_49_value_set(converted);
                }
            }
            
            void numberobj_50_valin_set(number v) {
                this->numberobj_50_value_set(v);
            }
            
            void numberobj_50_format_set(number v) {
                this->numberobj_50_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 2;
            }
            
            Index getNumOutputChannels() const {
                return 2;
            }
            
            void initializeObjects() {
                this->delaytilde_11_del_init();
                this->delaytilde_12_del_init();
                this->numberobj_49_init();
                this->numberobj_50_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {
                this->delaytilde_11_del_buffer = this->delaytilde_11_del_buffer->allocateIfNeeded();
            
                if (this->delaytilde_11_del_bufferobj->hasRequestedSize()) {
                    if (this->delaytilde_11_del_bufferobj->wantsFill())
                        this->zeroDataRef(this->delaytilde_11_del_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(6);
                }
            
                this->delaytilde_12_del_buffer = this->delaytilde_12_del_buffer->allocateIfNeeded();
            
                if (this->delaytilde_12_del_bufferobj->hasRequestedSize()) {
                    if (this->delaytilde_12_del_bufferobj->wantsFill())
                        this->zeroDataRef(this->delaytilde_12_del_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(7);
                }
            }
            
            void delaytilde_12_delay_set(number v) {
                this->delaytilde_12_delay = v;
            }
            
            void delaytilde_11_delay_set(number v) {
                this->delaytilde_11_delay = v;
            }
            
            void numberobj_50_output_set(number v) {
                this->delaytilde_12_delay_set(v);
                this->delaytilde_11_delay_set(v);
            }
            
            void numberobj_50_value_set(number v) {
                this->numberobj_50_value_setter(v);
                v = this->numberobj_50_value;
                number localvalue = v;
            
                if (this->numberobj_50_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("verb/Delay~/number_obj-151"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_50_output_set(localvalue);
            }
            
            void mstosamps_04_out1_set(number v) {
                this->numberobj_50_value_set(v);
            }
            
            void mstosamps_04_ms_set(number ms) {
                this->mstosamps_04_ms = ms;
            
                {
                    this->mstosamps_04_out1_set(ms * this->sr * 0.001);
                    return;
                }
            }
            
            void numberobj_49_output_set(number v) {
                this->mstosamps_04_ms_set(v);
            }
            
            void numberobj_49_value_set(number v) {
                this->numberobj_49_value_setter(v);
                v = this->numberobj_49_value;
                number localvalue = v;
            
                if (this->numberobj_49_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("verb/Delay~/number_obj-112"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_49_output_set(localvalue);
            }
            
            void eventinlet_23_out1_number_set(number v) {
                this->numberobj_49_value_set(v);
            }
            
            void numberobj_49_value_bang() {
                number v = this->numberobj_49_value;
                number localvalue = v;
            
                if (this->numberobj_49_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("verb/Delay~/number_obj-112"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_49_output_set(localvalue);
            }
            
            void delaytilde_11_perform(number delay, const SampleValue * input, SampleValue * output, Index n) {
                auto __delaytilde_11_crossfadeDelay = this->delaytilde_11_crossfadeDelay;
                auto __delaytilde_11_rampInSamples = this->delaytilde_11_rampInSamples;
                auto __delaytilde_11_ramp = this->delaytilde_11_ramp;
                auto __delaytilde_11_lastDelay = this->delaytilde_11_lastDelay;
            
                for (Index i = 0; i < n; i++) {
                    if (__delaytilde_11_lastDelay == -1) {
                        __delaytilde_11_lastDelay = delay;
                    }
            
                    if (__delaytilde_11_ramp > 0) {
                        number factor = __delaytilde_11_ramp / __delaytilde_11_rampInSamples;
                        output[(Index)i] = this->delaytilde_11_del_read(__delaytilde_11_crossfadeDelay, 0) * factor + this->delaytilde_11_del_read(__delaytilde_11_lastDelay, 0) * (1. - factor);
                        __delaytilde_11_ramp--;
                    } else {
                        number effectiveDelay = delay;
            
                        if (effectiveDelay != __delaytilde_11_lastDelay) {
                            __delaytilde_11_ramp = __delaytilde_11_rampInSamples;
                            __delaytilde_11_crossfadeDelay = __delaytilde_11_lastDelay;
                            __delaytilde_11_lastDelay = effectiveDelay;
                            output[(Index)i] = this->delaytilde_11_del_read(__delaytilde_11_crossfadeDelay, 0);
                            __delaytilde_11_ramp--;
                        } else {
                            output[(Index)i] = this->delaytilde_11_del_read(effectiveDelay, 0);
                        }
                    }
            
                    this->delaytilde_11_del_write(input[(Index)i]);
                    this->delaytilde_11_del_step();
                }
            
                this->delaytilde_11_lastDelay = __delaytilde_11_lastDelay;
                this->delaytilde_11_ramp = __delaytilde_11_ramp;
                this->delaytilde_11_crossfadeDelay = __delaytilde_11_crossfadeDelay;
            }
            
            void delaytilde_12_perform(number delay, const SampleValue * input, SampleValue * output, Index n) {
                auto __delaytilde_12_crossfadeDelay = this->delaytilde_12_crossfadeDelay;
                auto __delaytilde_12_rampInSamples = this->delaytilde_12_rampInSamples;
                auto __delaytilde_12_ramp = this->delaytilde_12_ramp;
                auto __delaytilde_12_lastDelay = this->delaytilde_12_lastDelay;
            
                for (Index i = 0; i < n; i++) {
                    if (__delaytilde_12_lastDelay == -1) {
                        __delaytilde_12_lastDelay = delay;
                    }
            
                    if (__delaytilde_12_ramp > 0) {
                        number factor = __delaytilde_12_ramp / __delaytilde_12_rampInSamples;
                        output[(Index)i] = this->delaytilde_12_del_read(__delaytilde_12_crossfadeDelay, 0) * factor + this->delaytilde_12_del_read(__delaytilde_12_lastDelay, 0) * (1. - factor);
                        __delaytilde_12_ramp--;
                    } else {
                        number effectiveDelay = delay;
            
                        if (effectiveDelay != __delaytilde_12_lastDelay) {
                            __delaytilde_12_ramp = __delaytilde_12_rampInSamples;
                            __delaytilde_12_crossfadeDelay = __delaytilde_12_lastDelay;
                            __delaytilde_12_lastDelay = effectiveDelay;
                            output[(Index)i] = this->delaytilde_12_del_read(__delaytilde_12_crossfadeDelay, 0);
                            __delaytilde_12_ramp--;
                        } else {
                            output[(Index)i] = this->delaytilde_12_del_read(effectiveDelay, 0);
                        }
                    }
            
                    this->delaytilde_12_del_write(input[(Index)i]);
                    this->delaytilde_12_del_step();
                }
            
                this->delaytilde_12_lastDelay = __delaytilde_12_lastDelay;
                this->delaytilde_12_ramp = __delaytilde_12_ramp;
                this->delaytilde_12_crossfadeDelay = __delaytilde_12_crossfadeDelay;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void numberobj_49_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_49_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_49_value = localvalue;
            }
            
            void numberobj_50_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_50_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_50_value = localvalue;
            }
            
            void delaytilde_11_del_step() {
                this->delaytilde_11_del_reader++;
            
                if (this->delaytilde_11_del_reader >= (int)(this->delaytilde_11_del_buffer->getSize()))
                    this->delaytilde_11_del_reader = 0;
            }
            
            number delaytilde_11_del_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->delaytilde_11_del_buffer->getSize()) + this->delaytilde_11_del_reader - ((size > this->delaytilde_11_del__maxdelay ? this->delaytilde_11_del__maxdelay : (size < (this->delaytilde_11_del_reader != this->delaytilde_11_del_writer) ? this->delaytilde_11_del_reader != this->delaytilde_11_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->delaytilde_11_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_11_del_wrap))
                    ), this->delaytilde_11_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_11_del_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->delaytilde_11_del_buffer->getSize()) + this->delaytilde_11_del_reader - ((size > this->delaytilde_11_del__maxdelay ? this->delaytilde_11_del__maxdelay : (size < (1 + this->delaytilde_11_del_reader != this->delaytilde_11_del_writer) ? 1 + this->delaytilde_11_del_reader != this->delaytilde_11_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->delaytilde_11_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_11_del_wrap))
                    ), this->delaytilde_11_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_11_del_wrap))
                    ), this->delaytilde_11_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_11_del_wrap))
                    ), this->delaytilde_11_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_11_del_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->delaytilde_11_del_buffer->getSize()) + this->delaytilde_11_del_reader - ((size > this->delaytilde_11_del__maxdelay ? this->delaytilde_11_del__maxdelay : (size < (1 + this->delaytilde_11_del_reader != this->delaytilde_11_del_writer) ? 1 + this->delaytilde_11_del_reader != this->delaytilde_11_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->delaytilde_11_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_11_del_wrap))
                    ), this->delaytilde_11_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_11_del_wrap))
                    ), this->delaytilde_11_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_11_del_wrap))
                    ), this->delaytilde_11_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_11_del_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->delaytilde_11_del_buffer->getSize()) + this->delaytilde_11_del_reader - ((size > this->delaytilde_11_del__maxdelay ? this->delaytilde_11_del__maxdelay : (size < (1 + this->delaytilde_11_del_reader != this->delaytilde_11_del_writer) ? 1 + this->delaytilde_11_del_reader != this->delaytilde_11_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->delaytilde_11_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_11_del_wrap))
                    ), this->delaytilde_11_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_11_del_wrap))
                    ), this->delaytilde_11_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_11_del_wrap))
                    ), this->delaytilde_11_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_11_del_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->delaytilde_11_del_buffer->getSize()) + this->delaytilde_11_del_reader - ((size > this->delaytilde_11_del__maxdelay ? this->delaytilde_11_del__maxdelay : (size < (1 + this->delaytilde_11_del_reader != this->delaytilde_11_del_writer) ? 1 + this->delaytilde_11_del_reader != this->delaytilde_11_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->delaytilde_11_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_11_del_wrap))
                    ), this->delaytilde_11_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_11_del_wrap))
                    ), this->delaytilde_11_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_11_del_wrap))
                    ), this->delaytilde_11_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_11_del_wrap))
                    ), this->delaytilde_11_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->delaytilde_11_del_wrap))
                    ), this->delaytilde_11_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->delaytilde_11_del_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->delaytilde_11_del_buffer->getSize()) + this->delaytilde_11_del_reader - ((size > this->delaytilde_11_del__maxdelay ? this->delaytilde_11_del__maxdelay : (size < (this->delaytilde_11_del_reader != this->delaytilde_11_del_writer) ? this->delaytilde_11_del_reader != this->delaytilde_11_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->delaytilde_11_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_11_del_wrap))
                    ), this->delaytilde_11_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_11_del_wrap))
                    ));
                }
            
                number r = (int)(this->delaytilde_11_del_buffer->getSize()) + this->delaytilde_11_del_reader - ((size > this->delaytilde_11_del__maxdelay ? this->delaytilde_11_del__maxdelay : (size < (this->delaytilde_11_del_reader != this->delaytilde_11_del_writer) ? this->delaytilde_11_del_reader != this->delaytilde_11_del_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->delaytilde_11_del_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_11_del_wrap))
                );
            }
            
            void delaytilde_11_del_write(number v) {
                this->delaytilde_11_del_writer = this->delaytilde_11_del_reader;
                this->delaytilde_11_del_buffer[(Index)this->delaytilde_11_del_writer] = v;
            }
            
            number delaytilde_11_del_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->delaytilde_11_del__maxdelay : size);
                number val = this->delaytilde_11_del_read(effectiveSize, 0);
                this->delaytilde_11_del_write(v);
                this->delaytilde_11_del_step();
                return val;
            }
            
            array<Index, 2> delaytilde_11_del_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->delaytilde_11_del_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->delaytilde_11_del_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void delaytilde_11_del_init() {
                auto result = this->delaytilde_11_del_calcSizeInSamples();
                this->delaytilde_11_del__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->delaytilde_11_del_buffer->requestSize(requestedSizeInSamples, 1);
                this->delaytilde_11_del_wrap = requestedSizeInSamples - 1;
            }
            
            void delaytilde_11_del_clear() {
                this->delaytilde_11_del_buffer->setZero();
            }
            
            void delaytilde_11_del_reset() {
                auto result = this->delaytilde_11_del_calcSizeInSamples();
                this->delaytilde_11_del__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->delaytilde_11_del_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->delaytilde_11_del_buffer);
                this->delaytilde_11_del_wrap = this->delaytilde_11_del_buffer->getSize() - 1;
                this->delaytilde_11_del_clear();
            
                if (this->delaytilde_11_del_reader >= this->delaytilde_11_del__maxdelay || this->delaytilde_11_del_writer >= this->delaytilde_11_del__maxdelay) {
                    this->delaytilde_11_del_reader = 0;
                    this->delaytilde_11_del_writer = 0;
                }
            }
            
            void delaytilde_11_del_dspsetup() {
                this->delaytilde_11_del_reset();
            }
            
            number delaytilde_11_del_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                return samplerate;
            }
            
            number delaytilde_11_del_size() {
                return this->delaytilde_11_del__maxdelay;
            }
            
            void delaytilde_11_dspsetup(bool force) {
                if ((bool)(this->delaytilde_11_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->delaytilde_11_rampInSamples = (long)(this->mstosamps(50));
                this->delaytilde_11_lastDelay = -1;
                this->delaytilde_11_setupDone = true;
                this->delaytilde_11_del_dspsetup();
            }
            
            void delaytilde_12_del_step() {
                this->delaytilde_12_del_reader++;
            
                if (this->delaytilde_12_del_reader >= (int)(this->delaytilde_12_del_buffer->getSize()))
                    this->delaytilde_12_del_reader = 0;
            }
            
            number delaytilde_12_del_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->delaytilde_12_del_buffer->getSize()) + this->delaytilde_12_del_reader - ((size > this->delaytilde_12_del__maxdelay ? this->delaytilde_12_del__maxdelay : (size < (this->delaytilde_12_del_reader != this->delaytilde_12_del_writer) ? this->delaytilde_12_del_reader != this->delaytilde_12_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->delaytilde_12_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_12_del_wrap))
                    ), this->delaytilde_12_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_12_del_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->delaytilde_12_del_buffer->getSize()) + this->delaytilde_12_del_reader - ((size > this->delaytilde_12_del__maxdelay ? this->delaytilde_12_del__maxdelay : (size < (1 + this->delaytilde_12_del_reader != this->delaytilde_12_del_writer) ? 1 + this->delaytilde_12_del_reader != this->delaytilde_12_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->delaytilde_12_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_12_del_wrap))
                    ), this->delaytilde_12_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_12_del_wrap))
                    ), this->delaytilde_12_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_12_del_wrap))
                    ), this->delaytilde_12_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_12_del_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->delaytilde_12_del_buffer->getSize()) + this->delaytilde_12_del_reader - ((size > this->delaytilde_12_del__maxdelay ? this->delaytilde_12_del__maxdelay : (size < (1 + this->delaytilde_12_del_reader != this->delaytilde_12_del_writer) ? 1 + this->delaytilde_12_del_reader != this->delaytilde_12_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->delaytilde_12_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_12_del_wrap))
                    ), this->delaytilde_12_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_12_del_wrap))
                    ), this->delaytilde_12_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_12_del_wrap))
                    ), this->delaytilde_12_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_12_del_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->delaytilde_12_del_buffer->getSize()) + this->delaytilde_12_del_reader - ((size > this->delaytilde_12_del__maxdelay ? this->delaytilde_12_del__maxdelay : (size < (1 + this->delaytilde_12_del_reader != this->delaytilde_12_del_writer) ? 1 + this->delaytilde_12_del_reader != this->delaytilde_12_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->delaytilde_12_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_12_del_wrap))
                    ), this->delaytilde_12_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_12_del_wrap))
                    ), this->delaytilde_12_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_12_del_wrap))
                    ), this->delaytilde_12_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_12_del_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->delaytilde_12_del_buffer->getSize()) + this->delaytilde_12_del_reader - ((size > this->delaytilde_12_del__maxdelay ? this->delaytilde_12_del__maxdelay : (size < (1 + this->delaytilde_12_del_reader != this->delaytilde_12_del_writer) ? 1 + this->delaytilde_12_del_reader != this->delaytilde_12_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->delaytilde_12_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_12_del_wrap))
                    ), this->delaytilde_12_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_12_del_wrap))
                    ), this->delaytilde_12_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_12_del_wrap))
                    ), this->delaytilde_12_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_12_del_wrap))
                    ), this->delaytilde_12_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->delaytilde_12_del_wrap))
                    ), this->delaytilde_12_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->delaytilde_12_del_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->delaytilde_12_del_buffer->getSize()) + this->delaytilde_12_del_reader - ((size > this->delaytilde_12_del__maxdelay ? this->delaytilde_12_del__maxdelay : (size < (this->delaytilde_12_del_reader != this->delaytilde_12_del_writer) ? this->delaytilde_12_del_reader != this->delaytilde_12_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->delaytilde_12_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_12_del_wrap))
                    ), this->delaytilde_12_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_12_del_wrap))
                    ));
                }
            
                number r = (int)(this->delaytilde_12_del_buffer->getSize()) + this->delaytilde_12_del_reader - ((size > this->delaytilde_12_del__maxdelay ? this->delaytilde_12_del__maxdelay : (size < (this->delaytilde_12_del_reader != this->delaytilde_12_del_writer) ? this->delaytilde_12_del_reader != this->delaytilde_12_del_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->delaytilde_12_del_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_12_del_wrap))
                );
            }
            
            void delaytilde_12_del_write(number v) {
                this->delaytilde_12_del_writer = this->delaytilde_12_del_reader;
                this->delaytilde_12_del_buffer[(Index)this->delaytilde_12_del_writer] = v;
            }
            
            number delaytilde_12_del_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->delaytilde_12_del__maxdelay : size);
                number val = this->delaytilde_12_del_read(effectiveSize, 0);
                this->delaytilde_12_del_write(v);
                this->delaytilde_12_del_step();
                return val;
            }
            
            array<Index, 2> delaytilde_12_del_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->delaytilde_12_del_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->delaytilde_12_del_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void delaytilde_12_del_init() {
                auto result = this->delaytilde_12_del_calcSizeInSamples();
                this->delaytilde_12_del__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->delaytilde_12_del_buffer->requestSize(requestedSizeInSamples, 1);
                this->delaytilde_12_del_wrap = requestedSizeInSamples - 1;
            }
            
            void delaytilde_12_del_clear() {
                this->delaytilde_12_del_buffer->setZero();
            }
            
            void delaytilde_12_del_reset() {
                auto result = this->delaytilde_12_del_calcSizeInSamples();
                this->delaytilde_12_del__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->delaytilde_12_del_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->delaytilde_12_del_buffer);
                this->delaytilde_12_del_wrap = this->delaytilde_12_del_buffer->getSize() - 1;
                this->delaytilde_12_del_clear();
            
                if (this->delaytilde_12_del_reader >= this->delaytilde_12_del__maxdelay || this->delaytilde_12_del_writer >= this->delaytilde_12_del__maxdelay) {
                    this->delaytilde_12_del_reader = 0;
                    this->delaytilde_12_del_writer = 0;
                }
            }
            
            void delaytilde_12_del_dspsetup() {
                this->delaytilde_12_del_reset();
            }
            
            number delaytilde_12_del_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                return samplerate;
            }
            
            number delaytilde_12_del_size() {
                return this->delaytilde_12_del__maxdelay;
            }
            
            void delaytilde_12_dspsetup(bool force) {
                if ((bool)(this->delaytilde_12_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->delaytilde_12_rampInSamples = (long)(this->mstosamps(50));
                this->delaytilde_12_lastDelay = -1;
                this->delaytilde_12_setupDone = true;
                this->delaytilde_12_del_dspsetup();
            }
            
            void numberobj_49_init() {
                this->numberobj_49_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/Delay~/number_obj-112"), 1, this->_currentTime);
            }
            
            void numberobj_49_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_49_value;
            }
            
            void numberobj_49_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_49_value_set(preset["value"]);
            }
            
            void numberobj_50_init() {
                this->numberobj_50_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/Delay~/number_obj-151"), 1, this->_currentTime);
            }
            
            void numberobj_50_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_50_value;
            }
            
            void numberobj_50_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_50_value_set(preset["value"]);
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                delaytilde_11_delay = 0;
                delaytilde_12_delay = 0;
                numberobj_49_value = 0;
                numberobj_49_value_setter(numberobj_49_value);
                mstosamps_04_ms = 0;
                numberobj_50_value = 0;
                numberobj_50_value_setter(numberobj_50_value);
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                delaytilde_11_lastDelay = -1;
                delaytilde_11_crossfadeDelay = 0;
                delaytilde_11_ramp = 0;
                delaytilde_11_rampInSamples = 0;
                delaytilde_11_del__maxdelay = 0;
                delaytilde_11_del_sizemode = 0;
                delaytilde_11_del_wrap = 0;
                delaytilde_11_del_reader = 0;
                delaytilde_11_del_writer = 0;
                delaytilde_11_setupDone = false;
                delaytilde_12_lastDelay = -1;
                delaytilde_12_crossfadeDelay = 0;
                delaytilde_12_ramp = 0;
                delaytilde_12_rampInSamples = 0;
                delaytilde_12_del__maxdelay = 0;
                delaytilde_12_del_sizemode = 0;
                delaytilde_12_del_wrap = 0;
                delaytilde_12_del_reader = 0;
                delaytilde_12_del_writer = 0;
                delaytilde_12_setupDone = false;
                numberobj_49_currentFormat = 6;
                numberobj_49_lastValue = 0;
                numberobj_50_currentFormat = 6;
                numberobj_50_lastValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number delaytilde_11_delay;
                number delaytilde_12_delay;
                number numberobj_49_value;
                number mstosamps_04_ms;
                number numberobj_50_value;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number delaytilde_11_lastDelay;
                number delaytilde_11_crossfadeDelay;
                number delaytilde_11_ramp;
                long delaytilde_11_rampInSamples;
                Float64BufferRef delaytilde_11_del_buffer;
                Index delaytilde_11_del__maxdelay;
                Int delaytilde_11_del_sizemode;
                Index delaytilde_11_del_wrap;
                Int delaytilde_11_del_reader;
                Int delaytilde_11_del_writer;
                bool delaytilde_11_setupDone;
                number delaytilde_12_lastDelay;
                number delaytilde_12_crossfadeDelay;
                number delaytilde_12_ramp;
                long delaytilde_12_rampInSamples;
                Float64BufferRef delaytilde_12_del_buffer;
                Index delaytilde_12_del__maxdelay;
                Int delaytilde_12_del_sizemode;
                Index delaytilde_12_del_wrap;
                Int delaytilde_12_del_reader;
                Int delaytilde_12_del_writer;
                bool delaytilde_12_setupDone;
                Int numberobj_49_currentFormat;
                number numberobj_49_lastValue;
                Int numberobj_50_currentFormat;
                number numberobj_50_lastValue;
                number stackprotect_count;
                DataRef delaytilde_11_del_bufferobj;
                DataRef delaytilde_12_del_bufferobj;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_809 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_812;
            friend class rnbomatic;
            
            public:
            
            class RNBOSubpatcher_800 : public PatcherInterfaceImpl {
                        
                        friend class RNBOSubpatcher_809;
                        friend class rnbomatic;
                        
                        public:
                        
                        RNBOSubpatcher_800()
                        {
                        }
                        
                        ~RNBOSubpatcher_800()
                        {
                        }
                        
                        virtual RNBOSubpatcher_809* getPatcher() const {
                            return static_cast<RNBOSubpatcher_809 *>(_parentPatcher);
                        }
                        
                        rnbomatic* getTopLevelPatcher() {
                            return this->getPatcher()->getTopLevelPatcher();
                        }
                        
                        void cancelClockEvents()
                        {
                        }
                        
                        inline number linearinterp(number frac, number x, number y) {
                            return x + (y - x) * frac;
                        }
                        
                        inline number cubicinterp(number a, number w, number x, number y, number z) {
                            number a1 = 1. + a;
                            number aa = a * a1;
                            number b = 1. - a;
                            number b1 = 2. - a;
                            number bb = b * b1;
                            number fw = -.1666667 * bb * a;
                            number fx = .5 * bb * a1;
                            number fy = .5 * aa * b1;
                            number fz = -.1666667 * aa * b;
                            return w * fw + x * fx + y * fy + z * fz;
                        }
                        
                        inline number fastcubicinterp(number a, number w, number x, number y, number z) {
                            number a2 = a * a;
                            number f0 = z - y - w + x;
                            number f1 = w - x - f0;
                            number f2 = y - w;
                            number f3 = x;
                            return f0 * a * a2 + f1 * a2 + f2 * a + f3;
                        }
                        
                        inline number splineinterp(number a, number w, number x, number y, number z) {
                            number a2 = a * a;
                            number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
                            number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
                            number f2 = -0.5 * w + 0.5 * y;
                            return f0 * a * a2 + f1 * a2 + f2 * a + x;
                        }
                        
                        inline number spline6interp(number a, number y0, number y1, number y2, number y3, number y4, number y5) {
                            number ym2py2 = y0 + y4;
                            number ym1py1 = y1 + y3;
                            number y2mym2 = y4 - y0;
                            number y1mym1 = y3 - y1;
                            number sixthym1py1 = (number)1 / (number)6.0 * ym1py1;
                            number c0 = (number)1 / (number)120.0 * ym2py2 + (number)13 / (number)60.0 * ym1py1 + (number)11 / (number)20.0 * y2;
                            number c1 = (number)1 / (number)24.0 * y2mym2 + (number)5 / (number)12.0 * y1mym1;
                            number c2 = (number)1 / (number)12.0 * ym2py2 + sixthym1py1 - (number)1 / (number)2.0 * y2;
                            number c3 = (number)1 / (number)12.0 * y2mym2 - (number)1 / (number)6.0 * y1mym1;
                            number c4 = (number)1 / (number)24.0 * ym2py2 - sixthym1py1 + (number)1 / (number)4.0 * y2;
                            number c5 = (number)1 / (number)120.0 * (y5 - y0) + (number)1 / (number)24.0 * (y1 - y4) + (number)1 / (number)12.0 * (y3 - y2);
                            return ((((c5 * a + c4) * a + c3) * a + c2) * a + c1) * a + c0;
                        }
                        
                        inline number cosT8(number r) {
                            number t84 = 56.0;
                            number t83 = 1680.0;
                            number t82 = 20160.0;
                            number t81 = 2.4801587302e-05;
                            number t73 = 42.0;
                            number t72 = 840.0;
                            number t71 = 1.9841269841e-04;
                        
                            if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
                                number rr = r * r;
                                return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
                            } else if (r > 0.0) {
                                r -= 1.57079632679489661923132169163975144;
                                number rr = r * r;
                                return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                            } else {
                                r += 1.57079632679489661923132169163975144;
                                number rr = r * r;
                                return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                            }
                        }
                        
                        inline number cosineinterp(number frac, number x, number y) {
                            number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
                            return x * (1.0 - a2) + y * a2;
                        }
                        
                        number mstosamps(MillisecondTime ms) {
                            return ms * this->sr * 0.001;
                        }
                        
                        number samplerate() const {
                            return this->sr;
                        }
                        
                        Index vectorsize() const {
                            return this->vs;
                        }
                        
                        number maximum(number x, number y) {
                            return (x < y ? y : x);
                        }
                        
                        Index getNumMidiInputPorts() const {
                            return 0;
                        }
                        
                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                        
                        Index getNumMidiOutputPorts() const {
                            return 0;
                        }
                        
                        void process(
                            const SampleValue * const* inputs,
                            Index numInputs,
                            SampleValue * const* outputs,
                            Index numOutputs,
                            Index n
                        ) {
                            this->vs = n;
                            this->updateTime(this->getEngine()->getCurrentTime());
                            SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                            const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                            const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                            const SampleValue * in3 = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
                            const SampleValue * in4 = (numInputs >= 4 && inputs[3] ? inputs[3] : this->zeroBuffer);
                            this->welch_tilde_05_perform(in2, this->signals[0], n);
                            this->welch_tilde_06_perform(in3, this->signals[1], n);
                            this->dspexpr_86_perform(in2, in4, this->signals[2], n);
                            this->delaytilde_13_perform(this->signals[2], in1, this->signals[3], n);
                            this->dspexpr_85_perform(this->signals[3], this->signals[0], this->signals[2], n);
                            this->dspexpr_88_perform(in3, in4, this->signals[0], n);
                            this->delaytilde_14_perform(this->signals[0], in1, this->signals[3], n);
                            this->dspexpr_87_perform(this->signals[3], this->signals[1], this->signals[0], n);
                            this->dspexpr_84_perform(this->signals[2], this->signals[0], out1, n);
                            this->stackprotect_perform(n);
                            this->audioProcessSampleCount += this->vs;
                        }
                        
                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                Index i;
                        
                                for (i = 0; i < 4; i++) {
                                    this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                                }
                        
                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                this->didAllocateSignals = true;
                            }
                        
                            const bool sampleRateChanged = sampleRate != this->sr;
                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                        
                            if (sampleRateChanged || maxvsChanged) {
                                this->vs = maxBlockSize;
                                this->maxvs = maxBlockSize;
                                this->sr = sampleRate;
                                this->invsr = 1 / sampleRate;
                            }
                        
                            this->delaytilde_13_dspsetup(forceDSPSetup);
                            this->delaytilde_14_dspsetup(forceDSPSetup);
                        
                            if (sampleRateChanged)
                                this->onSampleRateChanged(sampleRate);
                        }
                        
                        void setProbingTarget(MessageTag id) {
                            switch (id) {
                            default:
                                {
                                this->setProbingIndex(-1);
                                break;
                                }
                            }
                        }
                        
                        void setProbingIndex(ProbingIndex ) {}
                        
                        Index getProbingChannels(MessageTag outletId) const {
                            RNBO_UNUSED(outletId);
                            return 0;
                        }
                        
                        Index getIsMuted()  {
                            return this->isMuted;
                        }
                        
                        void setIsMuted(Index v)  {
                            this->isMuted = v;
                        }
                        
                        void onSampleRateChanged(double ) {}
                        
                        Index getPatcherSerial() const {
                            return 0;
                        }
                        
                        void getState(PatcherStateInterface& ) {}
                        
                        void setState() {}
                        
                        void getPreset(PatcherStateInterface& ) {}
                        
                        void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                        
                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValue(index, value, time);
                        }
                        
                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                            this->setParameterValue(index, this->getParameterValue(index), time);
                        }
                        
                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValueNormalized(index, value, time);
                        }
                        
                        ParameterValue getParameterValue(ParameterIndex index)  {
                            switch (index) {
                            default:
                                {
                                return 0;
                                }
                            }
                        }
                        
                        ParameterIndex getNumSignalInParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumSignalOutParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumParameters() const {
                            return 0;
                        }
                        
                        ConstCharPointer getParameterName(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        ConstCharPointer getParameterId(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                        
                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                        }
                        
                        void setParameterOffset(ParameterIndex offset) {
                            this->parameterOffset = offset;
                        }
                        
                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                            if (steps == 1) {
                                if (normalizedValue > 0) {
                                    normalizedValue = 1.;
                                }
                            } else {
                                ParameterValue oneStep = (number)1. / (steps - 1);
                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                normalizedValue = numberOfSteps * oneStep;
                            }
                        
                            return normalizedValue;
                        }
                        
                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        void scheduleParamInit(ParameterIndex index, Index order) {
                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                        }
                        
                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                        
                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                        
                        void processOutletEvent(
                            EngineLink* sender,
                            OutletIndex index,
                            ParameterValue value,
                            MillisecondTime time
                        ) {
                            this->updateTime(time);
                            this->processOutletAtCurrentTime(sender, index, value);
                        }
                        
                        void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
                        
                        void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
                        
                        void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
                        
                        MessageTagInfo resolveTag(MessageTag tag) const {
                            switch (tag) {
                        
                            }
                        
                            return nullptr;
                        }
                        
                        DataRef* getDataRef(DataRefIndex index)  {
                            switch (index) {
                            case 6:
                                {
                                return addressOf(this->delaytilde_13_del_bufferobj);
                                break;
                                }
                            case 7:
                                {
                                return addressOf(this->delaytilde_14_del_bufferobj);
                                break;
                                }
                            default:
                                {
                                return nullptr;
                                }
                            }
                        }
                        
                        DataRefIndex getNumDataRefs() const {
                            return 2;
                        }
                        
                        void fillDataRef(DataRefIndex , DataRef& ) {}
                        
                        void zeroDataRef(DataRef& ref) {
                            ref->setZero();
                        }
                        
                        void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                            this->updateTime(time);
                        
                            if (index == 6) {
                                this->delaytilde_13_del_buffer = new Float64Buffer(this->delaytilde_13_del_bufferobj);
                            }
                        
                            if (index == 7) {
                                this->delaytilde_14_del_buffer = new Float64Buffer(this->delaytilde_14_del_bufferobj);
                            }
                        }
                        
                        void initialize() {
                            this->delaytilde_13_del_bufferobj = initDataRef("delaytilde_13_del_bufferobj", true, nullptr, "buffer~");
                            this->delaytilde_14_del_bufferobj = initDataRef("delaytilde_14_del_bufferobj", true, nullptr, "buffer~");
                            this->assign_defaults();
                            this->setState();
                            this->delaytilde_13_del_bufferobj->setIndex(6);
                            this->delaytilde_13_del_buffer = new Float64Buffer(this->delaytilde_13_del_bufferobj);
                            this->delaytilde_14_del_bufferobj->setIndex(7);
                            this->delaytilde_14_del_buffer = new Float64Buffer(this->delaytilde_14_del_bufferobj);
                        }
                        
                        protected:
                        
                        number msToSamps(MillisecondTime ms, number sampleRate) {
                            return ms * sampleRate * 0.001;
                        }
                        
                        MillisecondTime sampsToMs(SampleIndex samps) {
                            return samps * (this->invsr * 1000);
                        }
                        
                        Index getMaxBlockSize() const {
                            return this->maxvs;
                        }
                        
                        number getSampleRate() const {
                            return this->sr;
                        }
                        
                        bool hasFixedVectorSize() const {
                            return false;
                        }
                        
                        Index getNumInputChannels() const {
                            return 4;
                        }
                        
                        Index getNumOutputChannels() const {
                            return 1;
                        }
                        
                        void initializeObjects() {
                            this->delaytilde_13_del_init();
                            this->delaytilde_14_del_init();
                        }
                        
                        void sendOutlet(OutletIndex index, ParameterValue value) {
                            this->getEngine()->sendOutlet(this, index, value);
                        }
                        
                        void startup() {}
                        
                        void allocateDataRefs() {
                            this->delaytilde_13_del_buffer = this->delaytilde_13_del_buffer->allocateIfNeeded();
                        
                            if (this->delaytilde_13_del_bufferobj->hasRequestedSize()) {
                                if (this->delaytilde_13_del_bufferobj->wantsFill())
                                    this->zeroDataRef(this->delaytilde_13_del_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(6);
                            }
                        
                            this->delaytilde_14_del_buffer = this->delaytilde_14_del_buffer->allocateIfNeeded();
                        
                            if (this->delaytilde_14_del_bufferobj->hasRequestedSize()) {
                                if (this->delaytilde_14_del_bufferobj->wantsFill())
                                    this->zeroDataRef(this->delaytilde_14_del_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(7);
                            }
                        }
                        
                        void welch_tilde_05_perform(const Sample * x, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                number __x = x[(Index)i];
                                __x = (__x > 1 ? 1 : (__x < 0 ? 0 : __x));
                                number w = (__x - 0.5) * 2;
                                out1[(Index)i] = 1 - w * w;
                            }
                        }
                        
                        void welch_tilde_06_perform(const Sample * x, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                number __x = x[(Index)i];
                                __x = (__x > 1 ? 1 : (__x < 0 ? 0 : __x));
                                number w = (__x - 0.5) * 2;
                                out1[(Index)i] = 1 - w * w;
                            }
                        }
                        
                        void dspexpr_86_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                            }
                        }
                        
                        void delaytilde_13_perform(
                            const Sample * delay,
                            const SampleValue * input,
                            SampleValue * output,
                            Index n
                        ) {
                            auto __delaytilde_13_crossfadeDelay = this->delaytilde_13_crossfadeDelay;
                            auto __delaytilde_13_rampInSamples = this->delaytilde_13_rampInSamples;
                            auto __delaytilde_13_ramp = this->delaytilde_13_ramp;
                            auto __delaytilde_13_lastDelay = this->delaytilde_13_lastDelay;
                        
                            for (Index i = 0; i < n; i++) {
                                if (__delaytilde_13_lastDelay == -1) {
                                    __delaytilde_13_lastDelay = delay[(Index)i];
                                }
                        
                                if (__delaytilde_13_ramp > 0) {
                                    number factor = __delaytilde_13_ramp / __delaytilde_13_rampInSamples;
                                    output[(Index)i] = this->delaytilde_13_del_read(__delaytilde_13_crossfadeDelay, 0) * factor + this->delaytilde_13_del_read(__delaytilde_13_lastDelay, 0) * (1. - factor);
                                    __delaytilde_13_ramp--;
                                } else {
                                    number effectiveDelay = delay[(Index)i];
                        
                                    if (effectiveDelay != __delaytilde_13_lastDelay) {
                                        __delaytilde_13_ramp = __delaytilde_13_rampInSamples;
                                        __delaytilde_13_crossfadeDelay = __delaytilde_13_lastDelay;
                                        __delaytilde_13_lastDelay = effectiveDelay;
                                        output[(Index)i] = this->delaytilde_13_del_read(__delaytilde_13_crossfadeDelay, 0);
                                        __delaytilde_13_ramp--;
                                    } else {
                                        output[(Index)i] = this->delaytilde_13_del_read(effectiveDelay, 0);
                                    }
                                }
                        
                                this->delaytilde_13_del_write(input[(Index)i]);
                                this->delaytilde_13_del_step();
                            }
                        
                            this->delaytilde_13_lastDelay = __delaytilde_13_lastDelay;
                            this->delaytilde_13_ramp = __delaytilde_13_ramp;
                            this->delaytilde_13_crossfadeDelay = __delaytilde_13_crossfadeDelay;
                        }
                        
                        void dspexpr_85_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                            }
                        }
                        
                        void dspexpr_88_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                            }
                        }
                        
                        void delaytilde_14_perform(
                            const Sample * delay,
                            const SampleValue * input,
                            SampleValue * output,
                            Index n
                        ) {
                            auto __delaytilde_14_crossfadeDelay = this->delaytilde_14_crossfadeDelay;
                            auto __delaytilde_14_rampInSamples = this->delaytilde_14_rampInSamples;
                            auto __delaytilde_14_ramp = this->delaytilde_14_ramp;
                            auto __delaytilde_14_lastDelay = this->delaytilde_14_lastDelay;
                        
                            for (Index i = 0; i < n; i++) {
                                if (__delaytilde_14_lastDelay == -1) {
                                    __delaytilde_14_lastDelay = delay[(Index)i];
                                }
                        
                                if (__delaytilde_14_ramp > 0) {
                                    number factor = __delaytilde_14_ramp / __delaytilde_14_rampInSamples;
                                    output[(Index)i] = this->delaytilde_14_del_read(__delaytilde_14_crossfadeDelay, 0) * factor + this->delaytilde_14_del_read(__delaytilde_14_lastDelay, 0) * (1. - factor);
                                    __delaytilde_14_ramp--;
                                } else {
                                    number effectiveDelay = delay[(Index)i];
                        
                                    if (effectiveDelay != __delaytilde_14_lastDelay) {
                                        __delaytilde_14_ramp = __delaytilde_14_rampInSamples;
                                        __delaytilde_14_crossfadeDelay = __delaytilde_14_lastDelay;
                                        __delaytilde_14_lastDelay = effectiveDelay;
                                        output[(Index)i] = this->delaytilde_14_del_read(__delaytilde_14_crossfadeDelay, 0);
                                        __delaytilde_14_ramp--;
                                    } else {
                                        output[(Index)i] = this->delaytilde_14_del_read(effectiveDelay, 0);
                                    }
                                }
                        
                                this->delaytilde_14_del_write(input[(Index)i]);
                                this->delaytilde_14_del_step();
                            }
                        
                            this->delaytilde_14_lastDelay = __delaytilde_14_lastDelay;
                            this->delaytilde_14_ramp = __delaytilde_14_ramp;
                            this->delaytilde_14_crossfadeDelay = __delaytilde_14_crossfadeDelay;
                        }
                        
                        void dspexpr_87_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                            }
                        }
                        
                        void dspexpr_84_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] + in2[(Index)i];//#map:_###_obj_###_:1
                            }
                        }
                        
                        void stackprotect_perform(Index n) {
                            RNBO_UNUSED(n);
                            auto __stackprotect_count = this->stackprotect_count;
                            __stackprotect_count = 0;
                            this->stackprotect_count = __stackprotect_count;
                        }
                        
                        void delaytilde_13_del_step() {
                            this->delaytilde_13_del_reader++;
                        
                            if (this->delaytilde_13_del_reader >= (int)(this->delaytilde_13_del_buffer->getSize()))
                                this->delaytilde_13_del_reader = 0;
                        }
                        
                        number delaytilde_13_del_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->delaytilde_13_del_buffer->getSize()) + this->delaytilde_13_del_reader - ((size > this->delaytilde_13_del__maxdelay ? this->delaytilde_13_del__maxdelay : (size < (this->delaytilde_13_del_reader != this->delaytilde_13_del_writer) ? this->delaytilde_13_del_reader != this->delaytilde_13_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->delaytilde_13_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_13_del_wrap))
                                ), this->delaytilde_13_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_13_del_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->delaytilde_13_del_buffer->getSize()) + this->delaytilde_13_del_reader - ((size > this->delaytilde_13_del__maxdelay ? this->delaytilde_13_del__maxdelay : (size < (1 + this->delaytilde_13_del_reader != this->delaytilde_13_del_writer) ? 1 + this->delaytilde_13_del_reader != this->delaytilde_13_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->delaytilde_13_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_13_del_wrap))
                                ), this->delaytilde_13_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_13_del_wrap))
                                ), this->delaytilde_13_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_13_del_wrap))
                                ), this->delaytilde_13_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_13_del_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->delaytilde_13_del_buffer->getSize()) + this->delaytilde_13_del_reader - ((size > this->delaytilde_13_del__maxdelay ? this->delaytilde_13_del__maxdelay : (size < (1 + this->delaytilde_13_del_reader != this->delaytilde_13_del_writer) ? 1 + this->delaytilde_13_del_reader != this->delaytilde_13_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->delaytilde_13_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_13_del_wrap))
                                ), this->delaytilde_13_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_13_del_wrap))
                                ), this->delaytilde_13_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_13_del_wrap))
                                ), this->delaytilde_13_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_13_del_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->delaytilde_13_del_buffer->getSize()) + this->delaytilde_13_del_reader - ((size > this->delaytilde_13_del__maxdelay ? this->delaytilde_13_del__maxdelay : (size < (1 + this->delaytilde_13_del_reader != this->delaytilde_13_del_writer) ? 1 + this->delaytilde_13_del_reader != this->delaytilde_13_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->delaytilde_13_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_13_del_wrap))
                                ), this->delaytilde_13_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_13_del_wrap))
                                ), this->delaytilde_13_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_13_del_wrap))
                                ), this->delaytilde_13_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_13_del_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->delaytilde_13_del_buffer->getSize()) + this->delaytilde_13_del_reader - ((size > this->delaytilde_13_del__maxdelay ? this->delaytilde_13_del__maxdelay : (size < (1 + this->delaytilde_13_del_reader != this->delaytilde_13_del_writer) ? 1 + this->delaytilde_13_del_reader != this->delaytilde_13_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->delaytilde_13_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_13_del_wrap))
                                ), this->delaytilde_13_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_13_del_wrap))
                                ), this->delaytilde_13_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_13_del_wrap))
                                ), this->delaytilde_13_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_13_del_wrap))
                                ), this->delaytilde_13_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->delaytilde_13_del_wrap))
                                ), this->delaytilde_13_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->delaytilde_13_del_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->delaytilde_13_del_buffer->getSize()) + this->delaytilde_13_del_reader - ((size > this->delaytilde_13_del__maxdelay ? this->delaytilde_13_del__maxdelay : (size < (this->delaytilde_13_del_reader != this->delaytilde_13_del_writer) ? this->delaytilde_13_del_reader != this->delaytilde_13_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->delaytilde_13_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_13_del_wrap))
                                ), this->delaytilde_13_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_13_del_wrap))
                                ));
                            }
                        
                            number r = (int)(this->delaytilde_13_del_buffer->getSize()) + this->delaytilde_13_del_reader - ((size > this->delaytilde_13_del__maxdelay ? this->delaytilde_13_del__maxdelay : (size < (this->delaytilde_13_del_reader != this->delaytilde_13_del_writer) ? this->delaytilde_13_del_reader != this->delaytilde_13_del_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->delaytilde_13_del_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_13_del_wrap))
                            );
                        }
                        
                        void delaytilde_13_del_write(number v) {
                            this->delaytilde_13_del_writer = this->delaytilde_13_del_reader;
                            this->delaytilde_13_del_buffer[(Index)this->delaytilde_13_del_writer] = v;
                        }
                        
                        number delaytilde_13_del_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->delaytilde_13_del__maxdelay : size);
                            number val = this->delaytilde_13_del_read(effectiveSize, 0);
                            this->delaytilde_13_del_write(v);
                            this->delaytilde_13_del_step();
                            return val;
                        }
                        
                        array<Index, 2> delaytilde_13_del_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->delaytilde_13_del_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->delaytilde_13_del_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void delaytilde_13_del_init() {
                            auto result = this->delaytilde_13_del_calcSizeInSamples();
                            this->delaytilde_13_del__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->delaytilde_13_del_buffer->requestSize(requestedSizeInSamples, 1);
                            this->delaytilde_13_del_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void delaytilde_13_del_clear() {
                            this->delaytilde_13_del_buffer->setZero();
                        }
                        
                        void delaytilde_13_del_reset() {
                            auto result = this->delaytilde_13_del_calcSizeInSamples();
                            this->delaytilde_13_del__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->delaytilde_13_del_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->delaytilde_13_del_buffer);
                            this->delaytilde_13_del_wrap = this->delaytilde_13_del_buffer->getSize() - 1;
                            this->delaytilde_13_del_clear();
                        
                            if (this->delaytilde_13_del_reader >= this->delaytilde_13_del__maxdelay || this->delaytilde_13_del_writer >= this->delaytilde_13_del__maxdelay) {
                                this->delaytilde_13_del_reader = 0;
                                this->delaytilde_13_del_writer = 0;
                            }
                        }
                        
                        void delaytilde_13_del_dspsetup() {
                            this->delaytilde_13_del_reset();
                        }
                        
                        number delaytilde_13_del_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            return samplerate;
                        }
                        
                        number delaytilde_13_del_size() {
                            return this->delaytilde_13_del__maxdelay;
                        }
                        
                        void delaytilde_13_dspsetup(bool force) {
                            if ((bool)(this->delaytilde_13_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->delaytilde_13_rampInSamples = (long)(this->mstosamps(0));
                            this->delaytilde_13_lastDelay = -1;
                            this->delaytilde_13_setupDone = true;
                            this->delaytilde_13_del_dspsetup();
                        }
                        
                        void delaytilde_14_del_step() {
                            this->delaytilde_14_del_reader++;
                        
                            if (this->delaytilde_14_del_reader >= (int)(this->delaytilde_14_del_buffer->getSize()))
                                this->delaytilde_14_del_reader = 0;
                        }
                        
                        number delaytilde_14_del_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->delaytilde_14_del_buffer->getSize()) + this->delaytilde_14_del_reader - ((size > this->delaytilde_14_del__maxdelay ? this->delaytilde_14_del__maxdelay : (size < (this->delaytilde_14_del_reader != this->delaytilde_14_del_writer) ? this->delaytilde_14_del_reader != this->delaytilde_14_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->delaytilde_14_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_14_del_wrap))
                                ), this->delaytilde_14_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_14_del_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->delaytilde_14_del_buffer->getSize()) + this->delaytilde_14_del_reader - ((size > this->delaytilde_14_del__maxdelay ? this->delaytilde_14_del__maxdelay : (size < (1 + this->delaytilde_14_del_reader != this->delaytilde_14_del_writer) ? 1 + this->delaytilde_14_del_reader != this->delaytilde_14_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->delaytilde_14_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_14_del_wrap))
                                ), this->delaytilde_14_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_14_del_wrap))
                                ), this->delaytilde_14_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_14_del_wrap))
                                ), this->delaytilde_14_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_14_del_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->delaytilde_14_del_buffer->getSize()) + this->delaytilde_14_del_reader - ((size > this->delaytilde_14_del__maxdelay ? this->delaytilde_14_del__maxdelay : (size < (1 + this->delaytilde_14_del_reader != this->delaytilde_14_del_writer) ? 1 + this->delaytilde_14_del_reader != this->delaytilde_14_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->delaytilde_14_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_14_del_wrap))
                                ), this->delaytilde_14_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_14_del_wrap))
                                ), this->delaytilde_14_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_14_del_wrap))
                                ), this->delaytilde_14_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_14_del_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->delaytilde_14_del_buffer->getSize()) + this->delaytilde_14_del_reader - ((size > this->delaytilde_14_del__maxdelay ? this->delaytilde_14_del__maxdelay : (size < (1 + this->delaytilde_14_del_reader != this->delaytilde_14_del_writer) ? 1 + this->delaytilde_14_del_reader != this->delaytilde_14_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->delaytilde_14_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_14_del_wrap))
                                ), this->delaytilde_14_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_14_del_wrap))
                                ), this->delaytilde_14_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_14_del_wrap))
                                ), this->delaytilde_14_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_14_del_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->delaytilde_14_del_buffer->getSize()) + this->delaytilde_14_del_reader - ((size > this->delaytilde_14_del__maxdelay ? this->delaytilde_14_del__maxdelay : (size < (1 + this->delaytilde_14_del_reader != this->delaytilde_14_del_writer) ? 1 + this->delaytilde_14_del_reader != this->delaytilde_14_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->delaytilde_14_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_14_del_wrap))
                                ), this->delaytilde_14_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_14_del_wrap))
                                ), this->delaytilde_14_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_14_del_wrap))
                                ), this->delaytilde_14_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_14_del_wrap))
                                ), this->delaytilde_14_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->delaytilde_14_del_wrap))
                                ), this->delaytilde_14_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->delaytilde_14_del_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->delaytilde_14_del_buffer->getSize()) + this->delaytilde_14_del_reader - ((size > this->delaytilde_14_del__maxdelay ? this->delaytilde_14_del__maxdelay : (size < (this->delaytilde_14_del_reader != this->delaytilde_14_del_writer) ? this->delaytilde_14_del_reader != this->delaytilde_14_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->delaytilde_14_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_14_del_wrap))
                                ), this->delaytilde_14_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_14_del_wrap))
                                ));
                            }
                        
                            number r = (int)(this->delaytilde_14_del_buffer->getSize()) + this->delaytilde_14_del_reader - ((size > this->delaytilde_14_del__maxdelay ? this->delaytilde_14_del__maxdelay : (size < (this->delaytilde_14_del_reader != this->delaytilde_14_del_writer) ? this->delaytilde_14_del_reader != this->delaytilde_14_del_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->delaytilde_14_del_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_14_del_wrap))
                            );
                        }
                        
                        void delaytilde_14_del_write(number v) {
                            this->delaytilde_14_del_writer = this->delaytilde_14_del_reader;
                            this->delaytilde_14_del_buffer[(Index)this->delaytilde_14_del_writer] = v;
                        }
                        
                        number delaytilde_14_del_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->delaytilde_14_del__maxdelay : size);
                            number val = this->delaytilde_14_del_read(effectiveSize, 0);
                            this->delaytilde_14_del_write(v);
                            this->delaytilde_14_del_step();
                            return val;
                        }
                        
                        array<Index, 2> delaytilde_14_del_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->delaytilde_14_del_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->delaytilde_14_del_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void delaytilde_14_del_init() {
                            auto result = this->delaytilde_14_del_calcSizeInSamples();
                            this->delaytilde_14_del__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->delaytilde_14_del_buffer->requestSize(requestedSizeInSamples, 1);
                            this->delaytilde_14_del_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void delaytilde_14_del_clear() {
                            this->delaytilde_14_del_buffer->setZero();
                        }
                        
                        void delaytilde_14_del_reset() {
                            auto result = this->delaytilde_14_del_calcSizeInSamples();
                            this->delaytilde_14_del__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->delaytilde_14_del_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->delaytilde_14_del_buffer);
                            this->delaytilde_14_del_wrap = this->delaytilde_14_del_buffer->getSize() - 1;
                            this->delaytilde_14_del_clear();
                        
                            if (this->delaytilde_14_del_reader >= this->delaytilde_14_del__maxdelay || this->delaytilde_14_del_writer >= this->delaytilde_14_del__maxdelay) {
                                this->delaytilde_14_del_reader = 0;
                                this->delaytilde_14_del_writer = 0;
                            }
                        }
                        
                        void delaytilde_14_del_dspsetup() {
                            this->delaytilde_14_del_reset();
                        }
                        
                        number delaytilde_14_del_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            return samplerate;
                        }
                        
                        number delaytilde_14_del_size() {
                            return this->delaytilde_14_del__maxdelay;
                        }
                        
                        void delaytilde_14_dspsetup(bool force) {
                            if ((bool)(this->delaytilde_14_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->delaytilde_14_rampInSamples = (long)(this->mstosamps(0));
                            this->delaytilde_14_lastDelay = -1;
                            this->delaytilde_14_setupDone = true;
                            this->delaytilde_14_del_dspsetup();
                        }
                        
                        bool stackprotect_check() {
                            this->stackprotect_count++;
                        
                            if (this->stackprotect_count > 128) {
                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                return true;
                            }
                        
                            return false;
                        }
                        
                        void updateTime(MillisecondTime time) {
                            this->_currentTime = time;
                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                        
                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                        
                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                this->sampleOffsetIntoNextAudioBuffer = 0;
                        }
                        
                        void assign_defaults()
                        {
                            dspexpr_84_in1 = 0;
                            dspexpr_84_in2 = 0;
                            delaytilde_13_delay = 0;
                            dspexpr_85_in1 = 0;
                            dspexpr_85_in2 = 0;
                            dspexpr_86_in1 = 0;
                            dspexpr_86_in2 = 0;
                            welch_tilde_05_x = 0;
                            delaytilde_14_delay = 0;
                            dspexpr_87_in1 = 0;
                            dspexpr_87_in2 = 0;
                            dspexpr_88_in1 = 0;
                            dspexpr_88_in2 = 0;
                            welch_tilde_06_x = 0;
                            _currentTime = 0;
                            audioProcessSampleCount = 0;
                            sampleOffsetIntoNextAudioBuffer = 0;
                            zeroBuffer = nullptr;
                            dummyBuffer = nullptr;
                            signals[0] = nullptr;
                            signals[1] = nullptr;
                            signals[2] = nullptr;
                            signals[3] = nullptr;
                            didAllocateSignals = 0;
                            vs = 0;
                            maxvs = 0;
                            sr = 44100;
                            invsr = 0.00002267573696;
                            delaytilde_13_lastDelay = -1;
                            delaytilde_13_crossfadeDelay = 0;
                            delaytilde_13_ramp = 0;
                            delaytilde_13_rampInSamples = 0;
                            delaytilde_13_del__maxdelay = 0;
                            delaytilde_13_del_sizemode = 0;
                            delaytilde_13_del_wrap = 0;
                            delaytilde_13_del_reader = 0;
                            delaytilde_13_del_writer = 0;
                            delaytilde_13_setupDone = false;
                            delaytilde_14_lastDelay = -1;
                            delaytilde_14_crossfadeDelay = 0;
                            delaytilde_14_ramp = 0;
                            delaytilde_14_rampInSamples = 0;
                            delaytilde_14_del__maxdelay = 0;
                            delaytilde_14_del_sizemode = 0;
                            delaytilde_14_del_wrap = 0;
                            delaytilde_14_del_reader = 0;
                            delaytilde_14_del_writer = 0;
                            delaytilde_14_setupDone = false;
                            stackprotect_count = 0;
                            _voiceIndex = 0;
                            _noteNumber = 0;
                            isMuted = 1;
                            parameterOffset = 0;
                        }
                        
                        // member variables
                        
                            number dspexpr_84_in1;
                            number dspexpr_84_in2;
                            number delaytilde_13_delay;
                            number dspexpr_85_in1;
                            number dspexpr_85_in2;
                            number dspexpr_86_in1;
                            number dspexpr_86_in2;
                            number welch_tilde_05_x;
                            number delaytilde_14_delay;
                            number dspexpr_87_in1;
                            number dspexpr_87_in2;
                            number dspexpr_88_in1;
                            number dspexpr_88_in2;
                            number welch_tilde_06_x;
                            MillisecondTime _currentTime;
                            UInt64 audioProcessSampleCount;
                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                            signal zeroBuffer;
                            signal dummyBuffer;
                            SampleValue * signals[4];
                            bool didAllocateSignals;
                            Index vs;
                            Index maxvs;
                            number sr;
                            number invsr;
                            number delaytilde_13_lastDelay;
                            number delaytilde_13_crossfadeDelay;
                            number delaytilde_13_ramp;
                            long delaytilde_13_rampInSamples;
                            Float64BufferRef delaytilde_13_del_buffer;
                            Index delaytilde_13_del__maxdelay;
                            Int delaytilde_13_del_sizemode;
                            Index delaytilde_13_del_wrap;
                            Int delaytilde_13_del_reader;
                            Int delaytilde_13_del_writer;
                            bool delaytilde_13_setupDone;
                            number delaytilde_14_lastDelay;
                            number delaytilde_14_crossfadeDelay;
                            number delaytilde_14_ramp;
                            long delaytilde_14_rampInSamples;
                            Float64BufferRef delaytilde_14_del_buffer;
                            Index delaytilde_14_del__maxdelay;
                            Int delaytilde_14_del_sizemode;
                            Index delaytilde_14_del_wrap;
                            Int delaytilde_14_del_reader;
                            Int delaytilde_14_del_writer;
                            bool delaytilde_14_setupDone;
                            number stackprotect_count;
                            DataRef delaytilde_13_del_bufferobj;
                            DataRef delaytilde_14_del_bufferobj;
                            Index _voiceIndex;
                            Int _noteNumber;
                            Index isMuted;
                            ParameterIndex parameterOffset;
                        
            };
            
            class RNBOSubpatcher_801 : public PatcherInterfaceImpl {
                        
                        friend class RNBOSubpatcher_809;
                        friend class rnbomatic;
                        
                        public:
                        
                        RNBOSubpatcher_801()
                        {
                        }
                        
                        ~RNBOSubpatcher_801()
                        {
                        }
                        
                        virtual RNBOSubpatcher_809* getPatcher() const {
                            return static_cast<RNBOSubpatcher_809 *>(_parentPatcher);
                        }
                        
                        rnbomatic* getTopLevelPatcher() {
                            return this->getPatcher()->getTopLevelPatcher();
                        }
                        
                        void cancelClockEvents()
                        {
                        }
                        
                        inline number linearinterp(number frac, number x, number y) {
                            return x + (y - x) * frac;
                        }
                        
                        inline number cubicinterp(number a, number w, number x, number y, number z) {
                            number a1 = 1. + a;
                            number aa = a * a1;
                            number b = 1. - a;
                            number b1 = 2. - a;
                            number bb = b * b1;
                            number fw = -.1666667 * bb * a;
                            number fx = .5 * bb * a1;
                            number fy = .5 * aa * b1;
                            number fz = -.1666667 * aa * b;
                            return w * fw + x * fx + y * fy + z * fz;
                        }
                        
                        inline number fastcubicinterp(number a, number w, number x, number y, number z) {
                            number a2 = a * a;
                            number f0 = z - y - w + x;
                            number f1 = w - x - f0;
                            number f2 = y - w;
                            number f3 = x;
                            return f0 * a * a2 + f1 * a2 + f2 * a + f3;
                        }
                        
                        inline number splineinterp(number a, number w, number x, number y, number z) {
                            number a2 = a * a;
                            number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
                            number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
                            number f2 = -0.5 * w + 0.5 * y;
                            return f0 * a * a2 + f1 * a2 + f2 * a + x;
                        }
                        
                        inline number spline6interp(number a, number y0, number y1, number y2, number y3, number y4, number y5) {
                            number ym2py2 = y0 + y4;
                            number ym1py1 = y1 + y3;
                            number y2mym2 = y4 - y0;
                            number y1mym1 = y3 - y1;
                            number sixthym1py1 = (number)1 / (number)6.0 * ym1py1;
                            number c0 = (number)1 / (number)120.0 * ym2py2 + (number)13 / (number)60.0 * ym1py1 + (number)11 / (number)20.0 * y2;
                            number c1 = (number)1 / (number)24.0 * y2mym2 + (number)5 / (number)12.0 * y1mym1;
                            number c2 = (number)1 / (number)12.0 * ym2py2 + sixthym1py1 - (number)1 / (number)2.0 * y2;
                            number c3 = (number)1 / (number)12.0 * y2mym2 - (number)1 / (number)6.0 * y1mym1;
                            number c4 = (number)1 / (number)24.0 * ym2py2 - sixthym1py1 + (number)1 / (number)4.0 * y2;
                            number c5 = (number)1 / (number)120.0 * (y5 - y0) + (number)1 / (number)24.0 * (y1 - y4) + (number)1 / (number)12.0 * (y3 - y2);
                            return ((((c5 * a + c4) * a + c3) * a + c2) * a + c1) * a + c0;
                        }
                        
                        inline number cosT8(number r) {
                            number t84 = 56.0;
                            number t83 = 1680.0;
                            number t82 = 20160.0;
                            number t81 = 2.4801587302e-05;
                            number t73 = 42.0;
                            number t72 = 840.0;
                            number t71 = 1.9841269841e-04;
                        
                            if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
                                number rr = r * r;
                                return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
                            } else if (r > 0.0) {
                                r -= 1.57079632679489661923132169163975144;
                                number rr = r * r;
                                return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                            } else {
                                r += 1.57079632679489661923132169163975144;
                                number rr = r * r;
                                return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                            }
                        }
                        
                        inline number cosineinterp(number frac, number x, number y) {
                            number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
                            return x * (1.0 - a2) + y * a2;
                        }
                        
                        number mstosamps(MillisecondTime ms) {
                            return ms * this->sr * 0.001;
                        }
                        
                        number samplerate() const {
                            return this->sr;
                        }
                        
                        Index vectorsize() const {
                            return this->vs;
                        }
                        
                        number maximum(number x, number y) {
                            return (x < y ? y : x);
                        }
                        
                        Index getNumMidiInputPorts() const {
                            return 0;
                        }
                        
                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                        
                        Index getNumMidiOutputPorts() const {
                            return 0;
                        }
                        
                        void process(
                            const SampleValue * const* inputs,
                            Index numInputs,
                            SampleValue * const* outputs,
                            Index numOutputs,
                            Index n
                        ) {
                            this->vs = n;
                            this->updateTime(this->getEngine()->getCurrentTime());
                            SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                            const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                            const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                            const SampleValue * in3 = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
                            const SampleValue * in4 = (numInputs >= 4 && inputs[3] ? inputs[3] : this->zeroBuffer);
                            this->welch_tilde_07_perform(in2, this->signals[0], n);
                            this->welch_tilde_08_perform(in3, this->signals[1], n);
                            this->dspexpr_91_perform(in2, in4, this->signals[2], n);
                            this->delaytilde_15_perform(this->signals[2], in1, this->signals[3], n);
                            this->dspexpr_90_perform(this->signals[3], this->signals[0], this->signals[2], n);
                            this->dspexpr_93_perform(in3, in4, this->signals[0], n);
                            this->delaytilde_16_perform(this->signals[0], in1, this->signals[3], n);
                            this->dspexpr_92_perform(this->signals[3], this->signals[1], this->signals[0], n);
                            this->dspexpr_89_perform(this->signals[2], this->signals[0], out1, n);
                            this->stackprotect_perform(n);
                            this->audioProcessSampleCount += this->vs;
                        }
                        
                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                Index i;
                        
                                for (i = 0; i < 4; i++) {
                                    this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                                }
                        
                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                this->didAllocateSignals = true;
                            }
                        
                            const bool sampleRateChanged = sampleRate != this->sr;
                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                        
                            if (sampleRateChanged || maxvsChanged) {
                                this->vs = maxBlockSize;
                                this->maxvs = maxBlockSize;
                                this->sr = sampleRate;
                                this->invsr = 1 / sampleRate;
                            }
                        
                            this->delaytilde_15_dspsetup(forceDSPSetup);
                            this->delaytilde_16_dspsetup(forceDSPSetup);
                        
                            if (sampleRateChanged)
                                this->onSampleRateChanged(sampleRate);
                        }
                        
                        void setProbingTarget(MessageTag id) {
                            switch (id) {
                            default:
                                {
                                this->setProbingIndex(-1);
                                break;
                                }
                            }
                        }
                        
                        void setProbingIndex(ProbingIndex ) {}
                        
                        Index getProbingChannels(MessageTag outletId) const {
                            RNBO_UNUSED(outletId);
                            return 0;
                        }
                        
                        Index getIsMuted()  {
                            return this->isMuted;
                        }
                        
                        void setIsMuted(Index v)  {
                            this->isMuted = v;
                        }
                        
                        void onSampleRateChanged(double ) {}
                        
                        Index getPatcherSerial() const {
                            return 0;
                        }
                        
                        void getState(PatcherStateInterface& ) {}
                        
                        void setState() {}
                        
                        void getPreset(PatcherStateInterface& ) {}
                        
                        void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                        
                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValue(index, value, time);
                        }
                        
                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                            this->setParameterValue(index, this->getParameterValue(index), time);
                        }
                        
                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValueNormalized(index, value, time);
                        }
                        
                        ParameterValue getParameterValue(ParameterIndex index)  {
                            switch (index) {
                            default:
                                {
                                return 0;
                                }
                            }
                        }
                        
                        ParameterIndex getNumSignalInParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumSignalOutParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumParameters() const {
                            return 0;
                        }
                        
                        ConstCharPointer getParameterName(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        ConstCharPointer getParameterId(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                        
                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                        }
                        
                        void setParameterOffset(ParameterIndex offset) {
                            this->parameterOffset = offset;
                        }
                        
                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                            if (steps == 1) {
                                if (normalizedValue > 0) {
                                    normalizedValue = 1.;
                                }
                            } else {
                                ParameterValue oneStep = (number)1. / (steps - 1);
                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                normalizedValue = numberOfSteps * oneStep;
                            }
                        
                            return normalizedValue;
                        }
                        
                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        void scheduleParamInit(ParameterIndex index, Index order) {
                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                        }
                        
                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                        
                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                        
                        void processOutletEvent(
                            EngineLink* sender,
                            OutletIndex index,
                            ParameterValue value,
                            MillisecondTime time
                        ) {
                            this->updateTime(time);
                            this->processOutletAtCurrentTime(sender, index, value);
                        }
                        
                        void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
                        
                        void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
                        
                        void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
                        
                        MessageTagInfo resolveTag(MessageTag tag) const {
                            switch (tag) {
                        
                            }
                        
                            return nullptr;
                        }
                        
                        DataRef* getDataRef(DataRefIndex index)  {
                            switch (index) {
                            case 6:
                                {
                                return addressOf(this->delaytilde_15_del_bufferobj);
                                break;
                                }
                            case 7:
                                {
                                return addressOf(this->delaytilde_16_del_bufferobj);
                                break;
                                }
                            default:
                                {
                                return nullptr;
                                }
                            }
                        }
                        
                        DataRefIndex getNumDataRefs() const {
                            return 2;
                        }
                        
                        void fillDataRef(DataRefIndex , DataRef& ) {}
                        
                        void zeroDataRef(DataRef& ref) {
                            ref->setZero();
                        }
                        
                        void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                            this->updateTime(time);
                        
                            if (index == 6) {
                                this->delaytilde_15_del_buffer = new Float64Buffer(this->delaytilde_15_del_bufferobj);
                            }
                        
                            if (index == 7) {
                                this->delaytilde_16_del_buffer = new Float64Buffer(this->delaytilde_16_del_bufferobj);
                            }
                        }
                        
                        void initialize() {
                            this->delaytilde_15_del_bufferobj = initDataRef("delaytilde_15_del_bufferobj", true, nullptr, "buffer~");
                            this->delaytilde_16_del_bufferobj = initDataRef("delaytilde_16_del_bufferobj", true, nullptr, "buffer~");
                            this->assign_defaults();
                            this->setState();
                            this->delaytilde_15_del_bufferobj->setIndex(6);
                            this->delaytilde_15_del_buffer = new Float64Buffer(this->delaytilde_15_del_bufferobj);
                            this->delaytilde_16_del_bufferobj->setIndex(7);
                            this->delaytilde_16_del_buffer = new Float64Buffer(this->delaytilde_16_del_bufferobj);
                        }
                        
                        protected:
                        
                        number msToSamps(MillisecondTime ms, number sampleRate) {
                            return ms * sampleRate * 0.001;
                        }
                        
                        MillisecondTime sampsToMs(SampleIndex samps) {
                            return samps * (this->invsr * 1000);
                        }
                        
                        Index getMaxBlockSize() const {
                            return this->maxvs;
                        }
                        
                        number getSampleRate() const {
                            return this->sr;
                        }
                        
                        bool hasFixedVectorSize() const {
                            return false;
                        }
                        
                        Index getNumInputChannels() const {
                            return 4;
                        }
                        
                        Index getNumOutputChannels() const {
                            return 1;
                        }
                        
                        void initializeObjects() {
                            this->delaytilde_15_del_init();
                            this->delaytilde_16_del_init();
                        }
                        
                        void sendOutlet(OutletIndex index, ParameterValue value) {
                            this->getEngine()->sendOutlet(this, index, value);
                        }
                        
                        void startup() {}
                        
                        void allocateDataRefs() {
                            this->delaytilde_15_del_buffer = this->delaytilde_15_del_buffer->allocateIfNeeded();
                        
                            if (this->delaytilde_15_del_bufferobj->hasRequestedSize()) {
                                if (this->delaytilde_15_del_bufferobj->wantsFill())
                                    this->zeroDataRef(this->delaytilde_15_del_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(6);
                            }
                        
                            this->delaytilde_16_del_buffer = this->delaytilde_16_del_buffer->allocateIfNeeded();
                        
                            if (this->delaytilde_16_del_bufferobj->hasRequestedSize()) {
                                if (this->delaytilde_16_del_bufferobj->wantsFill())
                                    this->zeroDataRef(this->delaytilde_16_del_bufferobj);
                        
                                this->getEngine()->sendDataRefUpdated(7);
                            }
                        }
                        
                        void welch_tilde_07_perform(const Sample * x, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                number __x = x[(Index)i];
                                __x = (__x > 1 ? 1 : (__x < 0 ? 0 : __x));
                                number w = (__x - 0.5) * 2;
                                out1[(Index)i] = 1 - w * w;
                            }
                        }
                        
                        void welch_tilde_08_perform(const Sample * x, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                number __x = x[(Index)i];
                                __x = (__x > 1 ? 1 : (__x < 0 ? 0 : __x));
                                number w = (__x - 0.5) * 2;
                                out1[(Index)i] = 1 - w * w;
                            }
                        }
                        
                        void dspexpr_91_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                            }
                        }
                        
                        void delaytilde_15_perform(
                            const Sample * delay,
                            const SampleValue * input,
                            SampleValue * output,
                            Index n
                        ) {
                            auto __delaytilde_15_crossfadeDelay = this->delaytilde_15_crossfadeDelay;
                            auto __delaytilde_15_rampInSamples = this->delaytilde_15_rampInSamples;
                            auto __delaytilde_15_ramp = this->delaytilde_15_ramp;
                            auto __delaytilde_15_lastDelay = this->delaytilde_15_lastDelay;
                        
                            for (Index i = 0; i < n; i++) {
                                if (__delaytilde_15_lastDelay == -1) {
                                    __delaytilde_15_lastDelay = delay[(Index)i];
                                }
                        
                                if (__delaytilde_15_ramp > 0) {
                                    number factor = __delaytilde_15_ramp / __delaytilde_15_rampInSamples;
                                    output[(Index)i] = this->delaytilde_15_del_read(__delaytilde_15_crossfadeDelay, 0) * factor + this->delaytilde_15_del_read(__delaytilde_15_lastDelay, 0) * (1. - factor);
                                    __delaytilde_15_ramp--;
                                } else {
                                    number effectiveDelay = delay[(Index)i];
                        
                                    if (effectiveDelay != __delaytilde_15_lastDelay) {
                                        __delaytilde_15_ramp = __delaytilde_15_rampInSamples;
                                        __delaytilde_15_crossfadeDelay = __delaytilde_15_lastDelay;
                                        __delaytilde_15_lastDelay = effectiveDelay;
                                        output[(Index)i] = this->delaytilde_15_del_read(__delaytilde_15_crossfadeDelay, 0);
                                        __delaytilde_15_ramp--;
                                    } else {
                                        output[(Index)i] = this->delaytilde_15_del_read(effectiveDelay, 0);
                                    }
                                }
                        
                                this->delaytilde_15_del_write(input[(Index)i]);
                                this->delaytilde_15_del_step();
                            }
                        
                            this->delaytilde_15_lastDelay = __delaytilde_15_lastDelay;
                            this->delaytilde_15_ramp = __delaytilde_15_ramp;
                            this->delaytilde_15_crossfadeDelay = __delaytilde_15_crossfadeDelay;
                        }
                        
                        void dspexpr_90_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                            }
                        }
                        
                        void dspexpr_93_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                            }
                        }
                        
                        void delaytilde_16_perform(
                            const Sample * delay,
                            const SampleValue * input,
                            SampleValue * output,
                            Index n
                        ) {
                            auto __delaytilde_16_crossfadeDelay = this->delaytilde_16_crossfadeDelay;
                            auto __delaytilde_16_rampInSamples = this->delaytilde_16_rampInSamples;
                            auto __delaytilde_16_ramp = this->delaytilde_16_ramp;
                            auto __delaytilde_16_lastDelay = this->delaytilde_16_lastDelay;
                        
                            for (Index i = 0; i < n; i++) {
                                if (__delaytilde_16_lastDelay == -1) {
                                    __delaytilde_16_lastDelay = delay[(Index)i];
                                }
                        
                                if (__delaytilde_16_ramp > 0) {
                                    number factor = __delaytilde_16_ramp / __delaytilde_16_rampInSamples;
                                    output[(Index)i] = this->delaytilde_16_del_read(__delaytilde_16_crossfadeDelay, 0) * factor + this->delaytilde_16_del_read(__delaytilde_16_lastDelay, 0) * (1. - factor);
                                    __delaytilde_16_ramp--;
                                } else {
                                    number effectiveDelay = delay[(Index)i];
                        
                                    if (effectiveDelay != __delaytilde_16_lastDelay) {
                                        __delaytilde_16_ramp = __delaytilde_16_rampInSamples;
                                        __delaytilde_16_crossfadeDelay = __delaytilde_16_lastDelay;
                                        __delaytilde_16_lastDelay = effectiveDelay;
                                        output[(Index)i] = this->delaytilde_16_del_read(__delaytilde_16_crossfadeDelay, 0);
                                        __delaytilde_16_ramp--;
                                    } else {
                                        output[(Index)i] = this->delaytilde_16_del_read(effectiveDelay, 0);
                                    }
                                }
                        
                                this->delaytilde_16_del_write(input[(Index)i]);
                                this->delaytilde_16_del_step();
                            }
                        
                            this->delaytilde_16_lastDelay = __delaytilde_16_lastDelay;
                            this->delaytilde_16_ramp = __delaytilde_16_ramp;
                            this->delaytilde_16_crossfadeDelay = __delaytilde_16_crossfadeDelay;
                        }
                        
                        void dspexpr_92_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                            }
                        }
                        
                        void dspexpr_89_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] + in2[(Index)i];//#map:_###_obj_###_:1
                            }
                        }
                        
                        void stackprotect_perform(Index n) {
                            RNBO_UNUSED(n);
                            auto __stackprotect_count = this->stackprotect_count;
                            __stackprotect_count = 0;
                            this->stackprotect_count = __stackprotect_count;
                        }
                        
                        void delaytilde_15_del_step() {
                            this->delaytilde_15_del_reader++;
                        
                            if (this->delaytilde_15_del_reader >= (int)(this->delaytilde_15_del_buffer->getSize()))
                                this->delaytilde_15_del_reader = 0;
                        }
                        
                        number delaytilde_15_del_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->delaytilde_15_del_buffer->getSize()) + this->delaytilde_15_del_reader - ((size > this->delaytilde_15_del__maxdelay ? this->delaytilde_15_del__maxdelay : (size < (this->delaytilde_15_del_reader != this->delaytilde_15_del_writer) ? this->delaytilde_15_del_reader != this->delaytilde_15_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->delaytilde_15_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_15_del_wrap))
                                ), this->delaytilde_15_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_15_del_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->delaytilde_15_del_buffer->getSize()) + this->delaytilde_15_del_reader - ((size > this->delaytilde_15_del__maxdelay ? this->delaytilde_15_del__maxdelay : (size < (1 + this->delaytilde_15_del_reader != this->delaytilde_15_del_writer) ? 1 + this->delaytilde_15_del_reader != this->delaytilde_15_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->delaytilde_15_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_15_del_wrap))
                                ), this->delaytilde_15_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_15_del_wrap))
                                ), this->delaytilde_15_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_15_del_wrap))
                                ), this->delaytilde_15_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_15_del_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->delaytilde_15_del_buffer->getSize()) + this->delaytilde_15_del_reader - ((size > this->delaytilde_15_del__maxdelay ? this->delaytilde_15_del__maxdelay : (size < (1 + this->delaytilde_15_del_reader != this->delaytilde_15_del_writer) ? 1 + this->delaytilde_15_del_reader != this->delaytilde_15_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->delaytilde_15_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_15_del_wrap))
                                ), this->delaytilde_15_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_15_del_wrap))
                                ), this->delaytilde_15_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_15_del_wrap))
                                ), this->delaytilde_15_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_15_del_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->delaytilde_15_del_buffer->getSize()) + this->delaytilde_15_del_reader - ((size > this->delaytilde_15_del__maxdelay ? this->delaytilde_15_del__maxdelay : (size < (1 + this->delaytilde_15_del_reader != this->delaytilde_15_del_writer) ? 1 + this->delaytilde_15_del_reader != this->delaytilde_15_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->delaytilde_15_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_15_del_wrap))
                                ), this->delaytilde_15_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_15_del_wrap))
                                ), this->delaytilde_15_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_15_del_wrap))
                                ), this->delaytilde_15_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_15_del_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->delaytilde_15_del_buffer->getSize()) + this->delaytilde_15_del_reader - ((size > this->delaytilde_15_del__maxdelay ? this->delaytilde_15_del__maxdelay : (size < (1 + this->delaytilde_15_del_reader != this->delaytilde_15_del_writer) ? 1 + this->delaytilde_15_del_reader != this->delaytilde_15_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->delaytilde_15_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_15_del_wrap))
                                ), this->delaytilde_15_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_15_del_wrap))
                                ), this->delaytilde_15_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_15_del_wrap))
                                ), this->delaytilde_15_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_15_del_wrap))
                                ), this->delaytilde_15_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->delaytilde_15_del_wrap))
                                ), this->delaytilde_15_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->delaytilde_15_del_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->delaytilde_15_del_buffer->getSize()) + this->delaytilde_15_del_reader - ((size > this->delaytilde_15_del__maxdelay ? this->delaytilde_15_del__maxdelay : (size < (this->delaytilde_15_del_reader != this->delaytilde_15_del_writer) ? this->delaytilde_15_del_reader != this->delaytilde_15_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->delaytilde_15_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_15_del_wrap))
                                ), this->delaytilde_15_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_15_del_wrap))
                                ));
                            }
                        
                            number r = (int)(this->delaytilde_15_del_buffer->getSize()) + this->delaytilde_15_del_reader - ((size > this->delaytilde_15_del__maxdelay ? this->delaytilde_15_del__maxdelay : (size < (this->delaytilde_15_del_reader != this->delaytilde_15_del_writer) ? this->delaytilde_15_del_reader != this->delaytilde_15_del_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->delaytilde_15_del_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_15_del_wrap))
                            );
                        }
                        
                        void delaytilde_15_del_write(number v) {
                            this->delaytilde_15_del_writer = this->delaytilde_15_del_reader;
                            this->delaytilde_15_del_buffer[(Index)this->delaytilde_15_del_writer] = v;
                        }
                        
                        number delaytilde_15_del_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->delaytilde_15_del__maxdelay : size);
                            number val = this->delaytilde_15_del_read(effectiveSize, 0);
                            this->delaytilde_15_del_write(v);
                            this->delaytilde_15_del_step();
                            return val;
                        }
                        
                        array<Index, 2> delaytilde_15_del_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->delaytilde_15_del_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->delaytilde_15_del_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void delaytilde_15_del_init() {
                            auto result = this->delaytilde_15_del_calcSizeInSamples();
                            this->delaytilde_15_del__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->delaytilde_15_del_buffer->requestSize(requestedSizeInSamples, 1);
                            this->delaytilde_15_del_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void delaytilde_15_del_clear() {
                            this->delaytilde_15_del_buffer->setZero();
                        }
                        
                        void delaytilde_15_del_reset() {
                            auto result = this->delaytilde_15_del_calcSizeInSamples();
                            this->delaytilde_15_del__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->delaytilde_15_del_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->delaytilde_15_del_buffer);
                            this->delaytilde_15_del_wrap = this->delaytilde_15_del_buffer->getSize() - 1;
                            this->delaytilde_15_del_clear();
                        
                            if (this->delaytilde_15_del_reader >= this->delaytilde_15_del__maxdelay || this->delaytilde_15_del_writer >= this->delaytilde_15_del__maxdelay) {
                                this->delaytilde_15_del_reader = 0;
                                this->delaytilde_15_del_writer = 0;
                            }
                        }
                        
                        void delaytilde_15_del_dspsetup() {
                            this->delaytilde_15_del_reset();
                        }
                        
                        number delaytilde_15_del_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            return samplerate;
                        }
                        
                        number delaytilde_15_del_size() {
                            return this->delaytilde_15_del__maxdelay;
                        }
                        
                        void delaytilde_15_dspsetup(bool force) {
                            if ((bool)(this->delaytilde_15_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->delaytilde_15_rampInSamples = (long)(this->mstosamps(0));
                            this->delaytilde_15_lastDelay = -1;
                            this->delaytilde_15_setupDone = true;
                            this->delaytilde_15_del_dspsetup();
                        }
                        
                        void delaytilde_16_del_step() {
                            this->delaytilde_16_del_reader++;
                        
                            if (this->delaytilde_16_del_reader >= (int)(this->delaytilde_16_del_buffer->getSize()))
                                this->delaytilde_16_del_reader = 0;
                        }
                        
                        number delaytilde_16_del_read(number size, Int interp) {
                            if (interp == 0) {
                                number r = (int)(this->delaytilde_16_del_buffer->getSize()) + this->delaytilde_16_del_reader - ((size > this->delaytilde_16_del__maxdelay ? this->delaytilde_16_del__maxdelay : (size < (this->delaytilde_16_del_reader != this->delaytilde_16_del_writer) ? this->delaytilde_16_del_reader != this->delaytilde_16_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                long index2 = (long)(index1 + 1);
                        
                                return this->linearinterp(frac, this->delaytilde_16_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_16_del_wrap))
                                ), this->delaytilde_16_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_16_del_wrap))
                                ));
                            } else if (interp == 1) {
                                number r = (int)(this->delaytilde_16_del_buffer->getSize()) + this->delaytilde_16_del_reader - ((size > this->delaytilde_16_del__maxdelay ? this->delaytilde_16_del__maxdelay : (size < (1 + this->delaytilde_16_del_reader != this->delaytilde_16_del_writer) ? 1 + this->delaytilde_16_del_reader != this->delaytilde_16_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->cubicinterp(frac, this->delaytilde_16_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_16_del_wrap))
                                ), this->delaytilde_16_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_16_del_wrap))
                                ), this->delaytilde_16_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_16_del_wrap))
                                ), this->delaytilde_16_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_16_del_wrap))
                                ));
                            } else if (interp == 6) {
                                number r = (int)(this->delaytilde_16_del_buffer->getSize()) + this->delaytilde_16_del_reader - ((size > this->delaytilde_16_del__maxdelay ? this->delaytilde_16_del__maxdelay : (size < (1 + this->delaytilde_16_del_reader != this->delaytilde_16_del_writer) ? 1 + this->delaytilde_16_del_reader != this->delaytilde_16_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->fastcubicinterp(frac, this->delaytilde_16_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_16_del_wrap))
                                ), this->delaytilde_16_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_16_del_wrap))
                                ), this->delaytilde_16_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_16_del_wrap))
                                ), this->delaytilde_16_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_16_del_wrap))
                                ));
                            } else if (interp == 2) {
                                number r = (int)(this->delaytilde_16_del_buffer->getSize()) + this->delaytilde_16_del_reader - ((size > this->delaytilde_16_del__maxdelay ? this->delaytilde_16_del__maxdelay : (size < (1 + this->delaytilde_16_del_reader != this->delaytilde_16_del_writer) ? 1 + this->delaytilde_16_del_reader != this->delaytilde_16_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                        
                                return this->splineinterp(frac, this->delaytilde_16_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_16_del_wrap))
                                ), this->delaytilde_16_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_16_del_wrap))
                                ), this->delaytilde_16_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_16_del_wrap))
                                ), this->delaytilde_16_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_16_del_wrap))
                                ));
                            } else if (interp == 7) {
                                number r = (int)(this->delaytilde_16_del_buffer->getSize()) + this->delaytilde_16_del_reader - ((size > this->delaytilde_16_del__maxdelay ? this->delaytilde_16_del__maxdelay : (size < (1 + this->delaytilde_16_del_reader != this->delaytilde_16_del_writer) ? 1 + this->delaytilde_16_del_reader != this->delaytilde_16_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                                Index index3 = (Index)(index2 + 1);
                                Index index4 = (Index)(index3 + 1);
                                Index index5 = (Index)(index4 + 1);
                                Index index6 = (Index)(index5 + 1);
                        
                                return this->spline6interp(frac, this->delaytilde_16_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_16_del_wrap))
                                ), this->delaytilde_16_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_16_del_wrap))
                                ), this->delaytilde_16_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_16_del_wrap))
                                ), this->delaytilde_16_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_16_del_wrap))
                                ), this->delaytilde_16_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->delaytilde_16_del_wrap))
                                ), this->delaytilde_16_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->delaytilde_16_del_wrap))
                                ));
                            } else if (interp == 3) {
                                number r = (int)(this->delaytilde_16_del_buffer->getSize()) + this->delaytilde_16_del_reader - ((size > this->delaytilde_16_del__maxdelay ? this->delaytilde_16_del__maxdelay : (size < (this->delaytilde_16_del_reader != this->delaytilde_16_del_writer) ? this->delaytilde_16_del_reader != this->delaytilde_16_del_writer : size)));
                                long index1 = (long)(rnbo_floor(r));
                                number frac = r - index1;
                                Index index2 = (Index)(index1 + 1);
                        
                                return this->cosineinterp(frac, this->delaytilde_16_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_16_del_wrap))
                                ), this->delaytilde_16_del_buffer->getSample(
                                    0,
                                    (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_16_del_wrap))
                                ));
                            }
                        
                            number r = (int)(this->delaytilde_16_del_buffer->getSize()) + this->delaytilde_16_del_reader - ((size > this->delaytilde_16_del__maxdelay ? this->delaytilde_16_del__maxdelay : (size < (this->delaytilde_16_del_reader != this->delaytilde_16_del_writer) ? this->delaytilde_16_del_reader != this->delaytilde_16_del_writer : size)));
                            long index1 = (long)(rnbo_floor(r));
                        
                            return this->delaytilde_16_del_buffer->getSample(
                                0,
                                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_16_del_wrap))
                            );
                        }
                        
                        void delaytilde_16_del_write(number v) {
                            this->delaytilde_16_del_writer = this->delaytilde_16_del_reader;
                            this->delaytilde_16_del_buffer[(Index)this->delaytilde_16_del_writer] = v;
                        }
                        
                        number delaytilde_16_del_next(number v, int size) {
                            number effectiveSize = (size == -1 ? this->delaytilde_16_del__maxdelay : size);
                            number val = this->delaytilde_16_del_read(effectiveSize, 0);
                            this->delaytilde_16_del_write(v);
                            this->delaytilde_16_del_step();
                            return val;
                        }
                        
                        array<Index, 2> delaytilde_16_del_calcSizeInSamples() {
                            number sizeInSamples = 0;
                            Index allocatedSizeInSamples = 0;
                        
                            {
                                sizeInSamples = this->delaytilde_16_del_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                                this->delaytilde_16_del_sizemode = 0;
                            }
                        
                            sizeInSamples = rnbo_floor(sizeInSamples);
                            sizeInSamples = this->maximum(sizeInSamples, 2);
                            allocatedSizeInSamples = (Index)(sizeInSamples);
                            allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                            return {sizeInSamples, allocatedSizeInSamples};
                        }
                        
                        void delaytilde_16_del_init() {
                            auto result = this->delaytilde_16_del_calcSizeInSamples();
                            this->delaytilde_16_del__maxdelay = result[0];
                            Index requestedSizeInSamples = (Index)(result[1]);
                            this->delaytilde_16_del_buffer->requestSize(requestedSizeInSamples, 1);
                            this->delaytilde_16_del_wrap = requestedSizeInSamples - 1;
                        }
                        
                        void delaytilde_16_del_clear() {
                            this->delaytilde_16_del_buffer->setZero();
                        }
                        
                        void delaytilde_16_del_reset() {
                            auto result = this->delaytilde_16_del_calcSizeInSamples();
                            this->delaytilde_16_del__maxdelay = result[0];
                            Index allocatedSizeInSamples = (Index)(result[1]);
                            this->delaytilde_16_del_buffer->setSize(allocatedSizeInSamples);
                            updateDataRef(this, this->delaytilde_16_del_buffer);
                            this->delaytilde_16_del_wrap = this->delaytilde_16_del_buffer->getSize() - 1;
                            this->delaytilde_16_del_clear();
                        
                            if (this->delaytilde_16_del_reader >= this->delaytilde_16_del__maxdelay || this->delaytilde_16_del_writer >= this->delaytilde_16_del__maxdelay) {
                                this->delaytilde_16_del_reader = 0;
                                this->delaytilde_16_del_writer = 0;
                            }
                        }
                        
                        void delaytilde_16_del_dspsetup() {
                            this->delaytilde_16_del_reset();
                        }
                        
                        number delaytilde_16_del_evaluateSizeExpr(number samplerate, number vectorsize) {
                            RNBO_UNUSED(vectorsize);
                            return samplerate;
                        }
                        
                        number delaytilde_16_del_size() {
                            return this->delaytilde_16_del__maxdelay;
                        }
                        
                        void delaytilde_16_dspsetup(bool force) {
                            if ((bool)(this->delaytilde_16_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->delaytilde_16_rampInSamples = (long)(this->mstosamps(0));
                            this->delaytilde_16_lastDelay = -1;
                            this->delaytilde_16_setupDone = true;
                            this->delaytilde_16_del_dspsetup();
                        }
                        
                        bool stackprotect_check() {
                            this->stackprotect_count++;
                        
                            if (this->stackprotect_count > 128) {
                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                return true;
                            }
                        
                            return false;
                        }
                        
                        void updateTime(MillisecondTime time) {
                            this->_currentTime = time;
                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                        
                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                        
                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                this->sampleOffsetIntoNextAudioBuffer = 0;
                        }
                        
                        void assign_defaults()
                        {
                            dspexpr_89_in1 = 0;
                            dspexpr_89_in2 = 0;
                            delaytilde_15_delay = 0;
                            dspexpr_90_in1 = 0;
                            dspexpr_90_in2 = 0;
                            dspexpr_91_in1 = 0;
                            dspexpr_91_in2 = 0;
                            welch_tilde_07_x = 0;
                            delaytilde_16_delay = 0;
                            dspexpr_92_in1 = 0;
                            dspexpr_92_in2 = 0;
                            dspexpr_93_in1 = 0;
                            dspexpr_93_in2 = 0;
                            welch_tilde_08_x = 0;
                            _currentTime = 0;
                            audioProcessSampleCount = 0;
                            sampleOffsetIntoNextAudioBuffer = 0;
                            zeroBuffer = nullptr;
                            dummyBuffer = nullptr;
                            signals[0] = nullptr;
                            signals[1] = nullptr;
                            signals[2] = nullptr;
                            signals[3] = nullptr;
                            didAllocateSignals = 0;
                            vs = 0;
                            maxvs = 0;
                            sr = 44100;
                            invsr = 0.00002267573696;
                            delaytilde_15_lastDelay = -1;
                            delaytilde_15_crossfadeDelay = 0;
                            delaytilde_15_ramp = 0;
                            delaytilde_15_rampInSamples = 0;
                            delaytilde_15_del__maxdelay = 0;
                            delaytilde_15_del_sizemode = 0;
                            delaytilde_15_del_wrap = 0;
                            delaytilde_15_del_reader = 0;
                            delaytilde_15_del_writer = 0;
                            delaytilde_15_setupDone = false;
                            delaytilde_16_lastDelay = -1;
                            delaytilde_16_crossfadeDelay = 0;
                            delaytilde_16_ramp = 0;
                            delaytilde_16_rampInSamples = 0;
                            delaytilde_16_del__maxdelay = 0;
                            delaytilde_16_del_sizemode = 0;
                            delaytilde_16_del_wrap = 0;
                            delaytilde_16_del_reader = 0;
                            delaytilde_16_del_writer = 0;
                            delaytilde_16_setupDone = false;
                            stackprotect_count = 0;
                            _voiceIndex = 0;
                            _noteNumber = 0;
                            isMuted = 1;
                            parameterOffset = 0;
                        }
                        
                        // member variables
                        
                            number dspexpr_89_in1;
                            number dspexpr_89_in2;
                            number delaytilde_15_delay;
                            number dspexpr_90_in1;
                            number dspexpr_90_in2;
                            number dspexpr_91_in1;
                            number dspexpr_91_in2;
                            number welch_tilde_07_x;
                            number delaytilde_16_delay;
                            number dspexpr_92_in1;
                            number dspexpr_92_in2;
                            number dspexpr_93_in1;
                            number dspexpr_93_in2;
                            number welch_tilde_08_x;
                            MillisecondTime _currentTime;
                            UInt64 audioProcessSampleCount;
                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                            signal zeroBuffer;
                            signal dummyBuffer;
                            SampleValue * signals[4];
                            bool didAllocateSignals;
                            Index vs;
                            Index maxvs;
                            number sr;
                            number invsr;
                            number delaytilde_15_lastDelay;
                            number delaytilde_15_crossfadeDelay;
                            number delaytilde_15_ramp;
                            long delaytilde_15_rampInSamples;
                            Float64BufferRef delaytilde_15_del_buffer;
                            Index delaytilde_15_del__maxdelay;
                            Int delaytilde_15_del_sizemode;
                            Index delaytilde_15_del_wrap;
                            Int delaytilde_15_del_reader;
                            Int delaytilde_15_del_writer;
                            bool delaytilde_15_setupDone;
                            number delaytilde_16_lastDelay;
                            number delaytilde_16_crossfadeDelay;
                            number delaytilde_16_ramp;
                            long delaytilde_16_rampInSamples;
                            Float64BufferRef delaytilde_16_del_buffer;
                            Index delaytilde_16_del__maxdelay;
                            Int delaytilde_16_del_sizemode;
                            Index delaytilde_16_del_wrap;
                            Int delaytilde_16_del_reader;
                            Int delaytilde_16_del_writer;
                            bool delaytilde_16_setupDone;
                            number stackprotect_count;
                            DataRef delaytilde_15_del_bufferobj;
                            DataRef delaytilde_16_del_bufferobj;
                            Index _voiceIndex;
                            Int _noteNumber;
                            Index isMuted;
                            ParameterIndex parameterOffset;
                        
            };
            
            RNBOSubpatcher_809()
            {
            }
            
            ~RNBOSubpatcher_809()
            {
                delete this->p_13;
                delete this->p_14;
            }
            
            virtual RNBOSubpatcher_812* getPatcher() const {
                return static_cast<RNBOSubpatcher_812 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
                getEngine()->flushClockEvents(this, -1621164530, false);
                getEngine()->flushClockEvents(this, -62043057, false);
            }
            
            SampleIndex currentsampletime() {
                return this->audioProcessSampleCount + this->sampleOffsetIntoNextAudioBuffer;
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            number samplerate() const {
                return this->sr;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                this->linetilde_15_perform(this->signals[0], n);
                this->phasor_03_perform(this->signals[0], this->signals[1], n);
                this->dspexpr_94_perform(this->signals[1], this->dspexpr_94_in2, this->signals[0], n);
            
                this->wrap_tilde_02_perform(
                    this->signals[0],
                    this->wrap_tilde_02_low,
                    this->wrap_tilde_02_high,
                    this->signals[2],
                    n
                );
            
                this->linetilde_16_perform(this->signals[0], n);
                this->p_14_perform(in2, this->signals[1], this->signals[2], this->signals[0], out2, n);
                this->p_13_perform(in1, this->signals[1], this->signals[2], this->signals[0], out1, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 3; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->phasor_03_sigbuf = resizeSignal(this->phasor_03_sigbuf, this->maxvs, maxBlockSize);
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->phasor_03_dspsetup(forceDSPSetup);
                this->p_13->prepareToProcess(sampleRate, maxBlockSize, force);
                this->p_14->prepareToProcess(sampleRate, maxBlockSize, force);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {
                this->p_13 = new RNBOSubpatcher_800();
                this->p_13->setEngineAndPatcher(this->getEngine(), this);
                this->p_13->initialize();
                this->p_13->setParameterOffset(this->getParameterOffset(this->p_13));
                this->p_14 = new RNBOSubpatcher_801();
                this->p_14->setEngineAndPatcher(this->getEngine(), this);
                this->p_14->initialize();
                this->p_14->setParameterOffset(this->getParameterOffset(this->p_14));
            }
            
            void getPreset(PatcherStateInterface& preset) {
                this->p_13->getPreset(getSubState(getSubState(preset, "__sps"), "Shift~[1]"));
                this->p_14->getPreset(getSubState(getSubState(preset, "__sps"), "Shift~"));
            }
            
            void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                RNBO_UNUSED(v);
                this->updateTime(time);
            
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_13->getNumParameters())
                        this->p_13->setParameterValue(index, v, time);
            
                    index -= this->p_13->getNumParameters();
            
                    if (index < this->p_14->getNumParameters())
                        this->p_14->setParameterValue(index, v, time);
            
                    break;
                    }
                }
            }
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_13->getNumParameters())
                        return this->p_13->getParameterValue(index);
            
                    index -= this->p_13->getNumParameters();
            
                    if (index < this->p_14->getNumParameters())
                        return this->p_14->getParameterValue(index);
            
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0 + this->p_13->getNumParameters() + this->p_14->getNumParameters();
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_13->getNumParameters())
                        return this->p_13->getParameterName(index);
            
                    index -= this->p_13->getNumParameters();
            
                    if (index < this->p_14->getNumParameters())
                        return this->p_14->getParameterName(index);
            
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_13->getNumParameters())
                        return this->p_13->getParameterId(index);
            
                    index -= this->p_13->getNumParameters();
            
                    if (index < this->p_14->getNumParameters())
                        return this->p_14->getParameterId(index);
            
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                {
                    switch (index) {
                    default:
                        {
                        index -= 0;
            
                        if (index < this->p_13->getNumParameters())
                            this->p_13->getParameterInfo(index, info);
            
                        index -= this->p_13->getNumParameters();
            
                        if (index < this->p_14->getNumParameters())
                            this->p_14->getParameterInfo(index, info);
            
                        break;
                        }
                    }
                }
            }
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                if (subpatcher == this->p_13)
                    return 0;
            
                if (subpatcher == this->p_14)
                    return 0 + this->p_13->getNumParameters();
            
                return 0;
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_13->getNumParameters())
                        return this->p_13->convertToNormalizedParameterValue(index, value);
            
                    index -= this->p_13->getNumParameters();
            
                    if (index < this->p_14->getNumParameters())
                        return this->p_14->convertToNormalizedParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_13->getNumParameters())
                        return this->p_13->convertFromNormalizedParameterValue(index, value);
            
                    index -= this->p_13->getNumParameters();
            
                    if (index < this->p_14->getNumParameters())
                        return this->p_14->convertFromNormalizedParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_13->getNumParameters())
                        return this->p_13->constrainParameterValue(index, value);
            
                    index -= this->p_13->getNumParameters();
            
                    if (index < this->p_14->getNumParameters())
                        return this->p_14->constrainParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
                RNBO_UNUSED(value);
                RNBO_UNUSED(hasValue);
                this->updateTime(time);
            
                switch (index) {
                case -1621164530:
                    {
                    this->linetilde_15_target_bang();
                    break;
                    }
                case -62043057:
                    {
                    this->linetilde_16_target_bang();
                    break;
                    }
                }
            }
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("valin"):
                    {
                    if (TAG("verb/Pitch~/number_obj-122") == objectId)
                        this->numberobj_51_valin_set(payload);
            
                    if (TAG("verb/Pitch~/number_obj-110") == objectId)
                        this->numberobj_52_valin_set(payload);
            
                    if (TAG("verb/Pitch~/number_obj-89") == objectId)
                        this->numberobj_53_valin_set(payload);
            
                    if (TAG("verb/Pitch~/number_obj-124") == objectId)
                        this->numberobj_54_valin_set(payload);
            
                    if (TAG("verb/Pitch~/number_obj-112") == objectId)
                        this->numberobj_55_valin_set(payload);
            
                    if (TAG("verb/Pitch~/number_obj-151") == objectId)
                        this->numberobj_56_valin_set(payload);
            
                    break;
                    }
                case TAG("format"):
                    {
                    if (TAG("verb/Pitch~/number_obj-122") == objectId)
                        this->numberobj_51_format_set(payload);
            
                    if (TAG("verb/Pitch~/number_obj-110") == objectId)
                        this->numberobj_52_format_set(payload);
            
                    if (TAG("verb/Pitch~/number_obj-89") == objectId)
                        this->numberobj_53_format_set(payload);
            
                    if (TAG("verb/Pitch~/number_obj-124") == objectId)
                        this->numberobj_54_format_set(payload);
            
                    if (TAG("verb/Pitch~/number_obj-112") == objectId)
                        this->numberobj_55_format_set(payload);
            
                    if (TAG("verb/Pitch~/number_obj-151") == objectId)
                        this->numberobj_56_format_set(payload);
            
                    break;
                    }
                }
            
                this->p_13->processNumMessage(tag, objectId, time, payload);
                this->p_14->processNumMessage(tag, objectId, time, payload);
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                RNBO_UNUSED(objectId);
                this->updateTime(time);
                this->p_13->processListMessage(tag, objectId, time, payload);
                this->p_14->processListMessage(tag, objectId, time, payload);
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                RNBO_UNUSED(objectId);
                this->updateTime(time);
                this->p_13->processBangMessage(tag, objectId, time);
                this->p_14->processBangMessage(tag, objectId, time);
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("valout"):
                    {
                    return "valout";
                    }
                case TAG("verb/Pitch~/number_obj-122"):
                    {
                    return "verb/Pitch~/number_obj-122";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("verb/Pitch~/number_obj-110"):
                    {
                    return "verb/Pitch~/number_obj-110";
                    }
                case TAG("verb/Pitch~/number_obj-89"):
                    {
                    return "verb/Pitch~/number_obj-89";
                    }
                case TAG("verb/Pitch~/number_obj-124"):
                    {
                    return "verb/Pitch~/number_obj-124";
                    }
                case TAG("verb/Pitch~/number_obj-112"):
                    {
                    return "verb/Pitch~/number_obj-112";
                    }
                case TAG("verb/Pitch~/number_obj-151"):
                    {
                    return "verb/Pitch~/number_obj-151";
                    }
                case TAG("valin"):
                    {
                    return "valin";
                    }
                case TAG("format"):
                    {
                    return "format";
                    }
                }
            
                auto subpatchResult_0 = this->p_13->resolveTag(tag);
            
                if (subpatchResult_0)
                    return subpatchResult_0;
            
                auto subpatchResult_1 = this->p_14->resolveTag(tag);
            
                if (subpatchResult_1)
                    return subpatchResult_1;
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->p_13->processDataViewUpdate(index, time);
                this->p_14->processDataViewUpdate(index, time);
            }
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void numberobj_51_valin_set(number v) {
                this->numberobj_51_value_set(v);
            }
            
            void numberobj_51_format_set(number v) {
                this->numberobj_51_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_52_valin_set(number v) {
                this->numberobj_52_value_set(v);
            }
            
            void numberobj_52_format_set(number v) {
                this->numberobj_52_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_53_valin_set(number v) {
                this->numberobj_53_value_set(v);
            }
            
            void numberobj_53_format_set(number v) {
                this->numberobj_53_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void eventinlet_24_out1_bang_bang() {
                this->numberobj_53_value_bang();
            }
            
            void eventinlet_24_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_53_value_set(converted);
                }
            }
            
            void numberobj_54_valin_set(number v) {
                this->numberobj_54_value_set(v);
            }
            
            void numberobj_54_format_set(number v) {
                this->numberobj_54_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_55_valin_set(number v) {
                this->numberobj_55_value_set(v);
            }
            
            void numberobj_55_format_set(number v) {
                this->numberobj_55_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void eventinlet_25_out1_bang_bang() {
                this->numberobj_55_value_bang();
            }
            
            void eventinlet_25_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_55_value_set(converted);
                }
            }
            
            void numberobj_56_valin_set(number v) {
                this->numberobj_56_value_set(v);
            }
            
            void numberobj_56_format_set(number v) {
                this->numberobj_56_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void linetilde_15_target_bang() {}
            
            void linetilde_16_target_bang() {}
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 2;
            }
            
            Index getNumOutputChannels() const {
                return 2;
            }
            
            void initializeObjects() {
                this->numberobj_51_init();
                this->numberobj_52_init();
                this->numberobj_53_init();
                this->numberobj_54_init();
                this->numberobj_55_init();
                this->numberobj_56_init();
                this->p_13->initializeObjects();
                this->p_14->initializeObjects();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {
                this->updateTime(this->getEngine()->getCurrentTime());
                this->p_13->startup();
                this->p_14->startup();
            }
            
            void allocateDataRefs() {
                this->p_13->allocateDataRefs();
                this->p_14->allocateDataRefs();
            }
            
            void send_01_input_number_set(number v) {
                this->send_01_input_number = v;
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_22_source_Pitch_number_set(v);
            }
            
            void linetilde_15_time_set(number v) {
                this->linetilde_15_time = v;
            }
            
            void linetilde_15_segments_set(const list& v) {
                this->linetilde_15_segments = jsCreateListCopy(v);
            
                if ((bool)(v->length)) {
                    if (v->length == 1 && this->linetilde_15_time == 0) {
                        this->linetilde_15_activeRamps->length = 0;
                        this->linetilde_15_currentValue = v[0];
                    } else {
                        auto currentTime = this->currentsampletime();
                        number lastRampValue = this->linetilde_15_currentValue;
                        number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
            
                        for (Index i = 0; i < this->linetilde_15_activeRamps->length; i += 3) {
                            rampEnd = this->linetilde_15_activeRamps[(Index)(i + 2)];
            
                            if (rampEnd > currentTime) {
                                this->linetilde_15_activeRamps[(Index)(i + 2)] = currentTime;
                                number diff = rampEnd - currentTime;
                                number valueDiff = diff * this->linetilde_15_activeRamps[(Index)(i + 1)];
                                lastRampValue = this->linetilde_15_activeRamps[(Index)i] - valueDiff;
                                this->linetilde_15_activeRamps[(Index)i] = lastRampValue;
                                this->linetilde_15_activeRamps->length = i + 3;
                                rampEnd = currentTime;
                            } else {
                                lastRampValue = this->linetilde_15_activeRamps[(Index)i];
                            }
                        }
            
                        if (rampEnd < currentTime) {
                            this->linetilde_15_activeRamps->push(lastRampValue);
                            this->linetilde_15_activeRamps->push(0);
                            this->linetilde_15_activeRamps->push(currentTime);
                        }
            
                        number lastRampEnd = currentTime;
            
                        for (Index i = 0; i < v->length; i += 2) {
                            number destinationValue = v[(Index)i];
                            number inc = 0;
                            number rampTimeInSamples;
            
                            if (v->length > i + 1) {
                                rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
            
                                if ((bool)(this->linetilde_15_keepramp)) {
                                    this->linetilde_15_time_set(v[(Index)(i + 1)]);
                                }
                            } else {
                                rampTimeInSamples = this->mstosamps(this->linetilde_15_time);
                            }
            
                            if (rampTimeInSamples <= 0) {
                                rampTimeInSamples = 1;
                            }
            
                            inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                            lastRampEnd += rampTimeInSamples;
                            this->linetilde_15_activeRamps->push(destinationValue);
                            this->linetilde_15_activeRamps->push(inc);
                            this->linetilde_15_activeRamps->push(lastRampEnd);
                            lastRampValue = destinationValue;
                        }
                    }
                }
            }
            
            void numberobj_54_output_set(number v) {
                {
                    list converted = {v};
                    this->linetilde_15_segments_set(converted);
                }
            }
            
            void numberobj_54_value_set(number v) {
                this->numberobj_54_value_setter(v);
                v = this->numberobj_54_value;
                number localvalue = v;
            
                if (this->numberobj_54_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("verb/Pitch~/number_obj-124"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_54_output_set(localvalue);
            }
            
            void expr_19_out1_set(number v) {
                this->expr_19_out1 = v;
                this->numberobj_54_value_set(this->expr_19_out1);
            }
            
            void expr_19_in1_set(number in1) {
                this->expr_19_in1 = in1;
            
                this->expr_19_out1_set(
                    (this->expr_19_in2 == 0 ? 0 : (this->expr_19_in2 == 0. ? 0. : this->expr_19_in1 / this->expr_19_in2))
                );//#map:verb/Pitch~//_obj-91:1
            }
            
            void numberobj_52_output_set(number v) {
                this->expr_19_in1_set(v);
            }
            
            void numberobj_52_value_set(number v) {
                this->numberobj_52_value_setter(v);
                v = this->numberobj_52_value;
                number localvalue = v;
            
                if (this->numberobj_52_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("verb/Pitch~/number_obj-110"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_52_output_set(localvalue);
            }
            
            void expr_18_out1_set(number v) {
                this->expr_18_out1 = v;
                this->numberobj_52_value_set(this->expr_18_out1);
            }
            
            void expr_18_in1_set(number in1) {
                this->expr_18_in1 = in1;
                this->expr_18_out1_set(this->expr_18_in1 * this->expr_18_in2);//#map:verb/Pitch~/*_obj-92:1
            }
            
            void numberobj_51_output_set(number v) {
                this->expr_18_in1_set(v);
            }
            
            void numberobj_51_value_set(number v) {
                this->numberobj_51_value_setter(v);
                v = this->numberobj_51_value;
                number localvalue = v;
            
                if (this->numberobj_51_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("verb/Pitch~/number_obj-122"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_51_output_set(localvalue);
            }
            
            void expr_17_out1_set(number v) {
                this->expr_17_out1 = v;
                this->numberobj_51_value_set(this->expr_17_out1);
            }
            
            void expr_17_in1_set(number in1) {
                this->expr_17_in1 = in1;
                this->expr_17_out1_set(1 - fixnan(rnbo_pow(2, this->expr_17_in1 / (number)12)));//#map:verb/Pitch~/expr_obj-90:1
            }
            
            void numberobj_53_output_set(number v) {
                this->send_01_input_number_set(v);
                this->expr_17_in1_set(v);
            }
            
            void numberobj_53_value_set(number v) {
                this->numberobj_53_value_setter(v);
                v = this->numberobj_53_value;
                number localvalue = v;
            
                if (this->numberobj_53_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("verb/Pitch~/number_obj-89"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_53_output_set(localvalue);
            }
            
            void eventinlet_24_out1_number_set(number v) {
                this->numberobj_53_value_set(v);
            }
            
            void linetilde_16_time_set(number v) {
                this->linetilde_16_time = v;
            }
            
            void linetilde_16_segments_set(const list& v) {
                this->linetilde_16_segments = jsCreateListCopy(v);
            
                if ((bool)(v->length)) {
                    if (v->length == 1 && this->linetilde_16_time == 0) {
                        this->linetilde_16_activeRamps->length = 0;
                        this->linetilde_16_currentValue = v[0];
                    } else {
                        auto currentTime = this->currentsampletime();
                        number lastRampValue = this->linetilde_16_currentValue;
                        number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
            
                        for (Index i = 0; i < this->linetilde_16_activeRamps->length; i += 3) {
                            rampEnd = this->linetilde_16_activeRamps[(Index)(i + 2)];
            
                            if (rampEnd > currentTime) {
                                this->linetilde_16_activeRamps[(Index)(i + 2)] = currentTime;
                                number diff = rampEnd - currentTime;
                                number valueDiff = diff * this->linetilde_16_activeRamps[(Index)(i + 1)];
                                lastRampValue = this->linetilde_16_activeRamps[(Index)i] - valueDiff;
                                this->linetilde_16_activeRamps[(Index)i] = lastRampValue;
                                this->linetilde_16_activeRamps->length = i + 3;
                                rampEnd = currentTime;
                            } else {
                                lastRampValue = this->linetilde_16_activeRamps[(Index)i];
                            }
                        }
            
                        if (rampEnd < currentTime) {
                            this->linetilde_16_activeRamps->push(lastRampValue);
                            this->linetilde_16_activeRamps->push(0);
                            this->linetilde_16_activeRamps->push(currentTime);
                        }
            
                        number lastRampEnd = currentTime;
            
                        for (Index i = 0; i < v->length; i += 2) {
                            number destinationValue = v[(Index)i];
                            number inc = 0;
                            number rampTimeInSamples;
            
                            if (v->length > i + 1) {
                                rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
            
                                if ((bool)(this->linetilde_16_keepramp)) {
                                    this->linetilde_16_time_set(v[(Index)(i + 1)]);
                                }
                            } else {
                                rampTimeInSamples = this->mstosamps(this->linetilde_16_time);
                            }
            
                            if (rampTimeInSamples <= 0) {
                                rampTimeInSamples = 1;
                            }
            
                            inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                            lastRampEnd += rampTimeInSamples;
                            this->linetilde_16_activeRamps->push(destinationValue);
                            this->linetilde_16_activeRamps->push(inc);
                            this->linetilde_16_activeRamps->push(lastRampEnd);
                            lastRampValue = destinationValue;
                        }
                    }
                }
            }
            
            void numberobj_56_output_set(number v) {
                {
                    list converted = {v};
                    this->linetilde_16_segments_set(converted);
                }
            }
            
            void numberobj_56_value_set(number v) {
                this->numberobj_56_value_setter(v);
                v = this->numberobj_56_value;
                number localvalue = v;
            
                if (this->numberobj_56_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("verb/Pitch~/number_obj-151"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_56_output_set(localvalue);
            }
            
            void mstosamps_05_out1_set(number v) {
                this->numberobj_56_value_set(v);
            }
            
            void mstosamps_05_ms_set(number ms) {
                this->mstosamps_05_ms = ms;
            
                {
                    this->mstosamps_05_out1_set(ms * this->sr * 0.001);
                    return;
                }
            }
            
            void expr_19_in2_set(number v) {
                this->expr_19_in2 = v;
                this->expr_19_in1_set(this->expr_19_in1);
            }
            
            void numberobj_55_output_set(number v) {
                this->mstosamps_05_ms_set(v);
                this->expr_19_in2_set(v);
            }
            
            void numberobj_55_value_set(number v) {
                this->numberobj_55_value_setter(v);
                v = this->numberobj_55_value;
                number localvalue = v;
            
                if (this->numberobj_55_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("verb/Pitch~/number_obj-112"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_55_output_set(localvalue);
            }
            
            void eventinlet_25_out1_number_set(number v) {
                this->numberobj_55_value_set(v);
            }
            
            void numberobj_53_value_bang() {
                number v = this->numberobj_53_value;
                number localvalue = v;
            
                if (this->numberobj_53_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("verb/Pitch~/number_obj-89"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_53_output_set(localvalue);
            }
            
            void numberobj_55_value_bang() {
                number v = this->numberobj_55_value;
                number localvalue = v;
            
                if (this->numberobj_55_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("verb/Pitch~/number_obj-112"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_55_output_set(localvalue);
            }
            
            void linetilde_15_perform(SampleValue * out, Index n) {
                auto __linetilde_15_time = this->linetilde_15_time;
                auto __linetilde_15_keepramp = this->linetilde_15_keepramp;
                auto __linetilde_15_currentValue = this->linetilde_15_currentValue;
                Index i = 0;
            
                if ((bool)(this->linetilde_15_activeRamps->length)) {
                    while ((bool)(this->linetilde_15_activeRamps->length) && i < n) {
                        number destinationValue = this->linetilde_15_activeRamps[0];
                        number inc = this->linetilde_15_activeRamps[1];
                        number rampTimeInSamples = this->linetilde_15_activeRamps[2] - this->audioProcessSampleCount - i;
                        number val = __linetilde_15_currentValue;
            
                        while (rampTimeInSamples > 0 && i < n) {
                            out[(Index)i] = val;
                            val += inc;
                            i++;
                            rampTimeInSamples--;
                        }
            
                        if (rampTimeInSamples <= 0) {
                            val = destinationValue;
                            this->linetilde_15_activeRamps->splice(0, 3);
            
                            if ((bool)(!(bool)(this->linetilde_15_activeRamps->length))) {
                                this->getEngine()->scheduleClockEventWithValue(
                                    this,
                                    -1621164530,
                                    this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                                    0
                                );;
            
                                if ((bool)(!(bool)(__linetilde_15_keepramp))) {
                                    __linetilde_15_time = 0;
                                }
                            }
                        }
            
                        __linetilde_15_currentValue = val;
                    }
                }
            
                while (i < n) {
                    out[(Index)i] = __linetilde_15_currentValue;
                    i++;
                }
            
                this->linetilde_15_currentValue = __linetilde_15_currentValue;
                this->linetilde_15_time = __linetilde_15_time;
            }
            
            void phasor_03_perform(const Sample * freq, SampleValue * out, Index n) {
                for (Index i = 0; i < n; i++) {
                    out[(Index)i] = this->phasor_03_ph_next(freq[(Index)i], -1);
                    this->phasor_03_sigbuf[(Index)i] = -1;
                }
            }
            
            void dspexpr_94_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] + -0.5;//#map:_###_obj_###_:1
                }
            }
            
            void wrap_tilde_02_perform(const Sample * x, number low, number high, SampleValue * out1, Index n) {
                RNBO_UNUSED(high);
                RNBO_UNUSED(low);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number lo;
                    number hi;
                    lo = 0;
                    hi = 1;
                    number range = hi - lo;
            
                    if (x[(Index)i] >= lo && x[(Index)i] < hi) {
                        out1[(Index)i] = x[(Index)i];
                        continue;
                    }
            
                    if (range <= 0.000000001) {
                        out1[(Index)i] = lo;
                        continue;
                    }
            
                    long numWraps = (long)(trunc((x[(Index)i] - lo) / range));
                    numWraps = numWraps - ((x[(Index)i] < lo ? 1 : 0));
                    number result = x[(Index)i] - range * numWraps;
            
                    if (result >= hi) {
                        out1[(Index)i] = result - range;
                        continue;
                    } else {
                        out1[(Index)i] = result;
                        continue;
                    }
                }
            }
            
            void linetilde_16_perform(SampleValue * out, Index n) {
                auto __linetilde_16_time = this->linetilde_16_time;
                auto __linetilde_16_keepramp = this->linetilde_16_keepramp;
                auto __linetilde_16_currentValue = this->linetilde_16_currentValue;
                Index i = 0;
            
                if ((bool)(this->linetilde_16_activeRamps->length)) {
                    while ((bool)(this->linetilde_16_activeRamps->length) && i < n) {
                        number destinationValue = this->linetilde_16_activeRamps[0];
                        number inc = this->linetilde_16_activeRamps[1];
                        number rampTimeInSamples = this->linetilde_16_activeRamps[2] - this->audioProcessSampleCount - i;
                        number val = __linetilde_16_currentValue;
            
                        while (rampTimeInSamples > 0 && i < n) {
                            out[(Index)i] = val;
                            val += inc;
                            i++;
                            rampTimeInSamples--;
                        }
            
                        if (rampTimeInSamples <= 0) {
                            val = destinationValue;
                            this->linetilde_16_activeRamps->splice(0, 3);
            
                            if ((bool)(!(bool)(this->linetilde_16_activeRamps->length))) {
                                this->getEngine()->scheduleClockEventWithValue(
                                    this,
                                    -62043057,
                                    this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                                    0
                                );;
            
                                if ((bool)(!(bool)(__linetilde_16_keepramp))) {
                                    __linetilde_16_time = 0;
                                }
                            }
                        }
            
                        __linetilde_16_currentValue = val;
                    }
                }
            
                while (i < n) {
                    out[(Index)i] = __linetilde_16_currentValue;
                    i++;
                }
            
                this->linetilde_16_currentValue = __linetilde_16_currentValue;
                this->linetilde_16_time = __linetilde_16_time;
            }
            
            void p_14_perform(
                const SampleValue * in1,
                const SampleValue * in2,
                const SampleValue * in3,
                const SampleValue * in4,
                SampleValue * out1,
                Index n
            ) {
                // subpatcher: Shift~
                ConstSampleArray<4> ins = {in1, in2, in3, in4};
            
                SampleArray<1> outs = {out1};
                this->p_14->process(ins, 4, outs, 1, n);
            }
            
            void p_13_perform(
                const SampleValue * in1,
                const SampleValue * in2,
                const SampleValue * in3,
                const SampleValue * in4,
                SampleValue * out1,
                Index n
            ) {
                // subpatcher: Shift~
                ConstSampleArray<4> ins = {in1, in2, in3, in4};
            
                SampleArray<1> outs = {out1};
                this->p_13->process(ins, 4, outs, 1, n);
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void numberobj_51_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_51_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_51_value = localvalue;
            }
            
            void numberobj_52_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_52_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_52_value = localvalue;
            }
            
            void numberobj_53_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_53_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_53_value = localvalue;
            }
            
            void numberobj_54_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_54_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_54_value = localvalue;
            }
            
            void numberobj_55_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_55_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_55_value = localvalue;
            }
            
            void numberobj_56_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_56_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_56_value = localvalue;
            }
            
            void numberobj_51_init() {
                this->numberobj_51_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/Pitch~/number_obj-122"), 1, this->_currentTime);
            }
            
            void numberobj_51_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_51_value;
            }
            
            void numberobj_51_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_51_value_set(preset["value"]);
            }
            
            void numberobj_52_init() {
                this->numberobj_52_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/Pitch~/number_obj-110"), 1, this->_currentTime);
            }
            
            void numberobj_52_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_52_value;
            }
            
            void numberobj_52_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_52_value_set(preset["value"]);
            }
            
            void numberobj_53_init() {
                this->numberobj_53_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/Pitch~/number_obj-89"), 1, this->_currentTime);
            }
            
            void numberobj_53_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_53_value;
            }
            
            void numberobj_53_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_53_value_set(preset["value"]);
            }
            
            void numberobj_54_init() {
                this->numberobj_54_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/Pitch~/number_obj-124"), 1, this->_currentTime);
            }
            
            void numberobj_54_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_54_value;
            }
            
            void numberobj_54_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_54_value_set(preset["value"]);
            }
            
            number phasor_03_ph_next(number freq, number reset) {
                RNBO_UNUSED(reset);
                number pincr = freq * this->phasor_03_ph_conv;
            
                if (this->phasor_03_ph_currentPhase < 0.)
                    this->phasor_03_ph_currentPhase = 1. + this->phasor_03_ph_currentPhase;
            
                if (this->phasor_03_ph_currentPhase > 1.)
                    this->phasor_03_ph_currentPhase = this->phasor_03_ph_currentPhase - 1.;
            
                number tmp = this->phasor_03_ph_currentPhase;
                this->phasor_03_ph_currentPhase += pincr;
                return tmp;
            }
            
            void phasor_03_ph_reset() {
                this->phasor_03_ph_currentPhase = 0;
            }
            
            void phasor_03_ph_dspsetup() {
                this->phasor_03_ph_conv = (number)1 / this->sr;
            }
            
            void phasor_03_dspsetup(bool force) {
                if ((bool)(this->phasor_03_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->phasor_03_conv = (number)1 / this->samplerate();
                this->phasor_03_setupDone = true;
                this->phasor_03_ph_dspsetup();
            }
            
            void numberobj_55_init() {
                this->numberobj_55_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/Pitch~/number_obj-112"), 1, this->_currentTime);
            }
            
            void numberobj_55_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_55_value;
            }
            
            void numberobj_55_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_55_value_set(preset["value"]);
            }
            
            void numberobj_56_init() {
                this->numberobj_56_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/Pitch~/number_obj-151"), 1, this->_currentTime);
            }
            
            void numberobj_56_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_56_value;
            }
            
            void numberobj_56_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_56_value_set(preset["value"]);
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                numberobj_51_value = 0;
                numberobj_51_value_setter(numberobj_51_value);
                numberobj_52_value = 0;
                numberobj_52_value_setter(numberobj_52_value);
                numberobj_53_value = 0;
                numberobj_53_value_setter(numberobj_53_value);
                expr_17_in1 = 0;
                expr_17_out1 = 0;
                expr_18_in1 = 0;
                expr_18_in2 = 1000;
                expr_18_out1 = 0;
                send_01_input_number = 0;
                p_13_target = 0;
                numberobj_54_value = 0;
                numberobj_54_value_setter(numberobj_54_value);
                expr_19_in1 = 0;
                expr_19_in2 = 1;
                expr_19_out1 = 0;
                linetilde_15_time = 50;
                linetilde_15_keepramp = 1;
                phasor_03_freq = 0;
                p_14_target = 0;
                wrap_tilde_02_x = 0;
                wrap_tilde_02_low = 0;
                wrap_tilde_02_high = 1;
                dspexpr_94_in1 = 0;
                dspexpr_94_in2 = -0.5;
                numberobj_55_value = 0;
                numberobj_55_value_setter(numberobj_55_value);
                mstosamps_05_ms = 0;
                numberobj_56_value = 0;
                numberobj_56_value_setter(numberobj_56_value);
                linetilde_16_time = 50;
                linetilde_16_keepramp = 1;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                signals[1] = nullptr;
                signals[2] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                numberobj_51_currentFormat = 6;
                numberobj_51_lastValue = 0;
                numberobj_52_currentFormat = 6;
                numberobj_52_lastValue = 0;
                numberobj_53_currentFormat = 6;
                numberobj_53_lastValue = 0;
                numberobj_54_currentFormat = 6;
                numberobj_54_lastValue = 0;
                linetilde_15_currentValue = 0;
                phasor_03_sigbuf = nullptr;
                phasor_03_lastLockedPhase = 0;
                phasor_03_conv = 0;
                phasor_03_ph_currentPhase = 0;
                phasor_03_ph_conv = 0;
                phasor_03_setupDone = false;
                numberobj_55_currentFormat = 6;
                numberobj_55_lastValue = 0;
                numberobj_56_currentFormat = 6;
                numberobj_56_lastValue = 0;
                linetilde_16_currentValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number numberobj_51_value;
                number numberobj_52_value;
                number numberobj_53_value;
                number expr_17_in1;
                number expr_17_out1;
                number expr_18_in1;
                number expr_18_in2;
                number expr_18_out1;
                number send_01_input_number;
                list send_01_input_list;
                number p_13_target;
                number numberobj_54_value;
                number expr_19_in1;
                number expr_19_in2;
                number expr_19_out1;
                list linetilde_15_segments;
                number linetilde_15_time;
                number linetilde_15_keepramp;
                number phasor_03_freq;
                number p_14_target;
                number wrap_tilde_02_x;
                number wrap_tilde_02_low;
                number wrap_tilde_02_high;
                number dspexpr_94_in1;
                number dspexpr_94_in2;
                number numberobj_55_value;
                number mstosamps_05_ms;
                number numberobj_56_value;
                list linetilde_16_segments;
                number linetilde_16_time;
                number linetilde_16_keepramp;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[3];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Int numberobj_51_currentFormat;
                number numberobj_51_lastValue;
                Int numberobj_52_currentFormat;
                number numberobj_52_lastValue;
                Int numberobj_53_currentFormat;
                number numberobj_53_lastValue;
                Int numberobj_54_currentFormat;
                number numberobj_54_lastValue;
                list linetilde_15_activeRamps;
                number linetilde_15_currentValue;
                signal phasor_03_sigbuf;
                number phasor_03_lastLockedPhase;
                number phasor_03_conv;
                number phasor_03_ph_currentPhase;
                number phasor_03_ph_conv;
                bool phasor_03_setupDone;
                Int numberobj_55_currentFormat;
                number numberobj_55_lastValue;
                Int numberobj_56_currentFormat;
                number numberobj_56_lastValue;
                list linetilde_16_activeRamps;
                number linetilde_16_currentValue;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
                RNBOSubpatcher_800* p_13;
                RNBOSubpatcher_801* p_14;
            
    };
    
    RNBOSubpatcher_812()
    {
    }
    
    ~RNBOSubpatcher_812()
    {
        delete this->p_15;
        delete this->p_16;
        delete this->p_17;
        delete this->p_18;
        delete this->p_19;
        delete this->p_20;
        delete this->p_21;
        delete this->p_22;
    }
    
    virtual rnbomatic* getPatcher() const {
        return static_cast<rnbomatic *>(_parentPatcher);
    }
    
    rnbomatic* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
    }
    
    inline number linearinterp(number frac, number x, number y) {
        return x + (y - x) * frac;
    }
    
    inline number cubicinterp(number a, number w, number x, number y, number z) {
        number a1 = 1. + a;
        number aa = a * a1;
        number b = 1. - a;
        number b1 = 2. - a;
        number bb = b * b1;
        number fw = -.1666667 * bb * a;
        number fx = .5 * bb * a1;
        number fy = .5 * aa * b1;
        number fz = -.1666667 * aa * b;
        return w * fw + x * fx + y * fy + z * fz;
    }
    
    inline number fastcubicinterp(number a, number w, number x, number y, number z) {
        number a2 = a * a;
        number f0 = z - y - w + x;
        number f1 = w - x - f0;
        number f2 = y - w;
        number f3 = x;
        return f0 * a * a2 + f1 * a2 + f2 * a + f3;
    }
    
    inline number splineinterp(number a, number w, number x, number y, number z) {
        number a2 = a * a;
        number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
        number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
        number f2 = -0.5 * w + 0.5 * y;
        return f0 * a * a2 + f1 * a2 + f2 * a + x;
    }
    
    inline number spline6interp(number a, number y0, number y1, number y2, number y3, number y4, number y5) {
        number ym2py2 = y0 + y4;
        number ym1py1 = y1 + y3;
        number y2mym2 = y4 - y0;
        number y1mym1 = y3 - y1;
        number sixthym1py1 = (number)1 / (number)6.0 * ym1py1;
        number c0 = (number)1 / (number)120.0 * ym2py2 + (number)13 / (number)60.0 * ym1py1 + (number)11 / (number)20.0 * y2;
        number c1 = (number)1 / (number)24.0 * y2mym2 + (number)5 / (number)12.0 * y1mym1;
        number c2 = (number)1 / (number)12.0 * ym2py2 + sixthym1py1 - (number)1 / (number)2.0 * y2;
        number c3 = (number)1 / (number)12.0 * y2mym2 - (number)1 / (number)6.0 * y1mym1;
        number c4 = (number)1 / (number)24.0 * ym2py2 - sixthym1py1 + (number)1 / (number)4.0 * y2;
        number c5 = (number)1 / (number)120.0 * (y5 - y0) + (number)1 / (number)24.0 * (y1 - y4) + (number)1 / (number)12.0 * (y3 - y2);
        return ((((c5 * a + c4) * a + c3) * a + c2) * a + c1) * a + c0;
    }
    
    inline number cosT8(number r) {
        number t84 = 56.0;
        number t83 = 1680.0;
        number t82 = 20160.0;
        number t81 = 2.4801587302e-05;
        number t73 = 42.0;
        number t72 = 840.0;
        number t71 = 1.9841269841e-04;
    
        if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
            number rr = r * r;
            return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
        } else if (r > 0.0) {
            r -= 1.57079632679489661923132169163975144;
            number rr = r * r;
            return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
        } else {
            r += 1.57079632679489661923132169163975144;
            number rr = r * r;
            return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
        }
    }
    
    inline number cosineinterp(number frac, number x, number y) {
        number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
        return x * (1.0 - a2) + y * a2;
    }
    
    number mstosamps(MillisecondTime ms) {
        return ms * this->sr * 0.001;
    }
    
    number samplerate() const {
        return this->sr;
    }
    
    Index vectorsize() const {
        return this->vs;
    }
    
    number maximum(number x, number y) {
        return (x < y ? y : x);
    }
    
    number wrap(number x, number low, number high) {
        number lo;
        number hi;
    
        if (low == high)
            return low;
    
        if (low > high) {
            hi = low;
            lo = high;
        } else {
            lo = low;
            hi = high;
        }
    
        number range = hi - lo;
    
        if (x >= lo && x < hi)
            return x;
    
        if (range <= 0.000000001)
            return lo;
    
        long numWraps = (long)(trunc((x - lo) / range));
        numWraps = numWraps - ((x < lo ? 1 : 0));
        number result = x - range * numWraps;
    
        if (result >= hi)
            return result - range;
        else
            return result;
    }
    
    number t60(number rate) {
        return rnbo_exp(-6.9077552789821 / ((rate == 0 ? this->sr : rate)));
    }
    
    number minimum(number x, number y) {
        return (y < x ? y : x);
    }
    
    ParameterValue fromnormalized(ParameterIndex index, ParameterValue normalizedValue) {
        return this->convertFromNormalizedParameterValue(index, normalizedValue);
    }
    
    Index getNumMidiInputPorts() const {
        return 1;
    }
    
    void processMidiEvent(MillisecondTime time, int port, ConstByteArray data, Index length) {
        this->updateTime(time);
        this->ctlin_01_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
        this->ctlin_02_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
        this->ctlin_03_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
        this->ctlin_04_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
        this->ctlin_05_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
        this->ctlin_06_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
        this->ctlin_07_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
        this->ctlin_08_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
        this->ctlin_09_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
        this->ctlin_10_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
        this->ctlin_11_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
        this->ctlin_12_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
        this->ctlin_13_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
        this->ctlin_14_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
        this->ctlin_15_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
    }
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        SampleValue * source_L_tilde = (numOutputs >= 3 && outputs[2] ? outputs[2] : this->dummyBuffer);
        SampleValue * source_R_tilde = (numOutputs >= 4 && outputs[3] ? outputs[3] : this->dummyBuffer);
        const SampleValue * target_L_tilde = (numInputs >= 7 && inputs[6] ? inputs[6] : this->zeroBuffer);
        const SampleValue * target_R_tilde = (numInputs >= 8 && inputs[7] ? inputs[7] : this->zeroBuffer);
        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
        SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
        const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
        const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
        const SampleValue * in3 = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
        const SampleValue * in4 = (numInputs >= 4 && inputs[3] ? inputs[3] : this->zeroBuffer);
        const SampleValue * in5 = (numInputs >= 5 && inputs[4] ? inputs[4] : this->zeroBuffer);
        const SampleValue * in6 = (numInputs >= 6 && inputs[5] ? inputs[5] : this->zeroBuffer);
        this->dspexpr_97_perform(in1, this->dspexpr_97_in2, this->signals[0], n);
        this->dspexpr_96_perform(this->dspexpr_96_in1, this->dspexpr_96_in2, this->dummyBuffer, n);
        this->dspexpr_99_perform(in2, this->dspexpr_99_in2, this->signals[1], n);
        this->feedbackreader_05_perform(this->signals[2], n);
        this->signalsend_01_perform(this->signals[2], this->signals[3], n);
        this->signalforwarder_01_perform(this->signals[3], source_L_tilde, n);
        this->feedbackreader_06_perform(this->signals[2], n);
        this->signalsend_02_perform(this->signals[2], this->signals[4], n);
        this->signalforwarder_02_perform(this->signals[4], source_R_tilde, n);
        this->stackprotect_perform(n);
        this->signaladder_08_perform(target_L_tilde, this->signals[3], this->signals[3], n);
        this->signalreceive_01_perform(this->signals[3], this->signals[2], n);
        this->dspexpr_100_perform(in5, this->signals[2], this->signals[5], n);
        this->signaladder_09_perform(target_R_tilde, this->signals[4], this->signals[4], n);
        this->signalreceive_02_perform(this->signals[4], this->signals[2], n);
        this->dspexpr_101_perform(in6, this->signals[2], this->signals[6], n);
    
        this->gen_02_perform(
            this->signals[5],
            this->signals[6],
            this->gen_02_release,
            this->gen_02_threshold,
            this->gen_02_lookahead,
            this->gen_02_attack,
            this->signals[2],
            this->signals[7],
            this->dummyBuffer,
            n
        );
    
        this->p_18_perform(this->signals[2], this->signals[7], this->signals[6], this->signals[5], n);
        this->dspexpr_95_perform(this->signals[0], this->signals[6], this->signals[7], n);
        this->p_22_perform(this->signals[6], this->signals[5], this->signals[0], this->signals[2], n);
        this->p_19_perform(this->signals[0], this->signals[2], this->signals[8], this->signals[9], n);
        this->p_21_perform(this->signals[8], this->signals[9], this->signals[2], this->signals[0], n);
    
        this->p_20_perform(
            this->signals[2],
            this->signals[0],
            this->signals[10],
            this->signals[11],
            n
        );
    
        this->feedbackwriter_05_perform(this->signals[10], n);
        this->feedbackwriter_06_perform(this->signals[11], n);
        this->dspexpr_98_perform(this->signals[1], this->signals[5], this->signals[11], n);
    
        this->p_15_perform(
            this->signals[7],
            this->signals[11],
            this->signals[1],
            this->signals[10],
            n
        );
    
        this->p_17_perform(
            this->signals[1],
            this->signals[10],
            this->signals[6],
            this->signals[5],
            this->signals[8],
            this->signals[9],
            this->signals[11],
            this->signals[7],
            n
        );
    
        this->gen_01_perform(
            this->signals[11],
            this->signals[7],
            this->gen_01_threshold,
            this->gen_01_release,
            this->gen_01_lookahead,
            this->gen_01_attack,
            this->signals[9],
            this->signals[8],
            this->dummyBuffer,
            n
        );
    
        this->p_16_perform(in3, in4, this->signals[9], this->signals[8], out1, out2, n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            Index i;
    
            for (i = 0; i < 12; i++) {
                this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
            }
    
            this->feedbacktilde_05_feedbackbuffer = resizeSignal(this->feedbacktilde_05_feedbackbuffer, this->maxvs, maxBlockSize);
            this->feedbacktilde_06_feedbackbuffer = resizeSignal(this->feedbacktilde_06_feedbackbuffer, this->maxvs, maxBlockSize);
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        this->gen_02_dspsetup(forceDSPSetup);
        this->gen_01_dspsetup(forceDSPSetup);
        this->p_15->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_16->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_17->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_18->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_19->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_20->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_21->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_22->prepareToProcess(sampleRate, maxBlockSize, force);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    void onSampleRateChanged(double ) {}
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {
        this->p_15 = new RNBOSubpatcher_802();
        this->p_15->setEngineAndPatcher(this->getEngine(), this);
        this->p_15->initialize();
        this->p_15->setParameterOffset(this->getParameterOffset(this->p_15));
        this->p_16 = new RNBOSubpatcher_803();
        this->p_16->setEngineAndPatcher(this->getEngine(), this);
        this->p_16->initialize();
        this->p_16->setParameterOffset(this->getParameterOffset(this->p_16));
        this->p_17 = new RNBOSubpatcher_804();
        this->p_17->setEngineAndPatcher(this->getEngine(), this);
        this->p_17->initialize();
        this->p_17->setParameterOffset(this->getParameterOffset(this->p_17));
        this->p_18 = new RNBOSubpatcher_805();
        this->p_18->setEngineAndPatcher(this->getEngine(), this);
        this->p_18->initialize();
        this->p_18->setParameterOffset(this->getParameterOffset(this->p_18));
        this->p_19 = new RNBOSubpatcher_806();
        this->p_19->setEngineAndPatcher(this->getEngine(), this);
        this->p_19->initialize();
        this->p_19->setParameterOffset(this->getParameterOffset(this->p_19));
        this->p_20 = new RNBOSubpatcher_807();
        this->p_20->setEngineAndPatcher(this->getEngine(), this);
        this->p_20->initialize();
        this->p_20->setParameterOffset(this->getParameterOffset(this->p_20));
        this->p_21 = new RNBOSubpatcher_808();
        this->p_21->setEngineAndPatcher(this->getEngine(), this);
        this->p_21->initialize();
        this->p_21->setParameterOffset(this->getParameterOffset(this->p_21));
        this->p_22 = new RNBOSubpatcher_809();
        this->p_22->setEngineAndPatcher(this->getEngine(), this);
        this->p_22->initialize();
        this->p_22->setParameterOffset(this->getParameterOffset(this->p_22));
    }
    
    void getPreset(PatcherStateInterface& preset) {
        this->param_04_getPresetValue(getSubState(preset, "octdamp"));
        this->param_05_getPresetValue(getSubState(preset, "octvol"));
        this->param_06_getPresetValue(getSubState(preset, "mix1"));
        this->param_07_getPresetValue(getSubState(preset, "damp"));
        this->param_08_getPresetValue(getSubState(preset, "decay"));
        this->param_09_getPresetValue(getSubState(preset, "pitchvol"));
        this->param_10_getPresetValue(getSubState(preset, "revvol"));
        this->param_11_getPresetValue(getSubState(preset, "jitter"));
        this->param_12_getPresetValue(getSubState(preset, "size"));
        this->param_13_getPresetValue(getSubState(preset, "diff"));
        this->param_14_getPresetValue(getSubState(preset, "pitch"));
        this->param_15_getPresetValue(getSubState(preset, "chorus"));
        this->param_16_getPresetValue(getSubState(preset, "feedback"));
        this->param_17_getPresetValue(getSubState(preset, "window"));
        this->param_18_getPresetValue(getSubState(preset, "delay"));
        this->p_15->getPreset(getSubState(getSubState(preset, "__sps"), "Octave~"));
        this->p_16->getPreset(getSubState(getSubState(preset, "__sps"), "Mix~"));
        this->p_17->getPreset(getSubState(getSubState(preset, "__sps"), "Volumes~"));
        this->p_18->getPreset(getSubState(getSubState(preset, "__sps"), "Reverb~"));
        this->p_19->getPreset(getSubState(getSubState(preset, "__sps"), "Chorus~"));
        this->p_20->getPreset(getSubState(getSubState(preset, "__sps"), "Feedback~"));
        this->p_21->getPreset(getSubState(getSubState(preset, "__sps"), "Delay~"));
        this->p_22->getPreset(getSubState(getSubState(preset, "__sps"), "Pitch~"));
    }
    
    void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
        this->updateTime(time);
    
        switch (index) {
        case 0:
            {
            this->param_04_value_set(v);
            break;
            }
        case 1:
            {
            this->param_05_value_set(v);
            break;
            }
        case 2:
            {
            this->param_06_value_set(v);
            break;
            }
        case 3:
            {
            this->param_07_value_set(v);
            break;
            }
        case 4:
            {
            this->param_08_value_set(v);
            break;
            }
        case 5:
            {
            this->param_09_value_set(v);
            break;
            }
        case 6:
            {
            this->param_10_value_set(v);
            break;
            }
        case 7:
            {
            this->param_11_value_set(v);
            break;
            }
        case 8:
            {
            this->param_12_value_set(v);
            break;
            }
        case 9:
            {
            this->param_13_value_set(v);
            break;
            }
        case 10:
            {
            this->param_14_value_set(v);
            break;
            }
        case 11:
            {
            this->param_15_value_set(v);
            break;
            }
        case 12:
            {
            this->param_16_value_set(v);
            break;
            }
        case 13:
            {
            this->param_17_value_set(v);
            break;
            }
        case 14:
            {
            this->param_18_value_set(v);
            break;
            }
        default:
            {
            index -= 15;
    
            if (index < this->p_15->getNumParameters())
                this->p_15->setParameterValue(index, v, time);
    
            index -= this->p_15->getNumParameters();
    
            if (index < this->p_16->getNumParameters())
                this->p_16->setParameterValue(index, v, time);
    
            index -= this->p_16->getNumParameters();
    
            if (index < this->p_17->getNumParameters())
                this->p_17->setParameterValue(index, v, time);
    
            index -= this->p_17->getNumParameters();
    
            if (index < this->p_18->getNumParameters())
                this->p_18->setParameterValue(index, v, time);
    
            index -= this->p_18->getNumParameters();
    
            if (index < this->p_19->getNumParameters())
                this->p_19->setParameterValue(index, v, time);
    
            index -= this->p_19->getNumParameters();
    
            if (index < this->p_20->getNumParameters())
                this->p_20->setParameterValue(index, v, time);
    
            index -= this->p_20->getNumParameters();
    
            if (index < this->p_21->getNumParameters())
                this->p_21->setParameterValue(index, v, time);
    
            index -= this->p_21->getNumParameters();
    
            if (index < this->p_22->getNumParameters())
                this->p_22->setParameterValue(index, v, time);
    
            break;
            }
        }
    }
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        case 0:
            {
            return this->param_04_value;
            }
        case 1:
            {
            return this->param_05_value;
            }
        case 2:
            {
            return this->param_06_value;
            }
        case 3:
            {
            return this->param_07_value;
            }
        case 4:
            {
            return this->param_08_value;
            }
        case 5:
            {
            return this->param_09_value;
            }
        case 6:
            {
            return this->param_10_value;
            }
        case 7:
            {
            return this->param_11_value;
            }
        case 8:
            {
            return this->param_12_value;
            }
        case 9:
            {
            return this->param_13_value;
            }
        case 10:
            {
            return this->param_14_value;
            }
        case 11:
            {
            return this->param_15_value;
            }
        case 12:
            {
            return this->param_16_value;
            }
        case 13:
            {
            return this->param_17_value;
            }
        case 14:
            {
            return this->param_18_value;
            }
        default:
            {
            index -= 15;
    
            if (index < this->p_15->getNumParameters())
                return this->p_15->getParameterValue(index);
    
            index -= this->p_15->getNumParameters();
    
            if (index < this->p_16->getNumParameters())
                return this->p_16->getParameterValue(index);
    
            index -= this->p_16->getNumParameters();
    
            if (index < this->p_17->getNumParameters())
                return this->p_17->getParameterValue(index);
    
            index -= this->p_17->getNumParameters();
    
            if (index < this->p_18->getNumParameters())
                return this->p_18->getParameterValue(index);
    
            index -= this->p_18->getNumParameters();
    
            if (index < this->p_19->getNumParameters())
                return this->p_19->getParameterValue(index);
    
            index -= this->p_19->getNumParameters();
    
            if (index < this->p_20->getNumParameters())
                return this->p_20->getParameterValue(index);
    
            index -= this->p_20->getNumParameters();
    
            if (index < this->p_21->getNumParameters())
                return this->p_21->getParameterValue(index);
    
            index -= this->p_21->getNumParameters();
    
            if (index < this->p_22->getNumParameters())
                return this->p_22->getParameterValue(index);
    
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 2;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 2;
    }
    
    ParameterIndex getNumParameters() const {
        return 15 + this->p_15->getNumParameters() + this->p_16->getNumParameters() + this->p_17->getNumParameters() + this->p_18->getNumParameters() + this->p_19->getNumParameters() + this->p_20->getNumParameters() + this->p_21->getNumParameters() + this->p_22->getNumParameters();
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        case 0:
            {
            return "octdamp";
            }
        case 1:
            {
            return "octvol";
            }
        case 2:
            {
            return "mix1";
            }
        case 3:
            {
            return "damp";
            }
        case 4:
            {
            return "decay";
            }
        case 5:
            {
            return "pitchvol";
            }
        case 6:
            {
            return "revvol";
            }
        case 7:
            {
            return "jitter";
            }
        case 8:
            {
            return "size";
            }
        case 9:
            {
            return "diff";
            }
        case 10:
            {
            return "pitch";
            }
        case 11:
            {
            return "chorus";
            }
        case 12:
            {
            return "feedback";
            }
        case 13:
            {
            return "window";
            }
        case 14:
            {
            return "delay";
            }
        default:
            {
            index -= 15;
    
            if (index < this->p_15->getNumParameters())
                return this->p_15->getParameterName(index);
    
            index -= this->p_15->getNumParameters();
    
            if (index < this->p_16->getNumParameters())
                return this->p_16->getParameterName(index);
    
            index -= this->p_16->getNumParameters();
    
            if (index < this->p_17->getNumParameters())
                return this->p_17->getParameterName(index);
    
            index -= this->p_17->getNumParameters();
    
            if (index < this->p_18->getNumParameters())
                return this->p_18->getParameterName(index);
    
            index -= this->p_18->getNumParameters();
    
            if (index < this->p_19->getNumParameters())
                return this->p_19->getParameterName(index);
    
            index -= this->p_19->getNumParameters();
    
            if (index < this->p_20->getNumParameters())
                return this->p_20->getParameterName(index);
    
            index -= this->p_20->getNumParameters();
    
            if (index < this->p_21->getNumParameters())
                return this->p_21->getParameterName(index);
    
            index -= this->p_21->getNumParameters();
    
            if (index < this->p_22->getNumParameters())
                return this->p_22->getParameterName(index);
    
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        case 0:
            {
            return "verb/octdamp";
            }
        case 1:
            {
            return "verb/octvol";
            }
        case 2:
            {
            return "verb/mix1";
            }
        case 3:
            {
            return "verb/damp";
            }
        case 4:
            {
            return "verb/decay";
            }
        case 5:
            {
            return "verb/pitchvol";
            }
        case 6:
            {
            return "verb/revvol";
            }
        case 7:
            {
            return "verb/jitter";
            }
        case 8:
            {
            return "verb/size";
            }
        case 9:
            {
            return "verb/diff";
            }
        case 10:
            {
            return "verb/pitch";
            }
        case 11:
            {
            return "verb/chorus";
            }
        case 12:
            {
            return "verb/feedback";
            }
        case 13:
            {
            return "verb/window";
            }
        case 14:
            {
            return "verb/delay";
            }
        default:
            {
            index -= 15;
    
            if (index < this->p_15->getNumParameters())
                return this->p_15->getParameterId(index);
    
            index -= this->p_15->getNumParameters();
    
            if (index < this->p_16->getNumParameters())
                return this->p_16->getParameterId(index);
    
            index -= this->p_16->getNumParameters();
    
            if (index < this->p_17->getNumParameters())
                return this->p_17->getParameterId(index);
    
            index -= this->p_17->getNumParameters();
    
            if (index < this->p_18->getNumParameters())
                return this->p_18->getParameterId(index);
    
            index -= this->p_18->getNumParameters();
    
            if (index < this->p_19->getNumParameters())
                return this->p_19->getParameterId(index);
    
            index -= this->p_19->getNumParameters();
    
            if (index < this->p_20->getNumParameters())
                return this->p_20->getParameterId(index);
    
            index -= this->p_20->getNumParameters();
    
            if (index < this->p_21->getNumParameters())
                return this->p_21->getParameterId(index);
    
            index -= this->p_21->getNumParameters();
    
            if (index < this->p_22->getNumParameters())
                return this->p_22->getParameterId(index);
    
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
        {
            switch (index) {
            case 0:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 50;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "OctDamp";
                info->unit = "%";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 1:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 50;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "OctVol";
                info->unit = "%";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 2:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 50;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "Mic";
                info->unit = "%";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 3:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 20;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "Damp";
                info->unit = "%";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 4:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 70;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "Decay";
                info->unit = "%";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 5:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 0;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "PitchVol";
                info->unit = "%";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 6:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 100;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "RevVol";
                info->unit = "%";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 7:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 50;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "Jitter";
                info->unit = "%";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 8:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 75;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "Size";
                info->unit = "%";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 9:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 50;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "Diff";
                info->unit = "%";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 10:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 12;
                info->min = -24;
                info->max = 24;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "Pitch";
                info->unit = "st";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 11:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 50;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "Chorus";
                info->unit = "%";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 12:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 50;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "Feedback";
                info->unit = "%";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 13:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 125;
                info->min = 25;
                info->max = 250;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "Window";
                info->unit = "ms";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 14:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1000;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "Delay";
                info->unit = "ms";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            default:
                {
                index -= 15;
    
                if (index < this->p_15->getNumParameters())
                    this->p_15->getParameterInfo(index, info);
    
                index -= this->p_15->getNumParameters();
    
                if (index < this->p_16->getNumParameters())
                    this->p_16->getParameterInfo(index, info);
    
                index -= this->p_16->getNumParameters();
    
                if (index < this->p_17->getNumParameters())
                    this->p_17->getParameterInfo(index, info);
    
                index -= this->p_17->getNumParameters();
    
                if (index < this->p_18->getNumParameters())
                    this->p_18->getParameterInfo(index, info);
    
                index -= this->p_18->getNumParameters();
    
                if (index < this->p_19->getNumParameters())
                    this->p_19->getParameterInfo(index, info);
    
                index -= this->p_19->getNumParameters();
    
                if (index < this->p_20->getNumParameters())
                    this->p_20->getParameterInfo(index, info);
    
                index -= this->p_20->getNumParameters();
    
                if (index < this->p_21->getNumParameters())
                    this->p_21->getParameterInfo(index, info);
    
                index -= this->p_21->getNumParameters();
    
                if (index < this->p_22->getNumParameters())
                    this->p_22->getParameterInfo(index, info);
    
                break;
                }
            }
        }
    }
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
        if (subpatcher == this->p_15)
            return 15;
    
        if (subpatcher == this->p_16)
            return 15 + this->p_15->getNumParameters();
    
        if (subpatcher == this->p_17)
            return 15 + this->p_15->getNumParameters() + this->p_16->getNumParameters();
    
        if (subpatcher == this->p_18)
            return 15 + this->p_15->getNumParameters() + this->p_16->getNumParameters() + this->p_17->getNumParameters();
    
        if (subpatcher == this->p_19)
            return 15 + this->p_15->getNumParameters() + this->p_16->getNumParameters() + this->p_17->getNumParameters() + this->p_18->getNumParameters();
    
        if (subpatcher == this->p_20)
            return 15 + this->p_15->getNumParameters() + this->p_16->getNumParameters() + this->p_17->getNumParameters() + this->p_18->getNumParameters() + this->p_19->getNumParameters();
    
        if (subpatcher == this->p_21)
            return 15 + this->p_15->getNumParameters() + this->p_16->getNumParameters() + this->p_17->getNumParameters() + this->p_18->getNumParameters() + this->p_19->getNumParameters() + this->p_20->getNumParameters();
    
        if (subpatcher == this->p_22)
            return 15 + this->p_15->getNumParameters() + this->p_16->getNumParameters() + this->p_17->getNumParameters() + this->p_18->getNumParameters() + this->p_19->getNumParameters() + this->p_20->getNumParameters() + this->p_21->getNumParameters();
    
        return 0;
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 11:
        case 12:
            {
            {
                value = (value < 0 ? 0 : (value > 100 ? 100 : value));
                ParameterValue normalizedValue = (value - 0) / (100 - 0);
                return normalizedValue;
            }
            }
        case 14:
            {
            {
                value = (value < 0 ? 0 : (value > 1000 ? 1000 : value));
                ParameterValue normalizedValue = (value - 0) / (1000 - 0);
                return normalizedValue;
            }
            }
        case 13:
            {
            {
                value = (value < 25 ? 25 : (value > 250 ? 250 : value));
                ParameterValue normalizedValue = (value - 25) / (250 - 25);
                return normalizedValue;
            }
            }
        case 10:
            {
            {
                value = (value < -24 ? -24 : (value > 24 ? 24 : value));
                ParameterValue normalizedValue = (value - -24) / (24 - -24);
                return normalizedValue;
            }
            }
        default:
            {
            index -= 15;
    
            if (index < this->p_15->getNumParameters())
                return this->p_15->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_15->getNumParameters();
    
            if (index < this->p_16->getNumParameters())
                return this->p_16->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_16->getNumParameters();
    
            if (index < this->p_17->getNumParameters())
                return this->p_17->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_17->getNumParameters();
    
            if (index < this->p_18->getNumParameters())
                return this->p_18->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_18->getNumParameters();
    
            if (index < this->p_19->getNumParameters())
                return this->p_19->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_19->getNumParameters();
    
            if (index < this->p_20->getNumParameters())
                return this->p_20->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_20->getNumParameters();
    
            if (index < this->p_21->getNumParameters())
                return this->p_21->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_21->getNumParameters();
    
            if (index < this->p_22->getNumParameters())
                return this->p_22->convertToNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 11:
        case 12:
            {
            {
                {
                    return 0 + value * (100 - 0);
                }
            }
            }
        case 14:
            {
            {
                {
                    return 0 + value * (1000 - 0);
                }
            }
            }
        case 13:
            {
            {
                {
                    return 25 + value * (250 - 25);
                }
            }
            }
        case 10:
            {
            {
                {
                    return -24 + value * (24 - -24);
                }
            }
            }
        default:
            {
            index -= 15;
    
            if (index < this->p_15->getNumParameters())
                return this->p_15->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_15->getNumParameters();
    
            if (index < this->p_16->getNumParameters())
                return this->p_16->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_16->getNumParameters();
    
            if (index < this->p_17->getNumParameters())
                return this->p_17->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_17->getNumParameters();
    
            if (index < this->p_18->getNumParameters())
                return this->p_18->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_18->getNumParameters();
    
            if (index < this->p_19->getNumParameters())
                return this->p_19->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_19->getNumParameters();
    
            if (index < this->p_20->getNumParameters())
                return this->p_20->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_20->getNumParameters();
    
            if (index < this->p_21->getNumParameters())
                return this->p_21->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_21->getNumParameters();
    
            if (index < this->p_22->getNumParameters())
                return this->p_22->convertFromNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 0:
            {
            return this->param_04_value_constrain(value);
            }
        case 1:
            {
            return this->param_05_value_constrain(value);
            }
        case 2:
            {
            return this->param_06_value_constrain(value);
            }
        case 3:
            {
            return this->param_07_value_constrain(value);
            }
        case 4:
            {
            return this->param_08_value_constrain(value);
            }
        case 5:
            {
            return this->param_09_value_constrain(value);
            }
        case 6:
            {
            return this->param_10_value_constrain(value);
            }
        case 7:
            {
            return this->param_11_value_constrain(value);
            }
        case 8:
            {
            return this->param_12_value_constrain(value);
            }
        case 9:
            {
            return this->param_13_value_constrain(value);
            }
        case 10:
            {
            return this->param_14_value_constrain(value);
            }
        case 11:
            {
            return this->param_15_value_constrain(value);
            }
        case 12:
            {
            return this->param_16_value_constrain(value);
            }
        case 13:
            {
            return this->param_17_value_constrain(value);
            }
        case 14:
            {
            return this->param_18_value_constrain(value);
            }
        default:
            {
            index -= 15;
    
            if (index < this->p_15->getNumParameters())
                return this->p_15->constrainParameterValue(index, value);
    
            index -= this->p_15->getNumParameters();
    
            if (index < this->p_16->getNumParameters())
                return this->p_16->constrainParameterValue(index, value);
    
            index -= this->p_16->getNumParameters();
    
            if (index < this->p_17->getNumParameters())
                return this->p_17->constrainParameterValue(index, value);
    
            index -= this->p_17->getNumParameters();
    
            if (index < this->p_18->getNumParameters())
                return this->p_18->constrainParameterValue(index, value);
    
            index -= this->p_18->getNumParameters();
    
            if (index < this->p_19->getNumParameters())
                return this->p_19->constrainParameterValue(index, value);
    
            index -= this->p_19->getNumParameters();
    
            if (index < this->p_20->getNumParameters())
                return this->p_20->constrainParameterValue(index, value);
    
            index -= this->p_20->getNumParameters();
    
            if (index < this->p_21->getNumParameters())
                return this->p_21->constrainParameterValue(index, value);
    
            index -= this->p_21->getNumParameters();
    
            if (index < this->p_22->getNumParameters())
                return this->p_22->constrainParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("valin"):
            {
            if (TAG("verb/number_obj-106") == objectId)
                this->numberobj_57_valin_set(payload);
    
            if (TAG("verb/number_obj-95") == objectId)
                this->numberobj_58_valin_set(payload);
    
            if (TAG("verb/number_obj-23") == objectId)
                this->numberobj_59_valin_set(payload);
    
            if (TAG("verb/number_obj-42") == objectId)
                this->numberobj_60_valin_set(payload);
    
            if (TAG("verb/number_obj-36") == objectId)
                this->numberobj_61_valin_set(payload);
    
            if (TAG("verb/number_obj-94") == objectId)
                this->numberobj_62_valin_set(payload);
    
            if (TAG("verb/number_obj-89") == objectId)
                this->numberobj_63_valin_set(payload);
    
            if (TAG("verb/number_obj-54") == objectId)
                this->numberobj_64_valin_set(payload);
    
            if (TAG("verb/number_obj-38") == objectId)
                this->numberobj_65_valin_set(payload);
    
            if (TAG("verb/number_obj-40") == objectId)
                this->numberobj_66_valin_set(payload);
    
            if (TAG("verb/number_obj-139") == objectId)
                this->numberobj_67_valin_set(payload);
    
            if (TAG("verb/number_obj-69") == objectId)
                this->numberobj_68_valin_set(payload);
    
            if (TAG("verb/number_obj-73") == objectId)
                this->numberobj_69_valin_set(payload);
    
            if (TAG("verb/number_obj-136") == objectId)
                this->numberobj_70_valin_set(payload);
    
            if (TAG("verb/number_obj-138") == objectId)
                this->numberobj_71_valin_set(payload);
    
            break;
            }
        case TAG("format"):
            {
            if (TAG("verb/number_obj-106") == objectId)
                this->numberobj_57_format_set(payload);
    
            if (TAG("verb/number_obj-95") == objectId)
                this->numberobj_58_format_set(payload);
    
            if (TAG("verb/number_obj-23") == objectId)
                this->numberobj_59_format_set(payload);
    
            if (TAG("verb/number_obj-42") == objectId)
                this->numberobj_60_format_set(payload);
    
            if (TAG("verb/number_obj-36") == objectId)
                this->numberobj_61_format_set(payload);
    
            if (TAG("verb/number_obj-94") == objectId)
                this->numberobj_62_format_set(payload);
    
            if (TAG("verb/number_obj-89") == objectId)
                this->numberobj_63_format_set(payload);
    
            if (TAG("verb/number_obj-54") == objectId)
                this->numberobj_64_format_set(payload);
    
            if (TAG("verb/number_obj-38") == objectId)
                this->numberobj_65_format_set(payload);
    
            if (TAG("verb/number_obj-40") == objectId)
                this->numberobj_66_format_set(payload);
    
            if (TAG("verb/number_obj-139") == objectId)
                this->numberobj_67_format_set(payload);
    
            if (TAG("verb/number_obj-69") == objectId)
                this->numberobj_68_format_set(payload);
    
            if (TAG("verb/number_obj-73") == objectId)
                this->numberobj_69_format_set(payload);
    
            if (TAG("verb/number_obj-136") == objectId)
                this->numberobj_70_format_set(payload);
    
            if (TAG("verb/number_obj-138") == objectId)
                this->numberobj_71_format_set(payload);
    
            break;
            }
        }
    
        this->p_15->processNumMessage(tag, objectId, time, payload);
        this->p_16->processNumMessage(tag, objectId, time, payload);
        this->p_17->processNumMessage(tag, objectId, time, payload);
        this->p_18->processNumMessage(tag, objectId, time, payload);
        this->p_19->processNumMessage(tag, objectId, time, payload);
        this->p_20->processNumMessage(tag, objectId, time, payload);
        this->p_21->processNumMessage(tag, objectId, time, payload);
        this->p_22->processNumMessage(tag, objectId, time, payload);
    }
    
    void processListMessage(
        MessageTag tag,
        MessageTag objectId,
        MillisecondTime time,
        const list& payload
    ) {
        RNBO_UNUSED(objectId);
        this->updateTime(time);
        this->p_15->processListMessage(tag, objectId, time, payload);
        this->p_16->processListMessage(tag, objectId, time, payload);
        this->p_17->processListMessage(tag, objectId, time, payload);
        this->p_18->processListMessage(tag, objectId, time, payload);
        this->p_19->processListMessage(tag, objectId, time, payload);
        this->p_20->processListMessage(tag, objectId, time, payload);
        this->p_21->processListMessage(tag, objectId, time, payload);
        this->p_22->processListMessage(tag, objectId, time, payload);
    }
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        RNBO_UNUSED(objectId);
        this->updateTime(time);
        this->p_15->processBangMessage(tag, objectId, time);
        this->p_16->processBangMessage(tag, objectId, time);
        this->p_17->processBangMessage(tag, objectId, time);
        this->p_18->processBangMessage(tag, objectId, time);
        this->p_19->processBangMessage(tag, objectId, time);
        this->p_20->processBangMessage(tag, objectId, time);
        this->p_21->processBangMessage(tag, objectId, time);
        this->p_22->processBangMessage(tag, objectId, time);
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("valout"):
            {
            return "valout";
            }
        case TAG("verb/number_obj-106"):
            {
            return "verb/number_obj-106";
            }
        case TAG("setup"):
            {
            return "setup";
            }
        case TAG("verb/number_obj-95"):
            {
            return "verb/number_obj-95";
            }
        case TAG("verb/number_obj-23"):
            {
            return "verb/number_obj-23";
            }
        case TAG("verb/number_obj-42"):
            {
            return "verb/number_obj-42";
            }
        case TAG("verb/number_obj-36"):
            {
            return "verb/number_obj-36";
            }
        case TAG("verb/number_obj-94"):
            {
            return "verb/number_obj-94";
            }
        case TAG("verb/number_obj-89"):
            {
            return "verb/number_obj-89";
            }
        case TAG("verb/number_obj-54"):
            {
            return "verb/number_obj-54";
            }
        case TAG("verb/number_obj-38"):
            {
            return "verb/number_obj-38";
            }
        case TAG("verb/number_obj-40"):
            {
            return "verb/number_obj-40";
            }
        case TAG("verb/number_obj-139"):
            {
            return "verb/number_obj-139";
            }
        case TAG("verb/number_obj-69"):
            {
            return "verb/number_obj-69";
            }
        case TAG("verb/number_obj-73"):
            {
            return "verb/number_obj-73";
            }
        case TAG("verb/number_obj-136"):
            {
            return "verb/number_obj-136";
            }
        case TAG("verb/number_obj-138"):
            {
            return "verb/number_obj-138";
            }
        case TAG("valin"):
            {
            return "valin";
            }
        case TAG("format"):
            {
            return "format";
            }
        }
    
        auto subpatchResult_0 = this->p_15->resolveTag(tag);
    
        if (subpatchResult_0)
            return subpatchResult_0;
    
        auto subpatchResult_1 = this->p_16->resolveTag(tag);
    
        if (subpatchResult_1)
            return subpatchResult_1;
    
        auto subpatchResult_2 = this->p_17->resolveTag(tag);
    
        if (subpatchResult_2)
            return subpatchResult_2;
    
        auto subpatchResult_3 = this->p_18->resolveTag(tag);
    
        if (subpatchResult_3)
            return subpatchResult_3;
    
        auto subpatchResult_4 = this->p_19->resolveTag(tag);
    
        if (subpatchResult_4)
            return subpatchResult_4;
    
        auto subpatchResult_5 = this->p_20->resolveTag(tag);
    
        if (subpatchResult_5)
            return subpatchResult_5;
    
        auto subpatchResult_6 = this->p_21->resolveTag(tag);
    
        if (subpatchResult_6)
            return subpatchResult_6;
    
        auto subpatchResult_7 = this->p_22->resolveTag(tag);
    
        if (subpatchResult_7)
            return subpatchResult_7;
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        case 2:
            {
            return addressOf(this->gen_01_delay_1_bufferobj);
            break;
            }
        case 3:
            {
            return addressOf(this->gen_01_delay_2_bufferobj);
            break;
            }
        case 4:
            {
            return addressOf(this->gen_02_delay_1_bufferobj);
            break;
            }
        case 5:
            {
            return addressOf(this->gen_02_delay_2_bufferobj);
            break;
            }
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 4;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void zeroDataRef(DataRef& ref) {
        ref->setZero();
    }
    
    void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
        this->updateTime(time);
    
        if (index == 2) {
            this->gen_01_delay_1_buffer = new Float64Buffer(this->gen_01_delay_1_bufferobj);
        }
    
        if (index == 3) {
            this->gen_01_delay_2_buffer = new Float64Buffer(this->gen_01_delay_2_bufferobj);
        }
    
        if (index == 4) {
            this->gen_02_delay_1_buffer = new Float64Buffer(this->gen_02_delay_1_bufferobj);
        }
    
        if (index == 5) {
            this->gen_02_delay_2_buffer = new Float64Buffer(this->gen_02_delay_2_bufferobj);
        }
    
        this->p_15->processDataViewUpdate(index, time);
        this->p_16->processDataViewUpdate(index, time);
        this->p_17->processDataViewUpdate(index, time);
        this->p_18->processDataViewUpdate(index, time);
        this->p_19->processDataViewUpdate(index, time);
        this->p_20->processDataViewUpdate(index, time);
        this->p_21->processDataViewUpdate(index, time);
        this->p_22->processDataViewUpdate(index, time);
    }
    
    void initialize() {
        this->gen_01_delay_1_bufferobj = initDataRef("gen_01_delay_1_bufferobj", true, nullptr, "buffer~");
        this->gen_01_delay_2_bufferobj = initDataRef("gen_01_delay_2_bufferobj", true, nullptr, "buffer~");
        this->gen_02_delay_1_bufferobj = initDataRef("gen_02_delay_1_bufferobj", true, nullptr, "buffer~");
        this->gen_02_delay_2_bufferobj = initDataRef("gen_02_delay_2_bufferobj", true, nullptr, "buffer~");
        this->assign_defaults();
        this->setState();
        this->gen_01_delay_1_bufferobj->setIndex(2);
        this->gen_01_delay_1_buffer = new Float64Buffer(this->gen_01_delay_1_bufferobj);
        this->gen_01_delay_2_bufferobj->setIndex(3);
        this->gen_01_delay_2_buffer = new Float64Buffer(this->gen_01_delay_2_bufferobj);
        this->gen_02_delay_1_bufferobj->setIndex(4);
        this->gen_02_delay_1_buffer = new Float64Buffer(this->gen_02_delay_1_bufferobj);
        this->gen_02_delay_2_bufferobj->setIndex(5);
        this->gen_02_delay_2_buffer = new Float64Buffer(this->gen_02_delay_2_bufferobj);
    }
    
    protected:
    
    void param_04_value_set(number v) {
        v = this->param_04_value_constrain(v);
        this->param_04_value = v;
        this->sendParameter(0, false);
    
        if (this->param_04_value != this->param_04_lastValue) {
            this->getEngine()->presetTouched();
            this->param_04_lastValue = this->param_04_value;
        }
    
        this->numberobj_57_value_set(v);
    }
    
    void param_05_value_set(number v) {
        v = this->param_05_value_constrain(v);
        this->param_05_value = v;
        this->sendParameter(1, false);
    
        if (this->param_05_value != this->param_05_lastValue) {
            this->getEngine()->presetTouched();
            this->param_05_lastValue = this->param_05_value;
        }
    
        this->numberobj_58_value_set(v);
    }
    
    void param_06_value_set(number v) {
        v = this->param_06_value_constrain(v);
        this->param_06_value = v;
        this->sendParameter(2, false);
    
        if (this->param_06_value != this->param_06_lastValue) {
            this->getEngine()->presetTouched();
            this->param_06_lastValue = this->param_06_value;
        }
    
        this->numberobj_59_value_set(v);
    }
    
    void param_07_value_set(number v) {
        v = this->param_07_value_constrain(v);
        this->param_07_value = v;
        this->sendParameter(3, false);
    
        if (this->param_07_value != this->param_07_lastValue) {
            this->getEngine()->presetTouched();
            this->param_07_lastValue = this->param_07_value;
        }
    
        this->numberobj_60_value_set(v);
    }
    
    void param_08_value_set(number v) {
        v = this->param_08_value_constrain(v);
        this->param_08_value = v;
        this->sendParameter(4, false);
    
        if (this->param_08_value != this->param_08_lastValue) {
            this->getEngine()->presetTouched();
            this->param_08_lastValue = this->param_08_value;
        }
    
        this->numberobj_61_value_set(v);
    }
    
    void param_09_value_set(number v) {
        v = this->param_09_value_constrain(v);
        this->param_09_value = v;
        this->sendParameter(5, false);
    
        if (this->param_09_value != this->param_09_lastValue) {
            this->getEngine()->presetTouched();
            this->param_09_lastValue = this->param_09_value;
        }
    
        this->numberobj_62_value_set(v);
    }
    
    void param_10_value_set(number v) {
        v = this->param_10_value_constrain(v);
        this->param_10_value = v;
        this->sendParameter(6, false);
    
        if (this->param_10_value != this->param_10_lastValue) {
            this->getEngine()->presetTouched();
            this->param_10_lastValue = this->param_10_value;
        }
    
        this->numberobj_63_value_set(v);
    }
    
    void param_11_value_set(number v) {
        v = this->param_11_value_constrain(v);
        this->param_11_value = v;
        this->sendParameter(7, false);
    
        if (this->param_11_value != this->param_11_lastValue) {
            this->getEngine()->presetTouched();
            this->param_11_lastValue = this->param_11_value;
        }
    
        this->numberobj_64_value_set(v);
    }
    
    void param_12_value_set(number v) {
        v = this->param_12_value_constrain(v);
        this->param_12_value = v;
        this->sendParameter(8, false);
    
        if (this->param_12_value != this->param_12_lastValue) {
            this->getEngine()->presetTouched();
            this->param_12_lastValue = this->param_12_value;
        }
    
        this->numberobj_65_value_set(v);
    }
    
    void param_13_value_set(number v) {
        v = this->param_13_value_constrain(v);
        this->param_13_value = v;
        this->sendParameter(9, false);
    
        if (this->param_13_value != this->param_13_lastValue) {
            this->getEngine()->presetTouched();
            this->param_13_lastValue = this->param_13_value;
        }
    
        this->numberobj_66_value_set(v);
    }
    
    void param_14_value_set(number v) {
        v = this->param_14_value_constrain(v);
        this->param_14_value = v;
        this->sendParameter(10, false);
    
        if (this->param_14_value != this->param_14_lastValue) {
            this->getEngine()->presetTouched();
            this->param_14_lastValue = this->param_14_value;
        }
    
        this->numberobj_67_value_set(v);
    }
    
    void param_15_value_set(number v) {
        v = this->param_15_value_constrain(v);
        this->param_15_value = v;
        this->sendParameter(11, false);
    
        if (this->param_15_value != this->param_15_lastValue) {
            this->getEngine()->presetTouched();
            this->param_15_lastValue = this->param_15_value;
        }
    
        this->numberobj_68_value_set(v);
    }
    
    void param_16_value_set(number v) {
        v = this->param_16_value_constrain(v);
        this->param_16_value = v;
        this->sendParameter(12, false);
    
        if (this->param_16_value != this->param_16_lastValue) {
            this->getEngine()->presetTouched();
            this->param_16_lastValue = this->param_16_value;
        }
    
        this->numberobj_69_value_set(v);
    }
    
    void param_17_value_set(number v) {
        v = this->param_17_value_constrain(v);
        this->param_17_value = v;
        this->sendParameter(13, false);
    
        if (this->param_17_value != this->param_17_lastValue) {
            this->getEngine()->presetTouched();
            this->param_17_lastValue = this->param_17_value;
        }
    
        this->numberobj_70_value_set(v);
    }
    
    void param_18_value_set(number v) {
        v = this->param_18_value_constrain(v);
        this->param_18_value = v;
        this->sendParameter(14, false);
    
        if (this->param_18_value != this->param_18_lastValue) {
            this->getEngine()->presetTouched();
            this->param_18_lastValue = this->param_18_value;
        }
    
        this->numberobj_71_value_set(v);
    }
    
    void numberobj_57_valin_set(number v) {
        this->numberobj_57_value_set(v);
    }
    
    void numberobj_57_format_set(number v) {
        this->numberobj_57_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_58_valin_set(number v) {
        this->numberobj_58_value_set(v);
    }
    
    void numberobj_58_format_set(number v) {
        this->numberobj_58_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_59_valin_set(number v) {
        this->numberobj_59_value_set(v);
    }
    
    void numberobj_59_format_set(number v) {
        this->numberobj_59_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_60_valin_set(number v) {
        this->numberobj_60_value_set(v);
    }
    
    void numberobj_60_format_set(number v) {
        this->numberobj_60_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_61_valin_set(number v) {
        this->numberobj_61_value_set(v);
    }
    
    void numberobj_61_format_set(number v) {
        this->numberobj_61_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_62_valin_set(number v) {
        this->numberobj_62_value_set(v);
    }
    
    void numberobj_62_format_set(number v) {
        this->numberobj_62_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_63_valin_set(number v) {
        this->numberobj_63_value_set(v);
    }
    
    void numberobj_63_format_set(number v) {
        this->numberobj_63_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_64_valin_set(number v) {
        this->numberobj_64_value_set(v);
    }
    
    void numberobj_64_format_set(number v) {
        this->numberobj_64_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_65_valin_set(number v) {
        this->numberobj_65_value_set(v);
    }
    
    void numberobj_65_format_set(number v) {
        this->numberobj_65_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_66_valin_set(number v) {
        this->numberobj_66_value_set(v);
    }
    
    void numberobj_66_format_set(number v) {
        this->numberobj_66_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_67_valin_set(number v) {
        this->numberobj_67_value_set(v);
    }
    
    void numberobj_67_format_set(number v) {
        this->numberobj_67_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_68_valin_set(number v) {
        this->numberobj_68_value_set(v);
    }
    
    void numberobj_68_format_set(number v) {
        this->numberobj_68_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_69_valin_set(number v) {
        this->numberobj_69_value_set(v);
    }
    
    void numberobj_69_format_set(number v) {
        this->numberobj_69_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_70_valin_set(number v) {
        this->numberobj_70_value_set(v);
    }
    
    void numberobj_70_format_set(number v) {
        this->numberobj_70_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_71_valin_set(number v) {
        this->numberobj_71_value_set(v);
    }
    
    void numberobj_71_format_set(number v) {
        this->numberobj_71_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 6;
    }
    
    Index getNumOutputChannels() const {
        return 2;
    }
    
    void initializeObjects() {
        this->numberobj_57_init();
        this->gen_01_delay_1_init();
        this->gen_01_delay_2_init();
        this->gen_01_history_3_init();
        this->gen_01_history_4_init();
        this->gen_01_gain_init();
        this->gen_02_delay_1_init();
        this->gen_02_delay_2_init();
        this->gen_02_history_3_init();
        this->gen_02_history_4_init();
        this->gen_02_gain_init();
        this->numberobj_58_init();
        this->numberobj_59_init();
        this->numberobj_60_init();
        this->numberobj_61_init();
        this->numberobj_62_init();
        this->numberobj_63_init();
        this->numberobj_64_init();
        this->numberobj_65_init();
        this->numberobj_66_init();
        this->numberobj_67_init();
        this->numberobj_68_init();
        this->numberobj_69_init();
        this->numberobj_70_init();
        this->numberobj_71_init();
        this->p_15->initializeObjects();
        this->p_16->initializeObjects();
        this->p_17->initializeObjects();
        this->p_18->initializeObjects();
        this->p_19->initializeObjects();
        this->p_20->initializeObjects();
        this->p_21->initializeObjects();
        this->p_22->initializeObjects();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {
        this->updateTime(this->getEngine()->getCurrentTime());
        this->p_15->startup();
        this->p_16->startup();
        this->p_17->startup();
        this->p_18->startup();
        this->p_19->startup();
        this->p_20->startup();
        this->p_21->startup();
        this->p_22->startup();
    
        {
            this->scheduleParamInit(0, 14);
        }
    
        {
            this->scheduleParamInit(1, 13);
        }
    
        {
            this->scheduleParamInit(2, 15);
        }
    
        {
            this->scheduleParamInit(3, 5);
        }
    
        {
            this->scheduleParamInit(4, 1);
        }
    
        {
            this->scheduleParamInit(5, 12);
        }
    
        {
            this->scheduleParamInit(6, 11);
        }
    
        {
            this->scheduleParamInit(7, 4);
        }
    
        {
            this->scheduleParamInit(8, 2);
        }
    
        {
            this->scheduleParamInit(9, 3);
        }
    
        {
            this->scheduleParamInit(10, 6);
        }
    
        {
            this->scheduleParamInit(11, 10);
        }
    
        {
            this->scheduleParamInit(12, 9);
        }
    
        {
            this->scheduleParamInit(13, 7);
        }
    
        {
            this->scheduleParamInit(14, 8);
        }
    }
    
    void allocateDataRefs() {
        this->p_15->allocateDataRefs();
        this->p_16->allocateDataRefs();
        this->p_17->allocateDataRefs();
        this->p_18->allocateDataRefs();
        this->p_19->allocateDataRefs();
        this->p_20->allocateDataRefs();
        this->p_21->allocateDataRefs();
        this->p_22->allocateDataRefs();
        this->gen_01_delay_1_buffer = this->gen_01_delay_1_buffer->allocateIfNeeded();
    
        if (this->gen_01_delay_1_bufferobj->hasRequestedSize()) {
            if (this->gen_01_delay_1_bufferobj->wantsFill())
                this->zeroDataRef(this->gen_01_delay_1_bufferobj);
    
            this->getEngine()->sendDataRefUpdated(2);
        }
    
        this->gen_01_delay_2_buffer = this->gen_01_delay_2_buffer->allocateIfNeeded();
    
        if (this->gen_01_delay_2_bufferobj->hasRequestedSize()) {
            if (this->gen_01_delay_2_bufferobj->wantsFill())
                this->zeroDataRef(this->gen_01_delay_2_bufferobj);
    
            this->getEngine()->sendDataRefUpdated(3);
        }
    
        this->gen_02_delay_1_buffer = this->gen_02_delay_1_buffer->allocateIfNeeded();
    
        if (this->gen_02_delay_1_bufferobj->hasRequestedSize()) {
            if (this->gen_02_delay_1_bufferobj->wantsFill())
                this->zeroDataRef(this->gen_02_delay_1_bufferobj);
    
            this->getEngine()->sendDataRefUpdated(4);
        }
    
        this->gen_02_delay_2_buffer = this->gen_02_delay_2_buffer->allocateIfNeeded();
    
        if (this->gen_02_delay_2_bufferobj->hasRequestedSize()) {
            if (this->gen_02_delay_2_bufferobj->wantsFill())
                this->zeroDataRef(this->gen_02_delay_2_bufferobj);
    
            this->getEngine()->sendDataRefUpdated(5);
        }
    }
    
    number param_04_value_constrain(number v) const {
        v = (v > 100 ? 100 : (v < 0 ? 0 : v));
        return v;
    }
    
    void p_15_in3_number_set(number v) {
        this->p_15->updateTime(this->_currentTime);
        this->p_15->eventinlet_06_out1_number_set(v);
    }
    
    void numberobj_57_output_set(number v) {
        this->p_15_in3_number_set(v);
    }
    
    void numberobj_57_value_set(number v) {
        this->numberobj_57_value_setter(v);
        v = this->numberobj_57_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_57_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("verb/number_obj-106"), localvalue, this->_currentTime);
        this->numberobj_57_output_set(localvalue);
    }
    
    number param_05_value_constrain(number v) const {
        v = (v > 100 ? 100 : (v < 0 ? 0 : v));
        return v;
    }
    
    void p_17_in7_number_set(number v) {
        this->p_17->updateTime(this->_currentTime);
        this->p_17->eventinlet_08_out1_number_set(v);
    }
    
    void numberobj_58_output_set(number v) {
        this->p_17_in7_number_set(v);
    }
    
    void numberobj_58_value_set(number v) {
        this->numberobj_58_value_setter(v);
        v = this->numberobj_58_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_58_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("verb/number_obj-95"), localvalue, this->_currentTime);
        this->numberobj_58_output_set(localvalue);
    }
    
    number param_06_value_constrain(number v) const {
        v = (v > 100 ? 100 : (v < 0 ? 0 : v));
        return v;
    }
    
    void p_16_in5_number_set(number v) {
        this->p_16->updateTime(this->_currentTime);
        this->p_16->eventinlet_07_out1_number_set(v);
    }
    
    void numberobj_59_output_set(number v) {
        this->p_16_in5_number_set(v);
    }
    
    void numberobj_59_value_set(number v) {
        this->numberobj_59_value_setter(v);
        v = this->numberobj_59_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_59_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("verb/number_obj-23"), localvalue, this->_currentTime);
        this->numberobj_59_output_set(localvalue);
    }
    
    number param_07_value_constrain(number v) const {
        v = (v > 100 ? 100 : (v < 0 ? 0 : v));
        return v;
    }
    
    void p_18_in3_number_set(number v) {
        this->p_18->updateTime(this->_currentTime);
        this->p_18->eventinlet_16_out1_number_set(v);
    }
    
    void numberobj_60_output_set(number v) {
        this->p_18_in3_number_set(v);
    }
    
    void numberobj_60_value_set(number v) {
        this->numberobj_60_value_setter(v);
        v = this->numberobj_60_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_60_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("verb/number_obj-42"), localvalue, this->_currentTime);
        this->numberobj_60_output_set(localvalue);
    }
    
    number param_08_value_constrain(number v) const {
        v = (v > 100 ? 100 : (v < 0 ? 0 : v));
        return v;
    }
    
    void p_18_in4_number_set(number v) {
        this->p_18->updateTime(this->_currentTime);
        this->p_18->eventinlet_17_out1_number_set(v);
    }
    
    void numberobj_61_output_set(number v) {
        this->p_18_in4_number_set(v);
    }
    
    void numberobj_61_value_set(number v) {
        this->numberobj_61_value_setter(v);
        v = this->numberobj_61_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_61_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("verb/number_obj-36"), localvalue, this->_currentTime);
        this->numberobj_61_output_set(localvalue);
    }
    
    number param_09_value_constrain(number v) const {
        v = (v > 100 ? 100 : (v < 0 ? 0 : v));
        return v;
    }
    
    void p_17_in9_number_set(number v) {
        this->p_17->updateTime(this->_currentTime);
        this->p_17->eventinlet_10_out1_number_set(v);
    }
    
    void numberobj_62_output_set(number v) {
        this->p_17_in9_number_set(v);
    }
    
    void numberobj_62_value_set(number v) {
        this->numberobj_62_value_setter(v);
        v = this->numberobj_62_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_62_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("verb/number_obj-94"), localvalue, this->_currentTime);
        this->numberobj_62_output_set(localvalue);
    }
    
    number param_10_value_constrain(number v) const {
        v = (v > 100 ? 100 : (v < 0 ? 0 : v));
        return v;
    }
    
    void p_17_in8_number_set(number v) {
        this->p_17->updateTime(this->_currentTime);
        this->p_17->eventinlet_09_out1_number_set(v);
    }
    
    void numberobj_63_output_set(number v) {
        this->p_17_in8_number_set(v);
    }
    
    void numberobj_63_value_set(number v) {
        this->numberobj_63_value_setter(v);
        v = this->numberobj_63_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_63_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("verb/number_obj-89"), localvalue, this->_currentTime);
        this->numberobj_63_output_set(localvalue);
    }
    
    number param_11_value_constrain(number v) const {
        v = (v > 100 ? 100 : (v < 0 ? 0 : v));
        return v;
    }
    
    void p_18_in5_number_set(number v) {
        this->p_18->updateTime(this->_currentTime);
        this->p_18->eventinlet_18_out1_number_set(v);
    }
    
    void numberobj_64_output_set(number v) {
        this->p_18_in5_number_set(v);
    }
    
    void numberobj_64_value_set(number v) {
        this->numberobj_64_value_setter(v);
        v = this->numberobj_64_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_64_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("verb/number_obj-54"), localvalue, this->_currentTime);
        this->numberobj_64_output_set(localvalue);
    }
    
    number param_12_value_constrain(number v) const {
        v = (v > 100 ? 100 : (v < 0 ? 0 : v));
        return v;
    }
    
    void p_18_in6_number_set(number v) {
        this->p_18->updateTime(this->_currentTime);
        this->p_18->eventinlet_19_out1_number_set(v);
    }
    
    void numberobj_65_output_set(number v) {
        this->p_18_in6_number_set(v);
    }
    
    void numberobj_65_value_set(number v) {
        this->numberobj_65_value_setter(v);
        v = this->numberobj_65_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_65_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("verb/number_obj-38"), localvalue, this->_currentTime);
        this->numberobj_65_output_set(localvalue);
    }
    
    number param_13_value_constrain(number v) const {
        v = (v > 100 ? 100 : (v < 0 ? 0 : v));
        return v;
    }
    
    void p_18_in7_number_set(number v) {
        this->p_18->updateTime(this->_currentTime);
        this->p_18->eventinlet_20_out1_number_set(v);
    }
    
    void numberobj_66_output_set(number v) {
        this->p_18_in7_number_set(v);
    }
    
    void numberobj_66_value_set(number v) {
        this->numberobj_66_value_setter(v);
        v = this->numberobj_66_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_66_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("verb/number_obj-40"), localvalue, this->_currentTime);
        this->numberobj_66_output_set(localvalue);
    }
    
    number param_14_value_constrain(number v) const {
        v = (v > 24 ? 24 : (v < -24 ? -24 : v));
        return v;
    }
    
    void p_20_target_Pitch_number_set(number v) {
        this->p_20->updateTime(this->_currentTime);
        this->p_20->receive_01_output_number_set(v);
    }
    
    void p_22_source_Pitch_number_set(number v) {
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_25_source_Pitch_number_set(v);
        this->p_20_target_Pitch_number_set(v);
    }
    
    void p_22_in3_number_set(number v) {
        this->p_22->updateTime(this->_currentTime);
        this->p_22->eventinlet_24_out1_number_set(v);
    }
    
    void numberobj_67_output_set(number v) {
        this->p_22_in3_number_set(v);
    }
    
    void numberobj_67_value_set(number v) {
        this->numberobj_67_value_setter(v);
        v = this->numberobj_67_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < -24) {
            localvalue = -24;
        }
    
        if ((bool)(true) && localvalue > 24) {
            localvalue = 24;
        }
    
        if (this->numberobj_67_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("verb/number_obj-139"), localvalue, this->_currentTime);
        this->numberobj_67_output_set(localvalue);
    }
    
    number param_15_value_constrain(number v) const {
        v = (v > 100 ? 100 : (v < 0 ? 0 : v));
        return v;
    }
    
    void p_19_in3_number_set(number v) {
        this->p_19->updateTime(this->_currentTime);
        this->p_19->eventinlet_21_out1_number_set(v);
    }
    
    void numberobj_68_output_set(number v) {
        this->p_19_in3_number_set(v);
    }
    
    void numberobj_68_value_set(number v) {
        this->numberobj_68_value_setter(v);
        v = this->numberobj_68_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_68_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("verb/number_obj-69"), localvalue, this->_currentTime);
        this->numberobj_68_output_set(localvalue);
    }
    
    number param_16_value_constrain(number v) const {
        v = (v > 100 ? 100 : (v < 0 ? 0 : v));
        return v;
    }
    
    void p_20_in3_number_set(number v) {
        this->p_20->updateTime(this->_currentTime);
        this->p_20->eventinlet_22_out1_number_set(v);
    }
    
    void numberobj_69_output_set(number v) {
        this->p_20_in3_number_set(v);
    }
    
    void numberobj_69_value_set(number v) {
        this->numberobj_69_value_setter(v);
        v = this->numberobj_69_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_69_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("verb/number_obj-73"), localvalue, this->_currentTime);
        this->numberobj_69_output_set(localvalue);
    }
    
    number param_17_value_constrain(number v) const {
        v = (v > 250 ? 250 : (v < 25 ? 25 : v));
        return v;
    }
    
    void p_22_in4_number_set(number v) {
        this->p_22->updateTime(this->_currentTime);
        this->p_22->eventinlet_25_out1_number_set(v);
    }
    
    void numberobj_70_output_set(number v) {
        this->p_22_in4_number_set(v);
    }
    
    void numberobj_70_value_set(number v) {
        this->numberobj_70_value_setter(v);
        v = this->numberobj_70_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 25) {
            localvalue = 25;
        }
    
        if ((bool)(true) && localvalue > 250) {
            localvalue = 250;
        }
    
        if (this->numberobj_70_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("verb/number_obj-136"), localvalue, this->_currentTime);
        this->numberobj_70_output_set(localvalue);
    }
    
    number param_18_value_constrain(number v) const {
        v = (v > 1000 ? 1000 : (v < 0 ? 0 : v));
        return v;
    }
    
    void p_21_in3_number_set(number v) {
        this->p_21->updateTime(this->_currentTime);
        this->p_21->eventinlet_23_out1_number_set(v);
    }
    
    void numberobj_71_output_set(number v) {
        this->p_21_in3_number_set(v);
    }
    
    void numberobj_71_value_set(number v) {
        this->numberobj_71_value_setter(v);
        v = this->numberobj_71_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 1000) {
            localvalue = 1000;
        }
    
        if (this->numberobj_71_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("verb/number_obj-138"), localvalue, this->_currentTime);
        this->numberobj_71_output_set(localvalue);
    }
    
    void ctlin_01_outchannel_set(number ) {}
    
    void ctlin_01_outcontroller_set(number ) {}
    
    void fromnormalized_01_output_set(number v) {
        this->param_04_value_set(v);
    }
    
    void fromnormalized_01_input_set(number v) {
        this->fromnormalized_01_output_set(this->fromnormalized(0, v));
    }
    
    void expr_20_out1_set(number v) {
        this->expr_20_out1 = v;
        this->fromnormalized_01_input_set(this->expr_20_out1);
    }
    
    void expr_20_in1_set(number in1) {
        this->expr_20_in1 = in1;
        this->expr_20_out1_set(this->expr_20_in1 * this->expr_20_in2);//#map:expr_20:1
    }
    
    void ctlin_01_value_set(number v) {
        this->expr_20_in1_set(v);
    }
    
    void ctlin_01_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
        RNBO_UNUSED(length);
        RNBO_UNUSED(port);
    
        if (status == 0xB0 && (channel == this->ctlin_01_channel || this->ctlin_01_channel == -1) && (data[1] == this->ctlin_01_controller || this->ctlin_01_controller == -1)) {
            this->ctlin_01_outchannel_set(channel);
            this->ctlin_01_outcontroller_set(data[1]);
            this->ctlin_01_value_set(data[2]);
            this->ctlin_01_status = 0;
        }
    }
    
    void ctlin_02_outchannel_set(number ) {}
    
    void ctlin_02_outcontroller_set(number ) {}
    
    void fromnormalized_02_output_set(number v) {
        this->param_05_value_set(v);
    }
    
    void fromnormalized_02_input_set(number v) {
        this->fromnormalized_02_output_set(this->fromnormalized(1, v));
    }
    
    void expr_21_out1_set(number v) {
        this->expr_21_out1 = v;
        this->fromnormalized_02_input_set(this->expr_21_out1);
    }
    
    void expr_21_in1_set(number in1) {
        this->expr_21_in1 = in1;
        this->expr_21_out1_set(this->expr_21_in1 * this->expr_21_in2);//#map:expr_21:1
    }
    
    void ctlin_02_value_set(number v) {
        this->expr_21_in1_set(v);
    }
    
    void ctlin_02_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
        RNBO_UNUSED(length);
        RNBO_UNUSED(port);
    
        if (status == 0xB0 && (channel == this->ctlin_02_channel || this->ctlin_02_channel == -1) && (data[1] == this->ctlin_02_controller || this->ctlin_02_controller == -1)) {
            this->ctlin_02_outchannel_set(channel);
            this->ctlin_02_outcontroller_set(data[1]);
            this->ctlin_02_value_set(data[2]);
            this->ctlin_02_status = 0;
        }
    }
    
    void ctlin_03_outchannel_set(number ) {}
    
    void ctlin_03_outcontroller_set(number ) {}
    
    void fromnormalized_03_output_set(number v) {
        this->param_06_value_set(v);
    }
    
    void fromnormalized_03_input_set(number v) {
        this->fromnormalized_03_output_set(this->fromnormalized(2, v));
    }
    
    void expr_22_out1_set(number v) {
        this->expr_22_out1 = v;
        this->fromnormalized_03_input_set(this->expr_22_out1);
    }
    
    void expr_22_in1_set(number in1) {
        this->expr_22_in1 = in1;
        this->expr_22_out1_set(this->expr_22_in1 * this->expr_22_in2);//#map:expr_22:1
    }
    
    void ctlin_03_value_set(number v) {
        this->expr_22_in1_set(v);
    }
    
    void ctlin_03_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
        RNBO_UNUSED(length);
        RNBO_UNUSED(port);
    
        if (status == 0xB0 && (channel == this->ctlin_03_channel || this->ctlin_03_channel == -1) && (data[1] == this->ctlin_03_controller || this->ctlin_03_controller == -1)) {
            this->ctlin_03_outchannel_set(channel);
            this->ctlin_03_outcontroller_set(data[1]);
            this->ctlin_03_value_set(data[2]);
            this->ctlin_03_status = 0;
        }
    }
    
    void ctlin_04_outchannel_set(number ) {}
    
    void ctlin_04_outcontroller_set(number ) {}
    
    void fromnormalized_04_output_set(number v) {
        this->param_07_value_set(v);
    }
    
    void fromnormalized_04_input_set(number v) {
        this->fromnormalized_04_output_set(this->fromnormalized(3, v));
    }
    
    void expr_23_out1_set(number v) {
        this->expr_23_out1 = v;
        this->fromnormalized_04_input_set(this->expr_23_out1);
    }
    
    void expr_23_in1_set(number in1) {
        this->expr_23_in1 = in1;
        this->expr_23_out1_set(this->expr_23_in1 * this->expr_23_in2);//#map:expr_23:1
    }
    
    void ctlin_04_value_set(number v) {
        this->expr_23_in1_set(v);
    }
    
    void ctlin_04_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
        RNBO_UNUSED(length);
        RNBO_UNUSED(port);
    
        if (status == 0xB0 && (channel == this->ctlin_04_channel || this->ctlin_04_channel == -1) && (data[1] == this->ctlin_04_controller || this->ctlin_04_controller == -1)) {
            this->ctlin_04_outchannel_set(channel);
            this->ctlin_04_outcontroller_set(data[1]);
            this->ctlin_04_value_set(data[2]);
            this->ctlin_04_status = 0;
        }
    }
    
    void ctlin_05_outchannel_set(number ) {}
    
    void ctlin_05_outcontroller_set(number ) {}
    
    void fromnormalized_05_output_set(number v) {
        this->param_08_value_set(v);
    }
    
    void fromnormalized_05_input_set(number v) {
        this->fromnormalized_05_output_set(this->fromnormalized(4, v));
    }
    
    void expr_24_out1_set(number v) {
        this->expr_24_out1 = v;
        this->fromnormalized_05_input_set(this->expr_24_out1);
    }
    
    void expr_24_in1_set(number in1) {
        this->expr_24_in1 = in1;
        this->expr_24_out1_set(this->expr_24_in1 * this->expr_24_in2);//#map:expr_24:1
    }
    
    void ctlin_05_value_set(number v) {
        this->expr_24_in1_set(v);
    }
    
    void ctlin_05_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
        RNBO_UNUSED(length);
        RNBO_UNUSED(port);
    
        if (status == 0xB0 && (channel == this->ctlin_05_channel || this->ctlin_05_channel == -1) && (data[1] == this->ctlin_05_controller || this->ctlin_05_controller == -1)) {
            this->ctlin_05_outchannel_set(channel);
            this->ctlin_05_outcontroller_set(data[1]);
            this->ctlin_05_value_set(data[2]);
            this->ctlin_05_status = 0;
        }
    }
    
    void ctlin_06_outchannel_set(number ) {}
    
    void ctlin_06_outcontroller_set(number ) {}
    
    void fromnormalized_06_output_set(number v) {
        this->param_09_value_set(v);
    }
    
    void fromnormalized_06_input_set(number v) {
        this->fromnormalized_06_output_set(this->fromnormalized(5, v));
    }
    
    void expr_25_out1_set(number v) {
        this->expr_25_out1 = v;
        this->fromnormalized_06_input_set(this->expr_25_out1);
    }
    
    void expr_25_in1_set(number in1) {
        this->expr_25_in1 = in1;
        this->expr_25_out1_set(this->expr_25_in1 * this->expr_25_in2);//#map:expr_25:1
    }
    
    void ctlin_06_value_set(number v) {
        this->expr_25_in1_set(v);
    }
    
    void ctlin_06_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
        RNBO_UNUSED(length);
        RNBO_UNUSED(port);
    
        if (status == 0xB0 && (channel == this->ctlin_06_channel || this->ctlin_06_channel == -1) && (data[1] == this->ctlin_06_controller || this->ctlin_06_controller == -1)) {
            this->ctlin_06_outchannel_set(channel);
            this->ctlin_06_outcontroller_set(data[1]);
            this->ctlin_06_value_set(data[2]);
            this->ctlin_06_status = 0;
        }
    }
    
    void ctlin_07_outchannel_set(number ) {}
    
    void ctlin_07_outcontroller_set(number ) {}
    
    void fromnormalized_07_output_set(number v) {
        this->param_10_value_set(v);
    }
    
    void fromnormalized_07_input_set(number v) {
        this->fromnormalized_07_output_set(this->fromnormalized(6, v));
    }
    
    void expr_26_out1_set(number v) {
        this->expr_26_out1 = v;
        this->fromnormalized_07_input_set(this->expr_26_out1);
    }
    
    void expr_26_in1_set(number in1) {
        this->expr_26_in1 = in1;
        this->expr_26_out1_set(this->expr_26_in1 * this->expr_26_in2);//#map:expr_26:1
    }
    
    void ctlin_07_value_set(number v) {
        this->expr_26_in1_set(v);
    }
    
    void ctlin_07_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
        RNBO_UNUSED(length);
        RNBO_UNUSED(port);
    
        if (status == 0xB0 && (channel == this->ctlin_07_channel || this->ctlin_07_channel == -1) && (data[1] == this->ctlin_07_controller || this->ctlin_07_controller == -1)) {
            this->ctlin_07_outchannel_set(channel);
            this->ctlin_07_outcontroller_set(data[1]);
            this->ctlin_07_value_set(data[2]);
            this->ctlin_07_status = 0;
        }
    }
    
    void ctlin_08_outchannel_set(number ) {}
    
    void ctlin_08_outcontroller_set(number ) {}
    
    void fromnormalized_08_output_set(number v) {
        this->param_11_value_set(v);
    }
    
    void fromnormalized_08_input_set(number v) {
        this->fromnormalized_08_output_set(this->fromnormalized(7, v));
    }
    
    void expr_27_out1_set(number v) {
        this->expr_27_out1 = v;
        this->fromnormalized_08_input_set(this->expr_27_out1);
    }
    
    void expr_27_in1_set(number in1) {
        this->expr_27_in1 = in1;
        this->expr_27_out1_set(this->expr_27_in1 * this->expr_27_in2);//#map:expr_27:1
    }
    
    void ctlin_08_value_set(number v) {
        this->expr_27_in1_set(v);
    }
    
    void ctlin_08_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
        RNBO_UNUSED(length);
        RNBO_UNUSED(port);
    
        if (status == 0xB0 && (channel == this->ctlin_08_channel || this->ctlin_08_channel == -1) && (data[1] == this->ctlin_08_controller || this->ctlin_08_controller == -1)) {
            this->ctlin_08_outchannel_set(channel);
            this->ctlin_08_outcontroller_set(data[1]);
            this->ctlin_08_value_set(data[2]);
            this->ctlin_08_status = 0;
        }
    }
    
    void ctlin_09_outchannel_set(number ) {}
    
    void ctlin_09_outcontroller_set(number ) {}
    
    void fromnormalized_09_output_set(number v) {
        this->param_12_value_set(v);
    }
    
    void fromnormalized_09_input_set(number v) {
        this->fromnormalized_09_output_set(this->fromnormalized(8, v));
    }
    
    void expr_28_out1_set(number v) {
        this->expr_28_out1 = v;
        this->fromnormalized_09_input_set(this->expr_28_out1);
    }
    
    void expr_28_in1_set(number in1) {
        this->expr_28_in1 = in1;
        this->expr_28_out1_set(this->expr_28_in1 * this->expr_28_in2);//#map:expr_28:1
    }
    
    void ctlin_09_value_set(number v) {
        this->expr_28_in1_set(v);
    }
    
    void ctlin_09_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
        RNBO_UNUSED(length);
        RNBO_UNUSED(port);
    
        if (status == 0xB0 && (channel == this->ctlin_09_channel || this->ctlin_09_channel == -1) && (data[1] == this->ctlin_09_controller || this->ctlin_09_controller == -1)) {
            this->ctlin_09_outchannel_set(channel);
            this->ctlin_09_outcontroller_set(data[1]);
            this->ctlin_09_value_set(data[2]);
            this->ctlin_09_status = 0;
        }
    }
    
    void ctlin_10_outchannel_set(number ) {}
    
    void ctlin_10_outcontroller_set(number ) {}
    
    void fromnormalized_10_output_set(number v) {
        this->param_13_value_set(v);
    }
    
    void fromnormalized_10_input_set(number v) {
        this->fromnormalized_10_output_set(this->fromnormalized(9, v));
    }
    
    void expr_29_out1_set(number v) {
        this->expr_29_out1 = v;
        this->fromnormalized_10_input_set(this->expr_29_out1);
    }
    
    void expr_29_in1_set(number in1) {
        this->expr_29_in1 = in1;
        this->expr_29_out1_set(this->expr_29_in1 * this->expr_29_in2);//#map:expr_29:1
    }
    
    void ctlin_10_value_set(number v) {
        this->expr_29_in1_set(v);
    }
    
    void ctlin_10_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
        RNBO_UNUSED(length);
        RNBO_UNUSED(port);
    
        if (status == 0xB0 && (channel == this->ctlin_10_channel || this->ctlin_10_channel == -1) && (data[1] == this->ctlin_10_controller || this->ctlin_10_controller == -1)) {
            this->ctlin_10_outchannel_set(channel);
            this->ctlin_10_outcontroller_set(data[1]);
            this->ctlin_10_value_set(data[2]);
            this->ctlin_10_status = 0;
        }
    }
    
    void ctlin_11_outchannel_set(number ) {}
    
    void ctlin_11_outcontroller_set(number ) {}
    
    void fromnormalized_11_output_set(number v) {
        this->param_14_value_set(v);
    }
    
    void fromnormalized_11_input_set(number v) {
        this->fromnormalized_11_output_set(this->fromnormalized(10, v));
    }
    
    void expr_30_out1_set(number v) {
        this->expr_30_out1 = v;
        this->fromnormalized_11_input_set(this->expr_30_out1);
    }
    
    void expr_30_in1_set(number in1) {
        this->expr_30_in1 = in1;
        this->expr_30_out1_set(this->expr_30_in1 * this->expr_30_in2);//#map:expr_30:1
    }
    
    void ctlin_11_value_set(number v) {
        this->expr_30_in1_set(v);
    }
    
    void ctlin_11_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
        RNBO_UNUSED(length);
        RNBO_UNUSED(port);
    
        if (status == 0xB0 && (channel == this->ctlin_11_channel || this->ctlin_11_channel == -1) && (data[1] == this->ctlin_11_controller || this->ctlin_11_controller == -1)) {
            this->ctlin_11_outchannel_set(channel);
            this->ctlin_11_outcontroller_set(data[1]);
            this->ctlin_11_value_set(data[2]);
            this->ctlin_11_status = 0;
        }
    }
    
    void ctlin_12_outchannel_set(number ) {}
    
    void ctlin_12_outcontroller_set(number ) {}
    
    void fromnormalized_12_output_set(number v) {
        this->param_15_value_set(v);
    }
    
    void fromnormalized_12_input_set(number v) {
        this->fromnormalized_12_output_set(this->fromnormalized(11, v));
    }
    
    void expr_31_out1_set(number v) {
        this->expr_31_out1 = v;
        this->fromnormalized_12_input_set(this->expr_31_out1);
    }
    
    void expr_31_in1_set(number in1) {
        this->expr_31_in1 = in1;
        this->expr_31_out1_set(this->expr_31_in1 * this->expr_31_in2);//#map:expr_31:1
    }
    
    void ctlin_12_value_set(number v) {
        this->expr_31_in1_set(v);
    }
    
    void ctlin_12_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
        RNBO_UNUSED(length);
        RNBO_UNUSED(port);
    
        if (status == 0xB0 && (channel == this->ctlin_12_channel || this->ctlin_12_channel == -1) && (data[1] == this->ctlin_12_controller || this->ctlin_12_controller == -1)) {
            this->ctlin_12_outchannel_set(channel);
            this->ctlin_12_outcontroller_set(data[1]);
            this->ctlin_12_value_set(data[2]);
            this->ctlin_12_status = 0;
        }
    }
    
    void ctlin_13_outchannel_set(number ) {}
    
    void ctlin_13_outcontroller_set(number ) {}
    
    void fromnormalized_13_output_set(number v) {
        this->param_16_value_set(v);
    }
    
    void fromnormalized_13_input_set(number v) {
        this->fromnormalized_13_output_set(this->fromnormalized(12, v));
    }
    
    void expr_32_out1_set(number v) {
        this->expr_32_out1 = v;
        this->fromnormalized_13_input_set(this->expr_32_out1);
    }
    
    void expr_32_in1_set(number in1) {
        this->expr_32_in1 = in1;
        this->expr_32_out1_set(this->expr_32_in1 * this->expr_32_in2);//#map:expr_32:1
    }
    
    void ctlin_13_value_set(number v) {
        this->expr_32_in1_set(v);
    }
    
    void ctlin_13_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
        RNBO_UNUSED(length);
        RNBO_UNUSED(port);
    
        if (status == 0xB0 && (channel == this->ctlin_13_channel || this->ctlin_13_channel == -1) && (data[1] == this->ctlin_13_controller || this->ctlin_13_controller == -1)) {
            this->ctlin_13_outchannel_set(channel);
            this->ctlin_13_outcontroller_set(data[1]);
            this->ctlin_13_value_set(data[2]);
            this->ctlin_13_status = 0;
        }
    }
    
    void ctlin_14_outchannel_set(number ) {}
    
    void ctlin_14_outcontroller_set(number ) {}
    
    void fromnormalized_14_output_set(number v) {
        this->param_17_value_set(v);
    }
    
    void fromnormalized_14_input_set(number v) {
        this->fromnormalized_14_output_set(this->fromnormalized(13, v));
    }
    
    void expr_33_out1_set(number v) {
        this->expr_33_out1 = v;
        this->fromnormalized_14_input_set(this->expr_33_out1);
    }
    
    void expr_33_in1_set(number in1) {
        this->expr_33_in1 = in1;
        this->expr_33_out1_set(this->expr_33_in1 * this->expr_33_in2);//#map:expr_33:1
    }
    
    void ctlin_14_value_set(number v) {
        this->expr_33_in1_set(v);
    }
    
    void ctlin_14_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
        RNBO_UNUSED(length);
        RNBO_UNUSED(port);
    
        if (status == 0xB0 && (channel == this->ctlin_14_channel || this->ctlin_14_channel == -1) && (data[1] == this->ctlin_14_controller || this->ctlin_14_controller == -1)) {
            this->ctlin_14_outchannel_set(channel);
            this->ctlin_14_outcontroller_set(data[1]);
            this->ctlin_14_value_set(data[2]);
            this->ctlin_14_status = 0;
        }
    }
    
    void ctlin_15_outchannel_set(number ) {}
    
    void ctlin_15_outcontroller_set(number ) {}
    
    void fromnormalized_15_output_set(number v) {
        this->param_18_value_set(v);
    }
    
    void fromnormalized_15_input_set(number v) {
        this->fromnormalized_15_output_set(this->fromnormalized(14, v));
    }
    
    void expr_34_out1_set(number v) {
        this->expr_34_out1 = v;
        this->fromnormalized_15_input_set(this->expr_34_out1);
    }
    
    void expr_34_in1_set(number in1) {
        this->expr_34_in1 = in1;
        this->expr_34_out1_set(this->expr_34_in1 * this->expr_34_in2);//#map:expr_34:1
    }
    
    void ctlin_15_value_set(number v) {
        this->expr_34_in1_set(v);
    }
    
    void ctlin_15_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
        RNBO_UNUSED(length);
        RNBO_UNUSED(port);
    
        if (status == 0xB0 && (channel == this->ctlin_15_channel || this->ctlin_15_channel == -1) && (data[1] == this->ctlin_15_controller || this->ctlin_15_controller == -1)) {
            this->ctlin_15_outchannel_set(channel);
            this->ctlin_15_outcontroller_set(data[1]);
            this->ctlin_15_value_set(data[2]);
            this->ctlin_15_status = 0;
        }
    }
    
    void dspexpr_97_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
        RNBO_UNUSED(in2);
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * 0.5;//#map:_###_obj_###_:1
        }
    }
    
    void dspexpr_96_perform(number in1, number in2, SampleValue * out1, Index n) {
        RNBO_UNUSED(in2);
        RNBO_UNUSED(in1);
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = 0 * 0.5;//#map:_###_obj_###_:1
        }
    }
    
    void dspexpr_99_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
        RNBO_UNUSED(in2);
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * 0.5;//#map:_###_obj_###_:1
        }
    }
    
    void feedbackreader_05_perform(SampleValue * output, Index n) {
        auto& buffer = this->feedbacktilde_05_feedbackbuffer;
    
        for (Index i = 0; i < n; i++) {
            output[(Index)i] = buffer[(Index)i];
        }
    }
    
    void signalsend_01_perform(const SampleValue * input, SampleValue * send, Index n) {
        for (Index i = 0; i < n; i++) {
            send[(Index)i] = input[(Index)i];
        }
    }
    
    void signalforwarder_01_perform(const SampleValue * input, SampleValue * output, Index n) {
        for (Index i = 0; i < n; i++) {
            output[(Index)i] = input[(Index)i];
        }
    }
    
    void feedbackreader_06_perform(SampleValue * output, Index n) {
        auto& buffer = this->feedbacktilde_06_feedbackbuffer;
    
        for (Index i = 0; i < n; i++) {
            output[(Index)i] = buffer[(Index)i];
        }
    }
    
    void signalsend_02_perform(const SampleValue * input, SampleValue * send, Index n) {
        for (Index i = 0; i < n; i++) {
            send[(Index)i] = input[(Index)i];
        }
    }
    
    void signalforwarder_02_perform(const SampleValue * input, SampleValue * output, Index n) {
        for (Index i = 0; i < n; i++) {
            output[(Index)i] = input[(Index)i];
        }
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void signaladder_08_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i];
        }
    }
    
    void signalreceive_01_perform(const SampleValue * receive, SampleValue * output, Index n) {
        for (Index i = 0; i < n; i++) {
            output[(Index)i] = receive[(Index)i];
        }
    }
    
    void dspexpr_100_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] + in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void signaladder_09_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i];
        }
    }
    
    void signalreceive_02_perform(const SampleValue * receive, SampleValue * output, Index n) {
        for (Index i = 0; i < n; i++) {
            output[(Index)i] = receive[(Index)i];
        }
    }
    
    void dspexpr_101_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] + in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void gen_02_perform(
        const Sample * in1,
        const Sample * in2,
        number release,
        number threshold,
        number lookahead,
        number attack,
        SampleValue * out1,
        SampleValue * out2,
        SampleValue * out3,
        Index n
    ) {
        RNBO_UNUSED(attack);
        RNBO_UNUSED(lookahead);
        RNBO_UNUSED(threshold);
        RNBO_UNUSED(release);
        auto __gen_02_history_4_value = this->gen_02_history_4_value;
        auto __gen_02_history_3_value = this->gen_02_history_3_value;
        auto __gen_02_gain_value = this->gen_02_gain_value;
        auto mstosamps_5_0 = this->mstosamps(1.5);
        auto t_6_1 = this->t60(mstosamps_5_0);
        auto mstosamps_11_6 = this->mstosamps(1.5);
        auto mstosamps_31_29 = this->mstosamps(300);
        auto t_32_30 = this->t60(mstosamps_31_29);
        number rdiv_33_31 = (t_32_30 == 0. ? 0. : (number)1 / t_32_30);
        Index i;
    
        for (i = 0; i < n; i++) {
            out3[(Index)i] = __gen_02_gain_value;
            number mix_7_2 = __gen_02_gain_value + t_6_1 * (__gen_02_history_3_value - __gen_02_gain_value);
            number pow_8_3 = fixnan(rnbo_pow(t_6_1, (number)1 / (number)8));
            number mix_9_4 = mix_7_2 + pow_8_3 * (__gen_02_history_4_value - mix_7_2);
            auto min_10_5 = this->minimum(mix_7_2, mix_9_4);
            number tap_12_7 = this->gen_02_delay_1_read(mstosamps_11_6, 0);
            number mul_13_8 = tap_12_7 * min_10_5;
            number clamp_14_9 = (mul_13_8 > 0.966 ? 0.966 : (mul_13_8 < -0.966 ? -0.966 : mul_13_8));
            number div_15_10 = clamp_14_9 / (number)0.966;
            out1[(Index)i] = div_15_10;
            number tap_16_11 = this->gen_02_delay_2_read(mstosamps_11_6, 0);
            number mul_17_12 = tap_16_11 * min_10_5;
            number clamp_18_13 = (mul_17_12 > 0.966 ? 0.966 : (mul_17_12 < -0.966 ? -0.966 : mul_17_12));
            number div_19_14 = clamp_18_13 / (number)0.966;
            out2[(Index)i] = div_19_14;
            auto max_20_15 = this->maximum(__gen_02_gain_value, 0.001);
            number dcblock_21_17 = this->gen_02_dcblock_16_next(in1[(Index)i], 0.9997);
            number abs_22_18 = rnbo_abs(dcblock_21_17);
            number dcblock_23_20 = this->gen_02_dcblock_19_next(in2[(Index)i], 0.9997);
            number abs_24_21 = rnbo_abs(dcblock_23_20);
            auto max_25_22 = this->maximum(abs_22_18, abs_24_21);
            number rdiv_26_23 = (max_25_22 == 0. ? 0. : (number)0.966 / max_25_22);
            number mul_27_24 = max_25_22 * __gen_02_gain_value;
            number gt_28_25 = mul_27_24 > 0.966;
            number plusequals_29_27 = this->gen_02_plusequals_26_next(1, gt_28_25);
            number gt_30_28 = plusequals_29_27 > mstosamps_11_6;
            number mul_34_32 = max_20_15 * rdiv_33_31;
            number switch_35_33 = ((bool)(gt_30_28) ? mul_34_32 : __gen_02_gain_value);
            number switch_36_34 = ((bool)(gt_28_25) ? rdiv_26_23 : switch_35_33);
            auto min_37_35 = this->minimum(switch_36_34, 1);
            number history_3_next_38_36 = fixdenorm(mix_7_2);
            number history_4_next_39_37 = fixdenorm(mix_9_4);
            number gain_next_40_38 = fixdenorm(min_37_35);
            this->gen_02_delay_1_write(dcblock_21_17);
            __gen_02_gain_value = gain_next_40_38;
            __gen_02_history_4_value = history_4_next_39_37;
            __gen_02_history_3_value = history_3_next_38_36;
            this->gen_02_delay_2_write(dcblock_23_20);
            this->gen_02_delay_1_step();
            this->gen_02_delay_2_step();
        }
    
        this->gen_02_gain_value = __gen_02_gain_value;
        this->gen_02_history_3_value = __gen_02_history_3_value;
        this->gen_02_history_4_value = __gen_02_history_4_value;
    }
    
    void p_18_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        // subpatcher: Reverb~
        ConstSampleArray<2> ins = {in1, in2};
    
        SampleArray<2> outs = {out1, out2};
        this->p_18->process(ins, 2, outs, 2, n);
    }
    
    void dspexpr_95_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] + in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void p_22_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        // subpatcher: Pitch~
        ConstSampleArray<2> ins = {in1, in2};
    
        SampleArray<2> outs = {out1, out2};
        this->p_22->process(ins, 2, outs, 2, n);
    }
    
    void p_19_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        // subpatcher: Chorus~
        ConstSampleArray<2> ins = {in1, in2};
    
        SampleArray<2> outs = {out1, out2};
        this->p_19->process(ins, 2, outs, 2, n);
    }
    
    void p_21_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        // subpatcher: Delay~
        ConstSampleArray<2> ins = {in1, in2};
    
        SampleArray<2> outs = {out1, out2};
        this->p_21->process(ins, 2, outs, 2, n);
    }
    
    void p_20_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        // subpatcher: Feedback~
        ConstSampleArray<2> ins = {in1, in2};
    
        SampleArray<2> outs = {out1, out2};
        this->p_20->process(ins, 2, outs, 2, n);
    }
    
    void feedbackwriter_05_perform(const SampleValue * input, Index n) {
        auto& buffer = this->feedbacktilde_05_feedbackbuffer;
    
        for (Index i = 0; i < n; i++) {
            buffer[(Index)i] = input[(Index)i];
        }
    }
    
    void feedbackwriter_06_perform(const SampleValue * input, Index n) {
        auto& buffer = this->feedbacktilde_06_feedbackbuffer;
    
        for (Index i = 0; i < n; i++) {
            buffer[(Index)i] = input[(Index)i];
        }
    }
    
    void dspexpr_98_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] + in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void p_15_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        // subpatcher: Octave~
        ConstSampleArray<2> ins = {in1, in2};
    
        SampleArray<2> outs = {out1, out2};
        this->p_15->process(ins, 2, outs, 2, n);
    }
    
    void p_17_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        const SampleValue * in3,
        const SampleValue * in4,
        const SampleValue * in5,
        const SampleValue * in6,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        // subpatcher: Volumes~
        ConstSampleArray<6> ins = {in1, in2, in3, in4, in5, in6};
    
        SampleArray<2> outs = {out1, out2};
        this->p_17->process(ins, 6, outs, 2, n);
    }
    
    void gen_01_perform(
        const Sample * in1,
        const Sample * in2,
        number threshold,
        number release,
        number lookahead,
        number attack,
        SampleValue * out1,
        SampleValue * out2,
        SampleValue * out3,
        Index n
    ) {
        RNBO_UNUSED(attack);
        RNBO_UNUSED(lookahead);
        RNBO_UNUSED(release);
        RNBO_UNUSED(threshold);
        auto __gen_01_history_4_value = this->gen_01_history_4_value;
        auto __gen_01_history_3_value = this->gen_01_history_3_value;
        auto __gen_01_gain_value = this->gen_01_gain_value;
        auto mstosamps_5_0 = this->mstosamps(1.5);
        auto t_6_1 = this->t60(mstosamps_5_0);
        auto mstosamps_11_6 = this->mstosamps(1.5);
        auto mstosamps_31_29 = this->mstosamps(300);
        auto t_32_30 = this->t60(mstosamps_31_29);
        number rdiv_33_31 = (t_32_30 == 0. ? 0. : (number)1 / t_32_30);
        Index i;
    
        for (i = 0; i < n; i++) {
            out3[(Index)i] = __gen_01_gain_value;
            number mix_7_2 = __gen_01_gain_value + t_6_1 * (__gen_01_history_3_value - __gen_01_gain_value);
            number pow_8_3 = fixnan(rnbo_pow(t_6_1, (number)1 / (number)8));
            number mix_9_4 = mix_7_2 + pow_8_3 * (__gen_01_history_4_value - mix_7_2);
            auto min_10_5 = this->minimum(mix_7_2, mix_9_4);
            number tap_12_7 = this->gen_01_delay_1_read(mstosamps_11_6, 0);
            number mul_13_8 = tap_12_7 * min_10_5;
            number clamp_14_9 = (mul_13_8 > 0.966 ? 0.966 : (mul_13_8 < -0.966 ? -0.966 : mul_13_8));
            number div_15_10 = clamp_14_9 / (number)0.966;
            out1[(Index)i] = div_15_10;
            number tap_16_11 = this->gen_01_delay_2_read(mstosamps_11_6, 0);
            number mul_17_12 = tap_16_11 * min_10_5;
            number clamp_18_13 = (mul_17_12 > 0.966 ? 0.966 : (mul_17_12 < -0.966 ? -0.966 : mul_17_12));
            number div_19_14 = clamp_18_13 / (number)0.966;
            out2[(Index)i] = div_19_14;
            auto max_20_15 = this->maximum(__gen_01_gain_value, 0.001);
            number dcblock_21_17 = this->gen_01_dcblock_16_next(in1[(Index)i], 0.9997);
            number abs_22_18 = rnbo_abs(dcblock_21_17);
            number dcblock_23_20 = this->gen_01_dcblock_19_next(in2[(Index)i], 0.9997);
            number abs_24_21 = rnbo_abs(dcblock_23_20);
            auto max_25_22 = this->maximum(abs_22_18, abs_24_21);
            number rdiv_26_23 = (max_25_22 == 0. ? 0. : (number)0.966 / max_25_22);
            number mul_27_24 = max_25_22 * __gen_01_gain_value;
            number gt_28_25 = mul_27_24 > 0.966;
            number plusequals_29_27 = this->gen_01_plusequals_26_next(1, gt_28_25);
            number gt_30_28 = plusequals_29_27 > mstosamps_11_6;
            number mul_34_32 = max_20_15 * rdiv_33_31;
            number switch_35_33 = ((bool)(gt_30_28) ? mul_34_32 : __gen_01_gain_value);
            number switch_36_34 = ((bool)(gt_28_25) ? rdiv_26_23 : switch_35_33);
            auto min_37_35 = this->minimum(switch_36_34, 1);
            number history_3_next_38_36 = fixdenorm(mix_7_2);
            number history_4_next_39_37 = fixdenorm(mix_9_4);
            number gain_next_40_38 = fixdenorm(min_37_35);
            this->gen_01_delay_1_write(dcblock_21_17);
            __gen_01_gain_value = gain_next_40_38;
            __gen_01_history_4_value = history_4_next_39_37;
            __gen_01_history_3_value = history_3_next_38_36;
            this->gen_01_delay_2_write(dcblock_23_20);
            this->gen_01_delay_1_step();
            this->gen_01_delay_2_step();
        }
    
        this->gen_01_gain_value = __gen_01_gain_value;
        this->gen_01_history_3_value = __gen_01_history_3_value;
        this->gen_01_history_4_value = __gen_01_history_4_value;
    }
    
    void p_16_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        const SampleValue * in3,
        const SampleValue * in4,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        // subpatcher: Mix~
        ConstSampleArray<4> ins = {in1, in2, in3, in4};
    
        SampleArray<2> outs = {out1, out2};
        this->p_16->process(ins, 4, outs, 2, n);
    }
    
    void numberobj_57_value_setter(number v) {
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_57_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_57_value = localvalue;
    }
    
    void numberobj_58_value_setter(number v) {
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_58_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_58_value = localvalue;
    }
    
    void numberobj_59_value_setter(number v) {
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_59_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_59_value = localvalue;
    }
    
    void numberobj_60_value_setter(number v) {
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_60_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_60_value = localvalue;
    }
    
    void numberobj_61_value_setter(number v) {
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_61_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_61_value = localvalue;
    }
    
    void numberobj_62_value_setter(number v) {
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_62_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_62_value = localvalue;
    }
    
    void numberobj_63_value_setter(number v) {
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_63_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_63_value = localvalue;
    }
    
    void numberobj_64_value_setter(number v) {
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_64_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_64_value = localvalue;
    }
    
    void numberobj_65_value_setter(number v) {
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_65_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_65_value = localvalue;
    }
    
    void numberobj_66_value_setter(number v) {
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_66_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_66_value = localvalue;
    }
    
    void numberobj_67_value_setter(number v) {
        number localvalue = v;
    
        if ((bool)(true) && localvalue < -24) {
            localvalue = -24;
        }
    
        if ((bool)(true) && localvalue > 24) {
            localvalue = 24;
        }
    
        if (this->numberobj_67_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_67_value = localvalue;
    }
    
    void numberobj_68_value_setter(number v) {
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_68_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_68_value = localvalue;
    }
    
    void numberobj_69_value_setter(number v) {
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_69_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_69_value = localvalue;
    }
    
    void numberobj_70_value_setter(number v) {
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 25) {
            localvalue = 25;
        }
    
        if ((bool)(true) && localvalue > 250) {
            localvalue = 250;
        }
    
        if (this->numberobj_70_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_70_value = localvalue;
    }
    
    void numberobj_71_value_setter(number v) {
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 1000) {
            localvalue = 1000;
        }
    
        if (this->numberobj_71_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_71_value = localvalue;
    }
    
    void param_04_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_04_value;
    }
    
    void param_04_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_04_value_set(preset["value"]);
    }
    
    void numberobj_57_init() {
        this->numberobj_57_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/number_obj-106"), 1, this->_currentTime);
    }
    
    void numberobj_57_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_57_value;
    }
    
    void numberobj_57_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_57_value_set(preset["value"]);
    }
    
    void gen_01_delay_1_step() {
        this->gen_01_delay_1_reader++;
    
        if (this->gen_01_delay_1_reader >= (int)(this->gen_01_delay_1_buffer->getSize()))
            this->gen_01_delay_1_reader = 0;
    }
    
    number gen_01_delay_1_read(number size, Int interp) {
        RNBO_UNUSED(interp);
    
        {
            number r = (int)(this->gen_01_delay_1_buffer->getSize()) + this->gen_01_delay_1_reader - ((size > this->gen_01_delay_1__maxdelay ? this->gen_01_delay_1__maxdelay : (size < (this->gen_01_delay_1_reader != this->gen_01_delay_1_writer) ? this->gen_01_delay_1_reader != this->gen_01_delay_1_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            long index2 = (long)(index1 + 1);
    
            return this->linearinterp(frac, this->gen_01_delay_1_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_01_delay_1_wrap))
            ), this->gen_01_delay_1_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_01_delay_1_wrap))
            ));
        }
    
        number r = (int)(this->gen_01_delay_1_buffer->getSize()) + this->gen_01_delay_1_reader - ((size > this->gen_01_delay_1__maxdelay ? this->gen_01_delay_1__maxdelay : (size < (this->gen_01_delay_1_reader != this->gen_01_delay_1_writer) ? this->gen_01_delay_1_reader != this->gen_01_delay_1_writer : size)));
        long index1 = (long)(rnbo_floor(r));
    
        return this->gen_01_delay_1_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_01_delay_1_wrap))
        );
    }
    
    void gen_01_delay_1_write(number v) {
        this->gen_01_delay_1_writer = this->gen_01_delay_1_reader;
        this->gen_01_delay_1_buffer[(Index)this->gen_01_delay_1_writer] = v;
    }
    
    number gen_01_delay_1_next(number v, int size) {
        number effectiveSize = (size == -1 ? this->gen_01_delay_1__maxdelay : size);
        number val = this->gen_01_delay_1_read(effectiveSize, 0);
        this->gen_01_delay_1_write(v);
        this->gen_01_delay_1_step();
        return val;
    }
    
    array<Index, 2> gen_01_delay_1_calcSizeInSamples() {
        number sizeInSamples = 0;
        Index allocatedSizeInSamples = 0;
    
        {
            sizeInSamples = this->gen_01_delay_1_evaluateSizeExpr(this->samplerate(), this->vectorsize());
            this->gen_01_delay_1_sizemode = 0;
        }
    
        sizeInSamples = rnbo_floor(sizeInSamples);
        sizeInSamples = this->maximum(sizeInSamples, 2);
        allocatedSizeInSamples = (Index)(sizeInSamples);
        allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
        return {sizeInSamples, allocatedSizeInSamples};
    }
    
    void gen_01_delay_1_init() {
        auto result = this->gen_01_delay_1_calcSizeInSamples();
        this->gen_01_delay_1__maxdelay = result[0];
        Index requestedSizeInSamples = (Index)(result[1]);
        this->gen_01_delay_1_buffer->requestSize(requestedSizeInSamples, 1);
        this->gen_01_delay_1_wrap = requestedSizeInSamples - 1;
    }
    
    void gen_01_delay_1_clear() {
        this->gen_01_delay_1_buffer->setZero();
    }
    
    void gen_01_delay_1_reset() {
        auto result = this->gen_01_delay_1_calcSizeInSamples();
        this->gen_01_delay_1__maxdelay = result[0];
        Index allocatedSizeInSamples = (Index)(result[1]);
        this->gen_01_delay_1_buffer->setSize(allocatedSizeInSamples);
        updateDataRef(this, this->gen_01_delay_1_buffer);
        this->gen_01_delay_1_wrap = this->gen_01_delay_1_buffer->getSize() - 1;
        this->gen_01_delay_1_clear();
    
        if (this->gen_01_delay_1_reader >= this->gen_01_delay_1__maxdelay || this->gen_01_delay_1_writer >= this->gen_01_delay_1__maxdelay) {
            this->gen_01_delay_1_reader = 0;
            this->gen_01_delay_1_writer = 0;
        }
    }
    
    void gen_01_delay_1_dspsetup() {
        this->gen_01_delay_1_reset();
    }
    
    number gen_01_delay_1_evaluateSizeExpr(number samplerate, number vectorsize) {
        RNBO_UNUSED(vectorsize);
        RNBO_UNUSED(samplerate);
        return this->samplerate() / (number)10;
    }
    
    number gen_01_delay_1_size() {
        return this->gen_01_delay_1__maxdelay;
    }
    
    void gen_01_delay_2_step() {
        this->gen_01_delay_2_reader++;
    
        if (this->gen_01_delay_2_reader >= (int)(this->gen_01_delay_2_buffer->getSize()))
            this->gen_01_delay_2_reader = 0;
    }
    
    number gen_01_delay_2_read(number size, Int interp) {
        RNBO_UNUSED(interp);
    
        {
            number r = (int)(this->gen_01_delay_2_buffer->getSize()) + this->gen_01_delay_2_reader - ((size > this->gen_01_delay_2__maxdelay ? this->gen_01_delay_2__maxdelay : (size < (this->gen_01_delay_2_reader != this->gen_01_delay_2_writer) ? this->gen_01_delay_2_reader != this->gen_01_delay_2_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            long index2 = (long)(index1 + 1);
    
            return this->linearinterp(frac, this->gen_01_delay_2_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_01_delay_2_wrap))
            ), this->gen_01_delay_2_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_01_delay_2_wrap))
            ));
        }
    
        number r = (int)(this->gen_01_delay_2_buffer->getSize()) + this->gen_01_delay_2_reader - ((size > this->gen_01_delay_2__maxdelay ? this->gen_01_delay_2__maxdelay : (size < (this->gen_01_delay_2_reader != this->gen_01_delay_2_writer) ? this->gen_01_delay_2_reader != this->gen_01_delay_2_writer : size)));
        long index1 = (long)(rnbo_floor(r));
    
        return this->gen_01_delay_2_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_01_delay_2_wrap))
        );
    }
    
    void gen_01_delay_2_write(number v) {
        this->gen_01_delay_2_writer = this->gen_01_delay_2_reader;
        this->gen_01_delay_2_buffer[(Index)this->gen_01_delay_2_writer] = v;
    }
    
    number gen_01_delay_2_next(number v, int size) {
        number effectiveSize = (size == -1 ? this->gen_01_delay_2__maxdelay : size);
        number val = this->gen_01_delay_2_read(effectiveSize, 0);
        this->gen_01_delay_2_write(v);
        this->gen_01_delay_2_step();
        return val;
    }
    
    array<Index, 2> gen_01_delay_2_calcSizeInSamples() {
        number sizeInSamples = 0;
        Index allocatedSizeInSamples = 0;
    
        {
            sizeInSamples = this->gen_01_delay_2_evaluateSizeExpr(this->samplerate(), this->vectorsize());
            this->gen_01_delay_2_sizemode = 0;
        }
    
        sizeInSamples = rnbo_floor(sizeInSamples);
        sizeInSamples = this->maximum(sizeInSamples, 2);
        allocatedSizeInSamples = (Index)(sizeInSamples);
        allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
        return {sizeInSamples, allocatedSizeInSamples};
    }
    
    void gen_01_delay_2_init() {
        auto result = this->gen_01_delay_2_calcSizeInSamples();
        this->gen_01_delay_2__maxdelay = result[0];
        Index requestedSizeInSamples = (Index)(result[1]);
        this->gen_01_delay_2_buffer->requestSize(requestedSizeInSamples, 1);
        this->gen_01_delay_2_wrap = requestedSizeInSamples - 1;
    }
    
    void gen_01_delay_2_clear() {
        this->gen_01_delay_2_buffer->setZero();
    }
    
    void gen_01_delay_2_reset() {
        auto result = this->gen_01_delay_2_calcSizeInSamples();
        this->gen_01_delay_2__maxdelay = result[0];
        Index allocatedSizeInSamples = (Index)(result[1]);
        this->gen_01_delay_2_buffer->setSize(allocatedSizeInSamples);
        updateDataRef(this, this->gen_01_delay_2_buffer);
        this->gen_01_delay_2_wrap = this->gen_01_delay_2_buffer->getSize() - 1;
        this->gen_01_delay_2_clear();
    
        if (this->gen_01_delay_2_reader >= this->gen_01_delay_2__maxdelay || this->gen_01_delay_2_writer >= this->gen_01_delay_2__maxdelay) {
            this->gen_01_delay_2_reader = 0;
            this->gen_01_delay_2_writer = 0;
        }
    }
    
    void gen_01_delay_2_dspsetup() {
        this->gen_01_delay_2_reset();
    }
    
    number gen_01_delay_2_evaluateSizeExpr(number samplerate, number vectorsize) {
        RNBO_UNUSED(vectorsize);
        RNBO_UNUSED(samplerate);
        return this->samplerate() / (number)10;
    }
    
    number gen_01_delay_2_size() {
        return this->gen_01_delay_2__maxdelay;
    }
    
    number gen_01_history_3_getvalue() {
        return this->gen_01_history_3_value;
    }
    
    void gen_01_history_3_setvalue(number val) {
        this->gen_01_history_3_value = val;
    }
    
    void gen_01_history_3_reset() {
        this->gen_01_history_3_value = 0;
    }
    
    void gen_01_history_3_init() {
        this->gen_01_history_3_value = 0;
    }
    
    number gen_01_history_4_getvalue() {
        return this->gen_01_history_4_value;
    }
    
    void gen_01_history_4_setvalue(number val) {
        this->gen_01_history_4_value = val;
    }
    
    void gen_01_history_4_reset() {
        this->gen_01_history_4_value = 0;
    }
    
    void gen_01_history_4_init() {
        this->gen_01_history_4_value = 0;
    }
    
    number gen_01_gain_getvalue() {
        return this->gen_01_gain_value;
    }
    
    void gen_01_gain_setvalue(number val) {
        this->gen_01_gain_value = val;
    }
    
    void gen_01_gain_reset() {
        this->gen_01_gain_value = 0;
    }
    
    void gen_01_gain_init() {
        this->gen_01_gain_value = 0;
    }
    
    number gen_01_dcblock_16_next(number x, number gain) {
        RNBO_UNUSED(gain);
        number y = x - this->gen_01_dcblock_16_xm1 + this->gen_01_dcblock_16_ym1 * 0.9997;
        this->gen_01_dcblock_16_xm1 = x;
        this->gen_01_dcblock_16_ym1 = y;
        return y;
    }
    
    void gen_01_dcblock_16_reset() {
        this->gen_01_dcblock_16_xm1 = 0;
        this->gen_01_dcblock_16_ym1 = 0;
    }
    
    void gen_01_dcblock_16_dspsetup() {
        this->gen_01_dcblock_16_reset();
    }
    
    number gen_01_dcblock_19_next(number x, number gain) {
        RNBO_UNUSED(gain);
        number y = x - this->gen_01_dcblock_19_xm1 + this->gen_01_dcblock_19_ym1 * 0.9997;
        this->gen_01_dcblock_19_xm1 = x;
        this->gen_01_dcblock_19_ym1 = y;
        return y;
    }
    
    void gen_01_dcblock_19_reset() {
        this->gen_01_dcblock_19_xm1 = 0;
        this->gen_01_dcblock_19_ym1 = 0;
    }
    
    void gen_01_dcblock_19_dspsetup() {
        this->gen_01_dcblock_19_reset();
    }
    
    number gen_01_plusequals_26_next(number x, number reset) {
        RNBO_UNUSED(x);
    
        {
            {
                this->gen_01_plusequals_26_value = ((bool)(reset) ? 0 : this->gen_01_plusequals_26_value + 1);
                return this->gen_01_plusequals_26_value;
            }
        }
    }
    
    void gen_01_plusequals_26_reset() {
        this->gen_01_plusequals_26_value = 0;
    }
    
    void gen_01_dspsetup(bool force) {
        if ((bool)(this->gen_01_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->gen_01_setupDone = true;
        this->gen_01_delay_1_dspsetup();
        this->gen_01_delay_2_dspsetup();
        this->gen_01_dcblock_16_dspsetup();
        this->gen_01_dcblock_19_dspsetup();
    }
    
    void gen_02_delay_1_step() {
        this->gen_02_delay_1_reader++;
    
        if (this->gen_02_delay_1_reader >= (int)(this->gen_02_delay_1_buffer->getSize()))
            this->gen_02_delay_1_reader = 0;
    }
    
    number gen_02_delay_1_read(number size, Int interp) {
        RNBO_UNUSED(interp);
    
        {
            number r = (int)(this->gen_02_delay_1_buffer->getSize()) + this->gen_02_delay_1_reader - ((size > this->gen_02_delay_1__maxdelay ? this->gen_02_delay_1__maxdelay : (size < (this->gen_02_delay_1_reader != this->gen_02_delay_1_writer) ? this->gen_02_delay_1_reader != this->gen_02_delay_1_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            long index2 = (long)(index1 + 1);
    
            return this->linearinterp(frac, this->gen_02_delay_1_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_02_delay_1_wrap))
            ), this->gen_02_delay_1_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_02_delay_1_wrap))
            ));
        }
    
        number r = (int)(this->gen_02_delay_1_buffer->getSize()) + this->gen_02_delay_1_reader - ((size > this->gen_02_delay_1__maxdelay ? this->gen_02_delay_1__maxdelay : (size < (this->gen_02_delay_1_reader != this->gen_02_delay_1_writer) ? this->gen_02_delay_1_reader != this->gen_02_delay_1_writer : size)));
        long index1 = (long)(rnbo_floor(r));
    
        return this->gen_02_delay_1_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_02_delay_1_wrap))
        );
    }
    
    void gen_02_delay_1_write(number v) {
        this->gen_02_delay_1_writer = this->gen_02_delay_1_reader;
        this->gen_02_delay_1_buffer[(Index)this->gen_02_delay_1_writer] = v;
    }
    
    number gen_02_delay_1_next(number v, int size) {
        number effectiveSize = (size == -1 ? this->gen_02_delay_1__maxdelay : size);
        number val = this->gen_02_delay_1_read(effectiveSize, 0);
        this->gen_02_delay_1_write(v);
        this->gen_02_delay_1_step();
        return val;
    }
    
    array<Index, 2> gen_02_delay_1_calcSizeInSamples() {
        number sizeInSamples = 0;
        Index allocatedSizeInSamples = 0;
    
        {
            sizeInSamples = this->gen_02_delay_1_evaluateSizeExpr(this->samplerate(), this->vectorsize());
            this->gen_02_delay_1_sizemode = 0;
        }
    
        sizeInSamples = rnbo_floor(sizeInSamples);
        sizeInSamples = this->maximum(sizeInSamples, 2);
        allocatedSizeInSamples = (Index)(sizeInSamples);
        allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
        return {sizeInSamples, allocatedSizeInSamples};
    }
    
    void gen_02_delay_1_init() {
        auto result = this->gen_02_delay_1_calcSizeInSamples();
        this->gen_02_delay_1__maxdelay = result[0];
        Index requestedSizeInSamples = (Index)(result[1]);
        this->gen_02_delay_1_buffer->requestSize(requestedSizeInSamples, 1);
        this->gen_02_delay_1_wrap = requestedSizeInSamples - 1;
    }
    
    void gen_02_delay_1_clear() {
        this->gen_02_delay_1_buffer->setZero();
    }
    
    void gen_02_delay_1_reset() {
        auto result = this->gen_02_delay_1_calcSizeInSamples();
        this->gen_02_delay_1__maxdelay = result[0];
        Index allocatedSizeInSamples = (Index)(result[1]);
        this->gen_02_delay_1_buffer->setSize(allocatedSizeInSamples);
        updateDataRef(this, this->gen_02_delay_1_buffer);
        this->gen_02_delay_1_wrap = this->gen_02_delay_1_buffer->getSize() - 1;
        this->gen_02_delay_1_clear();
    
        if (this->gen_02_delay_1_reader >= this->gen_02_delay_1__maxdelay || this->gen_02_delay_1_writer >= this->gen_02_delay_1__maxdelay) {
            this->gen_02_delay_1_reader = 0;
            this->gen_02_delay_1_writer = 0;
        }
    }
    
    void gen_02_delay_1_dspsetup() {
        this->gen_02_delay_1_reset();
    }
    
    number gen_02_delay_1_evaluateSizeExpr(number samplerate, number vectorsize) {
        RNBO_UNUSED(vectorsize);
        RNBO_UNUSED(samplerate);
        return this->samplerate() / (number)10;
    }
    
    number gen_02_delay_1_size() {
        return this->gen_02_delay_1__maxdelay;
    }
    
    void gen_02_delay_2_step() {
        this->gen_02_delay_2_reader++;
    
        if (this->gen_02_delay_2_reader >= (int)(this->gen_02_delay_2_buffer->getSize()))
            this->gen_02_delay_2_reader = 0;
    }
    
    number gen_02_delay_2_read(number size, Int interp) {
        RNBO_UNUSED(interp);
    
        {
            number r = (int)(this->gen_02_delay_2_buffer->getSize()) + this->gen_02_delay_2_reader - ((size > this->gen_02_delay_2__maxdelay ? this->gen_02_delay_2__maxdelay : (size < (this->gen_02_delay_2_reader != this->gen_02_delay_2_writer) ? this->gen_02_delay_2_reader != this->gen_02_delay_2_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            long index2 = (long)(index1 + 1);
    
            return this->linearinterp(frac, this->gen_02_delay_2_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_02_delay_2_wrap))
            ), this->gen_02_delay_2_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_02_delay_2_wrap))
            ));
        }
    
        number r = (int)(this->gen_02_delay_2_buffer->getSize()) + this->gen_02_delay_2_reader - ((size > this->gen_02_delay_2__maxdelay ? this->gen_02_delay_2__maxdelay : (size < (this->gen_02_delay_2_reader != this->gen_02_delay_2_writer) ? this->gen_02_delay_2_reader != this->gen_02_delay_2_writer : size)));
        long index1 = (long)(rnbo_floor(r));
    
        return this->gen_02_delay_2_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_02_delay_2_wrap))
        );
    }
    
    void gen_02_delay_2_write(number v) {
        this->gen_02_delay_2_writer = this->gen_02_delay_2_reader;
        this->gen_02_delay_2_buffer[(Index)this->gen_02_delay_2_writer] = v;
    }
    
    number gen_02_delay_2_next(number v, int size) {
        number effectiveSize = (size == -1 ? this->gen_02_delay_2__maxdelay : size);
        number val = this->gen_02_delay_2_read(effectiveSize, 0);
        this->gen_02_delay_2_write(v);
        this->gen_02_delay_2_step();
        return val;
    }
    
    array<Index, 2> gen_02_delay_2_calcSizeInSamples() {
        number sizeInSamples = 0;
        Index allocatedSizeInSamples = 0;
    
        {
            sizeInSamples = this->gen_02_delay_2_evaluateSizeExpr(this->samplerate(), this->vectorsize());
            this->gen_02_delay_2_sizemode = 0;
        }
    
        sizeInSamples = rnbo_floor(sizeInSamples);
        sizeInSamples = this->maximum(sizeInSamples, 2);
        allocatedSizeInSamples = (Index)(sizeInSamples);
        allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
        return {sizeInSamples, allocatedSizeInSamples};
    }
    
    void gen_02_delay_2_init() {
        auto result = this->gen_02_delay_2_calcSizeInSamples();
        this->gen_02_delay_2__maxdelay = result[0];
        Index requestedSizeInSamples = (Index)(result[1]);
        this->gen_02_delay_2_buffer->requestSize(requestedSizeInSamples, 1);
        this->gen_02_delay_2_wrap = requestedSizeInSamples - 1;
    }
    
    void gen_02_delay_2_clear() {
        this->gen_02_delay_2_buffer->setZero();
    }
    
    void gen_02_delay_2_reset() {
        auto result = this->gen_02_delay_2_calcSizeInSamples();
        this->gen_02_delay_2__maxdelay = result[0];
        Index allocatedSizeInSamples = (Index)(result[1]);
        this->gen_02_delay_2_buffer->setSize(allocatedSizeInSamples);
        updateDataRef(this, this->gen_02_delay_2_buffer);
        this->gen_02_delay_2_wrap = this->gen_02_delay_2_buffer->getSize() - 1;
        this->gen_02_delay_2_clear();
    
        if (this->gen_02_delay_2_reader >= this->gen_02_delay_2__maxdelay || this->gen_02_delay_2_writer >= this->gen_02_delay_2__maxdelay) {
            this->gen_02_delay_2_reader = 0;
            this->gen_02_delay_2_writer = 0;
        }
    }
    
    void gen_02_delay_2_dspsetup() {
        this->gen_02_delay_2_reset();
    }
    
    number gen_02_delay_2_evaluateSizeExpr(number samplerate, number vectorsize) {
        RNBO_UNUSED(vectorsize);
        RNBO_UNUSED(samplerate);
        return this->samplerate() / (number)10;
    }
    
    number gen_02_delay_2_size() {
        return this->gen_02_delay_2__maxdelay;
    }
    
    number gen_02_history_3_getvalue() {
        return this->gen_02_history_3_value;
    }
    
    void gen_02_history_3_setvalue(number val) {
        this->gen_02_history_3_value = val;
    }
    
    void gen_02_history_3_reset() {
        this->gen_02_history_3_value = 0;
    }
    
    void gen_02_history_3_init() {
        this->gen_02_history_3_value = 0;
    }
    
    number gen_02_history_4_getvalue() {
        return this->gen_02_history_4_value;
    }
    
    void gen_02_history_4_setvalue(number val) {
        this->gen_02_history_4_value = val;
    }
    
    void gen_02_history_4_reset() {
        this->gen_02_history_4_value = 0;
    }
    
    void gen_02_history_4_init() {
        this->gen_02_history_4_value = 0;
    }
    
    number gen_02_gain_getvalue() {
        return this->gen_02_gain_value;
    }
    
    void gen_02_gain_setvalue(number val) {
        this->gen_02_gain_value = val;
    }
    
    void gen_02_gain_reset() {
        this->gen_02_gain_value = 0;
    }
    
    void gen_02_gain_init() {
        this->gen_02_gain_value = 0;
    }
    
    number gen_02_dcblock_16_next(number x, number gain) {
        RNBO_UNUSED(gain);
        number y = x - this->gen_02_dcblock_16_xm1 + this->gen_02_dcblock_16_ym1 * 0.9997;
        this->gen_02_dcblock_16_xm1 = x;
        this->gen_02_dcblock_16_ym1 = y;
        return y;
    }
    
    void gen_02_dcblock_16_reset() {
        this->gen_02_dcblock_16_xm1 = 0;
        this->gen_02_dcblock_16_ym1 = 0;
    }
    
    void gen_02_dcblock_16_dspsetup() {
        this->gen_02_dcblock_16_reset();
    }
    
    number gen_02_dcblock_19_next(number x, number gain) {
        RNBO_UNUSED(gain);
        number y = x - this->gen_02_dcblock_19_xm1 + this->gen_02_dcblock_19_ym1 * 0.9997;
        this->gen_02_dcblock_19_xm1 = x;
        this->gen_02_dcblock_19_ym1 = y;
        return y;
    }
    
    void gen_02_dcblock_19_reset() {
        this->gen_02_dcblock_19_xm1 = 0;
        this->gen_02_dcblock_19_ym1 = 0;
    }
    
    void gen_02_dcblock_19_dspsetup() {
        this->gen_02_dcblock_19_reset();
    }
    
    number gen_02_plusequals_26_next(number x, number reset) {
        RNBO_UNUSED(x);
    
        {
            {
                this->gen_02_plusequals_26_value = ((bool)(reset) ? 0 : this->gen_02_plusequals_26_value + 1);
                return this->gen_02_plusequals_26_value;
            }
        }
    }
    
    void gen_02_plusequals_26_reset() {
        this->gen_02_plusequals_26_value = 0;
    }
    
    void gen_02_dspsetup(bool force) {
        if ((bool)(this->gen_02_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->gen_02_setupDone = true;
        this->gen_02_delay_1_dspsetup();
        this->gen_02_delay_2_dspsetup();
        this->gen_02_dcblock_16_dspsetup();
        this->gen_02_dcblock_19_dspsetup();
    }
    
    void param_05_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_05_value;
    }
    
    void param_05_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_05_value_set(preset["value"]);
    }
    
    void numberobj_58_init() {
        this->numberobj_58_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/number_obj-95"), 1, this->_currentTime);
    }
    
    void numberobj_58_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_58_value;
    }
    
    void numberobj_58_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_58_value_set(preset["value"]);
    }
    
    void param_06_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_06_value;
    }
    
    void param_06_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_06_value_set(preset["value"]);
    }
    
    void numberobj_59_init() {
        this->numberobj_59_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/number_obj-23"), 1, this->_currentTime);
    }
    
    void numberobj_59_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_59_value;
    }
    
    void numberobj_59_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_59_value_set(preset["value"]);
    }
    
    void numberobj_60_init() {
        this->numberobj_60_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/number_obj-42"), 1, this->_currentTime);
    }
    
    void numberobj_60_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_60_value;
    }
    
    void numberobj_60_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_60_value_set(preset["value"]);
    }
    
    void param_07_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_07_value;
    }
    
    void param_07_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_07_value_set(preset["value"]);
    }
    
    void numberobj_61_init() {
        this->numberobj_61_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/number_obj-36"), 1, this->_currentTime);
    }
    
    void numberobj_61_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_61_value;
    }
    
    void numberobj_61_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_61_value_set(preset["value"]);
    }
    
    void param_08_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_08_value;
    }
    
    void param_08_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_08_value_set(preset["value"]);
    }
    
    void param_09_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_09_value;
    }
    
    void param_09_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_09_value_set(preset["value"]);
    }
    
    void numberobj_62_init() {
        this->numberobj_62_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/number_obj-94"), 1, this->_currentTime);
    }
    
    void numberobj_62_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_62_value;
    }
    
    void numberobj_62_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_62_value_set(preset["value"]);
    }
    
    void param_10_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_10_value;
    }
    
    void param_10_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_10_value_set(preset["value"]);
    }
    
    void numberobj_63_init() {
        this->numberobj_63_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/number_obj-89"), 1, this->_currentTime);
    }
    
    void numberobj_63_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_63_value;
    }
    
    void numberobj_63_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_63_value_set(preset["value"]);
    }
    
    void numberobj_64_init() {
        this->numberobj_64_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/number_obj-54"), 1, this->_currentTime);
    }
    
    void numberobj_64_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_64_value;
    }
    
    void numberobj_64_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_64_value_set(preset["value"]);
    }
    
    void param_11_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_11_value;
    }
    
    void param_11_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_11_value_set(preset["value"]);
    }
    
    void numberobj_65_init() {
        this->numberobj_65_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/number_obj-38"), 1, this->_currentTime);
    }
    
    void numberobj_65_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_65_value;
    }
    
    void numberobj_65_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_65_value_set(preset["value"]);
    }
    
    void param_12_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_12_value;
    }
    
    void param_12_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_12_value_set(preset["value"]);
    }
    
    void numberobj_66_init() {
        this->numberobj_66_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/number_obj-40"), 1, this->_currentTime);
    }
    
    void numberobj_66_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_66_value;
    }
    
    void numberobj_66_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_66_value_set(preset["value"]);
    }
    
    void param_13_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_13_value;
    }
    
    void param_13_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_13_value_set(preset["value"]);
    }
    
    void numberobj_67_init() {
        this->numberobj_67_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/number_obj-139"), 1, this->_currentTime);
    }
    
    void numberobj_67_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_67_value;
    }
    
    void numberobj_67_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_67_value_set(preset["value"]);
    }
    
    void param_14_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_14_value;
    }
    
    void param_14_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_14_value_set(preset["value"]);
    }
    
    void numberobj_68_init() {
        this->numberobj_68_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/number_obj-69"), 1, this->_currentTime);
    }
    
    void numberobj_68_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_68_value;
    }
    
    void numberobj_68_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_68_value_set(preset["value"]);
    }
    
    void param_15_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_15_value;
    }
    
    void param_15_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_15_value_set(preset["value"]);
    }
    
    void numberobj_69_init() {
        this->numberobj_69_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/number_obj-73"), 1, this->_currentTime);
    }
    
    void numberobj_69_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_69_value;
    }
    
    void numberobj_69_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_69_value_set(preset["value"]);
    }
    
    void param_16_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_16_value;
    }
    
    void param_16_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_16_value_set(preset["value"]);
    }
    
    void numberobj_70_init() {
        this->numberobj_70_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/number_obj-136"), 1, this->_currentTime);
    }
    
    void numberobj_70_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_70_value;
    }
    
    void numberobj_70_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_70_value_set(preset["value"]);
    }
    
    void param_17_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_17_value;
    }
    
    void param_17_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_17_value_set(preset["value"]);
    }
    
    void numberobj_71_init() {
        this->numberobj_71_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("verb/number_obj-138"), 1, this->_currentTime);
    }
    
    void numberobj_71_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_71_value;
    }
    
    void numberobj_71_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_71_value_set(preset["value"]);
    }
    
    void param_18_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_18_value;
    }
    
    void param_18_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_18_value_set(preset["value"]);
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        dspexpr_95_in1 = 0;
        dspexpr_95_in2 = 0;
        dspexpr_96_in1 = 0;
        dspexpr_96_in2 = 0.5;
        dspexpr_97_in1 = 0;
        dspexpr_97_in2 = 0.5;
        p_15_target = 0;
        dspexpr_98_in1 = 0;
        dspexpr_98_in2 = 0;
        dspexpr_99_in1 = 0;
        dspexpr_99_in2 = 0.5;
        p_16_target = 0;
        param_04_value = 50;
        numberobj_57_value = 0;
        numberobj_57_value_setter(numberobj_57_value);
        p_17_target = 0;
        gen_01_in1 = 0;
        gen_01_in2 = 0;
        gen_01_threshold = 0.966;
        gen_01_release = 300;
        gen_01_lookahead = 1.5;
        gen_01_attack = 1.5;
        dspexpr_100_in1 = 0;
        dspexpr_100_in2 = 0;
        gen_02_in1 = 0;
        gen_02_in2 = 0;
        gen_02_release = 300;
        gen_02_threshold = 0.966;
        gen_02_lookahead = 1.5;
        gen_02_attack = 1.5;
        p_18_target = 0;
        param_05_value = 50;
        numberobj_58_value = 0;
        numberobj_58_value_setter(numberobj_58_value);
        dspexpr_101_in1 = 0;
        dspexpr_101_in2 = 0;
        param_06_value = 50;
        numberobj_59_value = 0;
        numberobj_59_value_setter(numberobj_59_value);
        numberobj_60_value = 0;
        numberobj_60_value_setter(numberobj_60_value);
        param_07_value = 20;
        numberobj_61_value = 0;
        numberobj_61_value_setter(numberobj_61_value);
        param_08_value = 70;
        param_09_value = 0;
        numberobj_62_value = 0;
        numberobj_62_value_setter(numberobj_62_value);
        param_10_value = 100;
        numberobj_63_value = 0;
        numberobj_63_value_setter(numberobj_63_value);
        numberobj_64_value = 0;
        numberobj_64_value_setter(numberobj_64_value);
        param_11_value = 50;
        numberobj_65_value = 0;
        numberobj_65_value_setter(numberobj_65_value);
        param_12_value = 75;
        p_19_target = 0;
        p_20_target = 0;
        p_21_target = 0;
        p_22_target = 0;
        numberobj_66_value = 0;
        numberobj_66_value_setter(numberobj_66_value);
        param_13_value = 50;
        numberobj_67_value = 0;
        numberobj_67_value_setter(numberobj_67_value);
        param_14_value = 12;
        numberobj_68_value = 0;
        numberobj_68_value_setter(numberobj_68_value);
        param_15_value = 50;
        numberobj_69_value = 0;
        numberobj_69_value_setter(numberobj_69_value);
        param_16_value = 50;
        numberobj_70_value = 0;
        numberobj_70_value_setter(numberobj_70_value);
        param_17_value = 125;
        numberobj_71_value = 0;
        numberobj_71_value_setter(numberobj_71_value);
        param_18_value = 0;
        ctlin_01_input = 0;
        ctlin_01_controller = 14;
        ctlin_01_channel = -1;
        expr_20_in1 = 0;
        expr_20_in2 = 0.007874015748;
        expr_20_out1 = 0;
        ctlin_02_input = 0;
        ctlin_02_controller = 13;
        ctlin_02_channel = -1;
        expr_21_in1 = 0;
        expr_21_in2 = 0.007874015748;
        expr_21_out1 = 0;
        ctlin_03_input = 0;
        ctlin_03_controller = 15;
        ctlin_03_channel = -1;
        expr_22_in1 = 0;
        expr_22_in2 = 0.007874015748;
        expr_22_out1 = 0;
        ctlin_04_input = 0;
        ctlin_04_controller = 5;
        ctlin_04_channel = -1;
        expr_23_in1 = 0;
        expr_23_in2 = 0.007874015748;
        expr_23_out1 = 0;
        ctlin_05_input = 0;
        ctlin_05_controller = 1;
        ctlin_05_channel = -1;
        expr_24_in1 = 0;
        expr_24_in2 = 0.007874015748;
        expr_24_out1 = 0;
        ctlin_06_input = 0;
        ctlin_06_controller = 12;
        ctlin_06_channel = -1;
        expr_25_in1 = 0;
        expr_25_in2 = 0.007874015748;
        expr_25_out1 = 0;
        ctlin_07_input = 0;
        ctlin_07_controller = 11;
        ctlin_07_channel = -1;
        expr_26_in1 = 0;
        expr_26_in2 = 0.007874015748;
        expr_26_out1 = 0;
        ctlin_08_input = 0;
        ctlin_08_controller = 4;
        ctlin_08_channel = -1;
        expr_27_in1 = 0;
        expr_27_in2 = 0.007874015748;
        expr_27_out1 = 0;
        ctlin_09_input = 0;
        ctlin_09_controller = 2;
        ctlin_09_channel = -1;
        expr_28_in1 = 0;
        expr_28_in2 = 0.007874015748;
        expr_28_out1 = 0;
        ctlin_10_input = 0;
        ctlin_10_controller = 3;
        ctlin_10_channel = -1;
        expr_29_in1 = 0;
        expr_29_in2 = 0.007874015748;
        expr_29_out1 = 0;
        ctlin_11_input = 0;
        ctlin_11_controller = 6;
        ctlin_11_channel = -1;
        expr_30_in1 = 0;
        expr_30_in2 = 0.007874015748;
        expr_30_out1 = 0;
        ctlin_12_input = 0;
        ctlin_12_controller = 10;
        ctlin_12_channel = -1;
        expr_31_in1 = 0;
        expr_31_in2 = 0.007874015748;
        expr_31_out1 = 0;
        ctlin_13_input = 0;
        ctlin_13_controller = 9;
        ctlin_13_channel = -1;
        expr_32_in1 = 0;
        expr_32_in2 = 0.007874015748;
        expr_32_out1 = 0;
        ctlin_14_input = 0;
        ctlin_14_controller = 7;
        ctlin_14_channel = -1;
        expr_33_in1 = 0;
        expr_33_in2 = 0.007874015748;
        expr_33_out1 = 0;
        ctlin_15_input = 0;
        ctlin_15_controller = 8;
        ctlin_15_channel = -1;
        expr_34_in1 = 0;
        expr_34_in2 = 0.007874015748;
        expr_34_out1 = 0;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        signals[0] = nullptr;
        signals[1] = nullptr;
        signals[2] = nullptr;
        signals[3] = nullptr;
        signals[4] = nullptr;
        signals[5] = nullptr;
        signals[6] = nullptr;
        signals[7] = nullptr;
        signals[8] = nullptr;
        signals[9] = nullptr;
        signals[10] = nullptr;
        signals[11] = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        param_04_lastValue = 0;
        numberobj_57_currentFormat = 6;
        numberobj_57_lastValue = 0;
        gen_01_delay_1__maxdelay = 0;
        gen_01_delay_1_sizemode = 0;
        gen_01_delay_1_wrap = 0;
        gen_01_delay_1_reader = 0;
        gen_01_delay_1_writer = 0;
        gen_01_delay_2__maxdelay = 0;
        gen_01_delay_2_sizemode = 0;
        gen_01_delay_2_wrap = 0;
        gen_01_delay_2_reader = 0;
        gen_01_delay_2_writer = 0;
        gen_01_history_3_value = 0;
        gen_01_history_4_value = 0;
        gen_01_gain_value = 0;
        gen_01_dcblock_16_xm1 = 0;
        gen_01_dcblock_16_ym1 = 0;
        gen_01_dcblock_19_xm1 = 0;
        gen_01_dcblock_19_ym1 = 0;
        gen_01_plusequals_26_value = 0;
        gen_01_setupDone = false;
        gen_02_delay_1__maxdelay = 0;
        gen_02_delay_1_sizemode = 0;
        gen_02_delay_1_wrap = 0;
        gen_02_delay_1_reader = 0;
        gen_02_delay_1_writer = 0;
        gen_02_delay_2__maxdelay = 0;
        gen_02_delay_2_sizemode = 0;
        gen_02_delay_2_wrap = 0;
        gen_02_delay_2_reader = 0;
        gen_02_delay_2_writer = 0;
        gen_02_history_3_value = 0;
        gen_02_history_4_value = 0;
        gen_02_gain_value = 0;
        gen_02_dcblock_16_xm1 = 0;
        gen_02_dcblock_16_ym1 = 0;
        gen_02_dcblock_19_xm1 = 0;
        gen_02_dcblock_19_ym1 = 0;
        gen_02_plusequals_26_value = 0;
        gen_02_setupDone = false;
        param_05_lastValue = 0;
        numberobj_58_currentFormat = 6;
        numberobj_58_lastValue = 0;
        param_06_lastValue = 0;
        numberobj_59_currentFormat = 6;
        numberobj_59_lastValue = 0;
        numberobj_60_currentFormat = 6;
        numberobj_60_lastValue = 0;
        param_07_lastValue = 0;
        numberobj_61_currentFormat = 6;
        numberobj_61_lastValue = 0;
        param_08_lastValue = 0;
        param_09_lastValue = 0;
        numberobj_62_currentFormat = 6;
        numberobj_62_lastValue = 0;
        param_10_lastValue = 0;
        numberobj_63_currentFormat = 6;
        numberobj_63_lastValue = 0;
        numberobj_64_currentFormat = 6;
        numberobj_64_lastValue = 0;
        param_11_lastValue = 0;
        numberobj_65_currentFormat = 6;
        numberobj_65_lastValue = 0;
        param_12_lastValue = 0;
        feedbacktilde_05_feedbackbuffer = nullptr;
        numberobj_66_currentFormat = 6;
        numberobj_66_lastValue = 0;
        param_13_lastValue = 0;
        numberobj_67_currentFormat = 6;
        numberobj_67_lastValue = 0;
        param_14_lastValue = 0;
        feedbacktilde_06_feedbackbuffer = nullptr;
        numberobj_68_currentFormat = 6;
        numberobj_68_lastValue = 0;
        param_15_lastValue = 0;
        numberobj_69_currentFormat = 6;
        numberobj_69_lastValue = 0;
        param_16_lastValue = 0;
        numberobj_70_currentFormat = 6;
        numberobj_70_lastValue = 0;
        param_17_lastValue = 0;
        numberobj_71_currentFormat = 6;
        numberobj_71_lastValue = 0;
        param_18_lastValue = 0;
        ctlin_01_status = 0;
        ctlin_01_byte1 = -1;
        ctlin_01_inchan = 0;
        ctlin_02_status = 0;
        ctlin_02_byte1 = -1;
        ctlin_02_inchan = 0;
        ctlin_03_status = 0;
        ctlin_03_byte1 = -1;
        ctlin_03_inchan = 0;
        ctlin_04_status = 0;
        ctlin_04_byte1 = -1;
        ctlin_04_inchan = 0;
        ctlin_05_status = 0;
        ctlin_05_byte1 = -1;
        ctlin_05_inchan = 0;
        ctlin_06_status = 0;
        ctlin_06_byte1 = -1;
        ctlin_06_inchan = 0;
        ctlin_07_status = 0;
        ctlin_07_byte1 = -1;
        ctlin_07_inchan = 0;
        ctlin_08_status = 0;
        ctlin_08_byte1 = -1;
        ctlin_08_inchan = 0;
        ctlin_09_status = 0;
        ctlin_09_byte1 = -1;
        ctlin_09_inchan = 0;
        ctlin_10_status = 0;
        ctlin_10_byte1 = -1;
        ctlin_10_inchan = 0;
        ctlin_11_status = 0;
        ctlin_11_byte1 = -1;
        ctlin_11_inchan = 0;
        ctlin_12_status = 0;
        ctlin_12_byte1 = -1;
        ctlin_12_inchan = 0;
        ctlin_13_status = 0;
        ctlin_13_byte1 = -1;
        ctlin_13_inchan = 0;
        ctlin_14_status = 0;
        ctlin_14_byte1 = -1;
        ctlin_14_inchan = 0;
        ctlin_15_status = 0;
        ctlin_15_byte1 = -1;
        ctlin_15_inchan = 0;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number dspexpr_95_in1;
        number dspexpr_95_in2;
        number dspexpr_96_in1;
        number dspexpr_96_in2;
        number dspexpr_97_in1;
        number dspexpr_97_in2;
        number p_15_target;
        number dspexpr_98_in1;
        number dspexpr_98_in2;
        number dspexpr_99_in1;
        number dspexpr_99_in2;
        number p_16_target;
        number param_04_value;
        number numberobj_57_value;
        number p_17_target;
        number gen_01_in1;
        number gen_01_in2;
        number gen_01_threshold;
        number gen_01_release;
        number gen_01_lookahead;
        number gen_01_attack;
        number dspexpr_100_in1;
        number dspexpr_100_in2;
        number gen_02_in1;
        number gen_02_in2;
        number gen_02_release;
        number gen_02_threshold;
        number gen_02_lookahead;
        number gen_02_attack;
        number p_18_target;
        number param_05_value;
        number numberobj_58_value;
        number dspexpr_101_in1;
        number dspexpr_101_in2;
        number param_06_value;
        number numberobj_59_value;
        number numberobj_60_value;
        number param_07_value;
        number numberobj_61_value;
        number param_08_value;
        number param_09_value;
        number numberobj_62_value;
        number param_10_value;
        number numberobj_63_value;
        number numberobj_64_value;
        number param_11_value;
        number numberobj_65_value;
        number param_12_value;
        number p_19_target;
        number p_20_target;
        number p_21_target;
        number p_22_target;
        number numberobj_66_value;
        number param_13_value;
        number numberobj_67_value;
        number param_14_value;
        number numberobj_68_value;
        number param_15_value;
        number numberobj_69_value;
        number param_16_value;
        number numberobj_70_value;
        number param_17_value;
        number numberobj_71_value;
        number param_18_value;
        number ctlin_01_input;
        number ctlin_01_controller;
        number ctlin_01_channel;
        number expr_20_in1;
        number expr_20_in2;
        number expr_20_out1;
        number ctlin_02_input;
        number ctlin_02_controller;
        number ctlin_02_channel;
        number expr_21_in1;
        number expr_21_in2;
        number expr_21_out1;
        number ctlin_03_input;
        number ctlin_03_controller;
        number ctlin_03_channel;
        number expr_22_in1;
        number expr_22_in2;
        number expr_22_out1;
        number ctlin_04_input;
        number ctlin_04_controller;
        number ctlin_04_channel;
        number expr_23_in1;
        number expr_23_in2;
        number expr_23_out1;
        number ctlin_05_input;
        number ctlin_05_controller;
        number ctlin_05_channel;
        number expr_24_in1;
        number expr_24_in2;
        number expr_24_out1;
        number ctlin_06_input;
        number ctlin_06_controller;
        number ctlin_06_channel;
        number expr_25_in1;
        number expr_25_in2;
        number expr_25_out1;
        number ctlin_07_input;
        number ctlin_07_controller;
        number ctlin_07_channel;
        number expr_26_in1;
        number expr_26_in2;
        number expr_26_out1;
        number ctlin_08_input;
        number ctlin_08_controller;
        number ctlin_08_channel;
        number expr_27_in1;
        number expr_27_in2;
        number expr_27_out1;
        number ctlin_09_input;
        number ctlin_09_controller;
        number ctlin_09_channel;
        number expr_28_in1;
        number expr_28_in2;
        number expr_28_out1;
        number ctlin_10_input;
        number ctlin_10_controller;
        number ctlin_10_channel;
        number expr_29_in1;
        number expr_29_in2;
        number expr_29_out1;
        number ctlin_11_input;
        number ctlin_11_controller;
        number ctlin_11_channel;
        number expr_30_in1;
        number expr_30_in2;
        number expr_30_out1;
        number ctlin_12_input;
        number ctlin_12_controller;
        number ctlin_12_channel;
        number expr_31_in1;
        number expr_31_in2;
        number expr_31_out1;
        number ctlin_13_input;
        number ctlin_13_controller;
        number ctlin_13_channel;
        number expr_32_in1;
        number expr_32_in2;
        number expr_32_out1;
        number ctlin_14_input;
        number ctlin_14_controller;
        number ctlin_14_channel;
        number expr_33_in1;
        number expr_33_in2;
        number expr_33_out1;
        number ctlin_15_input;
        number ctlin_15_controller;
        number ctlin_15_channel;
        number expr_34_in1;
        number expr_34_in2;
        number expr_34_out1;
        MillisecondTime _currentTime;
        UInt64 audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        SampleValue * signals[12];
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        number param_04_lastValue;
        Int numberobj_57_currentFormat;
        number numberobj_57_lastValue;
        Float64BufferRef gen_01_delay_1_buffer;
        Index gen_01_delay_1__maxdelay;
        Int gen_01_delay_1_sizemode;
        Index gen_01_delay_1_wrap;
        Int gen_01_delay_1_reader;
        Int gen_01_delay_1_writer;
        Float64BufferRef gen_01_delay_2_buffer;
        Index gen_01_delay_2__maxdelay;
        Int gen_01_delay_2_sizemode;
        Index gen_01_delay_2_wrap;
        Int gen_01_delay_2_reader;
        Int gen_01_delay_2_writer;
        number gen_01_history_3_value;
        number gen_01_history_4_value;
        number gen_01_gain_value;
        number gen_01_dcblock_16_xm1;
        number gen_01_dcblock_16_ym1;
        number gen_01_dcblock_19_xm1;
        number gen_01_dcblock_19_ym1;
        number gen_01_plusequals_26_value;
        bool gen_01_setupDone;
        Float64BufferRef gen_02_delay_1_buffer;
        Index gen_02_delay_1__maxdelay;
        Int gen_02_delay_1_sizemode;
        Index gen_02_delay_1_wrap;
        Int gen_02_delay_1_reader;
        Int gen_02_delay_1_writer;
        Float64BufferRef gen_02_delay_2_buffer;
        Index gen_02_delay_2__maxdelay;
        Int gen_02_delay_2_sizemode;
        Index gen_02_delay_2_wrap;
        Int gen_02_delay_2_reader;
        Int gen_02_delay_2_writer;
        number gen_02_history_3_value;
        number gen_02_history_4_value;
        number gen_02_gain_value;
        number gen_02_dcblock_16_xm1;
        number gen_02_dcblock_16_ym1;
        number gen_02_dcblock_19_xm1;
        number gen_02_dcblock_19_ym1;
        number gen_02_plusequals_26_value;
        bool gen_02_setupDone;
        number param_05_lastValue;
        Int numberobj_58_currentFormat;
        number numberobj_58_lastValue;
        number param_06_lastValue;
        Int numberobj_59_currentFormat;
        number numberobj_59_lastValue;
        Int numberobj_60_currentFormat;
        number numberobj_60_lastValue;
        number param_07_lastValue;
        Int numberobj_61_currentFormat;
        number numberobj_61_lastValue;
        number param_08_lastValue;
        number param_09_lastValue;
        Int numberobj_62_currentFormat;
        number numberobj_62_lastValue;
        number param_10_lastValue;
        Int numberobj_63_currentFormat;
        number numberobj_63_lastValue;
        Int numberobj_64_currentFormat;
        number numberobj_64_lastValue;
        number param_11_lastValue;
        Int numberobj_65_currentFormat;
        number numberobj_65_lastValue;
        number param_12_lastValue;
        signal feedbacktilde_05_feedbackbuffer;
        Int numberobj_66_currentFormat;
        number numberobj_66_lastValue;
        number param_13_lastValue;
        Int numberobj_67_currentFormat;
        number numberobj_67_lastValue;
        number param_14_lastValue;
        signal feedbacktilde_06_feedbackbuffer;
        Int numberobj_68_currentFormat;
        number numberobj_68_lastValue;
        number param_15_lastValue;
        Int numberobj_69_currentFormat;
        number numberobj_69_lastValue;
        number param_16_lastValue;
        Int numberobj_70_currentFormat;
        number numberobj_70_lastValue;
        number param_17_lastValue;
        Int numberobj_71_currentFormat;
        number numberobj_71_lastValue;
        number param_18_lastValue;
        int ctlin_01_status;
        int ctlin_01_byte1;
        int ctlin_01_inchan;
        int ctlin_02_status;
        int ctlin_02_byte1;
        int ctlin_02_inchan;
        int ctlin_03_status;
        int ctlin_03_byte1;
        int ctlin_03_inchan;
        int ctlin_04_status;
        int ctlin_04_byte1;
        int ctlin_04_inchan;
        int ctlin_05_status;
        int ctlin_05_byte1;
        int ctlin_05_inchan;
        int ctlin_06_status;
        int ctlin_06_byte1;
        int ctlin_06_inchan;
        int ctlin_07_status;
        int ctlin_07_byte1;
        int ctlin_07_inchan;
        int ctlin_08_status;
        int ctlin_08_byte1;
        int ctlin_08_inchan;
        int ctlin_09_status;
        int ctlin_09_byte1;
        int ctlin_09_inchan;
        int ctlin_10_status;
        int ctlin_10_byte1;
        int ctlin_10_inchan;
        int ctlin_11_status;
        int ctlin_11_byte1;
        int ctlin_11_inchan;
        int ctlin_12_status;
        int ctlin_12_byte1;
        int ctlin_12_inchan;
        int ctlin_13_status;
        int ctlin_13_byte1;
        int ctlin_13_inchan;
        int ctlin_14_status;
        int ctlin_14_byte1;
        int ctlin_14_inchan;
        int ctlin_15_status;
        int ctlin_15_byte1;
        int ctlin_15_inchan;
        number stackprotect_count;
        DataRef gen_01_delay_1_bufferobj;
        DataRef gen_01_delay_2_bufferobj;
        DataRef gen_02_delay_1_bufferobj;
        DataRef gen_02_delay_2_bufferobj;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
        RNBOSubpatcher_802* p_15;
        RNBOSubpatcher_803* p_16;
        RNBOSubpatcher_804* p_17;
        RNBOSubpatcher_805* p_18;
        RNBOSubpatcher_806* p_19;
        RNBOSubpatcher_807* p_20;
        RNBOSubpatcher_808* p_21;
        RNBOSubpatcher_809* p_22;
    
};

rnbomatic()
{
}

~rnbomatic()
{
    delete this->p_23;
    for (int i = 0; i < 4; i++) {
        delete p_24[i];
    }
    delete this->p_25;
}

rnbomatic* getTopLevelPatcher() {
    return this;
}

void cancelClockEvents()
{
}

template <typename T> void listquicksort(T& arr, T& sortindices, Int l, Int h, bool ascending) {
    if (l < h) {
        Int p = (Int)(this->listpartition(arr, sortindices, l, h, ascending));
        this->listquicksort(arr, sortindices, l, p - 1, ascending);
        this->listquicksort(arr, sortindices, p + 1, h, ascending);
    }
}

template <typename T> Int listpartition(T& arr, T& sortindices, Int l, Int h, bool ascending) {
    number x = arr[(Index)h];
    Int i = (Int)(l - 1);

    for (Int j = (Int)(l); j <= h - 1; j++) {
        bool asc = (bool)((bool)(ascending) && arr[(Index)j] <= x);
        bool desc = (bool)((bool)(!(bool)(ascending)) && arr[(Index)j] >= x);

        if ((bool)(asc) || (bool)(desc)) {
            i++;
            this->listswapelements(arr, i, j);
            this->listswapelements(sortindices, i, j);
        }
    }

    i++;
    this->listswapelements(arr, i, h);
    this->listswapelements(sortindices, i, h);
    return i;
}

template <typename T> void listswapelements(T& arr, Int a, Int b) {
    auto tmp = arr[(Index)a];
    arr[(Index)a] = arr[(Index)b];
    arr[(Index)b] = tmp;
}

number mstosamps(MillisecondTime ms) {
    return ms * this->sr * 0.001;
}

number maximum(number x, number y) {
    return (x < y ? y : x);
}

MillisecondTime sampstoms(number samps) {
    return samps * 1000 / this->sr;
}

Index getNumMidiInputPorts() const {
    return 1;
}

void processMidiEvent(MillisecondTime time, int port, ConstByteArray data, Index length) {
    this->updateTime(time);
    this->midiin_01_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
    this->p_25_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
}

Index getNumMidiOutputPorts() const {
    return 0;
}

void process(
    const SampleValue * const* inputs,
    Index numInputs,
    SampleValue * const* outputs,
    Index numOutputs,
    Index n
) {
    RNBO_UNUSED(numInputs);
    RNBO_UNUSED(inputs);
    this->vs = n;
    this->updateTime(this->getEngine()->getCurrentTime());
    SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
    SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
    this->p_24_perform(this->signals[0], n);
    this->dspexpr_102_perform(this->dspexpr_102_in1, this->dspexpr_102_in2, this->signals[1], n);
    this->signaladder_01_perform(this->signals[0], this->signals[1], this->signals[1], n);
    this->p_23_perform(this->signals[1], this->signals[2], this->signals[3], n);

    this->p_25_perform(
        this->zeroBuffer,
        this->zeroBuffer,
        this->signals[2],
        this->signals[3],
        this->signals[2],
        this->signals[3],
        this->signals[2],
        this->signals[3],
        this->dummyBuffer,
        this->dummyBuffer,
        out1,
        out2,
        n
    );

    this->stackprotect_perform(n);
    this->globaltransport_advance();
    this->audioProcessSampleCount += this->vs;
}

void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
    if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
        Index i;

        for (i = 0; i < 4; i++) {
            this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
        }

        this->globaltransport_tempo = resizeSignal(this->globaltransport_tempo, this->maxvs, maxBlockSize);
        this->globaltransport_state = resizeSignal(this->globaltransport_state, this->maxvs, maxBlockSize);
        this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
        this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
        this->didAllocateSignals = true;
    }

    const bool sampleRateChanged = sampleRate != this->sr;
    const bool maxvsChanged = maxBlockSize != this->maxvs;
    const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;

    if (sampleRateChanged || maxvsChanged) {
        this->vs = maxBlockSize;
        this->maxvs = maxBlockSize;
        this->sr = sampleRate;
        this->invsr = 1 / sampleRate;
    }

    this->globaltransport_dspsetup(forceDSPSetup);
    this->p_23->prepareToProcess(sampleRate, maxBlockSize, force);

    for (Index i = 0; i < 4; i++) {
        this->p_24[i]->prepareToProcess(sampleRate, maxBlockSize, force);
    }

    this->p_25->prepareToProcess(sampleRate, maxBlockSize, force);

    if (sampleRateChanged)
        this->onSampleRateChanged(sampleRate);
}

void setProbingTarget(MessageTag id) {
    switch (id) {
    default:
        {
        this->setProbingIndex(-1);
        break;
        }
    }
}

void setProbingIndex(ProbingIndex ) {}

Index getProbingChannels(MessageTag outletId) const {
    RNBO_UNUSED(outletId);
    return 0;
}

DataRef* getDataRef(DataRefIndex index)  {
    switch (index) {
    case 0:
        {
        return addressOf(this->RNBODefaultMtofLookupTable256);
        break;
        }
    case 1:
        {
        return addressOf(this->RNBODefaultSinus);
        break;
        }
    default:
        {
        return nullptr;
        }
    }
}

DataRefIndex getNumDataRefs() const {
    return 2;
}

void fillRNBODefaultMtofLookupTable256(DataRef& ref) {
    Float64BufferRef buffer;
    buffer = new Float64Buffer(ref);
    number bufsize = buffer->getSize();

    for (Index i = 0; i < bufsize; i++) {
        number midivalue = -256. + (number)512. / (bufsize - 1) * i;
        buffer[i] = rnbo_exp(.057762265 * (midivalue - 69.0));
    }
}

void fillRNBODefaultSinus(DataRef& ref) {
    Float64BufferRef buffer;
    buffer = new Float64Buffer(ref);
    number bufsize = buffer->getSize();

    for (Index i = 0; i < bufsize; i++) {
        buffer[i] = rnbo_cos(i * 3.14159265358979323846 * 2. / bufsize);
    }
}

void fillDataRef(DataRefIndex index, DataRef& ref) {
    switch (index) {
    case 0:
        {
        this->fillRNBODefaultMtofLookupTable256(ref);
        break;
        }
    case 1:
        {
        this->fillRNBODefaultSinus(ref);
        break;
        }
    }
}

void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
    this->p_23->processDataViewUpdate(index, time);

    for (Index i = 0; i < 4; i++) {
        this->p_24[i]->processDataViewUpdate(index, time);
    }

    this->p_25->processDataViewUpdate(index, time);
}

void initialize() {
    this->RNBODefaultMtofLookupTable256 = initDataRef("RNBODefaultMtofLookupTable256", true, nullptr, "buffer~");
    this->RNBODefaultSinus = initDataRef("RNBODefaultSinus", true, nullptr, "buffer~");
    this->assign_defaults();
    this->setState();
    this->RNBODefaultMtofLookupTable256->setIndex(0);
    this->RNBODefaultSinus->setIndex(1);
    this->initializeObjects();
    this->allocateDataRefs();
    this->startup();
}

Index getIsMuted()  {
    return this->isMuted;
}

void setIsMuted(Index v)  {
    this->isMuted = v;
}

void onSampleRateChanged(double ) {}

void processTempoEvent(MillisecondTime time, Tempo tempo) {
    this->updateTime(time);

    if (this->globaltransport_setTempo(this->_currentTime, tempo, false)) {
        this->p_23->processTempoEvent(time, tempo);

        for (Index i = 0; i < 4; i++) {
            this->p_24[i]->processTempoEvent(time, tempo);
        }

        this->p_25->processTempoEvent(time, tempo);
    }
}

void processTransportEvent(MillisecondTime time, TransportState state) {
    this->updateTime(time);

    if (this->globaltransport_setState(this->_currentTime, state, false)) {
        this->p_23->processTransportEvent(time, state);

        for (Index i = 0; i < 4; i++) {
            this->p_24[i]->processTransportEvent(time, state);
        }

        this->p_25->processTransportEvent(time, state);
    }
}

void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
    this->updateTime(time);

    if (this->globaltransport_setBeatTime(this->_currentTime, beattime, false)) {
        this->p_23->processBeatTimeEvent(time, beattime);

        for (Index i = 0; i < 4; i++) {
            this->p_24[i]->processBeatTimeEvent(time, beattime);
        }

        this->p_25->processBeatTimeEvent(time, beattime);
    }
}

void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
    this->updateTime(time);

    if (this->globaltransport_setTimeSignature(this->_currentTime, numerator, denominator, false)) {
        this->p_23->processTimeSignatureEvent(time, numerator, denominator);

        for (Index i = 0; i < 4; i++) {
            this->p_24[i]->processTimeSignatureEvent(time, numerator, denominator);
        }

        this->p_25->processTimeSignatureEvent(time, numerator, denominator);
    }
}

void processBBUEvent(MillisecondTime time, number bars, number beats, number units) {
    this->updateTime(time);

    if (this->globaltransport_setBBU(this->_currentTime, bars, beats, units, false)) {
        this->p_23->processBBUEvent(time, bars, beats, units);

        for (Index i = 0; i < 4; i++) {
            this->p_24[i]->processBBUEvent(time, bars, beats, units);
        }

        this->p_25->processBBUEvent(time, bars, beats, units);
    }
}

Index getPatcherSerial() const {
    return 0;
}

void getState(PatcherStateInterface& ) {}

void setState() {
    this->p_23 = new RNBOSubpatcher_810();
    this->p_23->setEngineAndPatcher(this->getEngine(), this);
    this->p_23->initialize();
    this->p_23->setParameterOffset(this->getParameterOffset(this->p_23));

    for (Index i = 0; i < 4; i++) {
        this->p_24[(Index)i] = new RNBOSubpatcher_811();
        this->p_24[(Index)i]->setEngineAndPatcher(this->getEngine(), this);
        this->p_24[(Index)i]->initialize();
        this->p_24[(Index)i]->setParameterOffset(this->getParameterOffset(this->p_24[0]));
        this->p_24[(Index)i]->setVoiceIndex(i + 1);
    }

    this->p_25 = new RNBOSubpatcher_812();
    this->p_25->setEngineAndPatcher(this->getEngine(), this);
    this->p_25->initialize();
    this->p_25->setParameterOffset(this->getParameterOffset(this->p_25));
}

void getPreset(PatcherStateInterface& preset) {
    preset["__presetid"] = "rnbo";
    this->param_21_getPresetValue(getSubState(preset, "mix"));
    this->param_22_getPresetValue(getSubState(preset, "regen"));
    this->p_23->getPreset(getSubState(getSubState(preset, "__sps"), "pingpongdelay"));

    for (Index i = 0; i < 4; i++)
        this->p_24[i]->getPreset(getSubStateAt(getSubState(preset, "__sps"), "synth", i));

    this->p_25->getPreset(getSubState(getSubState(preset, "__sps"), "verb"));
}

void setPreset(MillisecondTime time, PatcherStateInterface& preset) {
    this->updateTime(time);
    this->param_21_setPresetValue(getSubState(preset, "mix"));
    this->param_22_setPresetValue(getSubState(preset, "regen"));

    for (Index i0 = 0; i0 < 4; i0++) this->p_24[i0]->param_02_setPresetValue(
        getSubState(getSubStateAt(getSubState(preset, "__sps"), "synth", i0), "drift")
    );

    for (Index i0 = 0; i0 < 4; i0++) this->p_24[i0]->param_03_setPresetValue(
        getSubState(getSubStateAt(getSubState(preset, "__sps"), "synth", i0), "one")
    );

    for (Index i0 = 0; i0 < 4; i0++) this->p_24[i0]->param_19_setPresetValue(
        getSubState(getSubStateAt(getSubState(preset, "__sps"), "synth", i0), "/drift")
    );

    for (Index i0 = 0; i0 < 4; i0++) this->p_24[i0]->param_20_setPresetValue(
        getSubState(getSubStateAt(getSubState(preset, "__sps"), "synth", i0), "/one")
    );

    for (Index i1 = 0; i1 < 4; i1++) this->p_24[i1]->p_01->param_01_setPresetValue(
        getSubState(getSubState(getSubState(getSubStateAt(getSubState(preset, "__sps"), "synth", i1), "__sps"), "osc.analog"), "mode")
    );

    this->p_25->param_08_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "verb"), "decay"));
    this->p_25->param_12_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "verb"), "size"));
    this->p_25->param_13_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "verb"), "diff"));
    this->p_25->param_11_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "verb"), "jitter"));
    this->p_25->param_07_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "verb"), "damp"));
    this->p_25->param_14_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "verb"), "pitch"));
    this->p_25->param_17_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "verb"), "window"));
    this->p_25->param_18_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "verb"), "delay"));
    this->p_25->param_16_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "verb"), "feedback"));
    this->p_25->param_15_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "verb"), "chorus"));
    this->p_25->param_10_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "verb"), "revvol"));
    this->p_25->param_09_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "verb"), "pitchvol"));
    this->p_25->param_05_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "verb"), "octvol"));
    this->p_25->param_04_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "verb"), "octdamp"));
    this->p_25->param_06_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "verb"), "mix1"));
}

void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
    this->updateTime(time);

    switch (index) {
    case 0:
        {
        this->param_21_value_set(v);
        break;
        }
    case 1:
        {
        this->param_22_value_set(v);
        break;
        }
    default:
        {
        index -= 2;

        if (index < this->p_23->getNumParameters())
            this->p_23->setParameterValue(index, v, time);

        index -= this->p_23->getNumParameters();

        if (index < this->p_24[0]->getNumParameters())
            this->p_24[0]->setPolyParameterValue((PatcherInterface**)this->p_24, index, v, time);

        index -= this->p_24[0]->getNumParameters();

        if (index < this->p_25->getNumParameters())
            this->p_25->setParameterValue(index, v, time);

        break;
        }
    }
}

void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
    this->setParameterValue(index, value, time);
}

void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
    this->setParameterValue(index, this->getParameterValue(index), time);
}

void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
    this->setParameterValueNormalized(index, value, time);
}

ParameterValue getParameterValue(ParameterIndex index)  {
    switch (index) {
    case 0:
        {
        return this->param_21_value;
        }
    case 1:
        {
        return this->param_22_value;
        }
    default:
        {
        index -= 2;

        if (index < this->p_23->getNumParameters())
            return this->p_23->getParameterValue(index);

        index -= this->p_23->getNumParameters();

        if (index < this->p_24[0]->getNumParameters())
            return this->p_24[0]->getPolyParameterValue((PatcherInterface**)this->p_24, index);

        index -= this->p_24[0]->getNumParameters();

        if (index < this->p_25->getNumParameters())
            return this->p_25->getParameterValue(index);

        return 0;
        }
    }
}

ParameterIndex getNumSignalInParameters() const {
    return 0;
}

ParameterIndex getNumSignalOutParameters() const {
    return 0;
}

ParameterIndex getNumParameters() const {
    return 2 + this->p_23->getNumParameters() + this->p_24[0]->getNumParameters() + this->p_25->getNumParameters();
}

ConstCharPointer getParameterName(ParameterIndex index) const {
    switch (index) {
    case 0:
        {
        return "mix";
        }
    case 1:
        {
        return "regen";
        }
    default:
        {
        index -= 2;

        if (index < this->p_23->getNumParameters())
            return this->p_23->getParameterName(index);

        index -= this->p_23->getNumParameters();

        if (index < this->p_24[0]->getNumParameters()) {
            {
                return this->p_24[0]->getParameterName(index);
            }
        }

        index -= this->p_24[0]->getNumParameters();

        if (index < this->p_25->getNumParameters())
            return this->p_25->getParameterName(index);

        return "bogus";
        }
    }
}

ConstCharPointer getParameterId(ParameterIndex index) const {
    switch (index) {
    case 0:
        {
        return "mix";
        }
    case 1:
        {
        return "regen";
        }
    default:
        {
        index -= 2;

        if (index < this->p_23->getNumParameters())
            return this->p_23->getParameterId(index);

        index -= this->p_23->getNumParameters();

        if (index < this->p_24[0]->getNumParameters()) {
            {
                return this->p_24[0]->getParameterId(index);
            }
        }

        index -= this->p_24[0]->getNumParameters();

        if (index < this->p_25->getNumParameters())
            return this->p_25->getParameterId(index);

        return "bogus";
        }
    }
}

void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
    {
        switch (index) {
        case 0:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0.9;
            info->min = 0;
            info->max = 1;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 1:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0.65;
            info->min = 0;
            info->max = 1;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        default:
            {
            index -= 2;

            if (index < this->p_23->getNumParameters())
                this->p_23->getParameterInfo(index, info);

            index -= this->p_23->getNumParameters();

            if (index < this->p_24[0]->getNumParameters()) {
                for (Index i = 0; i < 4; i++) {
                    this->p_24[i]->getParameterInfo(index, info);
                }
            }

            index -= this->p_24[0]->getNumParameters();

            if (index < this->p_25->getNumParameters())
                this->p_25->getParameterInfo(index, info);

            break;
            }
        }
    }
}

void sendParameter(ParameterIndex index, bool ignoreValue) {
    this->getEngine()->notifyParameterValueChanged(index, (ignoreValue ? 0 : this->getParameterValue(index)), ignoreValue);
}

ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
    if (subpatcher == this->p_23)
        return 2;

    if (subpatcher == this->p_24[0])
        return 2 + this->p_23->getNumParameters();

    if (subpatcher == this->p_25)
        return 2 + this->p_23->getNumParameters() + this->p_24[0]->getNumParameters();

    return 0;
}

ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
    if (steps == 1) {
        if (normalizedValue > 0) {
            normalizedValue = 1.;
        }
    } else {
        ParameterValue oneStep = (number)1. / (steps - 1);
        ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
        normalizedValue = numberOfSteps * oneStep;
    }

    return normalizedValue;
}

ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
    switch (index) {
    case 0:
    case 1:
        {
        {
            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            ParameterValue normalizedValue = (value - 0) / (1 - 0);
            return normalizedValue;
        }
        }
    default:
        {
        index -= 2;

        if (index < this->p_23->getNumParameters())
            return this->p_23->convertToNormalizedParameterValue(index, value);

        index -= this->p_23->getNumParameters();

        if (index < this->p_24[0]->getNumParameters()) {
            {
                return this->p_24[0]->convertToNormalizedParameterValue(index, value);
            }
        }

        index -= this->p_24[0]->getNumParameters();

        if (index < this->p_25->getNumParameters())
            return this->p_25->convertToNormalizedParameterValue(index, value);

        return value;
        }
    }
}

ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
    value = (value < 0 ? 0 : (value > 1 ? 1 : value));

    switch (index) {
    case 0:
    case 1:
        {
        {
            {
                return 0 + value * (1 - 0);
            }
        }
        }
    default:
        {
        index -= 2;

        if (index < this->p_23->getNumParameters())
            return this->p_23->convertFromNormalizedParameterValue(index, value);

        index -= this->p_23->getNumParameters();

        if (index < this->p_24[0]->getNumParameters()) {
            {
                return this->p_24[0]->convertFromNormalizedParameterValue(index, value);
            }
        }

        index -= this->p_24[0]->getNumParameters();

        if (index < this->p_25->getNumParameters())
            return this->p_25->convertFromNormalizedParameterValue(index, value);

        return value;
        }
    }
}

ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
    switch (index) {
    case 0:
        {
        return this->param_21_value_constrain(value);
        }
    case 1:
        {
        return this->param_22_value_constrain(value);
        }
    default:
        {
        index -= 2;

        if (index < this->p_23->getNumParameters())
            return this->p_23->constrainParameterValue(index, value);

        index -= this->p_23->getNumParameters();

        if (index < this->p_24[0]->getNumParameters()) {
            {
                return this->p_24[0]->constrainParameterValue(index, value);
            }
        }

        index -= this->p_24[0]->getNumParameters();

        if (index < this->p_25->getNumParameters())
            return this->p_25->constrainParameterValue(index, value);

        return value;
        }
    }
}

void scheduleParamInit(ParameterIndex index, Index order) {
    this->paramInitIndices->push(index);
    this->paramInitOrder->push(order);
}

void processParamInitEvents() {
    this->listquicksort(
        this->paramInitOrder,
        this->paramInitIndices,
        0,
        (int)(this->paramInitOrder->length - 1),
        true
    );

    for (Index i = 0; i < this->paramInitOrder->length; i++) {
        this->getEngine()->scheduleParameterBang(this->paramInitIndices[i], 0);
    }
}

void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}

void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}

void processOutletEvent(
    EngineLink* sender,
    OutletIndex index,
    ParameterValue value,
    MillisecondTime time
) {
    this->updateTime(time);
    this->processOutletAtCurrentTime(sender, index, value);
}

void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
    this->updateTime(time);

    switch (tag) {
    case TAG("valin"):
        {
        if (TAG("number_obj-24") == objectId)
            this->numberobj_72_valin_set(payload);

        if (TAG("number_obj-62") == objectId)
            this->numberobj_73_valin_set(payload);

        if (TAG("number_obj-20") == objectId)
            this->numberobj_74_valin_set(payload);

        break;
        }
    case TAG("format"):
        {
        if (TAG("number_obj-24") == objectId)
            this->numberobj_72_format_set(payload);

        if (TAG("number_obj-62") == objectId)
            this->numberobj_73_format_set(payload);

        if (TAG("number_obj-20") == objectId)
            this->numberobj_74_format_set(payload);

        break;
        }
    case TAG("listin"):
        {
        if (TAG("message_obj-2") == objectId)
            this->message_03_listin_number_set(payload);

        break;
        }
    }

    this->p_23->processNumMessage(tag, objectId, time, payload);

    for (Index i = 0; i < 4; i++) {
        this->p_24[i]->processNumMessage(tag, objectId, time, payload);
    }

    this->p_25->processNumMessage(tag, objectId, time, payload);
}

void processListMessage(
    MessageTag tag,
    MessageTag objectId,
    MillisecondTime time,
    const list& payload
) {
    this->updateTime(time);

    switch (tag) {
    case TAG("listin"):
        {
        if (TAG("message_obj-2") == objectId)
            this->message_03_listin_list_set(payload);

        break;
        }
    }

    this->p_23->processListMessage(tag, objectId, time, payload);

    for (Index i = 0; i < 4; i++) {
        this->p_24[i]->processListMessage(tag, objectId, time, payload);
    }

    this->p_25->processListMessage(tag, objectId, time, payload);
}

void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
    this->updateTime(time);

    switch (tag) {
    case TAG("listin"):
        {
        if (TAG("message_obj-2") == objectId)
            this->message_03_listin_bang_bang();

        break;
        }
    }

    this->p_23->processBangMessage(tag, objectId, time);

    for (Index i = 0; i < 4; i++) {
        this->p_24[i]->processBangMessage(tag, objectId, time);
    }

    this->p_25->processBangMessage(tag, objectId, time);
}

MessageTagInfo resolveTag(MessageTag tag) const {
    switch (tag) {
    case TAG("valout"):
        {
        return "valout";
        }
    case TAG("number_obj-24"):
        {
        return "number_obj-24";
        }
    case TAG("setup"):
        {
        return "setup";
        }
    case TAG("listout"):
        {
        return "listout";
        }
    case TAG("message_obj-2"):
        {
        return "message_obj-2";
        }
    case TAG("number_obj-62"):
        {
        return "number_obj-62";
        }
    case TAG("number_obj-20"):
        {
        return "number_obj-20";
        }
    case TAG("valin"):
        {
        return "valin";
        }
    case TAG("format"):
        {
        return "format";
        }
    case TAG("listin"):
        {
        return "listin";
        }
    }

    auto subpatchResult_0 = this->p_23->resolveTag(tag);

    if (subpatchResult_0)
        return subpatchResult_0;

    auto subpatchResult_1 = this->p_24[0]->resolveTag(tag);

    if (subpatchResult_1)
        return subpatchResult_1;

    auto subpatchResult_2 = this->p_25->resolveTag(tag);

    if (subpatchResult_2)
        return subpatchResult_2;

    return "";
}

MessageIndex getNumMessages() const {
    return 0;
}

const MessageInfo& getMessageInfo(MessageIndex index) const {
    switch (index) {

    }

    return NullMessageInfo;
}

protected:

void param_21_value_set(number v) {
    v = this->param_21_value_constrain(v);
    this->param_21_value = v;
    this->sendParameter(0, false);

    if (this->param_21_value != this->param_21_lastValue) {
        this->getEngine()->presetTouched();
        this->param_21_lastValue = this->param_21_value;
    }

    this->numberobj_74_value_set(v);
}

void param_22_value_set(number v) {
    v = this->param_22_value_constrain(v);
    this->param_22_value = v;
    this->sendParameter(1, false);

    if (this->param_22_value != this->param_22_lastValue) {
        this->getEngine()->presetTouched();
        this->param_22_lastValue = this->param_22_value;
    }

    this->numberobj_73_value_set(v);
}

void numberobj_72_valin_set(number v) {
    this->numberobj_72_value_set(v);
}

void numberobj_72_format_set(number v) {
    this->numberobj_72_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void message_03_listin_list_set(const list& v) {
    this->message_03_set_set(v);
}

void message_03_listin_number_set(number v) {
    this->message_03_set_set(v);
}

void message_03_listin_bang_bang() {
    this->message_03_trigger_bang();
}

void numberobj_73_valin_set(number v) {
    this->numberobj_73_value_set(v);
}

void numberobj_73_format_set(number v) {
    this->numberobj_73_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_74_valin_set(number v) {
    this->numberobj_74_value_set(v);
}

void numberobj_74_format_set(number v) {
    this->numberobj_74_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

number msToSamps(MillisecondTime ms, number sampleRate) {
    return ms * sampleRate * 0.001;
}

MillisecondTime sampsToMs(SampleIndex samps) {
    return samps * (this->invsr * 1000);
}

Index getMaxBlockSize() const {
    return this->maxvs;
}

number getSampleRate() const {
    return this->sr;
}

bool hasFixedVectorSize() const {
    return false;
}

Index getNumInputChannels() const {
    return 0;
}

Index getNumOutputChannels() const {
    return 2;
}

void allocateDataRefs() {
    this->p_23->allocateDataRefs();

    for (Index i = 0; i < 4; i++) {
        this->p_24[i]->allocateDataRefs();
    }

    this->p_25->allocateDataRefs();

    if (this->RNBODefaultMtofLookupTable256->hasRequestedSize()) {
        if (this->RNBODefaultMtofLookupTable256->wantsFill())
            this->fillRNBODefaultMtofLookupTable256(this->RNBODefaultMtofLookupTable256);

        this->getEngine()->sendDataRefUpdated(0);
    }

    if (this->RNBODefaultSinus->hasRequestedSize()) {
        if (this->RNBODefaultSinus->wantsFill())
            this->fillRNBODefaultSinus(this->RNBODefaultSinus);

        this->getEngine()->sendDataRefUpdated(1);
    }
}

void initializeObjects() {
    this->numberobj_72_init();
    this->message_03_init();
    this->numberobj_73_init();
    this->numberobj_74_init();
    this->p_23->initializeObjects();

    for (Index i = 0; i < 4; i++) {
        this->p_24[i]->initializeObjects();
    }

    this->p_25->initializeObjects();
}

void sendOutlet(OutletIndex index, ParameterValue value) {
    this->getEngine()->sendOutlet(this, index, value);
}

void startup() {
    this->updateTime(this->getEngine()->getCurrentTime());
    this->p_23->startup();

    for (Index i = 0; i < 4; i++) {
        this->p_24[i]->startup();
    }

    this->p_25->startup();

    {
        this->scheduleParamInit(0, 0);
    }

    {
        this->scheduleParamInit(1, 0);
    }

    this->processParamInitEvents();
}

number param_21_value_constrain(number v) const {
    v = (v > 1 ? 1 : (v < 0 ? 0 : v));
    return v;
}

void p_23_in2_number_set(number v) {
    this->p_23->updateTime(this->_currentTime);
    this->p_23->eventinlet_01_out1_number_set(v);
}

void numberobj_74_output_set(number v) {
    this->p_23_in2_number_set(v);
}

void numberobj_74_value_set(number v) {
    this->numberobj_74_value_setter(v);
    v = this->numberobj_74_value;
    number localvalue = v;

    if ((bool)(true) && localvalue < 0) {
        localvalue = 0;
    }

    if ((bool)(true) && localvalue > 1) {
        localvalue = 1;
    }

    if (this->numberobj_74_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-20"), localvalue, this->_currentTime);
    this->numberobj_74_output_set(localvalue);
}

number param_22_value_constrain(number v) const {
    v = (v > 1 ? 1 : (v < 0 ? 0 : v));
    return v;
}

void p_23_in4_number_set(number v) {
    this->p_23->updateTime(this->_currentTime);
    this->p_23->eventinlet_03_out1_number_set(v);
}

void numberobj_73_output_set(number v) {
    this->p_23_in4_number_set(v);
}

void numberobj_73_value_set(number v) {
    this->numberobj_73_value_setter(v);
    v = this->numberobj_73_value;
    number localvalue = v;

    if ((bool)(true) && localvalue < 0) {
        localvalue = 0;
    }

    if ((bool)(true) && localvalue > 1) {
        localvalue = 1;
    }

    if (this->numberobj_73_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-62"), localvalue, this->_currentTime);
    this->numberobj_73_output_set(localvalue);
}

void p_23_in3_number_set(number v) {
    this->p_23->updateTime(this->_currentTime);
    this->p_23->eventinlet_02_out1_number_set(v);
}

void numberobj_72_output_set(number v) {
    this->p_23_in3_number_set(v);
}

void numberobj_72_value_set(number v) {
    this->numberobj_72_value_setter(v);
    v = this->numberobj_72_value;
    number localvalue = v;

    if (this->numberobj_72_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-24"), localvalue, this->_currentTime);
    this->numberobj_72_output_set(localvalue);
}

void message_03_set_set(const list& v) {
    this->message_03_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-2"), v, this->_currentTime);
}

void message_03_out_set(const list& ) {}

void message_03_trigger_bang() {
    this->message_03_out_set(this->message_03_set);
}

void midiparse_01_channel_set(number ) {}

void p_24_in1_list_set(const list& v) {
    for (Index i = 0; i < 4; i++) {
        if (i + 1 == this->p_24_target || 0 == this->p_24_target) {
            this->p_24[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 4; i++) {
        if (i + 1 == this->p_24_target || 0 == this->p_24_target) {
            this->p_24[i]->eventinlet_04_out1_list_set(v);
        }
    }
}

void midiparse_01_noteonoroff_set(const list& v) {
    this->message_03_set_set(v);
    this->p_24_in1_list_set(v);
}

void midiparse_01_polypressure_set(const list& ) {}

void midiparse_01_controlchange_set(const list& ) {}

void midiparse_01_programchange_set(number ) {}

void midiparse_01_aftertouch_set(number ) {}

void midiparse_01_pitchbend_set(number ) {}

void midiparse_01_midiin_set(number midivalue) {
    list result = this->midiparse_01_parser_next(midivalue);

    switch ((int)result[0]) {
    case 0:
        {
        this->midiparse_01_channel_set(result[3]);
        this->midiparse_01_noteonoroff_set({result[1], result[2]});
        break;
        }
    case 1:
        {
        this->midiparse_01_channel_set(result[3]);
        this->midiparse_01_polypressure_set({result[1], result[2]});
        break;
        }
    case 2:
        {
        this->midiparse_01_channel_set(result[3]);
        this->midiparse_01_controlchange_set({result[1], result[2]});
        break;
        }
    case 3:
        {
        this->midiparse_01_channel_set(result[2]);
        this->midiparse_01_programchange_set(result[1]);
        break;
        }
    case 4:
        {
        this->midiparse_01_channel_set(result[2]);
        this->midiparse_01_aftertouch_set(result[1]);
        break;
        }
    case 5:
        {
        this->midiparse_01_channel_set(result[2]);
        this->midiparse_01_pitchbend_set(result[1]);
        break;
        }
    }
}

void midiin_01_midiout_set(number v) {
    this->midiparse_01_midiin_set(v);
}

void midiin_01_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
    RNBO_UNUSED(port);
    RNBO_UNUSED(channel);
    RNBO_UNUSED(status);
    Index i;

    for (i = 0; i < length; i++) {
        this->midiin_01_midiout_set(data[i]);
    }
}

void p_25_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
    RNBO_UNUSED(port);
    RNBO_UNUSED(channel);
    RNBO_UNUSED(status);
    this->p_25->processMidiEvent(_currentTime, 0, data, length);
}

void p_25_source_Pitch_number_set(number ) {}

void p_24_perform(SampleValue * out1, Index n) {
    // subpatcher: synth
    SampleArray<1> outs = {out1};

    for (number chan = 0; chan < 1; chan++)
        zeroSignal(outs[(Index)chan], n);

    for (Index i = 0; i < 4; i++)
        this->p_24[(Index)i]->process(nullptr, 0, outs, 1, n);
}

void dspexpr_102_perform(number in1, number in2, SampleValue * out1, Index n) {
    RNBO_UNUSED(in2);
    RNBO_UNUSED(in1);
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = 0 * 1;//#map:_###_obj_###_:1
    }
}

void signaladder_01_perform(
    const SampleValue * in1,
    const SampleValue * in2,
    SampleValue * out,
    Index n
) {
    Index i;

    for (i = 0; i < n; i++) {
        out[(Index)i] = in1[(Index)i] + in2[(Index)i];
    }
}

void p_23_perform(const SampleValue * in1, SampleValue * out1, SampleValue * out2, Index n) {
    // subpatcher: pingpongdelay
    ConstSampleArray<1> ins = {in1};

    SampleArray<2> outs = {out1, out2};
    this->p_23->process(ins, 1, outs, 2, n);
}

void p_25_perform(
    const SampleValue * target_L_tilde,
    const SampleValue * target_R_tilde,
    const SampleValue * in1,
    const SampleValue * in2,
    const SampleValue * in3,
    const SampleValue * in4,
    const SampleValue * in5,
    const SampleValue * in6,
    SampleValue * source_L_tilde,
    SampleValue * source_R_tilde,
    SampleValue * out1,
    SampleValue * out2,
    Index n
) {
    // subpatcher: verb
    ConstSampleArray<8> ins = {in1, in2, in3, in4, in5, in6, target_L_tilde, target_R_tilde};

    SampleArray<4> outs = {out1, out2, source_L_tilde, source_R_tilde};
    this->p_25->process(ins, 8, outs, 4, n);
}

void stackprotect_perform(Index n) {
    RNBO_UNUSED(n);
    auto __stackprotect_count = this->stackprotect_count;
    __stackprotect_count = 0;
    this->stackprotect_count = __stackprotect_count;
}

void numberobj_72_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_72_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_72_value = localvalue;
}

void numberobj_73_value_setter(number v) {
    number localvalue = v;

    if ((bool)(true) && localvalue < 0) {
        localvalue = 0;
    }

    if ((bool)(true) && localvalue > 1) {
        localvalue = 1;
    }

    if (this->numberobj_73_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_73_value = localvalue;
}

void numberobj_74_value_setter(number v) {
    number localvalue = v;

    if ((bool)(true) && localvalue < 0) {
        localvalue = 0;
    }

    if ((bool)(true) && localvalue > 1) {
        localvalue = 1;
    }

    if (this->numberobj_74_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_74_value = localvalue;
}

list midiparse_01_parser_next(number midiin) {
    int midivalue = (int)(trunc(midiin));
    list result = list(-1);
    number resetByte1 = false;

    if (midivalue > 127) {
        this->midiparse_01_parser_status = (BinOpInt)((BinOpInt)midivalue & (BinOpInt)0xFF);
        this->midiparse_01_parser_byte1 = -1;
    } else {
        switch ((int)((BinOpInt)this->midiparse_01_parser_status & (BinOpInt)0xF0)) {
        case 0xB0:
            {
            if (this->midiparse_01_parser_byte1 == -1) {
                this->midiparse_01_parser_byte1 = (BinOpInt)((BinOpInt)midivalue & (BinOpInt)0x7F);
            } else {
                result = {
                    2,
                    this->midiparse_01_parser_byte1,
                    (BinOpInt)((BinOpInt)midivalue & (BinOpInt)0x7F),
                    (BinOpInt)((BinOpInt)(1 + this->midiparse_01_parser_status) & (BinOpInt)0x0F)
                };

                resetByte1 = true;
            }

            break;
            }
        case 0xA0:
            {
            if (this->midiparse_01_parser_byte1 == -1) {
                this->midiparse_01_parser_byte1 = (BinOpInt)((BinOpInt)midivalue & (BinOpInt)0x7F);
            } else {
                result = {
                    1,
                    this->midiparse_01_parser_byte1,
                    (BinOpInt)((BinOpInt)midivalue & (BinOpInt)0x7F),
                    (BinOpInt)((BinOpInt)(1 + this->midiparse_01_parser_status) & (BinOpInt)0x0F)
                };

                resetByte1 = true;
            }

            break;
            }
        case 0xE0:
            {
            if (this->midiparse_01_parser_byte1 == -1) {
                this->midiparse_01_parser_byte1 = (BinOpInt)((BinOpInt)midivalue & (BinOpInt)0x7F);
            } else {
                number pitchbend;

                {
                    number val = this->midiparse_01_parser_byte1 + ((BinOpInt)(((BinOpInt)((BinOpInt)midivalue & (BinOpInt)0x7F)) << imod_nocast((UBinOpInt)7, 32)));

                    {
                        val -= 0x2000;
                        pitchbend = val / (number)8192;
                    }
                }

                result = {
                    5,
                    pitchbend,
                    (BinOpInt)((BinOpInt)(1 + this->midiparse_01_parser_status) & (BinOpInt)0x0F)
                };

                resetByte1 = true;
            }

            break;
            }
        case 0xD0:
            {
            result = {
                4,
                (BinOpInt)((BinOpInt)midivalue & (BinOpInt)0x7F),
                (BinOpInt)((BinOpInt)(1 + this->midiparse_01_parser_status) & (BinOpInt)0x0F)
            };

            break;
            }
        case 0x90:
            {
            if (this->midiparse_01_parser_byte1 == -1) {
                this->midiparse_01_parser_byte1 = (BinOpInt)((BinOpInt)midivalue & (BinOpInt)0x7F);
            } else {
                result = {
                    0,
                    this->midiparse_01_parser_byte1,
                    (BinOpInt)((BinOpInt)midivalue & (BinOpInt)0x7F),
                    (BinOpInt)((BinOpInt)(1 + this->midiparse_01_parser_status) & (BinOpInt)0x0F)
                };

                resetByte1 = true;
            }

            break;
            }
        case 0xC0:
            {
            result = {
                3,
                (BinOpInt)((BinOpInt)midivalue & (BinOpInt)0x7F),
                (BinOpInt)((BinOpInt)(1 + this->midiparse_01_parser_status) & (BinOpInt)0x0F)
            };

            break;
            }
        case 0x80:
            {
            if (this->midiparse_01_parser_byte1 == -1) {
                this->midiparse_01_parser_byte1 = (BinOpInt)((BinOpInt)midivalue & (BinOpInt)0x7F);
            } else {
                result = {
                    0,
                    this->midiparse_01_parser_byte1,
                    0,
                    (BinOpInt)((BinOpInt)(1 + this->midiparse_01_parser_status) & (BinOpInt)0x0F)
                };

                resetByte1 = true;
            }

            break;
            }
        default:
            {
            result = {-1};
            }
        }
    }

    if (result->length > 1) {
        result->push(this->midiparse_01_parser_status);
        result->push(this->midiparse_01_parser_byte1);
        result->push(midivalue);
    }

    if ((bool)(resetByte1)) {
        this->midiparse_01_parser_byte1 = -1;
    }

    return result;
}

void midiparse_01_parser_reset() {
    this->midiparse_01_parser_status = -1;
    this->midiparse_01_parser_byte1 = -1;
}

void numberobj_72_init() {
    this->numberobj_72_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-24"), 1, this->_currentTime);
}

void numberobj_72_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_72_value;
}

void numberobj_72_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_72_value_set(preset["value"]);
}

void message_03_init() {
    this->message_03_set_set({48, 0});
}

void param_21_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_21_value;
}

void param_21_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_21_value_set(preset["value"]);
}

void param_22_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_22_value;
}

void param_22_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_22_value_set(preset["value"]);
}

void numberobj_73_init() {
    this->numberobj_73_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-62"), 1, this->_currentTime);
}

void numberobj_73_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_73_value;
}

void numberobj_73_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_73_value_set(preset["value"]);
}

void numberobj_74_init() {
    this->numberobj_74_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-20"), 1, this->_currentTime);
}

void numberobj_74_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_74_value;
}

void numberobj_74_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_74_value_set(preset["value"]);
}

Index globaltransport_getSampleOffset(MillisecondTime time) {
    return this->mstosamps(this->maximum(0, time - this->getEngine()->getCurrentTime()));
}

number globaltransport_getTempoAtSample(SampleIndex sampleOffset) {
    return (sampleOffset >= 0 && sampleOffset < this->vs ? this->globaltransport_tempo[(Index)sampleOffset] : this->globaltransport_lastTempo);
}

number globaltransport_getStateAtSample(SampleIndex sampleOffset) {
    return (sampleOffset >= 0 && sampleOffset < this->vs ? this->globaltransport_state[(Index)sampleOffset] : this->globaltransport_lastState);
}

number globaltransport_getState(MillisecondTime time) {
    return this->globaltransport_getStateAtSample(this->globaltransport_getSampleOffset(time));
}

number globaltransport_getTempo(MillisecondTime time) {
    return this->globaltransport_getTempoAtSample(this->globaltransport_getSampleOffset(time));
}

number globaltransport_getBeatTime(MillisecondTime time) {
    number i = 2;

    while (i < this->globaltransport_beatTimeChanges->length && this->globaltransport_beatTimeChanges[(Index)(i + 1)] <= time) {
        i += 2;
    }

    i -= 2;
    number beatTimeBase = this->globaltransport_beatTimeChanges[(Index)i];

    if (this->globaltransport_getState(time) == 0)
        return beatTimeBase;

    number beatTimeBaseMsTime = this->globaltransport_beatTimeChanges[(Index)(i + 1)];
    number diff = time - beatTimeBaseMsTime;
    number diffInBeats = diff * this->globaltransport_getTempo(time) * 0.008 / (number)480;
    return beatTimeBase + diffInBeats;
}

bool globaltransport_setTempo(MillisecondTime time, number tempo, bool notify) {
    if ((bool)(notify)) {
        this->processTempoEvent(time, tempo);
        this->globaltransport_notify = true;
    } else {
        Index offset = (Index)(this->globaltransport_getSampleOffset(time));

        if (this->globaltransport_getTempoAtSample((SampleIndex)(offset)) != tempo) {
            this->globaltransport_beatTimeChanges->push(this->globaltransport_getBeatTime(time));
            this->globaltransport_beatTimeChanges->push(time);
            fillSignal(this->globaltransport_tempo, this->vs, tempo, offset);
            this->globaltransport_lastTempo = tempo;
            this->globaltransport_tempoNeedsReset = true;
            return true;
        }
    }

    return false;
}

bool globaltransport_setState(MillisecondTime time, number state, bool notify) {
    if ((bool)(notify)) {
        this->processTransportEvent(time, TransportState(state));
        this->globaltransport_notify = true;
    } else {
        Index offset = (Index)(this->globaltransport_getSampleOffset(time));

        if (this->globaltransport_getStateAtSample(offset) != state) {
            this->globaltransport_beatTimeChanges->push(this->globaltransport_getBeatTime(time));
            this->globaltransport_beatTimeChanges->push(time);
            fillSignal(this->globaltransport_state, this->vs, state, offset);
            this->globaltransport_lastState = TransportState(state);
            this->globaltransport_stateNeedsReset = true;
            return true;
        }
    }

    return false;
}

bool globaltransport_setBeatTime(MillisecondTime time, number beattime, bool notify) {
    if ((bool)(notify)) {
        this->processBeatTimeEvent(time, beattime);
        this->globaltransport_notify = true;
        return false;
    } else {
        bool beatTimeHasChanged = false;
        float oldBeatTime = (float)(this->globaltransport_getBeatTime(time));
        float newBeatTime = (float)(beattime);

        if (oldBeatTime != newBeatTime) {
            beatTimeHasChanged = true;
        }

        this->globaltransport_beatTimeChanges->push(beattime);
        this->globaltransport_beatTimeChanges->push(time);
        return beatTimeHasChanged;
    }
}

number globaltransport_getBeatTimeAtSample(SampleIndex sampleOffset) {
    auto msOffset = this->sampstoms(sampleOffset);
    return this->globaltransport_getBeatTime(this->getEngine()->getCurrentTime() + msOffset);
}

array<number, 2> globaltransport_getTimeSignature(MillisecondTime time) {
    number i = 3;

    while (i < this->globaltransport_timeSignatureChanges->length && this->globaltransport_timeSignatureChanges[(Index)(i + 2)] <= time) {
        i += 3;
    }

    i -= 3;

    return {
        this->globaltransport_timeSignatureChanges[(Index)i],
        this->globaltransport_timeSignatureChanges[(Index)(i + 1)]
    };
}

array<number, 2> globaltransport_getTimeSignatureAtSample(SampleIndex sampleOffset) {
    MillisecondTime msOffset = (MillisecondTime)(this->sampstoms(sampleOffset));
    return this->globaltransport_getTimeSignature(this->getEngine()->getCurrentTime() + msOffset);
}

void globaltransport_setBBUBase(
    MillisecondTime time,
    number numerator,
    number denominator,
    number bars,
    number beats,
    number units
) {
    number beatsInQuarterNotes = this->globaltransport_getBeatTime(time);
    bars--;
    beats--;
    number beatsIncCurrenttDenom = beatsInQuarterNotes * (denominator * 0.25);
    number beatLength = (number)4 / denominator;
    number beatLengthInUnits = beatLength * 480;

    while (units > beatLengthInUnits) {
        units -= beatLengthInUnits;
        beats++;
    }

    number targetBeatTime = bars * numerator + beats + units / beatLengthInUnits;
    this->globaltransport_bbuBase = targetBeatTime - beatsIncCurrenttDenom;
}

array<number, 3> globaltransport_getBBU(MillisecondTime time) {
    array<number, 2> currentSig = this->globaltransport_getTimeSignature(time);
    number numerator = currentSig[0];
    number denominator = currentSig[1];
    number beatsInQuarterNotes = this->globaltransport_getBeatTime(time);
    number beatsIncCurrenttDenom = beatsInQuarterNotes * (denominator * 0.25);
    number beatLength = (number)4 / denominator;
    number beatLengthInUnits = beatLength * 480;
    number targetBeatTime = beatsIncCurrenttDenom + this->globaltransport_bbuBase;
    number currentBars = 0;
    number currentBeats = 0;
    number currentUnits = 0;

    if (targetBeatTime >= 0) {
        currentBars = trunc(targetBeatTime / numerator);
        targetBeatTime -= currentBars * numerator;
        currentBeats = trunc(targetBeatTime);
        targetBeatTime -= currentBeats;
        currentUnits = targetBeatTime * beatLengthInUnits;
    } else {
        currentBars = trunc(targetBeatTime / numerator);
        targetBeatTime -= currentBars * numerator;

        if (targetBeatTime != 0) {
            currentBars -= 1;
            currentBeats = trunc(targetBeatTime);
            targetBeatTime -= currentBeats;
            currentBeats = numerator + currentBeats;
            currentUnits = targetBeatTime * beatLengthInUnits;

            if (currentUnits != 0) {
                currentUnits = beatLengthInUnits + currentUnits;
                currentBeats -= 1;
            }
        }
    }

    return {currentBars + 1, currentBeats + 1, currentUnits};
}

bool globaltransport_setTimeSignature(MillisecondTime time, number numerator, number denominator, bool notify) {
    if ((bool)(notify)) {
        this->processTimeSignatureEvent(time, (int)(numerator), (int)(denominator));
        this->globaltransport_notify = true;
    } else {
        array<number, 2> currentSig = this->globaltransport_getTimeSignature(time);

        if (currentSig[0] != numerator || currentSig[1] != denominator) {
            array<number, 3> bbu = this->globaltransport_getBBU(time);
            this->globaltransport_setBBUBase(time, numerator, denominator, bbu[0], bbu[1], bbu[2]);
            this->globaltransport_timeSignatureChanges->push(numerator);
            this->globaltransport_timeSignatureChanges->push(denominator);
            this->globaltransport_timeSignatureChanges->push(time);
            return true;
        }
    }

    return false;
}

array<number, 3> globaltransport_getBBUAtSample(SampleIndex sampleOffset) {
    auto msOffset = this->sampstoms(sampleOffset);
    return this->globaltransport_getBBU(this->getEngine()->getCurrentTime() + msOffset);
}

bool globaltransport_setBBU(MillisecondTime time, number bars, number beats, number units, bool notify) {
    RNBO_UNUSED(notify);
    array<number, 2> sig = this->globaltransport_getTimeSignature(time);
    number numerator = sig[0];
    number denominator = sig[1];
    this->globaltransport_setBBUBase(time, numerator, denominator, bars, beats, units);
    return true;
}

void globaltransport_advance() {
    if ((bool)(this->globaltransport_tempoNeedsReset)) {
        fillSignal(this->globaltransport_tempo, this->vs, this->globaltransport_lastTempo);
        this->globaltransport_tempoNeedsReset = false;

        if ((bool)(this->globaltransport_notify)) {
            this->getEngine()->sendTempoEvent(this->globaltransport_lastTempo);
        }
    }

    if ((bool)(this->globaltransport_stateNeedsReset)) {
        fillSignal(this->globaltransport_state, this->vs, this->globaltransport_lastState);
        this->globaltransport_stateNeedsReset = false;

        if ((bool)(this->globaltransport_notify)) {
            this->getEngine()->sendTransportEvent(TransportState(this->globaltransport_lastState));
        }
    }

    if (this->globaltransport_beatTimeChanges->length > 2) {
        this->globaltransport_beatTimeChanges[0] = this->globaltransport_beatTimeChanges[(Index)(this->globaltransport_beatTimeChanges->length - 2)];
        this->globaltransport_beatTimeChanges[1] = this->globaltransport_beatTimeChanges[(Index)(this->globaltransport_beatTimeChanges->length - 1)];
        this->globaltransport_beatTimeChanges->length = 2;

        if ((bool)(this->globaltransport_notify)) {
            this->getEngine()->sendBeatTimeEvent(this->globaltransport_beatTimeChanges[0]);
        }
    }

    if (this->globaltransport_timeSignatureChanges->length > 3) {
        this->globaltransport_timeSignatureChanges[0] = this->globaltransport_timeSignatureChanges[(Index)(this->globaltransport_timeSignatureChanges->length - 3)];
        this->globaltransport_timeSignatureChanges[1] = this->globaltransport_timeSignatureChanges[(Index)(this->globaltransport_timeSignatureChanges->length - 2)];
        this->globaltransport_timeSignatureChanges[2] = this->globaltransport_timeSignatureChanges[(Index)(this->globaltransport_timeSignatureChanges->length - 1)];
        this->globaltransport_timeSignatureChanges->length = 3;

        if ((bool)(this->globaltransport_notify)) {
            this->getEngine()->sendTimeSignatureEvent(
                (int)(this->globaltransport_timeSignatureChanges[0]),
                (int)(this->globaltransport_timeSignatureChanges[1])
            );
        }
    }

    this->globaltransport_notify = false;
}

void globaltransport_dspsetup(bool force) {
    if ((bool)(this->globaltransport_setupDone) && (bool)(!(bool)(force)))
        return;

    fillSignal(this->globaltransport_tempo, this->vs, this->globaltransport_lastTempo);
    this->globaltransport_tempoNeedsReset = false;
    fillSignal(this->globaltransport_state, this->vs, this->globaltransport_lastState);
    this->globaltransport_stateNeedsReset = false;
    this->globaltransport_setupDone = true;
}

bool stackprotect_check() {
    this->stackprotect_count++;

    if (this->stackprotect_count > 128) {
        console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
        return true;
    }

    return false;
}

void updateTime(MillisecondTime time) {
    this->_currentTime = time;
    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));

    if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;

    if (this->sampleOffsetIntoNextAudioBuffer < 0)
        this->sampleOffsetIntoNextAudioBuffer = 0;
}

void assign_defaults()
{
    p_23_target = 0;
    midiin_01_port = 0;
    p_24_target = 0;
    p_25_target = 0;
    dspexpr_102_in1 = 0;
    dspexpr_102_in2 = 1;
    numberobj_72_value = 0;
    numberobj_72_value_setter(numberobj_72_value);
    param_21_value = 0.9;
    param_22_value = 0.65;
    numberobj_73_value = 0;
    numberobj_73_value_setter(numberobj_73_value);
    numberobj_74_value = 0;
    numberobj_74_value_setter(numberobj_74_value);
    _currentTime = 0;
    audioProcessSampleCount = 0;
    sampleOffsetIntoNextAudioBuffer = 0;
    zeroBuffer = nullptr;
    dummyBuffer = nullptr;
    signals[0] = nullptr;
    signals[1] = nullptr;
    signals[2] = nullptr;
    signals[3] = nullptr;
    didAllocateSignals = 0;
    vs = 0;
    maxvs = 0;
    sr = 44100;
    invsr = 0.00002267573696;
    midiparse_01_parser_status = -1;
    midiparse_01_parser_byte1 = -1;
    numberobj_72_currentFormat = 6;
    numberobj_72_lastValue = 0;
    param_21_lastValue = 0;
    param_22_lastValue = 0;
    numberobj_73_currentFormat = 6;
    numberobj_73_lastValue = 0;
    numberobj_74_currentFormat = 6;
    numberobj_74_lastValue = 0;
    globaltransport_tempo = nullptr;
    globaltransport_tempoNeedsReset = false;
    globaltransport_lastTempo = 120;
    globaltransport_state = nullptr;
    globaltransport_stateNeedsReset = false;
    globaltransport_lastState = 0;
    globaltransport_beatTimeChanges = { 0, 0 };
    globaltransport_timeSignatureChanges = { 4, 4, 0 };
    globaltransport_notify = false;
    globaltransport_bbuBase = 0;
    globaltransport_setupDone = false;
    stackprotect_count = 0;
    _voiceIndex = 0;
    _noteNumber = 0;
    isMuted = 1;
}

// member variables

    number p_23_target;
    number midiin_01_port;
    number p_24_target;
    number p_25_target;
    number dspexpr_102_in1;
    number dspexpr_102_in2;
    number numberobj_72_value;
    list message_03_set;
    number param_21_value;
    number param_22_value;
    number numberobj_73_value;
    number numberobj_74_value;
    MillisecondTime _currentTime;
    UInt64 audioProcessSampleCount;
    SampleIndex sampleOffsetIntoNextAudioBuffer;
    signal zeroBuffer;
    signal dummyBuffer;
    SampleValue * signals[4];
    bool didAllocateSignals;
    Index vs;
    Index maxvs;
    number sr;
    number invsr;
    int midiparse_01_parser_status;
    int midiparse_01_parser_byte1;
    Int numberobj_72_currentFormat;
    number numberobj_72_lastValue;
    number param_21_lastValue;
    number param_22_lastValue;
    Int numberobj_73_currentFormat;
    number numberobj_73_lastValue;
    Int numberobj_74_currentFormat;
    number numberobj_74_lastValue;
    signal globaltransport_tempo;
    bool globaltransport_tempoNeedsReset;
    number globaltransport_lastTempo;
    signal globaltransport_state;
    bool globaltransport_stateNeedsReset;
    number globaltransport_lastState;
    list globaltransport_beatTimeChanges;
    list globaltransport_timeSignatureChanges;
    bool globaltransport_notify;
    number globaltransport_bbuBase;
    bool globaltransport_setupDone;
    number stackprotect_count;
    DataRef RNBODefaultMtofLookupTable256;
    DataRef RNBODefaultSinus;
    Index _voiceIndex;
    Int _noteNumber;
    Index isMuted;
    indexlist paramInitIndices;
    indexlist paramInitOrder;
    RNBOSubpatcher_810* p_23;
    RNBOSubpatcher_811* p_24[4];
    RNBOSubpatcher_812* p_25;

};

PatcherInterface* creaternbomatic()
{
    return new rnbomatic();
}

#ifndef RNBO_NO_PATCHERFACTORY

extern "C" PatcherFactoryFunctionPtr GetPatcherFactoryFunction(PlatformInterface* platformInterface)
#else

extern "C" PatcherFactoryFunctionPtr rnbomaticFactoryFunction(PlatformInterface* platformInterface)
#endif

{
    Platform::set(platformInterface);
    return creaternbomatic;
}

} // end RNBO namespace

